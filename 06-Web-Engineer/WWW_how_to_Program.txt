ONLINE ACCESS

Thank you for purchasing a new copy of Internet & World Wide Web: How To Program,
5th Edition. Your textbook includes twelve months of prepaid access to the book’s Companion Website. This prepaid subscription provides you with full access to the following student support areas:

t4PVSDF$PEF t0OMJOF$IBQUFST t"QQFOEJDFT





Use a coin to scratch off the coating and reveal your student access code. Do not use a knife or other sharp object as it may damage the code.


To access the Internet & World Wide Web: How To Program, 5th Edition Companion Website for the first time, you will need to register online using a computer with an Internet connection and a web browser. The process takes just a couple of minutes and only needs to be completed once.

1.  Go to http://www.pearsonhighered.com/deitel/ 2.  Click on Companion Website.
3.  Click on the Register button.
4. 0OUIFSFHJTUSBUJPOQBHFFOUFSZPVSTUVEFOUBDDFTTDPEF* found beneath the scratch-off panel. Do not type the dashes. You can use lower- or uppercase.

5.  Follow the on-screen instructions. If you need help at any time during the online registration process, simply click the Need Help? icon.
6. 0ODFZPVSQFSTPOBM-PHJO/BNFBOE1BTTXPSEBSFDPOGJSNFEZPVDBOCFHJOVTJOHUIF Internet & World Wide Web: How To Program, 5th Edition Companion Website!

To log in after you have registered:
:PVPOMZOFFEUPSFHJTUFSGPSUIJT$PNQBOJPO8FCTJUFPODF"GUFSUIBUZPVDBOMPHJOBOZUJNF BUIUUQXXXQFBSTPOIJHIFSFEDPNEFJUFMCZQSPWJEJOHZPVS-PHJO/BNFBOE1BTTXPSEXIFO prompted.

*Important: The access code can only be used once. This subscription is valid for twelve months upon activation and is not transferable. If this access code has already been revealed, it may no
longer be valid. If this is the case, you can purchase a subscription by going to http://www.pearsonhighered.com/deitel and following the on-screen instructions.
Deitel® Series Page

How To Program Series C++ How to Program, 8/E
C How to Program, 6/E Java™ How to Program, 9/E
Java™ How to Program, Late Objects Version, 8/E
Internet & World Wide Web How to Program, 5/E Visual C++® 2008 How to Program, 2/E
Visual Basic® 2010 How to Program Visual C#® 2010 How to Program, 3/E Small Java™ How to Program, 6/E Small C++ How to Program, 5/E

Simply Series
Simply C++: An App-Driven Tutorial Approach Simply Java™ Programming: An App-Driven
Tutorial Approach
Simply C#: An App-Driven Tutorial Approach Simply Visual Basic® 2008, 3/E: An App-Driven
Tutorial Approach

CourseSmart Web Books www.deitel.com/books/CourseSmart/
C++ How to Program, 5/E, 6/E, 7/E & 8/E Simply C++: An App-Driven Tutorial Approach Java™ How to Program, 6/E, 7/E, 8/E & 9/E Simply Visual Basic 2008: An App-Driven Tutorial
Approach, 3/E
(continued next column)


(continued)
Visual Basic® 2010 How to Program Visual Basic® 2008 How to Program Visual C#® 2010 How to Program, 4/E Visual C#® 2008 How to Program, 3/E

Deitel® Developer Series
AJAX, Rich Internet Applications and Web Development for Programmers
Android for Programmers: An App-Driven Approach
C++ for Programmers
C# 2010 for Programmers, 3/E
iPhone® for Programmers: An App-Driven Approach Java™ for Programmers, 2/e
JavaScript for Programmers

LiveLessonsVideoLearningProducts www.deitel.com/books/LiveLessons/
Android App Development Fundamentals C++ Fundamentals
Java™ Fundamentals C# Fundamentals
iPhone® App Development Fundamentals JavaScript Fundamentals
Visual Basic Fundamentals


To receive updates on Deitel publications, Resource Centers, training courses, partner offers and more,
please register for the free Deitel® Buzz Online e-mail newsletter at: www.deitel.com/newsletter/subscribe.html
and join the Deitel communities on Twitter® @deitel
and Facebook® facebook.com/DeitelFan/
Tocommunicatewiththeauthors,sende-mailto: deitel@deitel.com
For information on government and corporate Dive-Into® Series on-site seminars offered by Deitel & Associates, Inc. worldwide, visit:
www.deitel.com/training/ or write to
deitel@deitel.com
For continuing updates on Prentice Hall/Deitel publications visit:
www.deitel.com www.pearsonhighered.com/deitel/
Visit the Deitel Resource Centers that will help you master programming languages, software develop-ment, Android and iPhone/iPad app development, and Internet- and web-related topics:
www.deitel.com/ResourceCenters.html





















Paul Deitel Deitel & Associates, Inc.

Harvey Deitel Deitel & Associates, Inc.

Abbey Deitel Deitel & Associates, Inc.

Editorial Director: Marcia J. Horton Editor-in-Chief: Michael Hirsch Associate Editor: Carole Snyder
Vice President, Marketing: Patrice Jones Marketing Manager: Yezan Alayan Marketing Coordinator: Kathryn Ferranti Vice President, Production: Vince O’Brien Managing Editor: Jeff Holcomb
Associate Managing Editor: Robert Engelhardt Operations Specialist: Lisa McDowell
Art Director: Anthony Gemmellaro
Cover Design: Paul Deitel, Harvey Deitel, Abbey Deitel, Marta Samsel Cover Photo Credit: © 2008 realeoni/Flickr/Getty Images
Media Editor: Daniel Sandin
Credits and acknowledgments borrowed from other sources and reproduced, with permission, in this textbook appear on page vi.


The authors and publisher of this book have used their best efforts in preparing this book. These efforts include the development,research, andtestingofthetheories and programstodeterminetheir effectiveness.Theauthorsandpub-lisher make no warranty of any kind, expressed or implied, with regard to these programs or to the documentation contained in this book. The authors and publisher shall not be liable in any event for incidental or consequential dam-ages in connection with, or arising out of, the furnishing, performance, or use of these programs.
Copyright © 2012, 2008, 2004, 2002, 2000 Pearson Education, Inc., publishing as Prentice Hall. All rights reserved. Manufactured in the United States of America. This publication is protected by Copyright, and permission should be obtained from the publisher prior to any prohibited reproduction, storage in a retrieval system, or transmission in any form or by any means, electronic, mechanical, photocopying, recording, or likewise. To obtain permission(s) to use material from this work, please submit a written request to Pearson Education, Inc., Permissions Department, 501 Boylston Street, Suite 900, Boston, Massachusetts 02116.
Many of the designations by manufacturers and sellers to distinguish their products are claimed as trademarks. Where those designations appear in this book, and the publisher was aware of a trademark claim, the designations have been printed in initial caps or all caps.
Library of Congress Cataloging-in-Publication Data
Deitel, Paul J.
Internet and world wide web : how to program / Paul Deitel, Harvey Deitel, Abbey Deitel. -- 5th ed. p. cm.
ISBN 978-0-13-215100-9
1. Internet programming. 2. World Wide Web. I. Deitel, Harvey M., II. Deitel, Abbey. III. Title. QA76.625.D47 2012
006.7'6--dc23
2011037118

10  9 8 7 6  5 4 3  2 1 ISBN-10: 0-13-215100-6
ISBN-13: 978-0-13-215100-9







In memory of Paul Baran,
designer of a survivable distributed communications network and packet switching, which are the basis for the protocols used on the Internet today.

Paul, Harvey and Abbey Deitel
Trademarks
DEITEL, the double-thumbs-up bug and DIVE INTO are registered trademarks of Deitel & Associates, Inc.
Apache is a trademark of The Apache Software Foundation.
Apple, iPhone, iPad, iOS and Safari are registered trademarks of Apple, Inc.
CSS, DOM, XHTML and XML are trademarks of the World Wide Web Consortium.
Firefox is a registered trademark of the Mozilla Foundation.
Google is a trademark of Google, Inc.
JavaScript, Java and all Java-based marks are trademarks or registered trademarks of Oracle in the United States and other countries.
Microsoft, Internet Explorer, Silverlight and the Windows logo are either registered trademarks or trade-marks of Microsoft Corporation in the United States and/or other countries.
Opera is a trademark of Opera Software.




Contents


Preface	xix

Before You Begin	xxxi

1   Introduction to Computers and the Internet           1 1.1      Introduction                                                                                                       2 1.2      The Internet in Industry and Research                                                                3 1.3      HTML5, CSS3, JavaScript, Canvas and jQuery                                                 6 1.4      Demos                                                                                                                9 1.5      Evolution of the Internet and World Wide Web                                              10 1.6      Web Basics                                                                                                       12 1.7      Multitier Application Architecture                                                                    16 1.8      Client-Side Scripting versus Server-Side Scripting                                             17 1.9      World Wide Web Consortium (W3C)                                                             18 1.10    Web 2.0: Going Social                                                                                      18 1.11    Data Hierarchy                                                                                                 23 1.12    Operating Systems                                                                                            25 1.12.1   Desktop and Notebook Operating Systems                                         25
1.12.2   Mobile Operating Systems	26 1.13	Types of Programming Languages	27 1.14	Object Technology	29 1.15	Keeping Up-to-Date with Information Technologies	31

2   Introduction to HTML5: Part 1                               37 2.1      Introduction                                                                                                     38 2.2      Editing HTML5                                                                                               38 2.3      First HTML5 Example                                                                                     38 2.4      W3C HTML5 Validation Service                                                                    41 2.5      Headings                                                                                                          41 2.6      Linking                                                                                                             42 2.7      Images                                                                                                              45 2.7.1     altAttribute                                                                                       47
2.7.2     Void Elements                                                                                     47 2.7.3     Using Images as Hyperlinks                                                                47
2.8      Special Characters and Horizontal Rules                                                           49 2.9      Lists                                                                                                                  51
viii	Contents


2.10	Tables	54 2.11     Forms	58 2.12	Internal Linking	65 2.13	metaElements	67 2.14	Web Resources	69

3   Introduction to HTML5: Part 2                               76 3.1      Introduction                                                                                                     77 3.2      New HTML5 Form inputTypes                                                                     77 3.2.1     inputType color                                           80
3.2.2	inputType date	82 3.2.3	inputType datetime	82 3.2.4	inputType datetime-local	82 3.2.5	inputType email	83 3.2.6	inputType month	84 3.2.7	inputType number	84 3.2.8	inputType range	85 3.2.9	inputType search	85 3.2.10   inputType tel	86 3.2.11   inputType time	86 3.2.12   inputType url	87 3.2.13   inputType week	87
3.3	 inputand datalistElements and autocompleteAttribute	87 3.3.1	inputElement autocompleteAttribute	87 3.3.2	datalistElement	90
3.4	 Page-Structure Elements	90 3.4.1	headerElement	96 3.4.2	navElement	96 3.4.3	figureElement and figcaptionElement	96 3.4.4	articleElement	96 3.4.5	summaryElement and detailsElement	96 3.4.6	sectionElement	96 3.4.7	asideElement	96 3.4.8	meterElement	97 3.4.9	footerElement	98 3.4.10   Text-Level Semantics: markElement and wbrElement	98

4   Introduction to Cascading Style Sheets™
(CSS): Part 1	105 4.1	Introduction                                                                                                   106 4.2	Inline Styles                                                                                                    106 4.3	Embedded Style Sheets                                                                                   108 4.4	Conflicting Styles                                                                                           111 4.5	Linking External Style Sheets                                                                          114
Contents	ix


4.6	Positioning Elements: Absolute Positioning, z-index	116 4.7	Positioning Elements: Relative Positioning, span	118 4.8	Backgrounds	120 4.9	Element Dimensions	122 4.10	Box Model and Text Flow	123 4.11	Media Types and Media Queries	127 4.12	Drop-Down Menus	130 4.13	(Optional) User Style Sheets	132 4.14	Web Resources	136

5   Introduction to Cascading Style Sheets™
(CSS): Part 2	142 5.1	Introduction                                                                                                   143 5.2	Text Shadows                                                                                                 143 5.3	Rounded Corners                                                                                           144 5.4	Color                                                                                                              145 5.5	Box Shadows                                                                                                  146 5.6	Linear Gradients; Introducing Vendor Prefixes                                               148 5.7	Radial Gradients                                                                                             151 5.8	(Optional: WebKit Only) Text Stroke                                                            153 5.9	Multiple Background Images                                                                          153 5.10	(Optional: WebKit Only) Reflections                                                             155 5.11	Image Borders                                                                                                 156 5.12	Animation; Selectors                                                                                       159 5.13	Transitions and Transformations                                                                    162
5.13.1   transitionand transformProperties	162 5.13.2   Skew	164 5.13.3   Transitioning Between Images	165
5.14	Downloading Web Fonts and the @font-faceRule	166 5.15	Flexible Box Layout Module and :nth-childSelectors	168 5.16	Multicolumn Layout	171 5.17	Media Queries	173 5.18	Web Resources	177

6   JavaScript: Introduction to Scripting                    185 6.1      Introduction                                                                                                   186 6.2      Your First Script: Displaying a Line of Text with JavaScript in a Web Page    186 6.3      Modifying Your First Script                                                                            189 6.4      Obtaining User Input with promptDialogs                                                    192 6.4.1     Dynamic Welcome Page                                                                   192
6.4.2	Adding Integers	196 6.5	Memory Concepts	199 6.6	Arithmetic	200 6.7	Decision Making: Equality and Relational Operators	202 6.8	Web Resources	207
x   Contents

7   JavaScript: Control Statements I	214 7.1	Introduction                                                                                                   215 7.2	Algorithms                                                                                                      215 7.3	Pseudocode                                                                                                     215 7.4	Control Statements                                                                                         215 7.5	ifSelection Statement                                                                                    218 7.6	if…elseSelection Statement                                                                        219 7.7	whileRepetition Statement                                                                            223 7.8	Formulating Algorithms: Counter-Controlled Repetition                               225 7.9	Formulating Algorithms: Sentinel-Controlled Repetition                               228 7.10	Formulating Algorithms: Nested Control Statements                                     234 7.11	Assignment Operators                                                                                    238 7.12	Increment and Decrement Operators                                                             239 7.13	Web Resources                                                                                               242

8   JavaScript: Control Statements II	251 8.1	Introduction                                                                                                   252 8.2	Essentials of Counter-Controlled Repetition                                                   252 8.3	forRepetition Statement                                                                               253 8.4	Examples Using the forStatement                                                                 256 8.5	switchMultiple-Selection Statement                                                             261 8.6	do…whileRepetition Statement                                                                    264 8.7	breakand continueStatements                                                                     266 8.8	Logical Operators                                                                                           268 8.9	Web Resources                                                                                               271

9   JavaScript: Functions                                             278 9.1      Introduction                                                                                                   279 9.2      Program Modules in JavaScript                                                                      279 9.3      Function Definitions                                                                                      280 9.3.1     Programmer-Defined Function square                        281
9.3.2	Programmer-Defined Function maximum	283 9.4	Notes on Programmer-Defined Functions	285 9.5	Random Number Generation	286
9.5.1	Scaling and Shifting Random Numbers	286 9.5.2	Displaying Random Images	287 9.5.3	Rolling Dice Repeatedly and Displaying Statistics	291
9.6	Example: Game of Chance; Introducing the HTML5
audioand videoElements	296 9.7	Scope Rules	306 9.8	JavaScript Global Functions	308 9.9	Recursion	309 9.10	Recursion vs. Iteration	313
Contents	xi

10 JavaScript: Arrays                                                   324 10.1    Introduction                                                                                                   325 10.2    Arrays                                                                                                             325 10.3    Declaring and Allocating Arrays                                                                     327 10.4    Examples Using Arrays                                                                                   327 10.4.1   Creating, Initializing and Growing Arrays                                         327
10.4.2   Initializing Arrays with Initializer Lists	331 10.4.3   Summing the Elements of an Array with forand for…in	332 10.4.4   Using the Elements of an Array as Counters	334
10.5	Random Image Generator Using Arrays	337 10.6	References and Reference Parameters	339 10.7	Passing Arrays to Functions	340 10.8	Sorting Arrays with ArrayMethod sort	343 10.9     Searching Arrays with ArrayMethod indexOf	344 10.10  Multidimensional Arrays	347

11 JavaScript: Objects                                                 360 11.1    Introduction                                                                                                   361 11.2    MathObject                                                                                                    361 11.3    StringObject                                                                                                363 11.3.1   Fundamentals of Characters and Strings                                            363
11.3.2   Methods of the StringObject	363 11.3.3   Character-Processing Methods	365 11.3.4   Searching Methods	366 11.3.5   Splitting Strings and Obtaining Substrings	369
11.4	DateObject	371 11.5	Booleanand NumberObjects	376 11.6	documentObject	377 11.7	Favorite Twitter Searches: HTML5 Web Storage	378 11.8	Using JSON to Represent Objects	385

12 Document Object Model (DOM):
Objects and Collections	395 12.1	Introduction                                                                                                   396 12.2	Modeling a Document: DOM Nodes and Trees                                            396 12.3	Traversing and Modifying a DOM Tree                                                         399 12.4	DOM Collections                                                                                           409 12.5	Dynamic Styles                                                                                               411 12.6	Using a Timer and Dynamic Styles to Create Animated Effects                      413

13 JavaScript Event Handling: A Deeper Look          422 13.1    Introduction                                                                                                   423
xii	Contents


13.2	Reviewing the loadEvent	423 13.3	Event mousemoveand the eventObject	425 13.4	Rollovers with mouseoverand mouseout	429 13.5	Form Processing with focusand blur	433 13.6	More Form Processing with submitand reset	436 13.7	Event Bubbling	438 13.8	More Events	440 13.9	Web Resource	440

14 HTML5: Introduction to canvas            444 14.1    Introduction                                                                                                   445 14.2    canvasCoordinate System                                                                             445 14.3    Rectangles                                                                                                       446 14.4    Using Paths to Draw Lines                                                                             448 14.5    Drawing Arcs and Circles                                                                               450 14.6    Shadows                                                                                                         452 14.7    Quadratic Curves                                                                                            454 14.8    Bezier Curves                                                                                                  456 14.9    Linear Gradients                                                                                             457 14.10  Radial Gradients                                                                                             459 14.11  Images                                                                                                            461 14.12  Image Manipulation: Processing the Individual Pixels of a canvas         463 14.13  Patterns                                                                                                          467 14.14  Transformations                                                                                             468 14.14.1  scaleand translateMethods: Drawing Ellipses                            468 14.14.2  rotateMethod: Creating an Animation                                          470 14.14.3  transformMethod: Drawing Skewed Rectangles                            472
14.15  Text                                                                                                                474 14.16  Resizing the canvasto Fill the Browser Window                                            476 14.17  Alpha Transparency                                                                                        477 14.18  Compositing                                                                                                   479 14.19  Cannon Game                                                                                                             482 14.19.1  HTML5 Document                                                                        484 14.19.2  Instance Variables and Constants                                                     484 14.19.3  Function setupGame                                       486 14.19.4  Functions startTimerand stopTimer                        487 14.19.5  Function resetElements                                   487 14.19.6  Function newGame                                         488
14.19.7  Function updatePositions: Manual Frame-by-Frame
Animation and Simple Collision Detection	489 14.19.8  Function fireCannonball	492 14.19.9  Function alignCannon	493 14.19.10 Function draw	494 14.19.11 Function showGameOverDialog	496
14.20  saveand restoreMethods	496
Contents   xiii


14.21  A Note on SVG                                                                                              498 14.22  A Note on canvas3D                                                                                    499

15 XML                                                                         511 15.1    Introduction                                                                                                   512 15.2    XML Basics                                                                                                    512 15.3    Structuring Data                                                                                             515 15.4    XML Namespaces                                                                                           521 15.5    Document Type Definitions (DTDs)                                                             523 15.6    W3C XML Schema Documents                                                                     526 15.7    XML Vocabularies                                                                                          534 15.7.1   MathML™                                                                                       534
15.7.2   Other Markup Languages	537 15.8	Extensible Stylesheet Language and XSL Transformations	538 15.9	Document Object Model (DOM)	547 15.10  Web Resources	565

16 Ajax-Enabled Rich Internet Applications
with XML and JSON	571 16.1	Introduction                                                                                                   572
16.1.1   Traditional Web Applications vs. Ajax Applications	573 16.1.2   Traditional Web Applications	573 16.1.3   Ajax Web Applications	574
16.2    Rich Internet Applications (RIAs) with Ajax                                                   574 16.3    History of Ajax                                                                                               577 16.4    “Raw” Ajax Example Using the XMLHttpRequestObject                                577 16.4.1   Asynchronous Requests                                                                     578
16.4.2   Exception Handling	581 16.4.3   Callback Functions	582 16.4.4   XMLHttpRequestObject Event, Properties and Methods	582
16.5    Using XML and the DOM                                                                             583 16.6    Creating a Full-Scale Ajax-Enabled Application                                              587 16.6.1   Using JSON                                                                                      587
16.6.2   Rich Functionality	588 16.6.3   Interacting with a Web Service on the Server	597 16.6.4   Parsing JSON Data	597 16.6.5   Creating HTML5 Elements and Setting Event Handlers on the Fly	598 16.6.6   Implementing Type-Ahead	598 16.6.7   Implementing a Form with Asynchronous Validation	599

17 Web Servers (Apache and IIS)	605 17.1	Introduction                                                                                                   606 17.2	HTTP Transactions                                                                                       606
xiv	Contents


17.3    Multitier Application Architecture                                                                  610 17.4    Client-Side Scripting versus Server-Side Scripting                                           611 17.5    Accessing Web Servers                                                                                    611 17.6    Apache, MySQL and PHP Installation                                                           611 17.6.1   XAMPP Installation                                                                          612
17.6.2   Running XAMPP	612 17.6.3   Testing Your Setup	613 17.6.4   Running the Examples Using Apache HTTP Server	613
17.7	 Microsoft IIS Express and WebMatrix	614 17.7.1   Installing and Running IIS Express	614 17.7.2   Installing and Running WebMatrix	614 17.7.3   Running the Client-Side Examples Using IIS Express	614 17.7.4   Running the PHP Examples Using IIS Express	615

18 Database: SQL, MySQL, LINQ and Java DB         617 18.1    Introduction                                                                                                   618 18.2    Relational Databases                                                                                       618 18.3    Relational Database Overview: A booksDatabase                                           620 18.4    SQL                                                                                                                623 18.4.1   Basic SELECTQuery                                                                           624
18.4.2   WHEREClause	624 18.4.3   ORDERBYClause	626 18.4.4   Merging Data from Multiple Tables: INNERJOIN	628 18.4.5   INSERTStatement	629 18.4.6   UPDATEStatement	631 18.4.7   DELETEStatement	631
18.5	 MySQL	632 18.5.1   Instructions for Setting Up a MySQL User Account	633 18.5.2   Creating Databases in MySQL	634
18.6	 (Optional) Microsoft Language Integrate Query (LINQ)	634 18.6.1   Querying an Array of intValues Using LINQ	635 18.6.2   Querying an Array of EmployeeObjects Using LINQ	637 18.6.3   Querying a Generic Collection Using LINQ	642
18.7    (Optional) LINQ to SQL                                                                               644 18.8    (Optional) Querying a Database with LINQ                                                  645 18.8.1   Creating LINQ to SQL Classes                                                         645
18.8.2   Data Bindings Between Controls and the LINQ to SQL Classes	648 18.9	(Optional) Dynamically Binding LINQ to SQL Query Results	652
18.9.1   Creating the Display Query Results GUI                                            652 18.9.2   Coding the Display Query Results Application                                   654
18.10  Java DB/Apache Derby	656

19 PHP	664 19.1	Introduction                                                                                                   665 19.2	Simple PHP Program                                                                                     666
Contents	xv


19.3    Converting Between Data Types                                                                    667 19.4    Arithmetic Operators                                                                                      670 19.5    Initializing and Manipulating Arrays                                                              674 19.6    String Comparisons                                                                                        677 19.7    String Processing with Regular Expressions                                                     678 19.7.1   Searching for Expressions                                                                  680
19.7.2   Representing Patterns	680 19.7.3   Finding Matches	681 19.7.4   Character Classes	681 19.7.5   Finding Multiple Instances of a Pattern	682
19.8	 Form Processing and Business Logic	682 19.8.1   Superglobal Arrays	682 19.8.2   Using PHP to Process HTML5 Forms	683
19.9	Reading from a Database	687 19.10  Using Cookies	691 19.11  Dynamic Content	694 19.12  Web Resources	702

20 Web App Development with ASP.NET in C#      708 20.1    Introduction                                                                                                   709 20.2    Web Basics                                                                                                     710 20.3    Multitier Application Architecture                                                                  711 20.4    Your First ASP.NET Application                                                                   713 20.4.1   Building the WebTimeApplication                                                     715
20.4.2   Examining WebTime.aspx’s Code-Behind File	724 20.5	Standard Web Controls: Designing a Form	724 20.6	Validation Controls	729 20.7	Session Tracking	735
20.7.1   Cookies	736 20.7.2   Session Tracking with HttpSessionState	737 20.7.3   Options.aspx: Selecting a Programming Language	740 20.7.4   Recommendations.aspx: Displaying Recommendations Based
on Session Values	743 20.8	Case Study: Database-Driven ASP.NET Guestbook	745
20.8.1   Building a Web Form that Displays Data from a Database               747 20.8.2   Modifying the Code-Behind File for the Guestbook Application      750
20.9    Case Study Introduction: ASP.NET AJAX                                                     752 20.10  Case Study Introduction: Password-Protected Books Database Application    752

21 Web App Development with ASP.NET in C#:
A Deeper Look	758 21.1	Introduction                                                                                                   759 21.2	Case Study: Password-Protected Books Database Application                         759
21.2.1   Examining the ASP.NET Web Site Template                                   760 21.2.2   Test-Driving the Completed Application                                          762
xvi	Contents


21.2.3   Configuring the Website	764 21.2.4   Modifying the Default.aspxand About.aspxPages	767 21.2.5   Creating a Content Page That Only Authenticated Users Can Access	768 21.2.6   Linking from the Default.aspxPage to the Books.aspxPage	769 21.2.7   Modifying the Master Page (Site.master)	770 21.2.8   Customizing the Password-Protected Books.aspxPage	772
21.3	 ASP.NET Ajax	777 21.3.1   Traditional Web Applications	777 21.3.2   Ajax Web Applications	778 21.3.3   Testing an ASP.NET Ajax Application	779 21.3.4   The ASP.NET Ajax Control Toolkit	780 21.3.5   Using Controls from the Ajax Control Toolkit	781

22 Web Services in C#                                                789 22.1    Introduction                                                                                                   790 22.2    WCF Services Basics                                                                                       791 22.3    Simple Object Access Protocol (SOAP)                                                          791 22.4    Representational State Transfer (REST)                                                         792 22.5    JavaScript Object Notation (JSON)                                                               792 22.6    Publishing and Consuming SOAP-Based WCF Web Services                        793 22.6.1   Creating a WCF Web Service                                                            793
22.6.2   Code for the WelcomeSOAPXMLService	793 22.6.3   Building a SOAP WCF Web Service	794 22.6.4   Deploying the WelcomeSOAPXMLService	796 22.6.5   Creating a Client to Consume the WelcomeSOAPXMLService	797 22.6.6   Consuming the WelcomeSOAPXMLService	799
22.7	 Publishing and Consuming REST-Based XML Web Services	801 22.7.1   HTTP getand postRequests	801 22.7.2   Creating a REST-Based XML WCF Web Service	801 22.7.3   Consuming a REST-Based XML WCF Web Service	804
22.8	 Publishing and Consuming REST-Based JSON Web Services	805 22.8.1   Creating a REST-Based JSON WCF Web Service	805 22.8.2   Consuming a REST-Based JSON WCF Web Service	807
22.9	Blackjack Web Service: Using Session Tracking in a SOAP-Based
WCF Web Service	809 22.9.1   Creating a Blackjack Web Service	809 22.9.2   Consuming the Blackjack Web Service	814
22.10  Airline Reservation Web Service: Database Access and Invoking a
Service from ASP.NET	823 22.11  Equation Generator: Returning User-Defined Types	827
22.11.1 Creating the REST-Based XML EquationGenerator Web Service	830 22.11.2 Consuming the REST-Based XML EquationGenerator
Web Service	831 22.11.3 Creating the REST-Based JSON WCF EquationGenerator
Web Service	835
Contents   xvii


22.11.4 Consuming the REST-Based JSON WCF EquationGenerator
Web Service	835 22.12  Web Resources	839

23 Web App Development with ASP.NET in
Visual Basic	847 23.1	Introduction                                                                                                   848 23.2	Web Basics                                                                                                     849 23.3	Multitier Application Architecture                                                                  850 23.4	Your First ASP.NET Application                                                                   852
23.4.1   Building the WebTimeApplication                                                     854 23.4.2   Examining WebTime.aspx’s Code-Behind File                                   863
23.5    Standard Web Controls: Designing a Form                                                    864 23.6    Validation Controls                                                                                        869 23.7    Session Tracking                                                                                             875 23.7.1   Cookies                                                                                             876
23.7.2   Session Tracking with HttpSessionState	877 23.7.3   Options.aspx: Selecting a Programming Language	879 23.7.4   Recommendations.aspx: Displaying Recommendations Based
on Session Values	883 23.8	Case Study: Database-Driven ASP.NET Guestbook	885
23.8.1   Building a Web Form that Displays Data from a Database               887 23.8.2   Modifying the Code-Behind File for the Guestbook Application      891
23.9    Online Case Study: ASP.NET AJAX                                                              892 23.10  Online Case Study: Password-Protected Books Database Application             892

A   HTML Special Characters	898 B   HTML Colors	899 C   JavaScript Operator Precedence Chart	902 D   ASCII Character Set	904
Index	905


Chapters 24–29 and Appendices E–F are PDF documents posted online at the book’s Companion Website (located at www.pearsonhighered.com/deitel/).
24 Web App Development with ASP.NET in VB:
A Deeper Look
xviii	Contents

25 Web Services in Visual Basic
26 JavaServer™ Faces Web Apps: Part 1 27 JavaServer™ Faces Web Apps: Part 2 28 Web Services in Java
29 HTML5 WebSockets and Web Workers E   Number Systems
F	Unicode®




Preface


Science and technology and the various forms of art,
all unite humanity in a single and interconnected system.

—Zhores Aleksandrovich Medvede


Welcome to Internet and web programming with Internet & World Wide Web How to Pro-gram, Fifth Edition! This book presents leading-edge computing technologies for students, instructors and software developers.
The world of computing—and Internet and web programming in particular—has changed dramatically since the last edition. This new edition focuses on HTML5 and the related technologies in its ecosystem, diving into the exciting new features of HTML5, CSS3, the latest edition of JavaScript (ECMAScript 5) and HTML5 canvas. We focus on popular key technologies that will help you build Internet- and web-based applications that interact with other applications and with databases. These form the basis of the kinds of enterprise-level, networked applications that are popular in industry today.
Internet & World Wide Web How to Program, 5/e is appropriate for both introductory and intermediate-level client-side and server-side programming courses. The book is also suitable for professionals who want to update their skills with the latest Internet and web programming technologies.
At the heart of the book is the Deitel signature “live-code approach”—concepts are presented in the context of complete working HTML5 documents, CSS3 stylesheets, JavaScript scripts, XML documents, programs and database files, rather than in code snip-pets. Each complete code example is accompanied by live sample executions. The source code is available at www.deitel.com/books/iw3htp5/ and at the book’s Companion Website www.pearsonhighered.com/deitel/.
As you read the book, if you have questions, send an e-mail to deitel@deitel.com; we’ll respond promptly. For updates on this book, visit www.deitel.com/books/iw3htp5/, join  our  communities   on   Facebook   (www.facebook.com/deitelfan)   and   Twitter (@deitel), and subscribe to the Deitel®  Buzz Online newsletter (www.deitel.com/news-letter/subscribe.html).


New and Updated Features
Here are the updates we’ve made for Internet & World Wide Web How to Program, 5/e:
•	New Chapter 1. The new Chapter 1 engages students with intriguing facts and figures to get them excited about studying Internet and web applications devel-opment. The chapter includes a table of some of the research made possible by
xx   Preface


computers and the Internet, current technology trends and hardware discussion, thedatahierarchy,anewsectiononsocialnetworking,atableofpopularwebser-vices, a table of business and technology publications and websites that will help you stay up to date with the latest technology news and trends, and updated ex-ercises.

•	New HTML5 features. Chapter 3 introduces the latest features of HTML5 including  the new  HTML5  form input types and page structure elements (Fig. 1). The new HTML5 features are not universally implemented in all of the web browsers.Thisischangingasthebrowservendorsreleasenewversions.Wediscuss many additional HTML5 features throughout the book.


NewHTML5features


Form Input Types color
email
search
week


date
month
tel
inputelement


datetime
number
time
datalistelement


datetime-local
range
url
autocompleteattribute

Page Structure Elements

header
article

nav
summary

figure
section

figcaption
aside

meter	footer	text-level semantics (marking potential line breaks)

Fig. 1 | NewHTML5forminputtypesandpagestructureelements


•	New CSS3 features. Chapter 5 introduces the latest features of CSS3 (Fig. 2). The new CSS3 features are not universally implemented in all of the web browsers. This is changing as the browser vendors release new versions.


NewCSS3features


text shadows box shadows
multiple background images transitions
Flexible Box Layout Module media queries
Non-standard features
text stroke

rounded corners linear gradients image borders transformations :nth-childselectors



reflection

color
radial gradients animations @font-facerule
multicolumn layouts


Fig. 2  | NewCSS3features.
NewandUpdatedFeatures	xxi


•	Updated treatment of JavaScript. We’ve strengthened the JavaScript coverage in Chapters 6–16. JavaScript has become the de facto standard client-side scripting language for web-based applications due to its highly portable nature. Our treat-ment,whichisappropriatefornovices,servestwopurposes—itintroducesclient-side scripting (Chapters 6–16), which makes web pages more dynamic and inter-active, and it provides the programming foundation for the server-side scripting in PHP presented in Chapter 19. JavaScript looks similar to basic core language featuresinC,C++,C#andJava.OnceyoulearnJavaScript,you’vegotafoothold on learning these other popular programming languages.

•	 New HTML5 canvas. Chapter 14 replaces the Flash and Silverlight chapters from the previous edition with thenew HTML5 canvaselement for 2D graphics (Fig. 3). canvasis built into the browser, eliminating the need for plug-ins like Flash and Silverlight, and helping you improve performance and convenience, and reduce costs. At the end of the chapter, you’ll use canvasto build a fun, an-imatedCannonGamewithaudioeffects, whichwebuiltin Flashin previous edi-tions of this book.


HTML5canvasfeatures


rectangles shadows
linear gradients images
alpha transparency

lines
quadratic curves radial gradients patterns
compositing

arcs and circles Bezier curves
image manipulation
transformations


Fig. 3 | HTML5canvasfeatures.

•	New and updated multimedia exercises. Chapter 14 includes several new and up-dated multimedia exercises (Fig. 4).


Newandupdatedmultimediaexercises


Cannon Game Enhance-ments
Animation
Scrolling Marquee Sign Dynamic Audio and
Graphical Kaleidoscope One-Armed Bandit Game of Pool
Crossword Puzzle Rotating Images

Random Interimage Transition
Scrolling Image Marquee Automatic Jigsaw Puzzle
Generator Horse Race Fireworks Designer 15 Puzzle
Coloring Black-and-White Photographs and Images

Digital Clock Background Audio Analog Clock
Maze Generator and Walker
Shuffleboard Floor Planner
Reaction Time Tester Vacuuming Robot Eyesight Tester


Fig. 4 | Newandupdatedmultimediaexercises.
xxii	Preface


•	Tested on seven browsers. For the last edition of this book, we tested all the code ontwodesktopbrowsers—InternetExplorerandFirefox.Forthisnewedition,we tested all of the code in the most current versions of seven popular browsers—five for the desktop (Chrome, Internet Explorer, Firefox, Opera and Safari) and two for mobile devices (iPhone/iPad and Android). HTML5 and CSS3 are evolving and the final standards have not been approved yet. The browser vendors are selec-tively implementing features that are likely to be standardized. Some vendors have higher levels of feature compliance than others. With each new version of the browsers, the trend has been to significantly increase the amount of functionality that’s been implemented. The HTML5 test site (html5test.com) measures how welleachbrowsersupportsthependingstandardsandspecifications.Youcanview test scores and see which features are supported by each browser. You can also check sites such as http://caniuse.com/for a list of features covered by each browser.Noteverydocumentinthisbookwillrenderproperlyineachbrowser.Instead of choosing only capabilities that exist universally, we demonstrate exciting new features in whatever browser handles the new functionality best. As you read this book, run each example in multiple web browsers so you can view and interact with it as it was originally intended. And remember, things are changing quickly, so a browser that did not support a feature when we wrote the book could support it when you read the book.

•	 Validated HTML5, CSS3 and JavaScript code. All of the HTML5, CSS3 and JavaScript  code  in  the  book  was  validated  using  validator.w3.org/ for HTML5, jigsaw.w3.org/css-validatorfor CSS3 and javascriptlint.com for JavaScript. Not every script fully validates but most do. Although all of the code works properly, you may receive warnings (or possibly errors) when validating code with some of the new features.

•	Smartphone and tablet apps. You’re probably familiar with the explosion of apps available for the iPhone/iPad and Android platforms. There’s almost a million apps between the two. Previously, writing apps for these platforms required de-tailed knowledge of each, and in the case of iPhone/iPad, was strictly controlled by Apple; Android is more open. With the techniques you’ll learn in this book, you’ll be able to write apps that are portable between a great variety of desktop and mobile platforms, including iPhone/iPad and Android. You’ll even be able to sell those apps on your own terms (or through certain app stores as well). This is an exciting possibility! It’s one of the true virtues of developing with HTML5, CSS3 and JavaScript in general, and HTML5 canvasin particular. Running an HTML5apponyoursmartphoneortabletisassimpleasopeningitinyourcom-pliant web browser. You may still encounter some portability issues.

•	New HTML5 web storage capabilities. In Chapter 11, we use HTML5’s new web storage capabilities to create a web application that stores a user’s favorite Twitter searches on the computer for easy access at a later time. Web storage re-places the controversial cookie technology, offering lots more storage space. Chapter 11 also briefly introduces JSON, a means for creating JavaScript ob-jects—typically for transferring data over the Internet between client-side and server-side programs.
NewandUpdatedFeatures	xxiii


•	Enhanced Craps game featuring HTML5 audio and video elements. The Craps game in Chapter 9 now includes an HTML5 audioelement that plays a dice-roll-ing sound each time the user rolls the dice. Also, we link to a page with an embed-ded HTML5 videoelement that plays a video explaining the rules of the game.
•	jQuery Ajax case study. The previous edition of this book included a calendar ap-plicationthatusedtheDojolibraries—whichwerepopularatthetime—tocreate the user interface, communicate with the server asynchronously, handle events and manipulate the DOM. Since then, jQuery has become the most popular JavaScript library. For this edition, we’ve updated the calendar application (Chapter 16) using jQuery and placed it online as a jQuery Ajax case study.
•	New HTML5 WebSockets and WebWorkers capabilities.We’veaddedan online treatment  of two  new technologies—WebSockets, which provides a  simple model for networking, and Web Workers which provides multithreading on a web page.
•	Ajax-enabled web applications. We’ve updated the chapter on building Ajax-en-abled web applications, with applications that demonstrate partial-page updates and type-ahead capabilities—each of these are key capabilities of Rich Internet Applications.
•	HTML DOM and XML DOM. We’ve enhanced the treatments of HTML DOM manipulation, JavaScript events and XML DOM manipulation with JavaScript.
•	LINQ. Since the last edition of the book, Microsoft introduced LINQ (Lan-guage-IntegratedQuery)toreplaceSQLfordatabaseaccess.Chapter 18provides an introduction to LINQ basics and an introduction to LINQ to SQL (the tech-nology that replaces SQL).
•	 Updated PHP coverage. Chapter 19 has been updated to the latest version of PHP. If you start this book as a novice and study the JavaScript in Chapters 6– 13, you’ll have the programming experience needed to understand server-side programming in PHP. [Our treatment of server-side programming in ASP.NET requiresknowledgeofC#orVisualBasic,andinJSFrequiresknowledgeofJava.]
•	ASP.NET, ASP.NET Ajax and web services. This updated three-chapter se-quenceisnowprovidedforeachofMicrosoft’stwokeyapplicationsdevelopment languages—C# and Visual Basic. The C# chapters and the first VB chapter are in the print book and the remaining Visual Basic chapters are available online at the book’s Companion Website (see the inside front cover).
•	JavaServer Faces (JSF), JSF Ajax and web services. This updated three-chapter sequence, available online, emphasizes building Ajax-enabled JSF applications.
•	Web services. We now provide chapters on building both SOAP-based web ser-vices and REST-based web services with ASP.NET in Visual Basic, ASP.NET in C# and JSF in Java.
•	 Client/Server applications. Several client-side case studies now enable students to interact with preimplemented web services that we host at test.deitel.com.
xxiv	Preface


•	 New and updated case studies. The book includes rich case studies using various technologies—Deitel Cover Viewer (JavaScript/DOM), Address Book (Ajax), Cannon Game (HTML5 Canvas), Mailing List (PHP/MySQL), Guest Book and Password-Protected Books Database (ASP.NET), Address Book (JavaServer Faces) and Blackjack (JAX-WS web services).

New Pedagogic Features
•	Making a Difference exercises in Chapter 1. We encourage you to use computers and the Internet to research and solve significant social problems. These exercises are meant to increase awareness and discussion of important issues the world is fac-ing. We hope you’ll approach them with your own values, politics and beliefs. Check out the many Making a Difference resources weprovide, includingour new MakingaDifferenceResourceCenteratwww.deitel.com/MakingADifferencefor additional ideas you may want to investigate further.
•	Page numbers for key terms in chapter summaries. For key terms that appear in the Chapters 1–19 summaries, we include the page number of the key term’s de-fining occurrence in the text.

Dependency Chart
The chart in Fig. 5 shows the book’s modular organization and the dependencies among the chapters to help instructors plan their syllabi. Internet & World Wide Web How to Pro-gram, 5/e, isappropriatefora variety of introductory and intermediate-levelprogramming courses,   most   notably   client-side   programming   and   server-side   programming. Chapters 1–23 are in the printed book; Chapters 24–29 and some appendices are online. We recommend that you study all of a given chapter’s dependencies before studying that chapter, though other orders are certainly possible. Some of the dependencies apply only to sections of chapters, so we advise instructors to browse the material before designing a course of study. This book is intended for courses that teach pure client-side web programming, courses that teachpure server-sideweb programming, andcourses that mix and match some of each. Readers interested in studying server-side technologies should understand how to build web pages using HTML5 and CSS3, and object-based programming in JavaScript. Chapters 15 and 16 can be taught as part of a client-side unit,
at the beginning of a server-side unit or split between the two.

HTML5 Accessibility Online Appendix
According to the W3C Web Accessibility Initiative, your web pages and applications should beaccessiblesothat“peoplewithdisabilitiescanperceive,understand,navigate,andinteract withtheweb, andthat theycancontributetotheweb.”1 In an onlineappendix, weenumer-ate accessibility issues you should consider when designing web pages and web-based appli-cations.WealsoprovideresourcesthatshowyouhowtouseHTML5,CSS3,JavaScriptand variousdesigntechniquestocreateaccessiblewebpagesandapplications.Asappropriate,we tietheinformationinthisappendixbacktotheappropriatechaptersandsectionssothatyou can see how the applications may be enhanced to improve web accessibility.

1.    http://www.w3.org/WAI/intro/accessibility.php.
HTML5AccessibilityOnlineAppendix	xxv




Introduction 1IntrotoComputersandtheInternet

Intro to HTML5 and CSS3 2IntroductiontoHTML5:Part1

3IntroductiontoHTML5:Part2

4IntroductiontoCascadingStyleSheets™ (CSS):Part1

5IntroductiontoCascadingStyleSheets™ (CSS):Part2

Programming Fundamentals
in JavaScript 6JavaScript:IntroductiontoScripting

7JavaScript:ControlStatementsI

8JavaScript:ControlStatementsII

9JavaScriptFunctions

10JavaScript:Arrays

11JavaScript:Objects

12DocumentObjectModel(DOM):Objects andCollections

13JavaScriptEventHandling:ADeeperLook

14HTML5:IntroductiontoCanvas

Foundations of Ajax 15XML

16Ajax-EnabledRichInternetApplications

Introduction to Server-Side
Development 17WebServers(ApacheandIIS)

18Database:SQL,MySQL, LINQtoSQLandJavaDB

19PHP1

Server-Side Development
with ASP.NET and C#2
20WebAppDevelopment withASP.NETinC#

21WebAppDevelopment withASP.NETinC#:ADeeperLook

22WebServicesinC#

Server-Side Development
with ASP.NET and VB3
23WebAppDevelopment withASP.NETinVisualBasic

24WebAppDevelopment withASP.NETinVB:ADeeperLook

25WebServicesinVisualBasic

Server-Side Development with
JavaServer Faces and Java4 26JavaServer™FacesWebApps:Part1

27JavaServer™FacesWebApps:Part2

28WebServicesinJava

WebSockets and Web Workers
29HTML5WebSocketsandWebWorkers


1.Chapter19assumesonlythatyou’refamiliarwiththeprogrammingfundamentalspresentedinChapters6–13. 2.TheC#chaptersrequireknowledgeofC#andtheMicrosoft.NETclasslibraries. 3.TheVisualBasicchaptersrequireknowledgeofVisualBasicandtheMicrosoft.NETclasslibraries. 4.TheJavachaptersrequireknowledgeofJavaandtheJavaclasslibraries.

Fig. 5  | Internet & World Wide Web How to Program, 5/e chapterdependencychart.
xxvi	Preface


HTML5 Geolocation Online Appendix
The HTML5 Geolocation API allows you to build web applications that gather location information (i.e,. latitude and longitude coordinates) using technologies like GPS, IP addresses, WiFi connections or cellular tower connections. It’s supported by the seven desktop and mobile browsers we used to test the code throughout the book.
The Geolocation API specification lists several use cases,2 including:
•	finding points of interest in the user's area
•	annotating content with location information •	showing the user's position on a map
•	providing route navigation
•	alerting the user when points of interest are nearby •	providing up-to-date local information
•	tagging locations in status updates on social networking sites
For example, you could create a location-based mobile web app that uses GPS location in-formation from a smartphone to track a runner’s route on a map, calculate the distance traveled and the average speed. Similarly, you could create an app that returns a list of nearby businesses. In this online appendix, we build a mobile location-based app.

Teaching Approach
Internet & World Wide Web How to Program, 5/e, contains hundreds of complete working examples across a wide variety of markup, styling, scripting and programming languages. We stress clarity and concentrate on building well-engineered software.
Syntax Shading. For readability, we syntax shade the code, similar to the way most inte-grated-development environments and code editors syntax color the code. Our syntax-shading conventions are:

comments appear like this keywords appear like this
constants and literal values appear like this all other code appears in black
Code Highlighting. We place gray rectangles around key code segments.
Using Fonts for Emphasis. We place the key terms and the index’s page reference for each defining occurrence in bold text for easy reference. We emphasize on-screen components inthebold Helvetica font(forexample,theFile menu)andprogramtextintheLucidafont (for example, intcount=5).

Web Access. All of the source-code examples can be downloaded from:

www.deitel.com/books/iw3htp5 www.pearsonhighered.com/deitel

Objectives. The opening quotes are followed by a list of chapter objectives.


2.    http://www.w3.org/TR/geolocation-API/#usecases_section.
TeachingApproach	xxvii


Illustrations/Figures. Abundant tables, line drawings, documents, scripts, programs and program outputs are included.

Programming Tips. We include programming tips to help you focus on important aspects of software development. These tips and practices represent the best we’ve gleaned from a combined seven decades of programming and teaching experience.

Good Programming Practices
The Good Programming Practices call attention to techniques that will help you pro-duce programs that are clearer, more understandable and more maintainable.

Common Programming Errors
Pointing out these Common Programming Errors reduces the likelihood that you’ll make them.

Error-Prevention Tips
These tips contain suggestions for exposing and removing bugs from your programs; many of the tips describe aspects of programming that prevent bugs from getting into programs.

Performance Tips
These tips highlight opportunities for making your scripts and programs run faster or min-imizing the amount of memory that they occupy.

Portability Tips
The Portability Tips help you write code that will run on a variety of platforms.


Software Engineering Observations
The Software Engineering Observations highlight architectural and design issues that affect the construction of software systems, especially large-scale systems.

Summary Bullets. We present a section-by-section bullet-list summary of the chapter for rapid review of key points. For ease of reference, we include the page number of each key term’s defining occurrence in the text.

Self-Review Exercises and Answers. Extensive self-review exercises and answers are includ-ed for self study.

Exercises. The chapter exercises include:
•	simple recall of important terminology and concepts •	What’s wrong with this code?
•	writing individual statements
•	writing complete functions and scripts •	major projects
Index. We’ve included an extensive index. Defining occurrences of key terms are high-lighted with a bold page number.
xxviii	Preface


CourseSmart Web Books
Today’s students and instructors have increasing demands on their time and money. Pear-son has responded to that need by offering digital texts and course materials online through CourseSmart. CourseSmart allows faculty to review course materials online, sav-ing time and costs. It offers students a high-quality digital version of the text for less than the cost of a print copy of the text. Students receive the same content offered in the print textbook enhanced by search, note-taking and printing tools. For more information, visit www.coursesmart.com.

Instructor Resources
The following supplements are available to qualified instructors only through Pearson Education’s Instructor Resource Center (www.pearsonhighered.com/irc):
•	 PowerPoint® slides containing all the code and figures in the text, plus bulleted items that summarize key points.
•	 Solutions Manual with solutions to many of the end-of-chapter exercises. Please check the Instructor Resource Center to determine which exercises have solu-tions.
Please do not write to us requesting access to the Pearson Instructor’s Resource Center. Accessis restricted tocollegeinstructorsteachingfrom the book. Instructors may obtain access only through their Pearson representatives. If you’re not a registered faculty mem-ber, contact your Pearson representative or visit www.pearsonhighered.com/educator/ replocator/.
Solutionsarenotprovidedfor“project”exercises.CheckoutourProgrammingProj-ects   Resource   Center   for   lots   of   additional   exercise   and   project   possibilities (www.deitel.com/ProgrammingProjects/).

Acknowledgments
We’d like to thank Barbara Deitel for long hours devoted to this project. We’re fortunate to have worked with the dedicated team of publishing professionals at Pearson. We appre-ciate the guidance, savvy and energy of Michael Hirsch, Editor-in-Chief of Computer Sci-ence. Carole Snyder recruited the book’s reviewers and managed the review process. Bob Engelhardt managed the book’s production.

Reviewers
We wish to acknowledge the efforts of our fourth and fifth edition reviewers. They scru-tinized the text and the programs and provided countless suggestions for improving the presentation: Timothy Boronczyk (Consultant), Roland Bouman (MySQL AB), Chris Bowen (Microsoft), Peter Brandano (KoolConnect Technologies, Inc.), Matt Chotin (Adobe), Chris Cornutt (PHPDeveloper.org), Phil Costa (Adobe), Umachitra Damo-daran (Sun Microsystems), Vadiraj Deshpande (Sun Microsystems), Justin Erenkrantz (The Apache Software Foundation), Christopher Finke (Netscape), Jesse James Garrett (Adaptive Path), Mike Harsh (Microsoft), Chris Heilmann (Mozilla), Kevin Henrikson (Zimbra.com), Tim Heuer (Microsoft), Molly E. Holtzschlag (W3C), Ralph Hooper (University of Alabama, Tuscaloosa), Chris Horton (University of Alabama), John Hrva-tin (Microsoft), Johnvey Hwang (Splunk, Inc.), Joe Kromer (New Perspective and the
AbouttheAuthors   xxix


Pittsburgh  Adobe  Flash  Users  Group),  Jennifer  Kyrnin  (Web  Design  Guide  at About.com), Eric Lawrence (Microsoft), Pete LePage (Microsoft), Dr. Roy Levow (Flori-da Atlantic University), Billy B. L. Lim (Illinois State University), Shobana Mahadevan (Sun Microsystems), Patrick Mineault (Freelance Flash Programmer), Anand Narayanas-wamy (Microsoft), John Peterson (Insync and V.I.O., Inc.), Jennifer Powers (University of Albany), Ignacio Ricci (Ignacioricci.com), Jake Rutter (onerutter.com), Robin Schu-macher (MySQL AB), José Antonio González Seco (Parlamento de Andalucia), Dr. George Semeczko (Royal & SunAlliance Insurance Canada), Steven Shaffer (Penn State University), Michael Smith (W3C), Karen Tegtmeyer (Model Technologies, Inc.), Paul Vencill (MITRE), Raymond Wen (Microsoft), Eric M. Wendelin (Auto-trol Technology Corporation), Raymond F. Wisman (Indiana University), Keith Wood (Hyro, Ltd.) and Daniel Zappala (Brigham Young University).

As you read the book, we’d appreciate your comments, criticisms, corrections and suggestions for improvement. Please address all correspondence to:

deitel@deitel.com
We’ll respond promptly. We hope you enjoy working with Internet & World Wide Web How to Program, 5/e.

Paul, Harvey and Abbey Deitel

About the Authors
PaulJ.Deitel,CEOandChiefTechnicalOfficerofDeitel&Associates,Inc.,isagraduate of MIT, where he studied Information Technology. Through Deitel & Associates, Inc., he has delivered hundreds of Java, C++, C, C#, Visual Basic and Internet programming courses to industry clients, including Cisco, IBM, Siemens, Sun Microsystems, Dell, Lu-cent Technologies, Fidelity, NASA at the Kennedy Space Center, the National Severe Storm Laboratory, White Sands Missile Range, Rogue Wave Software, Boeing, SunGard Higher Education, Stratus, Cambridge Technology Partners, One Wave, Hyperion Soft-ware, Adra Systems, Entergy, CableData Systems, Nortel Networks, Puma, iRobot, In-vensys and many more. He and his co-author, Dr. Harvey M. Deitel, are the world’s best-selling programming-language textbook authors.
Dr. Harvey M. Deitel, Chairman and Chief Strategy Officer of Deitel & Associates, Inc., has 50 years of experience in the computer field. Dr. Deitel earned B.S. and M.S. degrees from MIT and a Ph.D. from Boston University. He has extensive college teaching experience, including earning tenure and serving as the Chairman of the Computer Sci-ence Department at Boston College before founding Deitel & Associates, Inc., with his son, Paul J. Deitel. He and Paul are the co-authors of dozens of books and LiveLessons video packages and they are writing many more. The Deitels’ texts have earned interna-tional recognition, with translations published in Japanese, German, Russian, Chinese, Spanish, Korean, French, Polish, Italian, Portuguese, Greek, Urdu and Turkish. Dr. Deitel has delivered hundreds of professional programming seminars to major corpora-tions, academic institutions, government organizations and the military.
Abbey Deitel, President of Deitel&Associates,Inc., is a graduate of Carnegie Mellon University's Tepper School of Management where she received a B.S. in Industrial Man-agement. Abbey has been managing the business operations of Deitel & Associates, Inc.
xxx	Preface


for 14 years. She has contributed to numerous Deitel & Associates publications and is the co-author of iPhone for Programmers: An App-Driven Approach and Android for Program-mers: An App-Driven Approach.

Corporate Training from Deitel & Associates, Inc.
Deitel &Associates, Inc., is an internationallyrecognizedcorporatetrainingandauthoring organization. The company provides instructor-led courses delivered at client sites world-wide on major programming languages and platforms, such as Java™, C++, Visual C++®, C, Visual C#®, Visual Basic®, XML®, Python®, object technology, Internet and web pro-gramming, Android™ and iPhone® app development, and a growing list of additional programming and software-development courses. The founders of Deitel & Associates, Inc., are Paul J. Deitel and Dr. Harvey M. Deitel. The company’s clients include many of the world’s largest companies, government agencies, branches of the military, and academ-ic institutions. Through its 36-year publishing partnership with Prentice Hall/Pearson, Deitel & Associates publishes leading-edge programming textbooks, professional books and LiveLessons video courses. Deitel & Associates, Inc., and the authors can be reached via e-mail at:

deitel@deitel.com
To learn more about the company, its publications and its Dive Into® Series Corporate Training curriculum delivered at client locations worldwide, visit:

www.deitel.com/training/
subscribe to the Deitel® Buzz Online e-mail newsletter at: www.deitel.com/newsletter/subscribe.html
andjointheauthors’communitiesonFacebook(www.facebook.com/DeitelFan)andTwit-ter (@deitel).
Individuals wishing to purchase Deitel books, and LiveLessons video training courses can do so through www.deitel.com. Bulk orders by corporations, the government, the military and academic institutions should be placed directly with Pearson. For more infor-mation, visit

www.pearsonhighered.com

About the Front Cover: Fractal Art
The cover of this book features a fractal—a geometric figure that can be generated from a pattern repeated recursively. The figure is modified by applying the pattern to each seg-ment of the original figure. Although these figures were studied before the 20th century, itwasthemathematicianBenoitMandelbrot,whointhe1970sintroducedtheterm“frac-tal,” along with the specifics of how a fractal is created and the practical applications of fractals. Fractal geometry provides mathematical models for many complex forms found in nature, such as mountains, clouds and coastlines. Fractals can also be used to under-standsystems orpatterns that appearin nature (e.g., ecosystems),in the human body(e.g., in the folds of the brain), or in the universe (e.g., galaxy clusters). Not all fractals resemble objects in nature. Drawing fractals has become a popular art form. We discuss recursion in Section 9.9.


BeforeYou
Begin


Please follow these instructions to download the book’s examples and ensure you have a current web browser before you begin using this book.


Obtaining the Source Code
The examples for Internet & World Wide Web How To Program, 5/e are available for down-load at

www.deitel.com/books/iw3htp5/
If you’re not already registered at our website, go to www.deitel.comand click the Register linkbelow ourlogo in the upper-left corner of the page. Fill in your information. There’s no charge to register, and we do not share your information with anyone. We send you only account-management e-mails unless you register separately for our free Deitel® Buzz Online e-mail newsletter at www.deitel.com/newsletter/subscribe.html. After registering for the site, you’ll receive a confirmation e-mail with your verification code. Click the link in the confirmatione-mailtocompleteyourregistration.Configureyoure-mailclienttoallowe-mails from deitel.comto ensure that the confirmation email is not filtered as junk mail.
Next, go to www.deitel.comand sign in using the Login link below our logo in the upper-left corner of the page. Go to www.deitel.com/books/iw3htp5/. You’ll find the linktodownloadtheexamplesundertheheadingDownloadCodeExamplesandOtherPre-mium Content for Registered Users. Write down the location where you choose to save the ZIP file on your computer. Extract the example files to your hard disk using a ZIP file extractor program. If you are working in a computer lab, ask your instructor where you can save the example code.

Web Browsers Used in This Book
We tested all of the code in the most current versions of seven popular browsers—five for the desktop (Chrome, Internet Explorer, Firefox, Opera and Safari) and two for mobile devices (iPhone and Android). HTML5 and CSS3 are evolving and the final standards have not been approved yet. The browser vendors are selectively implementing features thatarelikelytobecomeapartofthestandards.Somevendorshavehigherlevelsof feature compliance than others. With each new version of the browsers, the trend has been to sig-nificantly increase the amount of functionality that’s been implemented. The HTML5 test site (html5test.com) measures how well each browser supports the pending standards and specifications. You can view test scores and see which features are supported by each browser. You can also check sites such as http://caniuse.com/for a list of features cov-eredbyeachbrowser.Noteverydocumentinthisbookwillrenderproperlyineachbrows-er.Insteadofchoosingonlycapabilitiesthatexistuniversally,wedemonstrateexcitingnew
xxxii	BeforeYouBegin


features in whatever browser handles the new functionality best. As you read this book, run each example in multiple web browsers so you can view and interact with it as it was originally intended. And remember, things are changing quickly, so a browser that did not support a feature when we wrote the book could support it when you read the book.

Web Browser Download Links
You can download the desktop browsers from the following locations:
•	Google Chrome: http://www.google.com/chrome
•	Mozilla Firefox: http://www.mozilla.org/firefox/new/
•	Microsoft Internet Explorer (Windows only): http://www.microsoft.com/ie •	Apple Safari: http://www.apple.com/safari/
•	Opera: http://www.opera.com/
We recommend that you install all the browsers that are available for your platform.

Software for the C# and Visual Basic ASP.NET Chapters
The C# (Chapters 20–22) and Visual Basic (Chapters 23–25) ASP.NET and web services chapters require Visual Web Developer 2010 Express and SQL Server 2008 Express. These tools are downloadable from www.microsoft.com/express. You should follow the default installation instructions for each.

Software for the JavaServer Faces and Java Web Services Chapters
The software required for the JavaServer Faces and Java Web Services chapters (Chapters 26–28) is discussed at the beginning of Chapter 26.

You’renowreadytobeginyourwebprogrammingstudieswithInternet&WorldWide Web How to Program, 5/e. We hope you enjoy the book! If you have any questions, please feel free to email us at deitel@deitel.com. We’ll respond promptly.




IntroductiontoComputers andtheInternet

1
People are using the web to build things they have not built or written or drawn or communicated anywhere else.
—Tim Berners-Lee

How wonderful it is that nobody need wait a single moment before starting to improve the world.
—Anne Frank

Man is still the most extraordinary computer of all.
—John F. Kennedy



Objectives Inthischapteryou’lllearn:
ÿ   Computerhardware,soft-
wareandInternetbasics.
ÿ   TheevolutionoftheInternet
andtheWorldWideWeb.
ÿ   HowHTML5,CSS3and JavaScriptareimprovingweb-
applicationdevelopment. ÿ   Thedatahierarchy.
ÿ   Thedifferenttypesof
programminglanguages.
ÿ   Object-technologyconcepts.
ÿ   Andyou’llseedemosof interestingandfunInternet applicationsyoucanbuild withthetechnologiesyou’ll
learninthisbook.
2   Chapter1 IntroductiontoComputersandtheInternet



1.1  Introduction
1.2  TheInternetinIndustryandResearch 1.3  HTML5,CSS3,JavaScript,Canvas
andjQuery 1.4  Demos
1.5  EvolutionoftheInternetandWorld WideWeb
1.6  WebBasics
1.7  MultitierApplicationArchitecture 1.8  Client-SideScriptingversusServer-
SideScripting
1.9  WorldWideWebConsortium(W3C)

1.10  Web2.0:GoingSocial 1.11  DataHierarchy
1.12  OperatingSystems
1.12.1 DesktopandNotebookOperating
Systems
1.12.2 MobileOperatingSystems
1.13  TypesofProgrammingLanguages 1.14  ObjectTechnology
1.15  KeepingUp-to-Datewith InformationTechnologies


Self-Review Exercises | Answers to Self-Review Exercises | Exercises


1.1 Introduction
Welcome to the exciting and rapidly evolving world of Internet and web programming! There are more than two billion Internet users worldwide—that’s approximately 30% of the Earth’s population.1 In use today are more than a billion general-purpose computers, and billions more embedded computers are used in cell phones, smartphones, tablet com-puters, home appliances, automobiles and more—and many of these devices are connect-ed to theInternet. According toa study by Cisco Internet Business Solutions Group, there were 12.5 billion Internet-enabled devices in 2010, and the number is predicted to reach 25 billion by 2015 and 50 billion by 2020.2 The Internet and web programming technol-ogiesyou’lllearn in thisbookaredesignedtobeportable,allowingyoutodesign webpages and applications that run across an enormous range of Internet-enabled devices.
You’ll begin by learning the client-side programming technologies used to build web pages and applications that are run on the client (i.e., in the browser on the user’s device). You’ll use HyperText Markup Language 5 (HTML5) and Cascading Style Sheets 3 (CSS3)—the recent releases of HTML and CSS technologies—to add powerful, dynamic and fun features and effects to web pages and web applications, such as audio, video, ani-mation, drawing, image manipulation, designing pages for multiple screen sizes, access to web storage and more.
You’ll learn JavaScript—the language of choice for implementing the client side of Internet-based  applications  (we  discuss  JavaScript  in  more  detail  in  Section 1.3). Chapters 6–13 present rich coverage of JavaScript and its capabilities. You’ll also learn about jQuery—the JavaScript library that’s dramatically reshaping the world of web devel-opment. Throughoutthebookthere’s alsoan emphasison Ajax development, whichhelps you create better-performing, more usable applications.
Later in the book, you’ll learn server-side programming—the applications that respond to requests from client-side web browsers, such as searching the Internet, checking your

1.    www.internetworldstats.com/stats.htm.
2.    www.cisco.com/web/about/ac79/docs/innov/IoT_IBSG_0411FINAL.pdf.
1.2 TheInternetinIndustryandResearch	3


bank-account balance, ordering a book from Amazon, bidding on an eBay auction and ordering concert tickets. We present condensed treatments of four popular Internet/web programming languages for building the server side of Internet- and web-based client/ server applications. Chapters 19–22 and 23–28 present three popular server-side technol-ogies, including PHP, ASP.NET (in both C# and Visual Basic) and JavaServer Faces.
Be sure to read both the Preface and the Before You Begin section to learn about the book’s coverage and how to set up your computer to run the hundreds of code examples. Thecodeisavailableatwww.deitel.com/books/iw3htp5andwww.pearsonhighered.com/ deitel. Use the source code we provide to run every program and script as you study it. Try eachexampleinmultiplebrowsers.Ifyou’reinterestedinsmartphonesandtabletcomputers, be sure to run the examples in your browsers on iPhones, iPads, Android smartphones and tablets,andothers.Thetechnologiescoveredinthisbookandbrowsersupportforthemare evolving rapidly. Not every feature of every page we build will render properly in every browser. All seven of the browsers we use are free.

Moore’s Law
Every year, you probably expect to pay at least a little more for most products and services. The opposite has been the case in the computer and communications fields, especially with regard to the costs of hardware supporting these technologies. For many decades, hardware costs have fallen rapidly. Every year or two, the capacities of computers have ap-proximately doubled inexpensively. This remarkable trend often is called Moore’s Law, named for the person who identified it, Gordon Moore, co-founder of Intel—the leading manufacturer of the processors in today’s computers and embedded systems. Moore’s Law and related observations apply especially to the amount of memory that computers have forprograms,theamountofsecondarystorage(suchasdiskstorage)theyhavetoholdpro-grams and data over longer periods of time, and their processor speeds—the speeds at which computers execute their programs (i.e., dotheirwork). Similar growth has occurred in the communications field, in which costs have plummeted as enormous demand for communications bandwidth (i.e., information-carrying capacity) has attracted intense competition. We know of no other fields in which technology improves so quickly and costs fall so rapidly. Such phenomenal improvement is truly fostering the Information Rev-olution.

1.2 The Internet in Industry and Research
Theseareexciting timesin thecomputerfield. Many ofthemostinfluential andsuccessful businesses of the last two decades are technology companies, including Apple, IBM, Hew-lett Packard, Dell, Intel, Motorola, Cisco, Microsoft, Google, Amazon, Facebook, Twit-ter, Groupon, Foursquare, Yahoo!, eBay and many more. These companies are major employers of people who study computer science, information systems or related disci-plines. At the time of this writing, Apple was the most valuable company in the world.
In the past, most computer applications ran on computers that were not connected to one another, whereas today’s Internet applications can be written to communicate among computers throughout the world.
Figures 1.1–1.4 provide a few examples of how computers and the Internet are being used in industry and research. Figure 1.1 lists two examples of how computers and the Internet are being used to improve health care.
4   Chapter1 IntroductiontoComputersandtheInternet



Name

Electronic health records



Human Genome Project

Description

These might include a patient's medical history, prescriptions, immuni-zations, lab results, allergies, insurance information and more. Making this information available to health care providers across a secure net-work improves patient care, reduces the probability of error and increases overall efficiency of the health care system.
The Human Genome Project was founded to identify and analyze the 20,000+ genes in human DNA. The project used computer programs to analyze complex genetic data, determine the sequences of the bil-lions of chemical base pairs that make up human DNA and store the information in databases which have been made available over the Internet to researchers in many fields.


Fig. 1.1 | ComputersandtheInternetinhealthcare.

Figure 1.2 provides a sample of some of the exciting ways in which computers and the Internet are being used for social good. In the exercises at the end of this chapter, you’ll be asked to propose other projects that would use computers and the Internet to “make a dif-ference.”



Name

AMBER™ Alert






World Community Grid






One Laptop Per Child (OLPC)

Description

The AMBER (America’s Missing: Broadcast Emergency Response) Alert System is used to find abducted children. Law enforcement notifies TV and radio broadcasters and state transportation officials, who then broadcast alerts on TV, radio, computerized highway signs, the Internet and wireless devices. AMBER Alert recently partnered with Facebook, whose users can “Like” AMBER Alert pages by location to receive alerts in their news feeds.
People worldwide can donate their unused computer processing power by installing a free secure software program that allows the World Community Grid (www.worldcommunitygrid.org) to harness unused capacity. This computing power, accessed over the Internet, is used in place of expensive supercomputers to conduct scientific research projects that are making a difference, providing clean water to third-world countries, fighting cancer, growing more nutritious rice for regions fighting hunger and more.
One Laptop Per Child (one.laptop.org) is providing low-power, inex-pensive, Internet-enabled laptops to poor children worldwide— enabling learning and reducing the digital divide.


Fig. 1.2 | ProjectsthatusecomputersandtheInternetforsocialgood.

We rely on computers and the Internet to communicate, navigate, collaborate and more. Figure 1.3 gives some examples of how computers and the Internet provide the infrastructure for these tasks.
1.2 TheInternetinIndustryandResearch	5



Name

Cloud computing












GPS










Robots





E-mail,Instant Messaging, Video Chat and FTP

Description

Cloud computing allows you to use software, hardware and information stored in the “cloud”—i.e., accessed on remote computers via the Internet and available on demand—rather than having it stored on your personal computer. Amazon is one of the leading providers of public cloud comput-ing services. You can rent extra storage capacity using the Amazon Simple Storage Service (Amazon S3), or augment processing capabilities with Ama-zon’s EC2 (Amazon Elastic Compute Cloud). These services, allowing you to increase or decrease resources to meet your needs at any given time, are generally more cost effective than purchasing expensive hardware to ensure that you have enough storage and processing power to meet your needs at their peak levels. Business applications (such as CRM software) are often expensive, require significant hardware to run them and knowledgeable sup-port staff to ensure that they’re running properly and securely. Using cloud computing services shifts the burden of managing these applications from the business to the service provider, saving businesses money.
Global Positioning System (GPS) devices use a network of satellites to retrieve location-based information. Multiple satellites send time-stamped signals to the GPS device, which calculates the distance to each satellite based on the time the signal left the satellite and the time the signal arrived. This information is used to determine the exact location of the device. GPS devices can provide step-by-step directions and help you easily find nearby businesses (restaurants, gas stations, etc.) and points of interest. GPS is used in numerous location-based Internet services such as check-in apps to help you find your friends (e.g., Foursquare and Facebook), exercise apps such as RunKeeper that track the time, distance and average speed of your outdoor jog, dating apps that help you find a match nearby and apps that dynami-cally update changing traffic conditions.
Robots can be used for day-to-day tasks (e.g., iRobot’s Roomba vacuum), entertainment (e.g., robotic pets), military combat, deep sea and space exploration (e.g., NASA’s Mars rover) and more. RoboEarth (www.roboearth.org) is “a World Wide Web for robots.” It allows robots to learn from each other by sharing information and thus improving their abil-ities to perform tasks, navigate, recognize objects and more.
Internet-based servers support all of your online messaging. E-mail messages go through a mail server that also stores the messages. Instant messaging (IM) and Video Chat apps, such as AIM, Skype, Yahoo! Messenger and oth-ers allow you to communicate with others in real time by sending your mes-sages and live video through servers. FTP (file transfer protocol) allows you to exchange files between multiple computers (e.g., a client computer such as your desktop and a file server) over the Internet using the TCP/IP proto-cols for transferring data.


Fig. 1.3 | ExamplesofcomputersandtheInternetininfrastructure.


Figure 1.4 lists a few of the exciting ways in which computers and the Internet are used in entertainment.
6   Chapter1 IntroductiontoComputersandtheInternet



Name

iTunes and the App Store








Internet TV


Game programming

Description

iTunes is Apple’s media store where you can buy and download digital music, movies, television shows, e-books, ringtones and apps (for iPhone, iPod and iPad) over the Internet. Apple’s iCloud service allows you to store your media purchases “in the cloud” and access them from any iOS (Apple’s mobile operating system) device. In June 2011, Apple announced at their World Wide Developer Conference (WWDC) that 15 billion songs had been downloaded through iTunes, making Apple the leading music retailer. As of July 2011, 15 billion apps had been downloaded from the App Store (www.apple.com/pr/library/2011/ 07/07Apples-App-Store-Downloads-Top-15-Billion.html).
Internet TV set-top boxes (such as Apple TV and Google TV) allow you to access an enormous amount of content on demand, such as games, news, movies, television shows and more.
Global video game revenues are expected to reach $65 billion in 2011 (uk.reuters.com/article/2011/06/06/us-videogames-factbox-idUKTRE75552I20110606). The most sophisticated games can cost as much as $100 million to develop. Activision’s Call of Duty 2: Modern Warfare, released in 2009, earned $310 million in just one day in North America and the U.K. (news.cnet.com/8301-13772_3-10396593-52.html?tag=mncol;txt)! Online social gaming, which enables users worldwide to compete with one another over the Internet, is growing rapidly. Zynga—creator of popular online games such as Farmville and Mafia Wars—was founded in 2007 and already has over 265 million monthly users. To accommodate the growth in traffic, Zynga is adding nearly 1,000 servers each week (techcrunch.com/2010/09/22/zynga-moves-1-petabyte-of-data-daily-adds-1000-servers-a-week/)!


Fig. 1.4 | ExamplesofcomputersandtheInternetinentertainment.

1.3 HTML5, CSS3, JavaScript, Canvas and jQuery
You’ll be learning the latest versions of several key client-side, web-application develop-ment technologies in this book. This section provides a brief overview of each.

HTML5
Chapters 2–3introduceHTML(HyperTextMarkupLanguage)—aspecialtypeofcomput-erlanguagecalledamarkuplanguagedesignedtospecifythecontentandstructureofwebpag-es (also called documents) in a portable manner. HTML5, now under development, is the emerging version of HTML. HTML enables you to create content that will render appro-priately across the extraordinary range of devices connected to the Internet—including smartphones, tablet computers, notebook computers, desktop computers, special-purpose devices such as large-screen displays at concert arenas and sports stadiums, and more.
You’ll learn the basics of HTML5, then cover more sophisticated techniques such as creatingtables,creatingformsforcollectinguserinputandusingnewfeaturesinHTML5, including page-structure elements that enable you to give meaning to the parts of a page (e.g., headers, navigation areas, footers, sections, figures, figure captions and more).
1.3 HTML5,CSS3,JavaScript,CanvasandjQuery   7


A “stricter” version of HTML calledXHTML (Extensible HyperText Markup Language), which is based on XML (eXtensible Markup Language, introduced in Chapter 15), is still used frequently today. Many of the server-side technologies we cover later in the book pro-duce web pages as XHTML documents, by default, but the trend is clearly to HTML5.

Cascading Style Sheets (CSS)
Although HTML5 provides some capabilities for controlling a document’s presentation, it’sbetternottomixpresentationwithcontent.HTML5shouldbeusedonlytospecifyadoc-ument’s structure and content.
Chapters 4–5 use Cascading Style Sheets (CSS) to specify the presentation, or styling, of elements on a web page (e.g., fonts, spacing, sizes, colors, positioning). CSS was designed to style portable web pages independently of their content and structure. By sep-arating page styling from page content and structure, you can easily change the look and feel of the pages on an entire website, or a portion of a website, simply by swapping out one style sheet for another. CSS3 is the current version of CSS under development. Chapter 5 introduces many new features in CSS3.

JavaScript
JavaScript is a language that helps you build dynamic web pages (i.e., pages that can be modified“onthefly”in responsetoevents,suchasuserinput,timechangesandmore)and computer applications. It enables you to do the client-side programming of web applica-tions.In addition,therearenowseveralprojectsdedicatedtoserver-sideJavaScript,includ-ing CommonJS (www.commonjs.org), Node.js (nodejs.org) and Jaxer (jaxer.org).
JavaScript was created by Netscape, the company that built the first wildly successful web browser. Both Netscape and Microsoft have been instrumental in the standardization of JavaScript by ECMA International (formerly the European Computer Manufacturers Association) as ECMAScript. ECMAScript 5, the latest version of the standard, corre-sponds to the version of JavaScript we use in this book.
The JavaScript chapters of the book are more than just an introduction to the lan-guage. They also present computer-programming fundamentals, including control struc-tures, functions, arrays, recursion, strings and objects. You’ll see that JavaScript is a portable scripting language and that programs written in JavaScript can run in web browsers across a wide range of devices.

Web Browsers and Web-Browser Portability
Ensuring a consistent look and feel on client-side browsers is one of the great challenges of developing web-based applications. Currently, a standard does not exist to which soft-ware vendors must adhere when creating web browsers. Although browsers share a com-mon set of features, each browser might render pages differently. Browsers are available in many versions and on many different platforms (Microsoft Windows, Apple Macintosh, Linux, UNIX, etc.). Vendors add features to each new version that sometimes result in cross-platform incompatibility issues. It’s difficult to develop web pages that render cor-rectly on all versions of each browser.
All of the code examples in the book were tested in the five most popular desktop browsers and the two most popular mobile browsers (Fig. 1.5). Support for HTML5, CSS3 and JavaScript features varies by browser. The HTML5 Test website (http:// html5test.com/) scores each browser based on its support for the latest features of these
8   Chapter1 IntroductiontoComputersandtheInternet


evolving standards. Figure 1.5 lists the five desktop browsers we use in reverse order of their HTML5 Test scores from most compliant to least compliant at the time of this writing. Internet Explorer 10 (IE10) is expected to have a much higher compliance rating than IE9. You can also check sites such as http://caniuse.com/for a list of features cov-ered by each browser.

Portability Tip 1.1
The web is populated with many different browsers, including many older, less-capable versions, which makes it difficult for authors and web-application developers to create universal solutions. The W3C is working toward the goal of a universal client-side plat-form (http://www.w3.org/2006/webapi/admin/charter).





Browser

Desktop browsers Google Chrome 13 Mozilla Firefox 6 Apple Safari 5.1 Opera 11.5 Internet Explorer 9

Mobile browsers iPhone
Android

Approximatemarketshare asofAugust2011
(http://gs.statcounter.com)

Market share 17%
27% 7% 2% 40%

Mobile market share 15% (of mobile browsers)
18% (of mobile browsers)


Scoreoutof450from
html5test.com


330 298 293 286 141


217
184


Fig. 1.5 | HTML5Testscoresforthebrowsersusedtotesttheexamples.

jQuery
jQuery (jQuery.org) is currently the most popular of hundreds of JavaScript libraries.3 jQuery simplifies JavaScript programming by making it easier to manipulate a web page’s elements and interact with servers in a portable manner across various web browsers. It pro-videsalibraryofcustomgraphicaluserinterface(GUI)controls(beyondthebasicGUIcon-trolsprovidedbyHTML5)thatcanbeusedtoenhancethelookandfeelofyourwebpages.

Validating Your HTML5, CSS3 and JavaScript Code
As you’ll see, JavaScript programs typically have HTML5 and CSS3 portions as well. You must use proper HTML5, CSS3 and JavaScript syntax to ensure that browsers process yourdocumentsproperly.Figure 1.6liststhevalidatorsweusedtovalidatethecodeinthis book. Where possible, we eliminated validation errors.


3.    www.activoinc.com/blog/2008/11/03/jquery-emerges-as-most-popular-javascript-library-for-web-development/.
1.4 Demos   9



Technology

HTML5

CSS3
JavaScript

ValidatorURL

http://validator.w3.org/ http://html5.validator.nu/
http://jigsaw.w3.org/css-validator/
http://www.javascriptlint.com/
http://www.jslint.com/


Fig. 1.6  | HTML5,CSS3andJavaScriptvalidators.

1.4 Demos
Browsethewebpagesin Fig. 1.7toget asense ofsomeofthethingsyou’llbeabletocreate using the technologies you’ll learn in this book, including HTML5, CSS3, JavaScript, canvas and jQuery. Many of these sites provide links to the corresponding source code, or you can view the page’s source code in your browser.


URL

https://developer.mozilla.org/en-US/ demos/

http://js-fireworks.appspot.com/



http://9elements.com/io/projects/ html5/canvas/


http://www.zachstronaut.com/lab/ text-shadow-box/text-shadow-box.html

http://clublime.com/lab/html5/ sphere/

http://spielzeugz.de/html5/ liquid-particles.html

http://www.paulbrunt.co.uk/bert/

http://www.openrise.com/lab/
FlowerPower/

Description

Mozilla’s DemoStudio contains numerous HTML5, canvas, CSS3 and JavaScript demos that use audio, video, animation and more.
Enteryournameormessage,andthis JavaScript animation then writes it using a fireworks effect over the London skyline.
Uses HTML5 canvas and audio elements to create interesting effects, and ties in tweets that include the words “HTML5” and “love” (click anywhere on the screen to see the next tweet).
Animated demo of the CSS3 text-shadow effect. Use the mouse to shine a light on the text and dynamically change the direction and size of the shadow.
Uses an HTML5 canvas to create a sphere that rotates and changes direction as you move the mouse cursor.
The Liquid Particles demo uses an HTML5 canvas. Move the mouse around the screen and the “particles” (dots or letters) follow.
Bert’s Breakdown is a fun video game built using an HTML5 canvas.
Canvas app that allows you to draw flowers on the page, adjust their colors, change the shapes of the petals and more.


Fig. 1.7  | HTML5,CSS3,JavaScript,canvasandjQuerydemos.(Part1of2.)
10	Chapter1  IntroductiontoComputersandtheInternet



URL

http://alteredqualia.com/canvasmol/


http://pasjans-online.pl/
http://andrew-hoyer.com/experiments/ cloth/

http://www.paulrhayes.com/ experiments/cube-3d/
http://www.effectgames.com/demos/ canvascycle/
http://macek.github.com/ google_pacman/
http://www.benjoffe.com/code/games/ torus/
http://code.almeros.com/
code-examples/water-effect-canvas/

http://jqueryui.com/demos/

http://lab.smashup.it/flip/
http://tutorialzine.com/2010/09/ html5-canvas-slideshow-jquery/
http://css-tricks.com/examples/ Circulate/
http://demo.tutorialzine.com/2010/ 02/photo-shoot-css-jquery/
demo.html

Description

Uses canvas to display a 3D molecule that can be viewed  from any desired angle (0–360 degrees).
The game of Solitaire built using HTML5.
Uses canvas to simulate of the movement of a piece of cloth. Click and drag the mouse to move the fabric.
CSS3 demo allows you to use the mouse to tilt and rotate the 3D cube. Includes a tutorial.
Animated waterfall provides a nice demo of using color in HTML5 canvas.
The Google PAC-MAN® game (a Google Doo-dle) built in HTML5.
A 3D game similar to Tetris® built with JavaScript and canvas.
Uses canvas and JavaScript to create a water rip-pling effect. Hover the cursor over the canvas to see the effect. The site includes a tutorial.
Numerous jQuery demos, including anima-tions, transitions, color, interactions and more.
Demonstrates a flip box using jQuery.
Slideshow built with HTML5 canvas and jQuery (includes a tutorial).
Learn how to create an animated circulation effect using jQuery.
Uses jQuery and CSS to create a photoshoot effect, allowing you to focus on an area of the page and snap a picture (includes a tutorial).


Fig. 1.7  | HTML5,CSS3,JavaScript,canvasandjQuerydemos.(Part2of2.)

1.5 Evolution of the Internet and World Wide Web
The Internet—a global network of computers—was made possible by the convergence of computing and communications technologies. In the late 1960s, ARPA (the Advanced Re-search Projects Agency) rolled out blueprints for networking the main computer systems of about a dozen ARPA-funded universities and research institutions. They were to be connected with communications lines operating at a then-stunning 56 Kbps (i.e., 56,000 bits per second)—this at a time when most people (of the few who could) were connecting over telephone lines to computers at a rate of 110 bits per second. A bit (short for “binary digit”) is the smallest data item in a computer; it can assume the value 0 or 1.
There was great excitement. Researchers at Harvard talked about communicating with the powerful Univac computer at the University of Utah to handle the intensive cal-
1.5 EvolutionoftheInternetandWorldWideWeb	11


culations related to their computer graphics research. Many other intriguing possibilities were raised. Academic research was about to take a giant leap forward. ARPA proceeded to implement the ARPANET, which eventually evolved into today’s Internet.
Things  worked  out  differently  from  what  was  originally  planned.  Rather  than enabling researchers to share each other’s computers, it rapidly became clear that commu-nicating quickly and easily via electronic mail was the key early benefit of the ARPANET. This is true even today on the Internet, which facilitates communications of all kinds among the world’s Internet users.

Packet Switching
One of the primary goals for ARPANET was to allow multiple users to send and receive information simultaneously over the same communications paths (e.g., phone lines). The network operated with a technique called packet switching, in which digital data was sent insmallbundlescalledpackets.Thepacketscontainedaddress,error-controlandsequencing information. The address information allowed packets to be routed to their destinations. The sequencing information helped in reassembling the packets—which, because of com-plex routing mechanisms, could actually arrive out of order—into their original order for presentation to the recipient. Packets from different senders were intermixed on the same linestoefficientlyusetheavailablebandwidth.Thispacket-switchingtechniquegreatlyre-duced transmission costs, as compared with the cost of dedicated communications lines.
The network was designed to operate without centralized control. If a portion of the network failed, the remaining working portions would still route packets from senders to receivers over alternative paths for reliability.

TCP/IP
The protocol (i.e., set of rules) for communicating over the ARPANET became known as TCP—the Transmission Control Protocol. TCP ensured that messages were properly routed from sender to receiver and that they arrived intact.
As the Internet evolved, organizations worldwide were implementing their own net-works for both intraorganization (i.e., within the organization) and interorganization (i.e., between organizations) communications. A wide variety of networking hardware and soft-ware appeared. One challenge was to get these different networks to communicate. ARPA accomplished this with the development of IP—the Internet Protocol, truly creating a network of networks, the current architecture of the Internet. The combined set of pro-tocols is now commonly called TCP/IP. Each computer on the Internet has a unique IP address. The current IP standard, Internet Protocol version 4 (IPv4), has been in use since 1984 and will soon run out of possible addresses. The next-generation Internet Protocol, IPv6, is just starting to be deployed. It features enhanced security and a new addressing scheme, hugely expanding the number of IP addresses available so that we will not run out of IP addresses in the forseeable future.

Explosive Growth
Initially, Internet use was limited to universities and research institutions; then the mili-tary began using it intensively. Eventually, the government decided to allow access to the Internet forcommercialpurposes. Theresearchandmilitary communitieswere concerned that response times would become poor as the Internet became saturated with users.
12	Chapter1  IntroductiontoComputersandtheInternet


In fact, the opposite has occurred. Businesses realized that they could tune their oper-ations and offer new and better services to their clients, so they started spending vast amountsofmoneytodevelopandenhancetheInternet.Thisgeneratedfiercecompetition among  communications  carriers  and  hardware  and  software  suppliers  to  meet  this demand. The result is that bandwidth (i.e., the information-carrying capacity) on the Internet’s is increasing rapidly as costs dramatically decline.

World Wide Web, HTML, HTTP
The World Wide Web allows computer users to execute web-based applications and to locateandviewmultimedia-baseddocumentsonalmostanysubjectovertheInternet.The webisa relativelyrecentcreation.In 1989, Tim Berners-Lee ofCERN(theEuropean Or-ganization for Nuclear Research) began to develop a technology for sharing information via hyperlinked text documents. Berners-Lee called his invention the HyperText Markup Language (HTML). He also wrote communication protocols to form the backbone of his new information system, which he called the World Wide Web. In particular, he wrote the Hypertext Transfer Protocol (HTTP)—a communications protocol used to send in-formation over the web. The URL (Uniform Resource Locator) specifies the address (i.e., location) of the web page displayedin the browser window. Eachwebpageon the Internet is associated with a unique URL. URLs usually begin with http://.

HTTPS
URLs of websites that handle private information, such as credit card numbers, often be-gin with https://, the abbreviation for Hypertext Transfer Protocol Secure (HTTPS). HTTPS is the standard for transferring encrypted data on the web. It combines HTTP with the Secure Sockets Layer (SSL) and the more recent Transport Layer Security (TLS) cryptographic schemes for securing communications and identification information over the web. Although there are many benefits to using HTTPS, there are a few drawbacks, most notably some performance issues because encryption and decryption consume sig-nificant computer processing resources.

Mosaic, Netscape, Emergence of Web 2.0
Web use exploded with the availability in 1993 of the Mosaic browser, which featured a user-friendly graphical interface. Marc Andreessen, whose team at the National Center for Supercomputing Applications (NCSA) developed Mosaic, went on to found Netscape, the company that many people credit with igniting the explosive Internet economy of the late 1990s. But the “dot com” economic bust brought hard times in the early 2000s. The resurgence that began in 2004 or so has been named Web 2.0. Google is widely regarded as the signature company of Web 2.0. Some other companies with Web 2.0 characteristics are YouTube (video sharing), Facebook (social networking), Twitter (microblogging), Groupon (social commerce), Foursquare (mobile check-in), Salesforce (business software offered as online services “in the cloud”), Craigslist (mostly free classified listings), Flickr (photo sharing), Skype (Internet telephony and video calling and conferencing, now owned by Microsoft) and Wikipedia (a free online encyclopedia).

1.6 Web Basics
In this section, we discuss the fundamentals of web-based interactions between a client web browser and a web server. In its simplest form, a web page is nothing more than an
1.6 WebBasics	13


HTML (HyperText Markup Language) document (with the extension .htmlor .htm) that describes to a web browser the document’s content and structure.

Hyperlinks
HTML documents normally contain hyperlinks, which, when clicked, load a specified web document. Both images and text may be hyperlinked. When the mouse pointer hov-ers over a hyperlink, the default arrow pointer changes into a hand with the index finger pointing upward. Often hyperlinked text appears underlined and in a different color from regular text in a web page.
Originally employed as a publishing tool for scientific research, hyperlinks are widely used to reference sources, or sites that have more information on a particular topic. The paths created by hyperlinking create the effect of the “web.”
When the user clicks a hyperlink, a web server locates the requested web page and sends it tothe user’s web browser. Similarly, theusercan typethe address of a web page into the browser’s address field and press Enter to view the specified page.
Hyperlinks can referenceotherweb pages, e-mail addresses, files andmore. If a hyper-link’s URL is in the form mailto:emailAddress, clicking the link loads your default e-mail program and opens a message window addressed to the specified e-mail address. If a hyperlink references a file that the browser is incapable of displaying, the browser prepares to download the file, and generally prompts the user for information about how the file should be stored. When a file is downloaded, it’s copied onto the user’s computer. Pro-grams, documents, images, sound and video files are all examples of downloadable files.

URIs and URLs
URIs (Uniform Resource Identifiers) identify resources on the Internet. URIs that start with http://are called URLs (Uniform Resource Locators). Common URLs refer to files, direc-tories or server-side code that performs tasks such as database lookups, Internet searches and business-application processing. If you know the URL of a publicly available resource anywhere on the web, you can enter that URL into a web browser’s address field and the browser can access that resource.

Parts of a URL
A URL contains information that directs a browser to the resource that the user wishes to access. Web servers make such resources available to web clients. Popular web servers in-clude Apache’s HTTP Server and Microsoft’s Internet Information Services (IIS).
Let’s examine the components of the URL

http://www.deitel.com/books/downloads.html
The text http://indicates that the HyperText Transfer Protocol (HTTP) should be used to obtain the resource. Next in the URL is the server’s fully qualified hostname (for exam-ple, www.deitel.com)—the name of the web-server computer on which the resource re-sides. This computer is referred to as the host, because it houses and maintains resources. The hostname www.deitel.comis translated into an IP (Internet Protocol) address—a numerical value that uniquely identifies the server on the Internet. An Internet Domain Name System (DNS) server maintains a database of hostnames and their corresponding IP addresses and performs the translations automatically.
14	Chapter1  IntroductiontoComputersandtheInternet


The remainder of the URL (/books/downloads.html) specifies the resource’s loca-tion (/books) and name (downloads.html) on the web server. The location could repre-sent an actual directory on the web server’s file system. For security reasons, however, the location is typically a virtual directory. The web server translates the virtual directory into a real location on the server, thus hiding the resource’s true location.

Making a Request and Receiving a Response
When given a web page URL, a web browser uses HTTP to request the web page found at that address. Figure 1.8 shows a web browser sending a request to a web server.



a) Therequestis sentfromthe webclienttothe webserver




Webclient
Internet



Webserver
b) Afteritreceives therequest,the webserver searchesits systemforthe resource



Fig. 1.8 | Clientrequestingaresourcefromawebserver.

In Fig. 1.8, the web browser sends an HTTP request to the server. The request (in its simplest form) is

GET /books/downloads.html HTTP/1.1
The word GETis an HTTP method indicating that the client wishes to obtain a resource from the server. The remainder of the request provides the path name of the resource (e.g., an HTML5 document) and the protocol’s name and version number (HTTP/1.1). The cli-ent’s request also contains some required and optional headers.
Any server that understands HTTP (version 1.1) can translate this request and respond appropriately. Figure 1.9 shows the web server responding to a request.









Webclient
Internet

Webserver
Theserver respondstothe requestwith theresource's contents



Fig. 1.9 | Clientreceivingaresponsefromthewebserver.
1.6 WebBasics	15


The server first sends a line of text that indicates the HTTP version, followed by a numeric code and a phrase describing the status of the transaction. For example,

HTTP/1.1 200 OK
indicates success, whereas

HTTP/1.1 404 Not found
informs the client that the web server could not locate the requested resource. A complete list of numeric codes indicating the status of an HTTP transaction can be found at www.w3.org/Protocols/rfc2616/rfc2616-sec10.html.

HTTP Headers
Next, the server sends one or more HTTP headers, which provide additional information about the data that will be sent. In this case, the server is sending an HTML5 text docu-ment, so one HTTP header for this example would read:

Content-type: text/html
The information provided in this header specifies the Multipurpose Internet Mail Exten-sions(MIME) typeofthecontentthattheserveristransmittingtothebrowser.TheMIME standard specifies data formats, which programs can use to interpret data correctly. For ex-ample, the MIME type text/plainindicates that the sent information is text that can be displayed directly. Similarly, the MIME type image/jpegindicates that the content is a JPEG image. When the browser receives this MIME type, it attempts to display the image.
The header or set of headers is followed by a blank line, which indicates to the client browser that the server is finished sending HTTP headers. Finally, the server sends the contents of the requested document (downloads.html). The client-side browser then ren-ders (or displays) the document, which may involve additional HTTP requests to obtain associated CSS and images.

HTTP getand postRequests
The two most common HTTP request types (also known as request methods) are get and post. A getrequest typically gets (or retrieves) information from a server, such as an HTML document, an image or search results based on a user-submitted search term. A postrequest typically posts (or sends) data to a server. Common uses of postrequests are to send form data or documents to a server.
An HTTP request often posts data to a server-side form handler that processes the data. For example, when a user performsa search orparticipates in a web-basedsurvey, the web server receives the information specified in the HTML form as part of the request. Getrequests and postrequests can both be used to send data to a web server, but each request type sends the information differently.
A getrequest appends data to the URL, e.g., www.google.com/search?q=deitel. In this case searchis the name of Google’s server-side form handler, qis the nameof a variable inGoogle’ssearchformanddeitelisthesearchterm.The?intheprecedingURLseparates the query string from the rest of the URL in a request. A name/value pair is passed to the server with the name and the value separated by an equals sign (=). If more than one name/ value pair is submitted, each pair is separated by an ampersand (&). The server uses data passed in a query string to retrieve an appropriate resource from the server. The server then
16	Chapter1  IntroductiontoComputersandtheInternet


sends a response to the client. A getrequest may be initiated by submittingan HTML form whose methodattribute is set to "get", or by typing the URL (possibly containing a query string) directly into the browser’s address bar. We discuss HTML forms in Chapters 2–3.
A postrequest sends form data as part of the HTTP message, not as part of the URL. A getrequest typically limits the query string (i.e., everything to the right of the ?) to a specific number of characters, so it’s often necessary to send large amounts of information using the postmethod. The postmethod is also sometimes preferred because it hides the submitted data from the user by embedding it in an HTTP message. If a form submits several hidden input values along with user-submitted data, the postmethod might gen-erate a URL like www.searchengine.com/search. The form data still reaches the server and is processed in a similar fashion to a getrequest, but the user does not see the exact information sent.

Software Engineering Observation 1.1
The data sent in a postrequest is not part of the URL, and the user can’t see the data by default. However, tools are available that expose this data, so you should not assume that the data is secure just because a postrequest is used.

Client-Side Caching
Browsers often cache (save on disk) recently viewed web pages for quick reloading. If there are nochanges between the version stored in the cache and the current version on the web, this speeds up your browsing experience. An HTTP response can indicate the length of time for which the content remains “fresh.” If this amount of time has not been reached, thebrowsercanavoidanotherrequesttotheserver.Ifnot,thebrowserloadsthedocument from the cache. Similarly, there’s also the “not modified” HTTP response, indicating that the file content has not changed since it was last requested (which is information that’s send in the request). Browsers typically do not cache the server’s response to a postre-quest, because the next postmight not return the same result. For example, in a survey, many users could visit the same web page and answer a question. The survey results could then be displayed for the user. Each new answer would change the survey results.

1.7 Multitier Application Architecture
Web-based applications are often multitier applications (sometimes referred to as n-tier applications) that divide functionality into separate tiers (i.e., logical groupings of func-tionality). Although tiers can be located on the same computer, the tiers of web-based ap-plications often reside on separate computers. Figure 1.10 presents the basic structure of a three-tier web-based application.
The bottom tier (also called the data tier or the information tier) maintains the appli-cation’s data. This tier typically stores data in a relational database management system (RDBMS). We discuss RDBMSs in Chapter 18. For example, Amazon might have an inventory information database containing product descriptions, prices and quantities in stock. Another database might contain customer information, such as user names, billing addresses and credit card numbers. These may reside on one or more computers, which together comprise the application’s data.
The middle tier implements business logic, controller logic and presentation logic to control interactions between the application’s clients and its data. The middle tier acts as
1.8 Client-SideScriptingversusServer-SideScripting   17



Toptier alsocalled
Userinterfacetieror Clienttier

Middletier alsocalled Businesslogictier

Bottomtier alsocalled Datatieror Informationtier



Browser	webpage
Webserver	Database



Fig. 1.10  | Three-tierarchitecture.

an intermediary between data in the information tier and the application’s clients. The middle-tier controller logic processes client requests (such as requests to view a product catalog)andretrievesdatafromthedatabase.Themiddle-tierpresentationlogicthenpro-cesses data from the information tier and presents the content to the client. Web applica-tions typically present data to clients as HTML documents.
Business logic in the middle tier enforces business rules and ensures that data is reliable beforetheapplicationupdatesadatabaseorpresentsdatatousers.Businessrulesdictatehow clients access data and how applications process data. For example, a business rule in the middle tier of a retail store’s web-based application might ensure that all product quantities remainpositive.Aclientrequesttosetanegativequantityinthebottomtier’sproductinfor-mation database would be rejected by the middle tier’s business logic.
The top tier, or client tier, is the application’s user interface, which gathers input and displaysoutput.Usersinteractdirectlywiththeapplicationthroughtheuserinterface,which is typically a web browser or a mobile device. In response to user actions (e.g., clicking a hyperlink), the client tier interacts with the middle tier to make requests and to retrieve data from the information tier. The client tier then displays the data retrieved for the user.

1.8 Client-Side Scripting versus Server-Side Scripting
Client-sidescriptingwithJavaScript can beusedtovalidateuserinput,tointeractwiththe browser, to enhance web pages, and to add client/server communication between a brows-er and a web server.
Client-side scripting does have limitations, such as browser dependency; the browser or  scripting  host  must  support  the  scripting  language  and  capabilities.  Scripts  are restricted from arbitrarily accessing the local hardware and file system for security reasons. Another issue is that client-side scripts can be viewed by the client by using the browser’s source-viewing capability. Sensitive information, such as passwords or other personally identifiable data, should not be on the client. All client-side data validation should be mir-rored on the server. Also, placing certain operations in JavaScript on the client can open web applications to security issues.
Programmers have more flexibility with server-side scripts, which often generate custom responses for clients. For example, a client might connect to an airline’s web server and request a list of flights from Boston to San Francisco between April 19 and May 5. The server queries the database, dynamically generates an HTML document containing
18	Chapter1  IntroductiontoComputersandtheInternet


the flight list and sends the document to the client. This technology allows clients to obtain the most current flight information from the database by connecting to an airline’s web server.
Server-side scripting languages have a wider range of programmatic capabilities than their client-side equivalents. Server-side scripts also have access to server-side software that extends server functionality—Microsoft web servers use ISAPI (Internet Server Applica-tion Program Interface) extensions and Apache HTTP Servers use modules. Compo-nents and modules range from programming-language support to counting the numberof web-pagehits. Wediscusssomeofthesecomponentsandmodulesinsubsequentchapters.

1.9 World Wide Web Consortium (W3C)
In October 1994, Tim Berners-Lee founded an organization—the World Wide Web Consortium (W3C)—devoted to developing nonproprietary, interoperable technologies for the World Wide Web. One of the W3C’s primary goals is to make the web universally accessible—regardless   of   disability,   language   or   culture.   The   W3C   home   page (www.w3.org) provides extensive resources on Internet and web technologies.
The W3C is also a standards organization. Web technologies standardized by the W3C are called Recommendations. Current and forthcoming W3C Recommendations include the HyperText Markup Language 5 (HTML5), Cascading Style Sheets 3 (CSS3) andtheExtensibleMarkupLanguage(XML).Arecommendationisnotanactualsoftware product but a document that specifies a technology’s role, syntax rules and so forth.

1.10 Web 2.0: Going Social
In 2003 there was a noticeable shift in how people and businesses were using the web and developing web-based applications. The term Web 2.0 was coined by Dale Dougherty of O’Reilly Media4 in 2003 to describe this trend. Generally, Web 2.0 companies use the web as a platform to create collaborative, community-based sites (e.g., social networking sites, blogs, wikis).

Web 1.0 versus Web 2.0
Web 1.0 (the state of the web through the 1990s and early 2000s) was focused on a rela-tively small number of companies and advertisers producing content for users to access (some people called it the “brochure web”). Web 2.0 involves the users—not only do they often create content, but they help organize it, share it, remix it, critique it, update it, etc. One way to look at Web 1.0 is as a lecture, a small number of professors informing a large audience of students. In comparison, Web 2.0 is a conversation, with everyone having the opportunity to speak and share views. Companies that understand Web 2.0 realize that their products and services are conversations as well.

Architecture of Participation
Web 2.0 is providing new opportunities and connecting people and content in unique ways. Web 2.0 embraces an architecture of participation—a design that encourages user

4.    T. O’Reilly, “What is Web 2.0: Design Patterns and Business Models for the Next Generation of Software.” September 2005 <http://www.oreillynet.com/pub/a/oreilly/tim/news/2005/ 09/30/what-is-web-20.html?page=1>.
1.10 Web2.0:GoingSocial	19


interaction and community contributions. You, the user, are the most important aspect of Web 2.0—so important, in fact, that in 2006, TIME magazine’s “Person of the Year” was “you.”5 The article recognized the social phenomenon of Web 2.0—the shift away from a powerful few to an empowered many. Several popular blogs now compete with traditional media powerhouses, and many Web 2.0 companies are built almost entirely on user-gen-erated content. For websites like Facebook®, Twitter™, YouTube, eBay® and Wikipe-dia®, users create the content, while the companies provide the platforms on which to enter, manipulate and share the information. These companies trust their users—without such trust, users cannot make significant contributions to the sites.
The architecture of participation has influenced software development as well. Open-source software is available for anyone to use and modify with few or no restrictions (we’ll say more about open source in Section 1.12). Using collective intelligence—the concept that a large diverse group of people will create smart ideas—communities collaborate to develop software that many people believe is better and more robust than proprietary soft-ware. Rich Internet Applications (RIAs) are being developed using technologies (such as Ajax, which we discuss throughout the book) that have the look and feel of desktop soft-ware, enhancing a user’s overall experience.

Search Engines and Social Media
Search engines, including Google™, Microsoft Bing™, and many more, have become es-sential to sifting through the massive amount of content on the web. Social bookmarking sites such as del.icio.us allow users to share their favorite sites with others. Social media sites such as Digg™ enable the community to decide which news articles are the most sig-nificant. The way we find the information on these sites is also changing—people are tag-ging (i.e., labeling) web content by subject or keyword in a way that helps anyone locate information more effectively.

Semantic Web
In the future, computers will learn to understand the meaning of the data on the web— the beginnings of the Semantic Web are already appearing. Continual improvements in hardware,softwareandcommunicationstechnologieswillenableexcitingnewtypesofap-plications.
These topics and more are covered in our online e-book, Dive Into® Web 2.0 (avail-able at http://www.deitel.com/diveintoweb20/). The e-book highlights the major characteristics and technologies of Web 2.0, providing examples of popular Web 2.0 com-panies and Web 2.0 Internet business and monetization models. We discuss user-gener-ated content, blogging, content networks, social networking, location-based services and more. In the subsequent chapters of this book, you’ll learn key software technologies for building web-based applications.

Google
In 1996, Stanford computer science Ph.D. candidates Larry Page and Sergey Brin began collaborating on a new search engine. In 1997, they chose the name Google—a play on the mathematical term googol, a quantity represented by the number “one” followed by

5.    L.  Grossman,  “TIME’s  Person  of  the  Year:  You.”  TIME,  December  2006  <http:// www.time.com/time/magazine/article/0,9171,1569514,00.html>.
20	Chapter1  IntroductiontoComputersandtheInternet


100 “zeros” (or 10100)—a staggeringly large number. Google’s ability to return extremely accurate search results quickly helped it become the most widely used search engine and one of the most popular websites in the world.
Google continues to be an innovator in search technologies. For example, Google Goggles is a fascinating mobile app (available on Android and iPhone) that allows you to perform a Google search using a photo ratherthan enteringtext. You simply take a picture of a landmark, book (covers or barcodes), logo, art or wine bottle label, and Google Gog-gles scans the photo and returns search results. You can also take a picture of text (for example, a restaurant menu or a sign) and Google Goggles will translate it for you.

Web Services and Mashups
We include in this book a substantial treatment of web services (Chapters 22, 25 and 28) and introduce the applications-development methodology of mashups, in which you can rapidly develop powerful and intriguing applications by combining (often free) comple-mentary web services and other forms of information feeds (Fig. 1.11). One of the first mashups was www.housingmaps.com, which combines the real estate listings provided by www.craigslist.orgwith the mapping capabilities of Google Maps to offer maps that show the locations of apartments for rent in a given area.


Webservicessource

Google Maps Facebook Foursquare LinkedIn YouTube Twitter Groupon Netflix
eBay Wikipedia PayPal Last.fm
Amazon eCommerce Salesforce.com Skype
Microsoft Bing Flickr
Zillow
Yahoo Search
WeatherBug

Howit’sused

Mapping services Social networking Mobile check-in
Social networking for business Video search
Microblogging Social commerce Movie rentals Internet auctions
Collaborative encyclopedia Payments
Internet radio
Shopping for books and more
Customer Relationship Management (CRM) Internet telephony
Search
Photo sharing Real estate pricing Search
Weather


Fig. 1.11  | Somepopularwebservicesthatyoucanusetobuildwebapplications (www.programmableweb.com/apis/directory/1?sort=mashups).
1.10 Web2.0:GoingSocial	21


Web services, inexpensive computers, abundant high-speed Internet access, open source software and many other elements have inspired new, exciting, lightweight business models that people can launch with only a small investment. Some types of websites with richandrobust functionality that might have requiredhundreds of thousands or even mil-lions of dollars to build in the 1990s can now be built for nominal sums.

Ajax
Ajax is one of the premier Web 2.0 software technologies (Fig. 1.12). Ajax helps Internet-based applications perform likedesktop applications—a difficult task, given that such appli-cations suffer transmission delays as data is shuttled back and forth between your computer and servers on the Internet.



Chapter

Chapter 1 Chapters 2–14




Chapter 15




Chapter 16







Chapters 21, 24 and 27

Ajaxcoverage

This chapter introduces Ajax.
These chapters cover several key technologies used in Ajax web applications, including HTML5, CSS3, JavaScript, JavaScript event handling, the Document Object Model (DOM) and dynamic manipulation of an HTML5 document—known as dynamic HTML.
Web applications use XML extensively to represent structured data. This chapter introduces XML, XML-related technologies and key JavaScript capabilities for loading and manipulating XML documents pro-grammatically.
This chapter uses the technologies presented in Chapters 2–15 to build Ajax-enabled web applica-tions. We use both XML and JSON (JavaScript Object Notation) to send/receive data between the client and the server. The chapter begins by building basic Ajax applications using JavaScript and the browser’s XMLHttpRequestobject. We then build an Ajax application using the jQuery JavaScript libraries.
These chapters use Ajax in Microsoft’s ASP.NET with C# and in ASP.NET with Visual Basic, and in JavaServer Faces (JSF), respectively, to implement Ajax applications that use Ajax for form validation and partial-page updates.


Fig. 1.12 | AjaxcoverageinInternet & World Wide Web How to Program, 5/e.

Social Applications
Over the last several years, there’s been a tremendous increase in the number of social ap-plications on the web. Even though the computer industry is mature, these sites were still able to become phenomenally successful in a relatively short period. Figure 1.13 discusses a few of the social applications that are making an impact.
22	Chapter1  IntroductiontoComputersandtheInternet



Company

Facebook









Twitter








Groupon










Foursquare








Skype

Description

Facebook was launched in 2004 and is already worth an estimated $100 billion. By January 2011, Facebook was the most active site on the Internet with more than 750 million users who were spending 700 billion minutes on Facebook per month (www.facebook.com/ press/info.php?statistics). At its current growth rate (about 5% per month), Facebook will reach one billion users in 2012, out of two billion Internet users! The activity on the site makes it extremely attractive for application developers. Each day, over 20 million appli-cations are installed by Facebook users (www.facebook.com/press/ info.php?statistics).
Twitter (founded in 2006) has revolutionized microblogging. Users post tweets—messages up to 140 characters long. Approximately 140 million tweets are posted per day. You can follow the tweets of friends, celebrities, businesses, government representatives (includ-ing Barack Obama, who has 10 million followers), and so on, or you can follow tweets by subject to track news, trends and more. At the time of this writing, Lady Gaga had the most followers (over 13 million). Twitter has become the point of origin for many breaking news stories worldwide.
Groupon, a social commerce site, was launched in 2008. By August 2011 the company was valued as high as $25 billion, making it the fastest growing company ever! Groupon offers daily deals in each market for restaurants, retailers, services, attractions and more. Deals are activated only after a minimum number of people sign up to buy the product or service. If you sign up for a deal and it has yet to meet the minimum, you might be inclined to tell others about the deal via e-mail, Facebook, Twitter, etc. One of the most suc-cessful national Groupon deals to date was a certificate for $50 worth of merchandise from a major retailer for $25. More than 620,000 vouchers were sold in one day (www.huffingtonpost.com/ 2011/06/30/the-most-successful-group_n_887711.html)!
Foursquare, launched in 2009, is a mobile check-in application that allows you to notify your friends of your whereabouts. You can download the app to your smartphone and link it to your Facebook and Twitter accounts so your friends can follow you from multiple platforms. If you do not have a smartphone, you can check in by text message. Foursquare uses GPS to determine your location. Businesses use Foursquare to send offers to users in the area. Launched in March 2009, Foursquare already has over 10 million users worldwide (foursquare.com/about).
Skype (founded in 2003) allows you to make mostly free voice and video calls over the Internet using a technology called VoIP (Voice over IP; IP stands for “Internet Protocol”). The company was recently sold to Microsoft for $8.5 billion.


Fig. 1.13 | Socialapplications.(Part1of2.)
1.11 DataHierarchy   23



Company

YouTube

Description

YouTube is a video-sharing site that was founded in 2005. Within one year, the company was purchased by Google for $1.65 billion. YouTube now accounts for 8.2% of all Internet traffic (www.engadget.com/2011/05/17/study-finds-netflix-is-the-largest-source-of-internet-traffic-in/). Within one week of the release of Apple’s iPhone 3GS—the first iPhone model to offer video—mobile uploads to YouTube grew 400% (www.hypebot.com/
hypebot/2009/06/youtube-reports-1700-jump-in-mobile-video.html).


Fig. 1.13 | Socialapplications.(Part2of2.)


1.11 Data Hierarchy
Data items processed by computers form a data hierarchy that becomes larger and more complexinstructureasweprogressfrom bitstocharacterstofields,andsoon.Figure 1.14 illustrates a portion of the data hierarchy. Figure 1.15 summarizes the data hierarchy’s lev-els.



Sally	Black


Tom	Blue


Judy	Green	File


Iris	Orange


Randy	Red


Judy	Green	Record



J u d y


00000000 01001010

Field

UnicodecharacterJ


1	Bit

Fig. 1.14  | Datahierarchy.
24	Chapter1  IntroductiontoComputersandtheInternet



Level

Bits





Characters











Fields




Records












Files

Description

The smallest data item in a computer can assume the value 0or the value 1. Such a data item is called a bit (short for “binary digit”—a digit that can assume one of two values). It’s remarkable that the impressive functions per-formed by computers involve only the simplest manipulations of 0s and 1s— examining a bit’s value, setting a bit’s value and reversing a bit’s value (from 1to 0 or from 0to 1).
It’s tedious for people to work with data in the low-level form of bits. Instead, they prefer to work with decimal digits (0–9), letters (A–Z and a–z), and special symbols (e.g., $, @, %, &, *, (, ), –, +, ", :, ? and / ). Digits, letters and special symbols are known as characters. The computer’s character set is the set of all the characters used to write programs and represent data items. Computers pro-cess only 1s and 0s, so a computer’s character set represents every character as a pattern of 1s and 0s. Java uses Unicode® characters that are composed of two bytes, each composed of eight bits. Unicode contains characters for many of the world’s languages. See Appendix F for more information on Unicode. See Appendix D for more information on the ASCII (American Standard Code for Information Interchange) character set—the popular subset of Unicode that represents uppercase and lowercase letters, digits and some common spe-cial characters.
Just as characters are composed of bits, fields are composed of characters or bytes. A field is a group of characters or bytes that conveys meaning. For exam-ple, a field consisting of uppercase and lowercase letters could be used to repre-sent a person’s name, and a field consisting of decimal digits could represent a person’s age.
Several related fields can be used to compose a record (implemented as a classin Java). In a payroll system, for example, the record for an employee might consist of the following fields (possible types for these fields are shown in parentheses):
•  Employee identification number (a whole number) •  Name (a string of characters)
•  Address (a string of characters)
•  Hourly pay rate (a number with a decimal point)
•  Year-to-date earnings (a number with a decimal point)
•  Amount of taxes withheld (a number with a decimal point)
Thus, a record is a group of related fields. In the preceding example, all the fields belong to the same employee. A company might have many employees and a payroll record for each one.
A file is a group of related records. [Note: More generally, a file contains arbi-trary data in arbitrary formats. In some operating systems, a file is viewed sim-ply as a sequence of bytes—any organization of the bytes in a file, such as organizing the data into records, is a view created by the application program-mer.] It’s not unusual for an organization to have many files, some containing billions, or even trillions, of characters of information.


Fig. 1.15 | Levelsofthedatahierarchy.(Part1of2.)
1.12 OperatingSystems	25



Level

Database

Description

A database is an electronic collection of data that’s organized for easy access and manipulation. There are various database models. In this book, we introduce relational databases in which data is stored in simple tables. A table includes records and fields. For example, a table of students might include first name, last name, major, year, student ID number and grade point average. The data for each student is a record, and the individual pieces of information in each record are the fields. You can search, sort and manipulate the data based on its rela-tionship to multiple tables or databases. For example, a university might use data from the student database in combination with databases of courses, on-campus housing, meal plans, etc. We discuss databases in Chapter 18 and use them in the server-side programming chapters.


Fig. 1.15 | Levelsofthedatahierarchy.(Part2of2.)

1.12 Operating Systems
Operating systems are software systems that make using computers more convenient for users,  application  developers  and  system  administrators.  Operating  systems  provide services that allow each application to execute safely, efficiently and concurrently (i.e., in parallel) with other applications. The software that contains the core components of the operating system is called the kernel. Popular desktop operating systems include Linux, Windows 7 and Mac OS X. Popular mobile operating systems used in smartphones and tablets include Google’s Android, Apple’s iOS (for iPhone, iPad and iPod Touch devices), BlackBerry OS and Windows Phone 7.

1.12.1 Desktop and Notebook Operating Systems
In this section we discuss two of the popular desktop operating systems—the proprietary Windows operating system and the open source Linux operating system.

Windows—A Proprietary Operating System
In the mid-1980s, Microsoft developed the Windows operating system, consisting of a graphical user interface built on top of DOS—an enormously popular personal-computer operating system of the time that users interacted with by typing commands. Windows borrowed from many concepts (such as icons, menus and windows) developed by Xerox PARC and popularized by early Apple Macintosh operating systems. Windows 7 is Mi-crosoft’s latest operating system—its features include enhancements to the user interface, faster startup times, further refinement of security features, touch-screen and multitouch support, and more. Windows is a proprietary operating system—it’s controlled by Micro-soft exclusively. Windows is by far the world’s most widely used operating system.

Linux—An Open-Source Operating System
The Linux operating system is perhaps the greatest success of the open-source movement. Open-source software departs from the proprietary software development style that dom-inated software’s early years. With open-source development, individuals and companies contribute their efforts in developing, maintaining and evolving software in exchange for
26	Chapter1  IntroductiontoComputersandtheInternet


the right to use that software for their own purposes, typically at no charge. Open-source code is often scrutinized by a much larger audience than proprietary software, so errors of-ten get removed faster. Open source also encourages more innovation. Enterprise systems companies, such as IBM, Oracle and many others, have made significant investments in Linux open-source development.
Some key organizations in the open-source community are the Eclipse Foundation (the  Eclipse  Integrated  Development  Environment  helps  programmers  conveniently develop software), the Mozilla Foundation (creators of the Firefox web browser), the Apache Software Foundation (creators of the Apache web server used to develop web-based applications) and SourceForge (which provides the tools for managing open-source projects—it has over 306,000 of them under development). Rapid improvements to com-puting and communications, decreasing costs and open-source software have made it much easier and more economical to create a software-based business now than just a decade ago. A great example is Facebook, which was launched from a college dorm room and built with open-source software.6
The Linux kernel is the core of the most popular open-source, freely distributed, full-featured operating system. It’s developed by a loosely organized team of volunteers and is popular in servers, personal computers and embedded systems. Unlike that of proprietary operating systems like Microsoft’s Windows and Apple’s Mac OS X, Linux source code (the program code) is available to the public for examination and modification and is free to download and install. As a result, Linux users benefit from a community of developers actively debugging and improving the kernel, an absence of licensing fees and restrictions, and the ability to completely customize the operating system to meet specific needs.
A variety of issues—such as Microsoft’s market power, the small number of user-friendly Linux applications and the diversity of Linux distributions, such as Red Hat Linux,  Ubuntu  Linux  and  many  others—have  prevented  widespread  Linux  use  on desktop computers. But Linux has become extremely popular on servers and in embedded systems, such as Google’s Android-based smartphones.

1.12.2 Mobile Operating Systems TwoofthemostpopularmobileoperatingsystemsareApple’siOSandGoogle’sAndroid.
iOS for iPhone®, iPad® and iPod Touch®
Apple, founded in 1976 by Steve Jobs and Steve Wozniak, quickly became a leader in per-sonal computing. In 1979, Jobs and several Apple employees visited Xerox PARC (Palo Alto Research Center) to learn about Xerox’s desktop computer that featured a graphical user interface (GUI). That GUI served as the inspiration for the Apple Lisa personal com-puter  (designed  for  business  customers)  and,  more  notably,  the  Apple  Macintosh, launched with much fanfare in a memorable Super Bowl ad in 1984. Steve Jobs left Apple in 1985 and founded NeXT Inc.
The Objective-C programming language, created by Brad Cox and Tom Love at Stepstone in the early 1980s, added capabilities for object-oriented programming (OOP) to the C programming language. In 1988, NeXT licensed Objective-C from StepStone and developed an Objective-C compiler and libraries which were used as the platform for the NeXTSTEP operating system’s user interface and Interface Builder—used to con-

6.    developers.facebook.com/opensource/.
1.13 TypesofProgrammingLanguages   27


struct graphical user interfaces. Apple’s Mac OS X operating system is a descendant of NeXTSTEP. Apple’s proprietary iPhone operating system, iOS, is derived from Apple’s Mac OS X and is used in the iPhone, iPad and iPod Touch devices.
You can download apps directly onto your iPhone, iPad or iPod device through the App Store. There are over 425,000 apps in the App Store.

Google’s Android
Android—the fastest growing mobile and smartphone operating system—is based on the Linux kernel and Java. Experienced Java programmers can quickly dive into Android de-velopment. One benefit of developing Android apps is the openness of the platform. The operating system is open source and free.
The Android operating system was developed by Android, Inc., which was acquired by Google in 2005. In 2007, the Open Handset Alliance™—a consortium of 34 compa-nies initially and 84 by 2011—was formed to continue developing Android. As of June 2011, more than 500,000 Android smartphones were being activated each day!7 Android smartphones are now outselling iPhones in the United States.8 The Android operating system is used in numerous smartphones (such as the Motorola Droid, HTC EVO™ 4G, Samsung Vibrant™ and many more), e-reader devices (such as the Barnes and Noble Nook™), tablet computers (such as the Dell Streak and the Samsung Galaxy Tab), in-store touch-screen kiosks, cars, robots, multimedia players and more.
You can download apps directly onto your Android device through Android Market and other app marketplaces. As of August 2011, there were over 250,000 apps in Google’s Android Market.

1.13 Types of Programming Languages
Programmers write instructions in various programming languages, some directly under-standable by computers and others requiring intermediatetranslation steps. Any computer can directly understand only its own machine language, defined by its hardware design. Machine languages generally consist of numbers (ultimately reduced to 1s and 0s). Such languages are cumbersome for humans.
Programming in machine language—the numbers that computers could directly understand—was simply too slow and tedious for most programmers. Instead, they began using Englishlike abbreviations to represent elementary operations. These abbreviations formed the basis of assembly languages. Translator programs called assemblers were devel-oped to convert assembly-language programs to machine language. Although assembly-language code is clearer to humans, it’s incomprehensible to computers until translated to machine language.
Tospeedtheprogrammingprocessevenfurther, high-levellanguagesweredeveloped in which single statements could be written to accomplish substantial tasks. High-level languages allow you to write instructions that look almost like everyday English and con-taincommonlyusedmathematicalexpressions.Translatorprogramscalledcompilerscon-vert high-level language programs into machine language.

7.    news.cnet.com/8301-13506_3-20074956-17/google-500000-android-devices-activated-each-day/.
8.    www.pcworld.com/article/196035/android_outsells_the_iphone_no_big_surprise.html.
28	Chapter1  IntroductiontoComputersandtheInternet


The process of compiling a large high-level language program into machine language can take a considerable amount of computer time. Interpreter programs were developed to execute high-level language programs directly, although more slowly than compiled programs. In this book we study several key programming languages, including JavaScript and PHP—each of these scripting languages is processed by interpreters. Figure 1.16 introduces a number of popular programming languages.

Performance Tip 1.1
Interpreters have an advantage over compilers in Internet scripting. An interpreted pro-gram can begin executingassoon asit’s downloaded to the client’s machine,without need-ingto becompiledbefore itcan execute. On the downside,interpreted scriptsgenerally run slower than compiled code.




Programming
language

C



C++



Objective-C



Visual Basic



Visual C#



Java


Description

C was implemented in 1972 by Dennis Ritchie at Bell Laboratories. It ini-tially became widely known as the UNIX operating system’s development language. Today, most of the code for general-purpose operating systems is written in C or C++.
C++, an extension of C, was developed by Bjarne Stroustrup in the early 1980s at Bell Laboratories. C++ provides a number of features that “spruce up” the C language, but more important, it provides capabilities for object-oriented programming.
Objective-C is an object-oriented language based on C. It was developed in the early 1980s and later acquired by NeXT, which in turn was acquired by Apple. It has become the key programming language for the Mac OS X oper-ating system and all iOS-based devices (such as iPods, iPhones and iPads).
Microsoft’s Visual Basic language (based on the Basic language developed at Dartmouth College in the 1960s) was introduced in the early 1990s to sim-plify Microsoft Windows applications development. Its latest versions sup-port object-oriented programming.
Microsoft’s three primary object-oriented programming languages are Visual Basic, Visual C++ (based on C++) and C# (based on C++ and Java, and developed for integrating the Internet and the web into computer applica-tions).
Sun Microsystems in 1991 funded an internal corporate research project led by James Gosling, which resulted in the C++-based object-oriented program-ming language called Java. A key goal of Java is to enable the writing of pro-grams that will run on a great variety of computer systems and computer-controlled devices. This is sometimes called “write once, run anywhere.” Java is used to develop large-scale enterprise applications, to enhance the function-ality of web servers (the computers that provide the content we see in our web browsers), to provide applications for consumer devices (smartphones, televi-sion set-top boxes and more) and for many other purposes.


Fig. 1.16  | Popularprogramminglanguages.(Part1of2.)
1.14 ObjectTechnology	29



Programming
language

PHP








Python





JavaScript



Ruby on Rails







Scala


Description

PHP—an object-oriented, “open-source” (see Section 1.12) “scripting” lan-guage supported by a community of users and developers—is used by numer-ous websites including Wikipedia and Facebook. PHP is platform independent—implementations exist for all major UNIX, Linux, Mac and Windows operating systems. PHP also supports many databases, including MySQL. Two other popular languages similar in concept to PHP are Perl and Python. The term “LAMP” describes four key technologies for building open-source software—Linux (operating system), Apache (web server), MySQL (database) and PHP or Perl or Python (server-side scripting lan-guages).
Python, another object-oriented scripting language, was released publicly in 1991. Developed by Guido van Rossum of the National Research Institute for Mathematics and Computer Science in Amsterdam (CWI), Python draws heavily from Modula-3—a systems-programming language. Python is “extensible”—it can be extended through classes and programming inter-faces.
JavaScript—developed by Brendan Eich at Netscape—is the most widely used scripting language. It’s primarily used to add programmability to web pages—for example, animations and interactivity with the user. It’s provided with all major web browsers.
Ruby—created in the mid-1990s by Yukihiro Matsumoto—is an open-source, object-oriented programming language with a simple syntax that’s similar to Python. Ruby on Rails combines the scripting language Ruby with the Rails web-application framework developed by 37Signals. Their book, Getting Real (gettingreal.37signals.com/toc.php), is a must read for web developers. Many Ruby on Rails developers have reported productivity gains over other languages when developing database-intensive web applications. Ruby on Rails was used to build Twitter’s user interface.
Scala (www.scala-lang.org/node/273)—short for “scalable language”—was designed by Martin Odersky, a professor at École Polytechnique Fédérale de Lausanne (EPFL) in Switzerland. Released in 2003, Scala uses both the object-oriented and functional programming paradigms and is designed to inte-grate with Java. Programming in Scala can significantly reduce the amount of code in your applications. Twitter and Foursquare use Scala.


Fig. 1.16  | Popularprogramminglanguages.(Part2of2.)

1.14 Object Technology
Building software quickly, correctly and economically remains an elusive goal at a time when demands for new and more powerful software are soaring. Objects, or more precisely the classes objects come from, are essentially reusable software components. There are date objects, time objects, audio objects, video objects, automobile objects, people objects, etc. Almost any noun can be reasonably represented as a software object in terms of attributes (e.g., name, color and size) and behaviors (e.g., calculating, moving and communicating).
30	Chapter1  IntroductiontoComputersandtheInternet


Software developers are discovering that using a modular, object-oriented design and im-plementation approach can make software-development groups much more productive than was possible with earlier techniques—object-oriented programs are often easier to understand, correct and modify.

The Automobile as an Object
Let’s begin with a simple analogy. Suppose you want to drive a car and make it go faster by pressing its accelerator pedal. What must happen before you can do this? Well, before you can drive a car, someone has to design it. A car typically begins as engineering drawings, similar to the blueprints that describe the design of a house. These drawings include the design for an accelerator pedal. The pedal hides from the driver the complex mechanisms that actually make the car go faster, just as the brake pedal hides the mechanisms that slow the car, and the steering wheel hides the mechanisms that turn the car. This enables people with little or no knowledge of how engines, braking and steering mechanisms work to drive a car easily.
Before you can drive a car, it must be built from the engineering drawings that describe it. A completed car has an actual accelerator pedal to make the car go faster, but even that’s not enough—the car won’t accelerate on its own (hopefully!), so the driver must press the pedal to accelerate the car.

Methods and Classes
Let’s use our car example to introduce some key object-oriented programming concepts. Performing a task in a program requires a method. The method houses the program state-ments that actually perform its tasks. It hides these statements from its user, just as a car’s accelerator pedal hides from the driver the mechanisms of making the car go faster. In ob-ject-oriented programming languages, we create a program unit called a class to house the set of methods that perform the class’s tasks. For example, a class that represents a bank account might contain one method to deposit money to an account, another to withdraw moneyfromanaccountandathirdtoinquirewhattheaccount’scurrentbalanceis.Aclass is similar in concept to a car’s engineering drawings, which house the design of an accel-erator pedal, steering wheel, and so on.

Instantiation
Just as someone has to build a car from its engineering drawings before you can actually drive a car, you must build an object from a class before a program can perform the tasks that the class’s methods define. The process of doing this is called instantiation. An object is then referred to as an instance of its class.

Reuse
Just as a car’s engineering drawings can be reused many times to build many cars, you can reusea classmanytimestobuildmany objects.Reuseofexistingclasseswhen buildingnew classes and programs saves time and effort. Reuse also helps you build more reliable and effective systems, because existing classes and components often have gone through exten-sive testing, debugging and performance tuning. Just as the notion of interchangeable parts was crucial to the Industrial Revolution, reusable classes are crucial to the software revolu-tion that has been spurred by object technology.
1.15 KeepingUp-to-DatewithInformationTechnologies   31


Software Engineering Observation 1.2
Use a building-block approach to creating your programs. Avoid reinventing the wheel— use existing pieces wherever possible. This software reuse is a key benefit of object-oriented programming.

Messages and Method Calls
When you drive a car, pressing its gas pedal sends a message to the car to perform a task— that is, to go faster. Similarly, you send messages to an object. Each message is implemented as a method call that tells a method of the object to perform its task. For example, a pro-grammightcallaparticularbank-accountobject’sdepositmethodtoincreasetheaccount’s balance.

Attributes and Instance Variables
A car, besides having capabilities to accomplish tasks, also has attributes, such as its color, its number of doors, the amount of gas in its tank, its current speed and its record of total miles driven (i.e., its odometer reading). Like its capabilities, the car’s attributes are repre-sented as part of its design in its engineering diagrams (which, for example, include an odometer and a fuel gauge). As you drive an actual car, these attributes are carried along with the car. Every car maintains its own attributes. For example, each car knows how much gas is in its own gas tank, but not how much is in the tanks of other cars.
An object, similarly, has attributes that it carries along as it’s used in a program. These attributes are specified as part of the object’s class. For example, a bank-account object has a balance attribute that represents the amount of money in the account. Each bank-account object knows the balance in the account it represents, but not the balances of the other accounts in the bank. Attributes are specified by the class’s instance variables.

Encapsulation
Classesencapsulate(i.e.,wrap) attributesandmethodsintoobjects—an object’sattributes and methods are intimately related. Objectsmay communicate withone another, but nor-mally they’re not allowed to know how other objects are implemented—implementation detailsarehiddenwithintheobjectsthemselves.Thisinformationhidingiscrucialtogood software engineering.

Inheritance
A new class of objects can be created quickly and conveniently by inheritance—the new class absorbs the characteristics of an existing class, possibly customizing them and adding unique characteristics of its own. In our car analogy, an object of class “convertible” cer-tainly is an object of the more generalclass “automobile,” but morespecifically, theroofcan be raised or lowered.

1.15 Keeping Up-to-Date with Information Technologies ThiscompletesourintroductiontotheInternetandtheweb.Asyouworkthroughthebook,
if you have a question, send an e-mail to deitel@deitel.comand we’ll get back to you promptly. We hope you enjoy using Internet and World Wide Web How to Program, 5/e. Figure 1.17 lists key technical and business publications that will help you stay up-to-date with the latest news and trends in computer, Internet and web technology. Enjoy!
32	Chapter1  IntroductiontoComputersandtheInternet



Publication

ACM TechNews
ACM Transactions on Accessible Computing
ACMTransactionsonInternet Technology
Bloomberg BusinessWeek CNET
Communications of the ACM Computer World
Engadget eWeek
Fast Company Fortune
IEEE Computer
IEEE Internet Computing InfoWorld
Mashable PCWorld SD Times Slashdot
Smarter Technology Technology Review Techcrunch
Wired

URL

technews.acm.org/
www.is.umbc.edu/taccess/index.html

toit.acm.org/

www.businessweek.com
news.cnet.com
cacm.acm.org/
www.computerworld.com
www.engadget.com
www.eweek.com
www.fastcompany.com/
money.cnn.com/magazines/fortune/
www.computer.org/portal/web/computer
www.computer.org/portal/web/internet/home
www.infoworld.com
mashable.com
www.pcworld.com
www.sdtimes.com
slashdot.org/
www.smartertechnology.com
technologyreview.com
techcrunch.com
www.wired.com


Fig. 1.17 | Technicalandbusinesspublications.



Self-Review Exercises
1.1	Fill in the blanks in each of the following:
a)   The company that popularized personal computing was	.
b)  Computers process data under the control of sets of instructions called computer .
c)		is a type of computer language that uses Englishlike abbreviations for ma-chine-language instructions.
d)		languages are most convenient to the programmer for writing programs quickly and easily.
e)   The only language a computer can directly understand is that computer’s	.
f)   The programs that translate high-level language programs into machine language are called	.
g)	, or labeling content, is another key part of the collaborative theme of Web 2.0.
AnswerstoSelf-ReviewExercises   33


h)  With	development, individuals and companies contribute their efforts in de-veloping, maintaining and evolving software in exchange for the right to use that soft-ware for their own purposes, typically at no charge.
i)   The	was the predecessor to the Internet.
j)   The information-carrying capacity of a communications medium like the Internet is called	.
k)  The acronym TCP/IP stands for	.
1.2	Fill in the blanks in each of the following statements.
a)  The	allows computer users to locate and view multimedia-based documents on almost any subject over the Internet.
b)		founded  an  organization—called  the  World  Wide  Web  Consortium (W3C)—devoted to developing nonproprietary, interoperable technologies for the World Wide Web.
c)                  are reusable software components that model items in the real world. d)                 is a smartphone operating system based on the Linux kernel and Java.
1.3	Fill in the blanks in each of the following statements (based on Section 1.14):
a)  Objects have the property of	—although objects may know how to commu-nicate with one another across well-defined interfaces, they normally are not allowed to know how other objects are implemented.
b)  In object-oriented programming languages, we create	to house the set of methods that perform tasks.
c)   The process of analyzing and designing a system from an object-oriented point of view is called	.
d)  With	,newclassesofobjectsarederivedbyabsorbingcharacteristicsofexisting classes, then adding unique characteristics of their own.
e)   The size, shape, color and weight of an object are considered	of the object’s class.
1.4	State whether each of the following is true or false. If the statement is false, explain why.
a)  HTML5 (HyperText Markup Language 5) is a high-level language designed to specify the content and structure of web pages in a portable manner.
b)  Keeping page styling together with the page content and structure enables you to easily change the look and feel of the pages on an entire website, or a portion of a website.
c)   A web server maintains a database of hostnames and their corresponding IP addresses, and performs the translations automatically.
1.5	Fill in the blanks in each of the following statements:
a)		is a JavaScript library that simplifies JavaScript programming by making it easier to manipulate a web page’s elements and interact with servers in a portable man-ner across various web browsers.
b)	is the standard for transferring encrypted data on the web. c)	identify resources on the Internet.
d)  An	is a numerical value that uniquely identifies the server on the Internet. e)   Browsers often                     web pages for quick reloading.
f)   The	operating system is used in the iPhone, iPad and iPod Touch devices.

Answers to Self-Review Exercises
1.1	a) Apple. b) programs. c) Assembly language. d) High-level. e) machine language. f) com-pilers. g) Tagging. h) open-source. i) ARPANET. j) bandwidth. k) Transmission Control Protocol/ Internet Protocol.
34	Chapter1  IntroductiontoComputersandtheInternet


1.2	a)  World Wide Web. b) Tim Berners-Lee. c) Objects. d) Android.
1.3	a)  information  hiding.  b) classes.  c) object-oriented  analysis  and  design  (OOAD). d) inheritance. e) attributes.
1.4	a) False. HTML is a markup language. b) False. By separating page styling from page con-tent and structure, you can change the look and feel of the pages on an entire website, or a portion of a website, simply by swapping out one style sheet for another. c) False. A Domain Name System (DNS) server maintains a database of hostnames and their corresponding IP addresses, and per-forms the translations automatically.
1.5	a) jQuery. b) Hypertext Transfer Protocol Secure (HTTPS). c) URIs (Uniform Resource Identifiers). d) IP (Internet Protocol) address. e) cache. f) iOS.


Exercises
1.6	Fill in the blanks in each of the following statements:
a)  The process of instructing the computer to solve a problem is called	.
b)  What type of computer language uses Englishlike abbreviations for machine-language instructions?	.
c)   The level of computer language at which it’s most convenient for you to write programs quickly and easily is	.
d)  The only language that a computer directly understands is called that computer's .
e)   Web 2.0 embraces an	—a design that encourages user interaction and com-munity contributions.
f)	is the concept that a large, diverse group of people will create smart ideas.
1.7	Fill in the blanks in each of the following statements:
a)		is now used to develop large-scale enterprise applications, to enhance the functionality of web servers, to provide applications for consumer devices and for many other purposes.
b)		initially became widely known as the development language of the UNIX op-erating system.
c)   The Web 2.0 company	is the fastest growing company ever.
d)  The	programming language was developed by Bjarne Stroustrup in the early 1980s at Bell Laboratories.
1.8	State whether each of the following is true or false. If the statement is false, explain why.
a)  Cascading Style Sheets™ 3 (CSS3) is used to specify the presentation, or styling, of el-ements on a web page (e.g., fonts, spacing, sizes, colors, positioning).
b)  Ensuring a consistent look and feel on client-side browsers is one of the great challenges of developing web-based applications.
c)   An HTTPrequest typically posts (or sends) data to a server.
d)  Client-side scripts often can access the server’s file-directory structure.
1.9	Fill in the blanks in each of the following statements:
a)		is the next-generation Internet Protocol that features built-in security and a new addressing scheme, significantly expanding the number of addresses available.
b)  HTML documents normally contain	, which, when clicked, load a speci-fied web document.
c)   A	contains information that directs a browser to the resource that the user wishes to access;	make such resources available to web clients.
d)  The two most common HTTP request types are	and	.
Exercises	35


e)   Web-based applications are multitier applications. The	(also called the data tier or the information tier) maintains the application’s data and typically stores data in a relational database management system. The                     implements busi-nesslogic,controllerlogicandpresentationlogictocontrolinteractionsbetweentheap-plication’s clients and its data. The	, or client tier, is the application’s user interface, which gathers input and displays output.
f)		, the fastest growing mobile and smartphone operating system. is based on the Linux kernel and Java.
1.10	What is the relationship between JavaScript and ECMAScript?
1.11	Describe the difference between client-side programming and server-side programming.
1.12	(Internet in Industry and Research) Figures 1.1–1.4 provide examples of how computers and the Internet are being used in industry and research. Find three additional examples and de-scribe how each is using the Internet and the web.
1.13	(Cloud Computing) Describe three benefits of the cloud computing model.
1.14	(Web Services) In Fig. 1.11 we listed several web services that can be used to create your own web applications. Using two different web services—either from the table or that you find on-line—describe a type of web application that you would like to create. How does it use the content provided by each of the web services?
1.15	(Internet Negatives) Besides their numerous benefits, the Internet and the web have several downsides, such as privacy issues, identity theft, SPAM and malware. Research some of the negative aspects of theInternet. List fiveproblems anddescribe whatcouldpossibly be done to help solve each.
1.16	(Web 2.0) In this chapter, we discussed a few popular Web 2.0 businesses, including Face-book, Twitter, Groupon, Foursquare, Skype and YouTube. Identify another Web 2.0 business and describe why it fits the Web 2.0 business model.
1.17	(Watch as an Object) You’re probably wearing on your wrist one of the world’s most com-mon types of objects—a watch. Discuss how each of the following terms and concepts applies to the notion of a watch: object, attributes, behaviors, class, inheritance (consider, for example, an alarm clock), abstraction, modeling, messages, encapsulation, interface and information hiding.
1.18	(Privacy) Some online e-mail services save all e-mail correspondence for some period of time. Suppose a disgruntled employee were to post all of the e-mail correspondences for millions of people, including yours, on the Internet. Discuss the issues.
1.19	(Programmer Responsibility and Liability) As a programmer in industry, you may develop software that could affect people’s health or even their lives. Suppose a software bug in one of your programs caused a cancer patient to receive an excessive dose during radiation therapy and that the person was severely injured or died. Discuss the issues.
1.20	(2010 “Flash Crash”) An example of the consequences of our excessive dependence on computerswastheso-called“flashcrash”whichoccurredonMay6,2010,whentheU.S.stockmar-ket fell precipitously in a matter of minutes, wiping out trillions of dollars of investments, and then recovered within minutes. Research online the causes of this crash and discuss the issues it raises.
1.21	(Making a Difference Projects) The following is a list of just a few worldwide organizations thatareworkingtomakeadifference.VisitthesesitesandourMakingaDifferenceResourceCenter at www.deitel.com/makingadifference. Prepare a top 10 list of programming projects that you think could indeed “make a difference.”
•  www.imaginecup.com/
The Microsoft Image Cup is a global competition in which students use technology to try to solve some of the world’s most difficult problems, such as environmental sustainability, ending hun-
36	Chapter1  IntroductiontoComputersandtheInternet


ger, emergency response, literacy and combating HIV/AIDS. Visit www.imaginecup.com/about for more information about the competition and to learn about the projects developed by previ-ous winners. You can also find several project ideas submitted by worldwide charitable organiza-tions  at  www.imaginecup.com/students/imagine-cup-solve-this.  For  additional  ideas  for programming projects that can make a difference, search the web for “making a difference” and visit the following websites:
•  www.un.org/millenniumgoals
The United Nations Millennium Project seeks solutions to major worldwide issues such as envi-ronmental sustainability, gender equality, child and maternal health, universal education and more.
•  www.ibm.com/smarterplanet/
The IBM® Smarter Planet website discusses how IBM is using technology to solve issues related to business, cloud computing, education, sustainability and more.
•  www.gatesfoundation.org/Pages/home.aspx
The Bill and Melinda Gates Foundation provides grants to organizations that work to alleviate hunger, poverty anddiseasein developingcountries.In theUnitedStates, thefoundation focuss-es on improving public education, particularly for people with few resources.
•  www.nethope.org/
NetHope is a collaboration of humanitarian organizations worldwide working to solve technol-ogy problems such as connectivity, emergency response and more.
•  www.rainforestfoundation.org/home
The Rainforest Foundation works to preserve rainforests and to protect the rights of the indige-nous people who call the rainforests home. The site includes a list of things you can do to help.
•  www.undp.org/
The United Nations Development Programme (UNDP) seeks solutions to global challenges such as crisis prevention and recovery, energy and the environment and democratic governance.
•  www.unido.org
The United Nations Industrial Development Organization (UNIDO) seeks to reduce poverty, give developing countries the opportunity to participate in global trade, and promote energy ef-ficiency and sustainability.
•  www.usaid.gov/
USAID promotes global democracy, health, economic growth, conflict prevention, humanitari-an aid and more.
•  www.toyota.com/ideas-for-good/
Toyota’s Ideas for Good website describes several Toyota technologies that are making a differ-ence—including their Advanced Parking Guidance System, Hybrid Synergy Drive®, Solar Pow-ered Ventilation System, T.H.U.M.S. (Total Human Model for Safety) and Touch Tracer Display. You can participate in the Ideas for Good challenge by submitting a short essay or video describing how these technologies can be used for other good purposes.




IntroductiontoHTML5: Part1

2
He had a wonderful talent for packing thought close, and rendering it portable.
—Thomas Babington Macaulay

High thoughts must have high language.
—Aristophanes




Objectives Inthischapteryou’ll:
ÿ   Understandimportant componentsofHTML5
documents.
ÿ   UseHTML5tocreateweb
pages.
ÿ   Addimagestowebpages.
ÿ   Createandusehyperlinksto helpusersnavigateweb
pages.
ÿ   Markuplistsofinformation.
ÿ   Createtableswithrowsand
columnsofdata.
ÿ   Createanduseformstoget
userinput.
38	Chapter2  IntroductiontoHTML5:Part1



2.1  Introduction 2.2  EditingHTML5
2.3  FirstHTML5Example
2.4  W3CHTML5ValidationService 2.5  Headings
2.6  Linking 2.7  Images
2.7.1 altAttribute 2.7.2 VoidElements
2.7.3 UsingImagesasHyperlinks

2.8  SpecialCharactersandHorizontal Rules
2.9  Lists 2.10  Tables 2.11  Forms
2.12  InternalLinking 2.13  metaElements 2.14  WebResources


Summary  | Self-Review Exercises | Answers to Self-Review Exercises | Exercises


2.1 Introduction
This chapter begins unlocking the power of web-based application development with HTML5. Unlike programming languages, such as C, C++, C#, Java and Visual Basic, HTML5 is a markup language that specifies the structure and content of documents that are displayed in web browsers.
Weintroducesomebasics,thencovermoresophisticatedHTML5techniquessuchas:
•	tables, which are particularly useful for structuring information from databases (i.e., software that stores structured sets of data)
•	forms for collecting information from web-page visitors •	internal linking for easier page navigation
•	metaelements for specifying information about a document
In Chapter 3, we introduce many new features in HTML5. In Chapter 4, we discuss CSS3, a technology for specifying how web pages look.

2.2 Editing HTML5
We’ll create HTML5 documents by typing HTML5 markup text in a text editor (such as Notepad, TextEdit, vi, emacs) and saving it with the .htmlor .htmfilename extension.
Computerscalled web servers storeHTML5documents.Clients (suchasweb browsers running on your local  computer or smartphone) request specific resources such as HTML5 documents from web servers. For example, typing www.deitel.com/books/ downloads.htmlinto a web browser’s address field requests the file downloads.htmlfrom the booksdirectory on the web server running at www.deitel.com. We discuss web servers in Chapter 17. For now, you’ll simply place the HTML5 documents on your computer and render (i.e., display) them by opening them locally with a web browser.

2.3 First HTML5 Example
ThischapterpresentsHTML5markupcapabilitiesandprovidesscreencapturesthatshow how a browser renders (that is, displays) the HTML5. You can download the examples
2.3 FirstHTML5Example   39


from www.pearsonhighered.com/deitel. The HTML5 documents we show have line numbers for your convenience—these are not part of the documents. Open each HTML5 document in various web browsers so you can view and interact with it.
Figure 2.1 is an HTML5 document named main.html, which is stored in the exam-ples/ch02 folder. This first example displays the message Welcome to HTML5! in the browser. Now let’s consider each line of the document.

1  <!DOCTYPE html> 2
3  <!-- Fig. 2.1: main.html --> 4  <!-- First HTML5 example. --> 5  <html>
6	<head>
7	<meta charset = "utf-8"> 8	<title>Welcome</title> 9     </head>
10
11	<body>
12	<p>Welcome to HTML5!</p> 13     </body>
14  </html>


Tabshows contentsof titleelement



Fig. 2.1  | FirstHTML5example.

Document Type Declaration
The document type declaration (DOCTYPE) in line 1 is required in HTML5 documents so that browsers render the page in standards mode, according to the HTML and CSS spec-ifications. Some browsers operate in quirks mode to maintain backward compatibility with web pages that are not up-to-date with the latest standards. You’ll include the DOC-TYPEin each HTML5 document you create.

Blank Lines
We include blank lines (lines 2 and 10) to make our documents easier to read—the brows-er ignores them.

Comments
Lines 3–4 are HTML5 comments. You’ll insert comments in your HTML5 markup to improve readability and describe the content of a document. The browser ignores com-ments when your document is rendered. HTML5 comments start with <!--and end with -->. We include in our examples comments that specify the figure number and file name and state the example’s purpose. We’ll often include additional comments, especially to explain new features.
40	Chapter2  IntroductiontoHTML5:Part1


html, headand bodyElements
HTML5 markup contains text (and images, graphics, animations, audios and videos) that represents the content of a document and elements that specify a document’s structure and meaning. Some important elements are the htmlelement (which starts in line 5 and ends in line 14), the headelement (lines 6–9) and the bodyelement (lines 11–13). The html element encloses the head section (represented by the headelement) and the body section (represented by the body element). The head section contains information about the HTML5document,suchasthecharacterset(UTF-8,themostpopularcharacter-encoding scheme for the web) that the page uses (line 7)—which helps the browser determine how to render the content—and the title(line 8). The head section also can contain special document-formatting instructions called CSS3 style sheets and client-side programs calledscriptsforcreatingdynamicwebpages.(WeintroduceCSS3stylesheetsinChapter 4 and explain scripting with the JavaScript language in Chapters 6–13.) The body section contains the page’s content, which the browser displays when the user visits the web page.

Start Tags and End Tags
HTML5documents delimit most elements witha start tagandan endtag. A start tagcon-sists of the element name in angle brackets (for example, <html>in line 5). An end tag con-sists of the element name preceded by a forward slash (/) in angle brackets (for example, </html>in line 14). There are several so-called “void elements” that do not have end tags. As you’ll soon see, many start tags have attributes that provide additionalinformation aboutanelement,whichbrowsersusetodeterminehowtoprocesstheelement.Eachattri-
bute has a name and a value separated by an equals sign (=).

Good Programming Practice 2.1
Although HTML5 element and attribute names are case insensitive (you can use upper-case and lowercase letters), it’s a good practice to use only lowercase letters.

titleElement
Line 8 specifies a titleelement. This is called a nested element, because it’s enclosed in the headelement’s start and end tags. The headelement is also a nested element, because it’s enclosedin thehtmlelement’s start and endtags. Thetitleelement describes the web page.Titlesusuallyappearinthetitlebaratthetopofthebrowserwindow,inthebrowser tab on which the page is displayed, and also as the text identifying a page when users add the page to their list of Favorites or Bookmarks, enabling them to return to their favorite sites. Search engines use the titlefor indexing purposes and when displaying results.

Good Programming Practice 2.2
Indenting nested elements emphasizes a document’s structure and promotes readability. We use three spaces for each level of indentation.

Line 11 begins the document’s bodyelement, which specifies the document’s content, which may include text, images, audios and videos.

Paragraph Element (<p>...</p>)
Some elements, such as the paragraph element denoted with <p>and </p>in line 12, help define the structure of a document. All the text placed between the <p>and </p>tags
2.4 W3CHTML5ValidationService   41


forms one paragraph. When a browser renders a paragraph, it places extra space above and below the paragraph text. The key line in the program is line 12, which tells the browser to display Welcome to HTML5!.

End Tags
This document ends with two end tags (lines 13–14), which close the bodyand htmlele-ments, respectively. The </html>tag informs the browser that the HTML5 markup is complete.

Opening an HTML5 File in Your Default Web Browser
To open an HTML5 example from this chapter, open the folder where you saved the book’sexamples,browsetotheChapter 2folderanddoubleclickthefiletoopenitinyour default web browser. At this point your browser window should appear similar to the sam-ple screen capture shown in Fig. 2.1. We resized the browser window to save space.

2.4 W3C HTML5 Validation Service
You must use proper HTML5 syntax to ensure that browsers process your documents properly. The World Wide Web Consortium (W3C) provides a validation service (at validator.w3.org) for checking a document’s syntax. Documents can be validated by
•	providing the URL of an online web page •	uploading a file to the validator
•	pasting code directly into a text area provided on the validator site
All of the HTML5 examples in this book have been validated by uploading a file to:

validator.w3.org/#validate-by-upload
To use validator.w3.org/#validate-by-upload, click the Choose File button to select a file from your computer to validate. Next, click More Options. In the Document Type drop-down list, select HTML5 (experimental). Select the Verbose Output checkbox, then click the Check button to validate your document. If it contains syntax errors, the validation service displays error messages describing the errors. Since the HTML5 vali-dator is still considered experimental, you’ll receive a warning each time you validate an HTML5 document.

Error-Prevention Tip 2.1
Most browsers attempt to render HTML5 documents even if they’re invalid. This can lead to unexpected and undesirable results. Use a validation service, such as the W3C MarkUp Validation Service, to confirm that an HTML5 document is syntactically correct.


2.5 Headings
Some text in an HTML5 document may be more important than other text. HTML5 pro-vides six heading elements(h1through h6) for specifying the relative importance of informa-tion (Fig. 2.2). Heading element h1(line 12) is considered the most significant one and is typically rendered in a larger font than the other five (lines 13–17). Each successive heading element (h2, h3, etc.) is typically rendered in a progressively smaller font.
42	Chapter2  IntroductiontoHTML5:Part1


Portability Tip 2.1
The text size used to display each heading element can vary between browsers. In Chapter 4, we use CSS to control the text size and other text properties.

Look-and-Feel Observation 2.1
Placing a heading at the top of each page helps viewers understand the purpose of the page. Headers also help create an outline for a document and are indexed by search engines.


1  <!DOCTYPE html> 2
3  <!-- Fig. 2.2: heading.html -->
4  <!-- Heading elements h1 through h6. --> 5  <html>
6	<head>
7	<meta charset = "utf-8"> 8	<title>Headings</title> 9     </head>
10
11	<body>
12	<h1>Level 1 Heading</h1> 13	<h2>Level 2 heading</h2> 14	<h3>Level 3 heading</h3> 15	<h4>Level 4 heading</h4> 16	<h5>Level 5 heading</h5> 17	<h6>Level 6 heading</h6> 18     </body>
19  </html>















Fig. 2.2  | Headingelementsh1throughh6.

2.6 Linking
One of the most important HTML5 features is the hyperlink, which references (or links to) other resources, such as HTML5 documents and images. When a user clicks a hyper-link, the browser tries to execute an action associated with it (for example, navigate to a
2.6 Linking   43


URL or open an e-mail client). Any displayed element can act as a hyperlink. Web browsers typically underline text hyperlinks and color their text blue by default so that users can dis-tinguish hyperlinks from plain text. In Fig. 2.3, we create text hyperlinks to four websites.

1  <!DOCTYPE html> 2
3  <!-- Fig. 2.3: links.html -->
4  <!-- Linking to other web pages. --> 5  <html>
6	<head>
7	<meta charset = "utf-8"> 8	<title>Links</title>
9	</head> 10
11	<body>
12	<h1>Here are my favorite sites:</h1>
13	<p><strong>Click a name to visit that site.</strong></p> 14
15	<!-- create four text hyperlinks -->
16	<p><a href = "http://www.facebook.com">Facebook</a></p> 17	<p><a href = "http://www.twitter.com">Twitter</a></p>
18	<p><a href = "http://www.foursquare.com">Foursquare</a></p> 19	<p><a href = "http://www.google.com">Google</a></p>
20	</body>
21  </html>














Fig. 2.3  | Linkingtootherwebpages.

Line 13 introduces the strongelement, which indicates that its content has high importance. Browsers typically render such text in a bold font.
Links are created using the a(anchor) element. Line 16 defines a hyperlink to the URL assignedtoattributehref(hypertextreference),whichspecifiesaresource’slocation,suchas
•	a web page or location within a web page •	a file
•	an e-mail address
44	Chapter2  IntroductiontoHTML5:Part1


The anchor element in line 16 links the text Facebookto a web page located at http:// www.facebook.com.Thebrowserchanges thecolor ofany text linkonce you’veclickedthe link (in this case, the links are purple rather than blue). When a URL does not indicate a specific document on the website, the web server returns a default web page. This page is often called index.html, but most web servers can be configured to use any file as the de-fault web page for the site. If the web server cannot locate a requested document, it returns an error indication to the web browser (known as a 404 error), and the browser displays a web page containing an error message.

Software Engineering Observation 2.1
Although not required in HTML5, enclosing attribute values in either single or double quotes is recommended.

Hyperlinking to an E-Mail Address
Anchors can link to e-mail addresses using a mailto:URL. When the user clicks this type of anchored link, most browsers launch the user’s default e-mail program (for example, Mozilla Thunderbird, Microsoft Outlook or Apple Mail) to enable the user to write an e-mail message to the linked address. Figure 2.4 demonstrates this type of anchor. Lines 13– 14 contain an e-mail link. The form of an e-mail anchor is <ahref="mailto:emailAd-dress">…</a>. In this case, we link to the e-mail address deitel@deitel.com. Line 13 in-cludes the e-mail address as it will appear in the message displayed on the browser.

1  <!DOCTYPE html> 2
3  <!-- Fig. 2.4: contact.html -->
4  <!-- Linking to an e-mail address. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Contact Page</title> 9     </head>
10
11     <body> 12         <p>
13	To write to <a href = "mailto:deitel@deitel.com">
14	Deitel & Associates, Inc.</a>, click the link and your default 15	email client will open an email message and address it to us. 16         </p>
17	</body>
18  </html>








Fig. 2.4  | Linkingtoane-mailaddress.(Part1of2.)
2.7 Images	45


















Fig. 2.4 | Linkingtoane-mailaddress.(Part2of2.)


2.7 Images
We’ve shown how to mark up documents that contain only text, but web pages may also
containimages,animations,graphics,audiosandevenvideos.Themostpopular imagefor-mats used by web developers today are PNG (Portable Network Graphics) and JPEG (Joint Photographic Experts Group). Users can create images using specialized software, such as Adobe Photoshop Express (www.photoshop.com), G.I.M.P. (www.gimp.org), Inkscape (www.inkscape.org) and many more. Images may also be acquired from various websites, many of which offer royalty-free images (Fig. 2.5)—read each site’s Terms of Service to determine if you’ll need permission to use their images, especially in commercial, for-profit applications. Figure 2.6 demonstrates how to include images in web pages.



Image-sharingsite

Flickr® Photobucket Fotki™ deviantART Picasa™ TinyPic® ImageShack
FreeDigitalPhotos.net Open Stock Photography
Open Clip Art Library

URL

www.flickr.com

photobucket.com
www.fotki.com
www.deviantart.com
picasa.google.com
tinypic.com
www.imageshack.us
www.freedigitalphotos.net
www.openstockphotography.org
www.openclipart.org


Fig. 2.5 | Popularimage-sharingsites.
46	Chapter2  IntroductiontoHTML5:Part1


1  <!DOCTYPE html> 2
3  <!-- Fig. 2.6: picture.html -->
4  <!-- Including images in HTML5 files. --> 5  <html>
6	<head>
7	<meta charset = "utf-8"> 8	<title>Images</title>
9	</head> 10
11     <body> 12         <p>
13	<img src = "cpphtp.png" width = "92" height = "120" 14               alt = "C++ How to Program book cover">
15	<img src = "jhtp.png" width = "92" height = "120" 16               alt = "Java How to Program book cover">
17         </p> 18     </body>
19  </html>

InternetExplorer9showinganimageandthealttextforamissingimage










Fig. 2.6  | IncludingimagesinHTML5files.

Lines 13–14 use an imgelement to include an image in the document. The image file’s location is specified with the src(source) attribute. This image is located in the same directory as the HTML5 document, so only the image’s file name is required. This is known as a relative path—the image is stored relative to the location of the document. Optional attributes widthand heightspecify the image’s dimensions. You can scale an image by increasing or decreasing the values of the image widthand heightattributes. If these attributes are omitted, the browser uses the image’s actual width and height. Images are measured in pixels (“picture elements”), which represent dots of color on the screen. Image-editing programs display the dimensions, in pixels, of an image. The image in Fig. 2.6 is 92pixels wide and 120pixels high.

Performance Tip 2.1
Always include the widthand the heightof an image in the <img>tag so that when the browser loads the HTML5 file, it will know how much screen space to provide and can lay out the page properly, even before it downloads the image. Including the widthand heightattributes in an <img>tag can help the browser load and render pages faster.
2.7 Images	47


Look-and-Feel Observation 2.2 Enteringnewdimensionsforanimagethatchangeitswidth-to-heightratiodistortstheap-pearance of the image. To avoid distortion, if your image is 200 pixels wideand 100 pixels high, for example, any new dimensions should maintain the 2:1 width-to-height ratio.


2.7.1 altAttribute
A browser may not be able to render an image for several reasons. It may not support im-ages—as is the case with text-only browsers—or the client may have disabled image view-ing to reduce download time. Every imgelement in an HTML5 document must have an altattribute. If a browser cannot render an image, thebrowser displays the altattribute’s value. Figure 2.6 shows the Internet Explorer browser rendering a red Xsymbol and dis-playing the altattribute’s value, signifying that the image (jhtp.png) cannot be found.
The altattribute is also important for accessibility—speech synthesizer software can speak the altattribute’s value so that a visually impaired user can understand what the browser is displaying. For this reason, the altattribute should describe the image’s con-tents.


2.7.2 Void Elements
Some HTML5 elements (called void elements) contain only attributes and do not mark up text (i.e., text is not placed between a start and an end tag). Although this is not re-quired in HTML5, you can terminate void elements (such as the imgelement) by using the forward slash character (/) inside the closing right angle bracket (>) of the start tag. Foe example, lines 15–16 could be written as follows:

<img src = "jhtp.png" width = "92" height = "120" alt = "Java How to Program book cover" />


2.7.3 Using Images as Hyperlinks
By using images as hyperlinks, you can create graphical web pages that link to other re-sources. In Fig. 2.7, we create five different image hyperlinks. Clicking an image in this example takes the user to a corresponding web page—one of the other examples in this chapter.


1  <!DOCTYPE html> 2
3  <!-- Fig. 2.7: nav.html -->
4  <!-- Images as link anchors. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Navigation Bar</title> 9     </head>
10

Fig. 2.7 | Imagesaslinkanchors.(Part1of2.)
48	Chapter2  IntroductiontoHTML5:Part1


11     <body> 12         <p>
13	<a href = "links.html">
14	<img src = "buttons/links.jpg" width = "65" 15                  height = "50" alt = "Links">
16	</a> 17
18	<a href = "list.html">
19	<img src = "buttons/list.jpg" width = "65" 20                  height = "50" alt = "List of Features"> 21            </a>
22
23	<a href = "contact.html">
24	<img src = "buttons/contact.jpg" width = "65" 25                  height = "50" alt = "Contact Me">
26	</a> 27
28	<a href = "table1.html">
29	<img src = "buttons/table.jpg" width = "65" 30                  height = "50" alt = "Tables Page">
31	</a> 32
33	<a href = "form.html">
34	<img src = "buttons/form.jpg" width = "65" 35                  height = "50" alt = "Feedback Form"> 36            </a>
37         </p> 38     </body>
39  </html>








Fig. 2.7  | Imagesaslinkanchors.(Part2of2.)

Lines 13–16 create an image hyperlink by nesting an imgelement in an anchor ele-ment. The imgelement’s srcattribute value specifies that this image (links.jpg) resides in a directory named buttons. The buttonsdirectory and the HTML5 document are in thesamedirectory. Imagesfromotherwebdocumentsalsocan bereferencedbysetting the srcattribute to the name and location of the image. If you refer to an image on another website, the browser has to request the image resource from that site’s server. [Note: If you’re hosting a publicly available web page that uses an image from another site, you should get permission to use the image and host a copy of the image on your own website. Theimage’sownermayrequireyoutoacknowledgetheirwork.] Clicking an imagehyper-link takes a user to the web page specified by the surrounding anchor element’s hrefattri-bute. When the mouse hovers over a link of any kind, the URL that the link points to is displayed in the status bar at the bottom of the browser window.
2.8 SpecialCharactersandHorizontalRules   49

2.8 Special Characters and Horizontal Rules
When markinguptext, certain charactersorsymbolsmay bedifficulttoembeddirectlyinto an HTML5 document. Some keyboards do not provide these symbols (such as ©), or their presence in the markup may cause syntax errors (as with <). For example, the markup

<p>if x < 10 then increment x by 1</p>
resultsinasyntaxerrorbecauseitusestheless-thancharacter(<),whichisreservedforstart tags and end tags such as <p>and </p>. HTML5 provides character entity references (in the form &code;) for representing special characters (Fig. 2.8). We could correct the previ-ous line by writing

<p>if x &lt; 10 then increment x by 1</p>
which uses the character entity reference &lt;for the less-than symbol (<). [Note: Before HTML5, the character entity reference &amp;was required to display an &in a web page. This is no longer the case.]


Symbol	Description	Characterentityreference

HTML5 character entities
&	ampersand	&amp; ’	apostrophe	&apos; >	greater-than	&gt;
<	less-than	&lt;
"	quote	&quot;

Other common character entities

non-breaking space ©
— – ¼ ½ ¾ ... ® §
™


copyright em dash en dash
fraction 1/4 fraction 1/2 fraction 3/4 horizontal ellipsis
registered trademark section
trademark


&nbsp;
&copy;
&mdash;
&ndash;
&frac14;
&frac12;
&frac34;
&hellip;
&reg;
&sect;
&trade;


Fig. 2.8 | SomecommonHTMLcharacterentityreferences.

Figure 2.9 demonstrates how to use special characters in an HTML5 document. For an extensive list of character entities, see

www.w3.org/TR/REC-html40/sgml/entities.html
50	Chapter2  IntroductiontoHTML5:Part1


1  <!DOCTYPE html> 2
3  <!-- Fig. 2.9: contact2.html -->
4  <!-- Inserting special characters. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Contact Page</title> 9     </head>
10
11     <body> 12         <p>
13	<a href = "mailto:deitel@deitel.com">Send an email to 14	Deitel &amp; Associates, Inc.</a>.
15	</p> 16
17	<hr> <!-- inserts a horizontal rule --> 18
19	<!-- special characters are entered --> 20	<!-- using the form &code; -->
21	<p>All information on this site is <strong>&copy; 22            Deitel & Associates, Inc. 2012.</strong> </p> 23
24	<!-- to strike through text use <del> element --> 25	<!-- to subscript text use <sub> element -->
26	<!-- to superscript text use <sup> element -->
27	<!-- these elements are nested inside other elements --> 28	<p><del>You may download 3.14 x 10<sup>2</sup>
29	characters worth of information from this site.</del> 30	The first item in the series is x<sub>1</sub>.</p>
31	<p>Note: &lt; &frac14; of the information 32            presented here is updated daily.</p> 33     </body>
34  </html>












Fig. 2.9  | Insertingspecialcharacters.

The paragraph in lines 12–15 allows the user to click the link to send an e-mail to Deitel & Associates, Inc. In this case, we represented the &with the character entity refer-ence &amp;to show that it still works even though it’s not required in HTML5.
2.9 Lists	51


In addition to special characters, this document introduces a horizontal rule, indi-cated by the <hr>tagin line 17. Most browsers render a horizontal rule as a horizontal line withextraspaceaboveandbelowit.Asaprofessional,you’llseelotsofoldercode—known as legacy code. The horizontal rule element should be considered a legacy element and you should avoid using it. As you’ll learn, CSS can be used to add horizontal rules and other formatting to documents.
Lines 21–22 contain other special characters, which can be expressed as either char-acter entity references (coded using word abbreviations such as &copy;for copyright) or numeric character references—decimal or hexadecimal (hex) values representing special characters. For example, the &character is represented in decimal and hexadecimal nota-tion as &#38; and &#x26;, respectively. Hexadecimal numbers are base 16 numbers— digits in a hexadecimal number have values from 0 to 15 (a total of 16 different values). The letters A–F represent the hexadecimal digits corresponding to decimal values 10–15. Thus in hexadecimal notation we can have numbers like 876 consisting solely of decimal-like digits, numbers like DA19F consisting of digits and letters, and numbers like DCB consisting solely of letters. We discuss hexadecimal numbers in detail in Appendix E, Number Systems, which is available online at www.deitel.com/books/iw3htp5/.
In lines 28–30, we introduce four new elements. Most browsers render the delele-ment as strike-through text. With this format users can indicate document revisions. To superscript text (i.e., raise text above the baseline and in a decreased font size) or subscript text (i.e., lower text below the baseline and in a decreased font size), use the supor sub element, respectively. We also use character entity reference &lt;for a less-than sign and &frac14;for the fraction 1/4 (line 31).

2.9 Lists
Now we show how to use lists in a web page to organize content that similar in nature. Figure 2.10 displays text in an unordered list (i.e., a simple bullet-style list that does not order its items by letter or number). The unordered-list element ul(lines 16–22) creates a list in which each item begins with a bullet symbol (typically a disc). Each entry in an unordered list is an li(list item) element (lines 18–21). Most web browsers render each lielement on a new line with a bullet symbol indented from the beginning of the line.


1  <!DOCTYPE html> 2
3  <!-- Fig. 2.10: links2.html -->
4  <!-- Unordered list containing hyperlinks. --> 5  <html>
6	<head>
7	<meta charset = "utf-8"> 8	<title>Links</title>
9	</head> 10
11	<body>
12	<h1>Here are my favorite sites</h1>
13	<p><strong>Click on a name to go to that page</strong></p>

Fig. 2.10  | Unorderedlistcontaininghyperlinks.(Part1of2.)
52	Chapter2  IntroductiontoHTML5:Part1


14
15	<!-- create an unordered list --> 16	<ul>
17	<!-- the list contains four list items -->
18	<li><a href = "http://www.youtube.com">YouTube</a></li>
19	<li><a href = "http://www.wikipedia.org">Wikipedia</a></li> 20	<li><a href = "http://www.amazon.com">Amazon</a></li>
21	<li><a href = "http://www.linkedin.com">LinkedIn</a></li> 22          </ul>
23	</body>
24  </html>













Fig. 2.10  | Unorderedlistcontaininghyperlinks.(Part2of2.)


Nested Lists
Lists may be nested to represent hierarchical relationships, as in a multilevel outline. Figure 2.11 demonstrates nested lists and ordered lists. The ordered-list element olcre-ates a list in which each item begins with a number.
In many browsers, the items in the outermost unordered list (lines 15–55) are pre-ceded by discs. List items nested inside the unordered list of line 15 are preceded in many browsers by hollow circular bullets. A web browser indents each nested list to indicate a hierarchical relationship. The first ordered list (lines 29–33) includes two items. Items in an ordered list are enumerated 1., 2., 3. and so on. Nested ordered lists are enumerated in the same manner. Although not demonstrated in this example, subsequent nested unor-dered list items are often preceded by square bullets. The bullet styles used may vary by browser.


1  <!DOCTYPE html> 2
3  <!-- Fig. 2.11: list.html -->
4  <!-- Nested lists and ordered lists. --> 5  <html>
6	<head>

Fig. 2.11  | Nestedlistsandorderedlists.(Part1of3.)
2.9 Lists	53


7	<meta charset = "utf-8"> 8	<title>Lists</title>
9	</head> 10
11	<body>
12	<h1>The Best Features of the Internet</h1> 13
14	<!-- create an unordered list --> 15	<ul>
16	<li>You can meet new people from countries around 17               the world.</li>
18	<li>
19	You have access to new media as it becomes public: 20
21	<!-- this starts a nested unordered list, which uses a --> 22	<!-- different bullet. The list ends when you -->
23	<!-- close the <ul> tag. --> 24	<ul>
25	<li>New games</li> 26	<li>New applications 27
28	<!-- nested ordered list --> 29	<ol>
30	<li>For business</li> 31	<li>For pleasure</li> 32                     </ol>
33	</li> <!-- ends line 27 new applications li--> 34
35	<li>Around the clock news</li> 36	<li>Search engines</li>
37	<li>Shopping</li> 38	<li>Programming 39
40	<!-- another nested ordered list --> 41	<ol>
42	<li>XML</li> 43	<li>Java</li> 44	<li>HTML5</li>
45	<li>JavaScript</li>
46	<li>New languages</li> 47                     </ol>
48	</li> <!-- ends programming li of line 38 --> 49               </ul> <!-- ends the nested list of line 24 --> 50            </li>
51
52	<li>Links</li>
53	<li>Keeping in touch with old friends</li> 54	<li>It’s the technology of the future!</li>
55	</ul> <!-- ends the unordered list of line 15 --> 56     </body>
57  </html>

Fig. 2.11  | Nestedlistsandorderedlists.(Part2of3.)
54	Chapter2  IntroductiontoHTML5:Part1























Fig. 2.11  | Nestedlistsandorderedlists.(Part3of3.)

2.10 Tables
Tables are frequently used to organize data into rows and columns. Our first example (Fig. 2.12) creates a table with six rows and two columns to display price information for various fruits. Tables are defined with the tableelement (lines 13–58). Line 13 specifies the tableelement’s start tag. The borderattribute with the value "1"specifies that the browser should place borders around the table and the table’s cells. The border attribute is a legacy attribute that you should avoid. When we introduce CSS3 (Chapter 4), we’ll use CSS’s borderproperty, which is the preferred way to format a table’s borders.
The captionelement (lines 17–18) specifies a table’s title. Text in this element is typ-ically rendered above the table. In addition, it’s good practice to include a general descrip-tion of a table’s information in the table element’s summaryattribute—one of the many HTML5 features that make web pages more accessible to users with disabilities. Speech devicesusethisattributetomakethetablemoreaccessibletouserswithvisualimpairments.

1  <!DOCTYPE html> 2
3  <!-- Fig. 2.12: table1.html --> 4  <!-- Creating a basic table. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">

Fig. 2.12  | Creatingabasictable.(Part1of3.)
2.10 Tables	55


8	<title>A simple HTML5 table</title> 9     </head>
10
11	<body>
12	<!-- the <table> tag opens a table --> 13	<table border = "1">
14
15	<!-- the <caption> tag summarizes the table's -->
16	<!-- contents (this helps visually impaired people) --> 17	<caption><strong>Table of Fruits (1st column) and
18	Their Prices (2nd column)</strong></caption> 19
20	<!-- the <thead> section appears first in the table --> 21	<!-- it formats the table header area -->
22	<thead>
23	<tr> <!-- <tr> inserts a table row -->
24	<th>Fruit</th> <!-- insert a heading cell --> 25	<th>Price</th>
26	</tr> 27            </thead> 28
29	<!-- the <tfoot> section appears last in the table --> 30	<!-- it formats the table footer -->
31            <tfoot> 32               <tr>
33	<th>Total</th> 34	<th>$3.75</th> 35               </tr>
36	</tfoot> 37
38	<!-- all table content is enclosed --> 39	<!-- within the <tbody> -->
40            <tbody> 41               <tr>
42	<td>Apple</td> <!-- insert a data cell --> 43	<td>$0.25</td>
44	</tr> 45	<tr>
46	<td>Orange</td> 47	<td>$0.50</td> 48               </tr>
49	<tr>
50	<td>Banana</td> 51	<td>$1.00</td> 52               </tr>
53	<tr>
54	<td>Pineapple</td> 55	<td>$2.00</td>
56	</tr> 57            </tbody> 58         </table>
59	</body>
60  </html>

Fig. 2.12  | Creatingabasictable.(Part2of3.)
56	Chapter2  IntroductiontoHTML5:Part1








Tablecaption


Tableheader


Tablebody	Tableborder


Tablefooter


Fig. 2.12  | Creatingabasictable.(Part3of3.)

A table has three distinct sections—head, body and foot. The head section (or header cell) is defined with a theadelement (lines 22–27), which contains header information such as column names. Each trelement (lines 23–26) defines an individual table row. The columns in the theadsection are defined with thelements. Most browsers center text formatted by th(table header column) elements and display them in bold. Table header elements (lines 24–25) are nested inside table row elements.
The body section, or table body, contains the table’s primary data. The table body (lines 40–57) is defined in a tbodyelement. In the table body, each trelement specifies one row. Data cells contain individual pieces of data and are defined with td(table data) elements in each row.
The tfootsection (lines 31–36) is definedwith a tfoot(table foot) element. The text placedinthefootercommonlyincludescalculationresultsandfootnotes.Here,wemanually entered the calculation total. In later chapters, we’ll show how to perform such calcula-tions dynamically. Like other sections, the tfootsection can contain table rows, and each row can contain cells. As in the theadsection, cells in the foot section are created using th elements, instead of the tdelements used in the table body. Before HTML5, the tfoot section was required to appear above the tbodysection of the table. As of HTML5, the tfootsection can be above or below the tbodysection in the code.
In this example, we specified only the table’s data, not its formatting. As you can see, in the browser’s default formatting each column is only as wide as its largest element, and the table itself is not visually appealing. In Chapter 4, we’ll use CSS to specify HTML5 elements’ formats.

Using rowspanand colspanwith Tables
Figure 2.12 explored a basic table’s structure. Figure 2.13 presents another table example and introduces new attributes that allow you to build more complex tables.
The table begins in line 14. Table cells are sized to fit the data they contain, but you can control a table’s formatting using CSS3. You can create cells that apply to more than one
2.10 Tables	57


row or column using the attributes rowspanand colspan. The values assigned to these attributes specify the number of rows or columns occupied by a cell. The thelement at lines 22–25 uses the attribute rowspan="2"to allow the cell containing the picture of the camel to use two vertically adjacent cells (thus the cell spans two rows). The thelement in lines 28–31 uses the attribute colspan="4"to widen the header cell (containing Camelid comparisonand Approximateasof10/2011) to span four cells.
Line 29 introduces the brelement, which most browsers render as a line break. Any markup or text following a brelement is rendered on the next line, which in this case appears within the same four-column span. Like the imgelement, bris an example of a void element. Like the hrelement, bris considered a legacy formatting element that you should avoid using—in general, formatting should be specified using CSS.

1  <!DOCTYPE html> 2
3  <!-- Fig. 2.13: table2.html --> 4  <!-- Complex HTML5 table. -->
5  <html>
6	<head>
7	<meta charset = "utf-8"> 8	<title>Tables</title>
9	</head> 10
11	<body>
12	<h1>Table Example: Spanning Rows and Columns</h1> 13
14	<table border = "1">
15	<caption>A more complex sample table</caption> 16
17	<thead>
18	<!-- rowspans and colspans merge the specified --> 19	<!-- number of cells vertically or horizontally --> 20	<tr>
21	<!-- merge two rows --> 22	<th rowspan = "2">
23	<img src = "camel.png" width = "205"
24	height = "167" alt = "Picture of a camel"> 25                  </th>
26
27	<!-- merge four columns --> 28	<th colspan = "4">
29	<strong>Camelid comparison</strong><br> 30	Approximate as of 10/2011
31	</th> 32               </tr>
33	<tr>
34	<th># of humps</th>
35	<th>Indigenous region</th> 36	<th>Spits?</th>
37	<th>Produces wool?</th> 38               </tr>
39	</thead>

Fig. 2.13  | ComplexHTML5table.(Part1of2.)
58	Chapter2  IntroductiontoHTML5:Part1


40            <tbody> 41               <tr>
42	<th>Camels (bactrian)</th> 43	<td>2</td>
44	<td>Africa/Asia</td> 45	<td>Yes</td>
46	<td>Yes</td> 47               </tr>
48	<tr>
49	<th>Llamas</th> 50	<td>1</td>
51	<td>Andes Mountains</td> 52	<td>Yes</td>
53	<td>Yes</td> 54               </tr>
55	</tbody> 56         </table>
57	</body>
58  </html>



















Fig. 2.13  | ComplexHTML5table.(Part2of2.)


2.11   Forms
When browsing websites, users often need to provide information such as search queries, e-mail addresses and zip codes. HTML5 provides a mechanism, called a form, for collect-ing data from a user.
Datathatusersenteronawebpageisnormallysenttoawebserverthatprovidesaccess to a site’s resources (for example, HTML5 documents, images, animations, videos). These resources are located either on the same machine as the web server or on a machine that
2.11 Forms	59


the web server can access through the Internet. When a browser requests a publicly avail-able web page or file that’s located on a server, the server processes the request and returns the requested resource. A request contains the name and path of the desired resource and the protocol (method of communication). HTML5 documents are requested and trans-ferred via the Hypertext Transfer Protocol (HTTP).
Figure 2.14 is a simple form that sends data to the web server for processing. The web server typically returns a web page back to the web browser—this page often indicates whether or not the form’s data was processed correctly. [Note: This example demonstrates only client-side functionality. If you submit this form (by clicking Submit), the browser will simply display www.deitel.com(the site specified in the form’s action), because we haven’t yet specified how to process the form data on the server. In later chapters, we presenttheserver-sideprogramming(forexample,inPHP,ASP.NETandJavaServerFaces) necessary to process information entered into a form.]


1  <!DOCTYPE html> 2
3  <!-- Fig. 2.14: form.html -->
4  <!-- Form with a text field and hidden fields. --> 5  <html>
6	<head>
7	<meta charset = "utf-8"> 8	<title>Forms</title>
9	</head> 10
11	<body>
12	<h1>Feedback Form</h1> 13
14	<p>Please fill out this form to help 15            us improve our site.</p>
16
17	<!-- this tag starts the the form, gives the --> 18	<!-- method of sending information and the --> 19	<!-- location of the form-processing script -->
20	<form method = "post" action = "http://www.deitel.com"> 21            <!-- hidden inputs contain non-visual -->
22	<!-- information that will also be submitted --> 23	<input type = "hidden" name = "recipient"
24	value = "deitel@deitel.com">
25	<input type = "hidden" name = "subject" 26               value = "Feedback Form">
27	<input type = "hidden" name = "redirect" 28               value = "main.html">
29
30	<!-- <input type = "text"> inserts a text field --> 31	<p><label>Name:
32	<input name = "name" type = "text" size = "25" 33                     maxlength = "30">
34	</label></p>
35

Fig. 2.14  | Formwithatextfieldandhiddenfields.(Part1of2.)
60	Chapter2  IntroductiontoHTML5:Part1


36	<p>
37	<!-- input types "submit" and "reset" insert --> 38	<!-- buttons for submitting and clearing the --> 39	<!-- form's contents, respectively -->
40	<input type = "submit" value = "Submit"> 41	<input type = "reset" value = "Clear"> 42            </p>
43	</form> 44     </body>
45  </html>













Fig. 2.14  | Formwithatextfieldandhiddenfields.(Part2of2.)

methodAttribute of the formElement
The form is defined in lines 20–43 by a formelement. Attribute method(line 20) specifies how the form’s data is sent to the web server. Using method="post"appends form data to the browser request, which contains the protocol (HTTP) and the requested resource’s URL. This method of passing data to the server is transparent—the user doesn’t see the data after the form is submitted. The other possible value, method="get", appends the form data directly to the end of the URL of the script, where it’s visible in the browser’s Address field. The post and get methods for sending form data are discussed in detail in Chapter 17.

actionAttribute of the formElement
The actionattribute in the formelement in line 20 specifies the URL of a script on the web server that will be invoked to process the form’s data. Since we haven’t introduced server-side programming yet, we set this attribute to http://www.deitel.comfor now.
Lines 24–43 define inputelements that specify data to provide to the script that pro-cesses the form (also called the form handler). There are several types of input elements. An input’s type is determined by its typeattribute. This form uses a textinput, a submit input, a resetinput and three hiddeninputs.

Hidden Inputs
Forms can contain visual and nonvisual components. Visual components include clickable buttons and other graphical user interface components with which users interact. Nonvi-
2.11 Forms	61


sual components, called hidden inputs (lines 23–28), store any data that you specify, such as e-mail addresses and HTML5 document file names that act as links.
The three hidden inputelements in lines 23–28 have the typeattribute hidden, which allowsyoutosendformdatathat’snotinputbyauser.Thehiddeninputsareane-mailaddress to which the data will be sent, the e-mail’s subject line and a URL for the browser to open after submission of the form. Two other inputattributes are name, which identifies the inputelement, and value, which provides the value that will be sent (or posted) to the web server. The server uses the nameattribute to get the corresponding valuefrom the form.

textinputElement
The textinputin lines 32–33 inserts a text field in the form. Users can type data in text fields. The labelelement (lines 31–34) provides users with information about the input element’s purpose. The inputelement’s sizeattribute specifies the number of characters visible in the text field. Optional attribute maxlengthlimits the number of characters input into the text field—in this case, the user is not permitted to type more than 30characters.

submitand resetinputElements
Two inputelements in lines 40–41 create two buttons. The submitinputelement is a button.Whenthesubmitbuttonispressed,theform’sdataissenttothelocationspecified in the form’s actionattribute. The valueattribute sets the text displayed on the button. The resetinputelement allows a user to reset all formelements to their default values. The valueattribute of the resetinputelement sets the text displayed on the button (the default value is Reset if you omit the valueattribute).

Additional Form Elements
In the previous example, you saw basic elements of HTML5 forms. Now we introduce el-ements and attributes for creating more complex forms. Figure 2.15 contains a form that solicits user feedback about a website.
The textareaelement (lines 31–32) inserts a multiline text area into the form. The numberofrowsisspecifiedwiththerowsattribute,andthenumberofcolumns(i.e.,char-acters per line) with the colsattribute. In this example, the textareais four rows high and 36 characters wide. To display default text in the textarea, place the text between the <textarea>and</textarea>tags.Defaulttextcanbespecifiedinotherinputtypes,such as text fields, by using the valueattribute.


1  <!DOCTYPE html> 2
3  <!-- Fig. 2.15: form2.html -->
4  <!-- Form using a variety of components. --> 5  <html>
6	<head>
7	<meta charset = "utf-8"> 8	<title>More Forms</title> 9     </head>
10

Fig. 2.15  | Formusingavarietyofcomponents.(Part1of4.)
62	Chapter2  IntroductiontoHTML5:Part1


11	<body>
12	<h1>Feedback Form</h1>
13	<p>Please fill out this form to help 14            us improve our site.</p>
15
16	<form method = "post" action = "http://www.deitel.com"> 17
18	<input type = "hidden" name = "recipient" 19               value = "deitel@deitel.com">
20	<input type = "hidden" name = "subject" 21               value = "Feedback Form">
22	<input type = "hidden" name = "redirect" 23               value = "main.html">
24
25	<p><label>Name:
26	<input name = "name" type = "text" size = "25"> 27               </label></p>
28
29	<!-- <textarea> creates a multiline textbox --> 30	<p><label>Comments:<br>
31	<textarea name = "comments"
32	rows = "4" cols = "36">Enter comments here.</textarea> 33            </label></p>
34
35	<!-- <input type = "password"> inserts a --> 36	<!-- textbox whose display is masked with --> 37	<!-- asterisk characters -->
38	<p><label>E-mail Address:
39	<input name = "email" type = "password"  size = "25"> 40            </label></p>
41
42	<p>
43	<strong>Things you liked:</strong><br> 44
45	<label>Site design
46	<input name = "thingsliked" type = "checkbox" 47                     value = "Design"></label>
48	<label>Links
49	<input name = "thingsliked" type = "checkbox" 50                     value = "Links"></label>
51	<label>Ease of use
52	<input name = "thingsliked" type = "checkbox" 53                     value = "Ease"></label>
54	<label>Images
55	<input name = "thingsliked" type = "checkbox" 56                     value = "Images"></label>
57	<label>Source code
58	<input name = "thingsliked" type = "checkbox" 59                     value = "Code"></label>
60	</p> 61
62	<!-- <input type = "radio"> creates a radio -->
63	<!-- button. The difference between radio buttons -->

Fig. 2.15  | Formusingavarietyofcomponents.(Part2of4.)
2.11 Forms	63


64	<!-- and checkboxes is that only one radio button --> 65	<!-- in a group can be selected. -->
66	<p>
67	<strong>How did you get to our site?:</strong><br> 68
69	<label>Search engine
70	<input name = "howtosite" type = "radio" 71                     value = "search engine" checked></label> 72               <label>Links from another site
73	<input name = "howtosite" type = "radio" 74                     value = "link"></label>
75	<label>Deitel.com Web site
76	<input name = "howtosite" type = "radio" 77                     value = "deitel.com"></label>
78	<label>Reference in a book
79	<input name = "howtosite" type = "radio" 80                     value = "book"></label>
81	<label>Other
82	<input name = "howtosite" type = "radio" 83                     value = "other"></label>
84	</p> 85
86	<p>
87	<label>Rate our site: 88
89	<!-- the <select> tag presents a drop-down --> 90	<!-- list with choices indicated by the -->
91	<!-- <option> tags --> 92                  <select name = "rating">
93	<option selected>Amazing</option> 94	<option>10</option>
95	<option>9</option> 96	<option>8</option> 97	<option>7</option> 98	<option>6</option> 99	<option>5</option> 100	<option>4</option> 101	<option>3</option> 102	<option>2</option> 103	<option>1</option>
104	<option>Awful</option> 105                 </select>
106	</label> 107           </p>
108
109	<p>
110	<input type = "submit" value = "Submit"> 111	<input type = "reset" value = "Clear"> 112           </p>
113	</form> 114     </body>
115 </html>

Fig. 2.15  | Formusingavarietyofcomponents.(Part3of4.)
64	Chapter2  IntroductiontoHTML5:Part1




























Fig. 2.15  | Formusingavarietyofcomponents.(Part4of4.)

The passwordinputin line 39 inserts a password box with the specified size(max-imum number of displayed characters). A password box allows users to enter sensitive infor-mation, such as credit card numbers and passwords, by “masking” the information input withasterisks(*).Theactualvalueinputissenttothewebserver,notthemaskingcharacters. Lines45–59 introducethe checkboxinputelement.checkboxesenableuserstoselect
an option. When a user selects a checkbox, a check mark appears in the checkbox. Other-wise, the checkboxremains empty. Each checkboxinputcreates a new checkbox. check-boxescanbeusedindividuallyoringroups.checkboxesthatbelongtoagroupareassigned the same name(in this case, "thingsliked").

Common Programming Error 2.1
When your formhas several checkboxes with the same name, make sure that they have different values, or the web server scripts will not be able to distinguish them.

After the checkboxes, we present two more ways to allow the user to make choices. In this example, we introduce two new inputtypes. The first is the radio button (lines 69– 83) specified with type radio. radiobuttons are similar to checkboxes, except that only oneradiobuttonin agroupofradiobuttonsmay beselectedatanytime.Theradiobut-tons in a group all have the same nameattributes and are distinguished by their different
2.12 InternalLinking	65


valueattributes. The attribute checked(line 71) indicates which radiobutton, if any, is selected initially. The checkedattribute also applies to checkboxes.

Common Programming Error 2.2
Not setting the nameattributes of the radiobuttons in a group to the same name is a logic error because it lets the user select all of the radiobuttons at the same time.

The selectelement (lines 92–105) provides a drop-down list from which the user can selectanitem.Thenameattributeidentifiesthedrop-downlist.Theoptionelements(lines 93–104) add items to the drop-down list. The optionelement’s selectedattribute speci-fies which item initially is displayed as the selected item in the select element. If no optionelement is marked as selected, the browser selects the first optionby default.

2.12 Internal Linking
Earlierinthechapter,wediscussedhowtohyperlinkonewebpagetoanother.Figure 2.16 introduces internal linking—a mechanism that enables the user to jump between loca-tions in the same document. Internal linking is useful for long documents that contain many sections. Clicking an internal link enables the user to find a section without scrolling through the entire document.

1  <!DOCTYPE html> 2
3  <!-- Fig. 2.16: internal.html --> 4  <!-- Internal Linking -->
5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Internal Links</title> 9     </head>
10
11	<body>
12	<!-- id attribute creates an internal hyperlink destination --> 13	<h1 id = "features">The Best Features of the Internet</h1>
14
15	<!-- an internal link's address is "#id" -->
16	<p><a href = "#bugs">Go to <em>Favorite Bugs</em></a></p> 17
18	<ul>
19	<li>You can meet people from countries 20               around the world.</li>
21	<li>You have access to new media as it becomes public: 22               <ul>
23	<li>New games</li> 24	<li>New applications 25                     <ul>
26	<li>For Business</li> 27	<li>For Pleasure</li> 28                     </ul>
29	</li>

Fig. 2.16  | Internalhyperlinkstomakepagesmorenavigable.(Part1of3.)
66	Chapter2  IntroductiontoHTML5:Part1


30
31	<li>Around the clock news</li> 32	<li>Search Engines</li>
33	<li>Shopping</li> 34	<li>Programming 35                     <ul>
36	<li>HTML5</li> 37	<li>Java</li>
38	<li>Dynamic HTML</li> 39	<li>Scripts</li>
40	<li>New languages</li> 41                     </ul>
42	</li> 43               </ul>
44	</li> 45
46	<li>Links</li>
47	<li>Keeping in touch with old friends</li> 48	<li>It is the technology of the future!</li> 49         </ul>
50
51	<!-- id attribute creates an internal hyperlink destination --> 52	<h1 id = "bugs">My 3 Favorite Bugs</h1>
53	<p>
54	<!-- internal hyperlink to features -->
55	<a href = "#features">Go to <em>Favorite Features</em></a> 56         </p>
57	<ol>
58	<li>Fire Fly</li> 59	<li>Gal Ant</li> 60	<li>Roman Tic</li> 61         </ol>
62	</body>
63  </html>

a)Browserbeforetheuserclickstheinternallink















Fig. 2.16  | Internalhyperlinkstomakepagesmorenavigable.(Part2of3.)
2.13 metaElements	67


b)Browseraftertheuserclickstheinternallink















Fig. 2.16  | Internalhyperlinkstomakepagesmorenavigable.(Part3of3.)

Line 13 contains a tag with the idattribute (set to "features") for an internal hyper-link. To link to a tag with this attribute inside the same web page, the hrefattribute of an anchor element includes the idattribute value, preceded by a pound sign (as in #fea-tures). Line 55 contains a hyperlink with the idfeaturesas its target. Clicking this hyperlink in a web browser scrolls the browser window to the h1tag in line 13. You may have to resize your browser to a small window and scroll down before clicking the link to see the browser scroll to the h1element.
A hyperlink can also reference an internal link in another document by specifying the document name followed by a pound sign and the idvalue, as in:

href = "filename.html#id"
For example, to link to a tag with the idattribute booklistin books.html, hrefis as-signed "books.html#booklist". You can send the browser to an internal link on another website by appending the pound sign and id value of an element to any URL, as in:

href = "URL/filename.html#id"

2.13 metaElements
Search engines catalog sites by following links from page to page (often known as spidering or crawling the site) and saving identification and classification information for each page. One way that search engines catalog pages is by reading the content in each page’s meta elements, which specify information about a document. Using the metaelement is one of many methods of search engine optimization (SEO)—the process of designing and tun-ing your website to maximize your findability and improve your rankings in organic (non-paid) search engine results.
Two important attributes of the metaelement are name, which identifies the type of metaelement, and content, which provides the information search engines use to catalog pages. Figure 2.17 introduces the metaelement.
68	Chapter2  IntroductiontoHTML5:Part1


1  <!DOCTYPE html> 2
3  <!-- Fig. 2.17: meta.html -->
4  <!-- meta elements provide keywords and a description of a page. --> 5  <html>
6	<head>
7	<meta charset = "utf-8"> 8	<title>Welcome</title> 9
10         <!-- <meta> tags provide search engines with --> 11         <!-- information used to catalog a site      -->
12	<meta name = "keywords" content = "web page, design, 13            HTML5, tutorial, personal, help, index, form,
14	contact, feedback, list, links, deitel">
15	<meta name = "description" content = "This website will 16            help you learn the basics of HTML5 and web page design 17            through the use of interactive examples and
18	instruction."> 19     </head>
20	<body>
21	<h1>Welcome to Our Website!</h1> 22
23	<p>We have designed this site to teach about the wonders 24	of <strong><em>HTML5</em></strong>. <em>HTML5</em> is
25	better equipped than <em>HTML</em> to represent complex 26	data on the Internet. <em>HTML5</em> takes advantage of 27	XML's strict syntax to ensure well-formedness. Soon you 28	will know about many of the great features of
29	<em>HTML5.</em></p> 30
31	<p>Have Fun With the Site!</p> 32     </body>
33  </html>












Fig. 2.17  | metaelementsprovidekeywordsandadescriptionofapage.

Lines 12–14 demonstrate a "keywords"metaelement. The contentattribute of such a metaelement provides search engines with a list of words that describe the page. These words are compared with words in search requests. Thus, including metaelements and their contentinformation can draw more viewers to your site.
2.14 WebResources   69


Lines 15–18 demonstrate a "description"metaelement. The contentattribute of such a metaelement provides a three- to four-line description of a site, written in sentence form. Search engines also use this description to catalog your site and sometimes display this information as part of the search results.

Software Engineering Observation 2.2
metaelements are not visible to users. They must be placed inside the headsection of your HTML5 document; otherwise they will not be read by search engines.

2.14 Web Resources www.deitel.com/html5
Visit our online HTML5 Resource Center to find categorized links to mostly free HTML5 intro-ductions,tutorials,demos,videos,documentation,books,blogs,forums,samplechaptersandmore.



Summary
Section 2.1 Introduction
•  HTML5 is a markup language that specifies the structure and content of documents that are dis-played in web browsers.

Section 2.2 Editing HTML5
•  Computers called web servers store HTML5 documents.
•  Clients (for example, web browsers running on your local computer or smartphone) request spe-cific resources (p. 38) such as HTML5 documents from web servers.

Section 2.3 First HTML5 Example
•  The document type declaration (DOCTYPE; p. 39) is required in HTML5 documents so that browsers render the page in standards mode (p. 39).
•  HTML5 comments (p. 39) always start with <!--(p. 39) and end with -->(p. 39). The browser ignores all text inside a comment.
•  The htmlelement (p. 40) encloses the head section (represented by the headelement; p. 40) and the body section (represented by the bodyelement; p. 40).
•  The head section contains information about the HTML5 document, such as its title (p. 40). It also can contain special document-formatting instructions called style sheets (p. 40) and client-side programs called scripts (p. 40) for creating dynamic web pages.
•  Thebody section contains the page’s content,whichthe browser displays when the user visits the web page.
•  HTML5 documents delimit an element with start and end tags. A start tag (p. 40) consists of the element name in angle brackets (for example, <html>). An end tag (p. 40) consists of the element name preceded by a forward slash (/) in angle brackets (for example, </html>).
•  The titleelement names a web page. The title usually appears in the colored bar (called the title bar; p. 40) at the top of the browser window and also appears as the text identifying a page when users add your page to their list of Favorites or Bookmarks.
•  The paragraph element (p. 40), denoted with <p>and </p>, helps define the structure of a doc-ument. All the text placed between the <p>and </p>tags forms one paragraph.
70	Chapter2  IntroductiontoHTML5:Part1


Section 2.4 W3C HTML5 Validation Service
•  You must use proper HTML5 syntax to ensure that browsers process your documents properly.
•  The World Wide Web Consortium (W3C) provides a validation service (validator.w3.org; p. 41) for checking a document’s syntax.

Section 2.5 Headings
•  HTML5 provides six heading elements (h1through h6; p. 41) for specifying the relative impor-tance of information. Heading element h1is considered the most significant and is rendered in a larger font than the other five. Each successive heading element (h2, h3, etc.) is rendered in a progressively smaller font.

Section 2.6 Linking
•  Hyperlinks (p. 42) reference (or link to) other resources, such as HTML5 documents and images.
•  The strongelement (p. 43) typically causes the browser to render text in a bold font.
•  Linksarecreatedusingthea(anchor)element(p. 43).The href(“hypertextreference”)attribute (p. 43) specifies the location of a linked resource, such as a web page, a file or an e-mail address.
•  Anchors can link to an e-mail address using a mailto:URL (p. 44). When someone clicks this typeofanchoredlink,mostbrowserslaunchthedefaulte-mailprogramtoinitiateane-mailmes-sage addressed to the linked address.

Section 2.7 Images
•  The imgelement’s (p. 46) srcattribute (p. 46) specifies an image’s location.
•  Every imgelement in an HTML5 document must have an altattribute (p. 47). If a browser can-not render an image, the browser displays the altattribute’s value.
•  The altattribute helps you create accessible web pages (p. 47) for users with disabilities, espe-cially those with vision impairments who use text-only browsers.
•  Void HTML5 elements (such as img; p. 47) contain only attributes, do not mark up text and do not have a closing tag.

Section 2.8 Special Characters and Horizontal Rules
•  HTML5 provides character entity references in the form &code;(p. 49) for representing charac-ters.
•  Most browsers render a horizontal rule (p. 51), indicated by the <hr>tag (a void element), as a horizontal line with a blank line above and below it.
•  Special characters can also be expressed as numeric character references (p. 51)—decimal or hexadecimal (hex; p. 51) values.
•  Most browsers render the delelement (p. 51) as strike-through text. With this format users can indicate document revisions.

Section 2.9 Lists
•  The unordered-list element ul(p. 51) creates a list in which each item begins with a bullet sym-bol (called a disc). Each entry in an unordered list is an li(list item) element (p. 51). Most web browsers render these elements on a new line with a bullet symbol indented from the beginning of the line.
•  Lists may be nested to represent hierarchical data relationships.
•  The ordered-list element ol(p. 52) creates a list in which each item begins with a number.
Summary   71


Section 2.10 Tables
•  Tables are frequently used to organize data into rows and columns. Tables are defined with the tableelement (p. 54).
•  The captionelement (p. 54)specifies a table’s title. The text insidethe <caption>tagis rendered above the table by most browsers. It’s good practice to include a general description of a table’s information in the table element’s summaryattribute—one of the many HTML5 features that make web pages more accessible to users with disabilities. Speech devices use this attribute to make the table more accessible to users with visual impairments.
•  A table has three distinct sections: head, body and foot (p. 56). The head section (or header cell) is defined with a theadelement (p. 56), which contains header information such as column names.
•  Each trelement (p. 56) defines an individual table row (p. 56). The columns in the head section are defined with thelements (p. 56).
•  The table body, defined in a tbodyelement (p. 56), contains the table’s primary data.
•  The foot section is defined with atfootelement (p. 56). Thetextplacedin thefooter commonly includes calculation results and footnotes.
•  You can create larger data cells using the attributes rowspan(p. 57) and colspan(p. 57). The val-ues assigned to these attributes specify the number of rows or columns occupied by a cell.
•  The brelement (p. 57) causes most browsers to render a line break (p. 57). Any markup or text following a brelement is rendered on the next line.

Section 2.11 Forms
•  HTML5 provides forms (p. 58) for collecting information from a user.
•  Forms can contain visual and nonvisual components. Visual components include clickable but-tons and other graphical user-interface components with which users interact. Nonvisual com-ponents, called hidden inputs (p. 61), store any data that you specify, such as e-mail addresses and HTML5 document file names that act as links.
•  A form is defined by a formelement (p. 60).
•  Nonvisual components, called hiddeninputs (p. 61), store any data that you specify. •  Attribute method(p. 60) specifies how the form’s data is sent to the web server.
•  Theactionattribute(p. 60)intheformelementspecifiestheURLofthescriptonthewebserver that will be invoked to process the form’s data.
•  The textinput (p. 61) inserts a text field into the form. Users can type data into text fields.
•  The inputelement’s  sizeattribute (p. 61) specifies the number of characters visible in the text field.Optionalattributemaxlength(p. 61)limitsthenumberofcharactersinputintothetextfield.
•  The submitinput (p. 61) is a button that, when pressed, sends the user to the location specified intheform’sattribute.Theresetinputelementsetsthetextdisplayedonthebutton(thedefault value is Reset if you omit the valueattribute).
•  The textareaelement (p. 61) inserts a multiline text area into a form. The number of rows is specified with the rowsattribute (p. 61) and the number of columns (i.e., characters per line) with the colsattribute (p. 61).
•  The passwordinput (p. 64) inserts a password box with the specified size(maximum number of characters allowed).
•  A password box allows users to entersensitive information, such as credit cardnumbers and pass-words, by “masking” the information input with asterisks (*). Asterisks are usually the masking character used for password boxes. The actual value input is sent to the web server, not the char-acters that mask the input.
72	Chapter2  IntroductiontoHTML5:Part1


•  checkboxes (p. 64) enable users to select from a set of options. When a user selects a checkbox, a check mark appears in the checkbox. Otherwise, the checkboxremains empty. checkboxes can be used individually or in groups. checkboxes that are part of the same group have the same name.
•  radiobuttons (p. 64) are similar to checkboxes, except that only one radiobutton in a group can be selected at any time. The radiobuttons in a group all have the same nameattribute and are distinguished by their different valueattributes.
•  The selectelement (p. 65) provides a drop-down list from which the user can select an item. The nameattribute identifies the drop-down list. The optionelement adds items to the drop-down list.

Section 2.12 Internal Linking
•  Internal linking (p. 67) is a mechanism that enables the user to jump between locations in the same document.
•  To link to a tag with its attribute inside the same web page, the hrefattribute of an anchor ele-ment includes the idattribute value preceded by a pound sign (as in #features).

Section 2.13 metaElements
•  Search engines catalog sites by following links from page to page (often known as spidering or crawling) and saving identification and classification information for each page.
•  One way that search engines catalog pages is by reading the content in each page’s metaelements (p. 67), which specify information about a document.
•  Two important attributes of the metaelement are name(p. 67), which identifies the type of meta element, and content(p. 67), which provides information search engines use to catalog pages.
•  The contentattribute of a keywordsmetaelement provides search engines with a list of words that describe the page. These words are compared with words in search requests.
•  The contentattribute of a descriptionmetaelement provides a three- to four-line description of a site, written in sentence form. Search engines also use this description to catalog your site and sometimes display this information as part of the search results.

Self-Review Exercises
2.1	 State whether each of the following is true or false. If false, explain why. a)  An ordered list cannot be nested inside an unordered list.
b)  Element brrepresents a line break.
c)   Hyperlinks are denoted by linkelements.
d)  The width of all data cells in a table must be the same.
e)   You’re limited to a maximum of five internal links per page.
2.2	Fill in the blanks in each of the following:
a)  The	element inserts a horizontal rule.
b)  A superscript is marked up using the	element, and a subscript is marked up using the	element.
c)   The least significant heading element is	and the most significant heading element is	.
d)  Element	marks up an unordered list. e)   Element	marks up a paragraph.
f)   The	attribute in an inputelement inserts a button that, when clicked, re-sets the contents of the form.
g)  The	element marks up a table row.
h)	are usually used as masking characters in a password box.
AnswerstoSelf-ReviewExercises   73


Answers to Self-Review Exercises
2.1	a) False. An ordered list can be nested inside an unordered list and vice versa. b) True. c) False. Hyperlinks are denoted by aelements. d) False. You can specify the width of any column, either in pixels or as a percentage of the table width. e) False. You can have an unlimited number of internal links.
2.2	a) hr. b) sup, sub. c) h6, h1. d) ul. e) p. f) type="reset". g) tr. h) Asterisks.

Exercises
2.3	Use HTML5 to create a document that contains the following text:
Internet and World Wide Web How to Program: Fifth Edition Welcome to the world of Internet programming. We have provided coverage for many Internet-related topics.
Use h1for the title (the first line of text), pfor text (the second and third lines of text). Insert a hor-izontal rule between the h1element and the pelement. Open your new document in a web browser to view the marked-up document.
2.4	An image named deitel.pngis 200 pixels wide and 150 pixels high. Write an HTML5 statement using the widthand heightattributes of the imgelement to perform eachof the following transformations:
a)  Increase the size of the image by 100 percent. b)  Increase the size of the image by 50 percent.
c)   Change the width-to-height ratio to 2:1, keeping the widthattained in part (a).
2.5	Create a link to each of the following:
a)  The file index.html, located in the filesdirectory.
b)  The file index.html, located in the textsubdirectory of the filesdirectory. c)   The file index.html, located in the otherdirectory in your parent directory.
[Hint:..signifies parent directory.]
d)  The President’s e-mail address (president@whitehouse.gov).
e)   The file named READMEin the pubdirectory of ftp.cdrom.com. [Hint: Use ftp://.]
2.6	Create an HTML5 document containing an ordered list of three items—ice cream, soft serve and frozen yogurt. Each ordered list should contain a nested, unordered list of your favorite flavors. Provide three flavors in each unordered list.
2.7	Create an HTML5 document that uses an image as an e-mail link. Use attribute altto pro-vide a description of the image and link.
2.8	Create an HTML5 document that contains links to your five favorite daily deals websites (possibly Groupon, Living Social, etc.). Your page should contain the heading “My Favorite Daily Deals Web Sites.” Click on each of these links to test your page.
2.9	Create an HTML5 document that contains an unordered list with links to all the examples presented in this chapter. [Hint: Place all the chapter examples in an examplesdirectory, then link to the files in that directory.]
2.10	Identify each of the following HTML5 items as either an element or an attribute: a)  html
b)  width c)   href d)  br
e)   h3
74	Chapter2  IntroductiontoHTML5:Part1


f)   a g)  src
2.11	State which of the following statements are true and which are false. If false, explain why. a)  A valid HTML5 document cannot contain uppercase letters in element names.
b)  HTML5 documents can have the file extension .htm.
c)   &less;is the character entity reference for the less-than (<) character.
d)  In a valid HTML5 document, <li>can be nested inside either <ol>or <ul>tags.
2.12	Fill in the blanks in each of the following:
a)  HTML5 comments begin with <!--and end with	. b)  In HTML5, attribute values can be enclosed in                    .
c)	is the character entity reference for an ampersand. d)  Element                     can be used to make text bold.
2.13	Categorize each of the following as an element or an attribute: a)  width
b)  td c)   th d)  name
e)   select f)   type
2.14     Create the HTML5 markup that produces the table shown in Fig. 2.18. Use <em> and <strong>tags as necessary. The image (camel.png) is included in the Chapter 2 examples directory.




















Fig. 2.18  | HTML5tableforExercise2.14.

2.15	Write an HTML5 document that produces the table shown in Fig. 2.19.
2.16	Alocal university has askedyoutocreatean HTML5 documentthatallows prospectivecol-lege students to providefeedback about their campus visit.Your HTML5 document should contain a form with text fields for a name and e-mail. Provide checkboxes that allow prospective students to
Exercises	75















Fig. 2.19  | HTML5tableforExercise2.15.

indicate what they liked most about the campus. The checkboxes should include: campus, students, location, atmosphere, dorm rooms and sports. Also, provide radio buttons that ask the prospective students how they became interested in the college. Options should include: friends, television, In-ternet and other. In addition, provide a text area for additional comments, a submit button and a reset button. Use post to sent the information in the form to http://www.deitel.com.
2.17	Create an HTML5 document titled “How to Get Good Grades.” Use <meta>tags to in-clude a series of keywords that describe your document.
3 Form ever follows function. —Louis Sullivan

I listen and give input only if somebody asks.
—Barbara Bush





IntroductiontoHTML5: Part2



Objectives Inthischapteryou’ll:
ÿ   Buildaformusingthenew
HTML5inputtypes.
ÿ   Specifyaninputelementin aformastheonethatshould
receivethefocusbydefault.
ÿ   Useself-validatinginput
elements.
ÿ   Specifytemporary placeholdertextin
variousinputelements
ÿ   Useautocompleteinput elementsthathelpusersre-entertextthatthey’ve
previouslyenteredinaform.
ÿ   Useadatalisttospecifya listofvaluesthatcanbe enteredinaninputelement andtoautocompleteentries
astheusertypes.
ÿ   UseHTML5’snewpage-structureelementsto delineatepartsofapage, includingheaders,sections, figures,articles,footersand
more.
3.1 Introduction	77



3.1  Introduction
3.2  NewHTML5ForminputTypes
3.2.1 inputTypecolor 3.2.2 inputTypedate 3.2.3 inputTypedatetime
3.2.4 inputTypedatetime-local 3.2.5 inputTypeemail
3.2.6 inputTypemonth 3.2.7 inputTypenumber 3.2.8 inputTyperange 3.2.9 inputTypesearch
3.2.10 inputTypetel 3.2.11 inputTypetime 3.2.12 inputTypeurl
3.2.13 inputTypeweek
3.3  inputanddatalistElementsand autocompleteAttribute
3.3.1 inputElementautocomplete
Attribute
3.3.2 datalistElement

3.4  Page-StructureElements
3.4.1 headerElement 3.4.2 navElement
3.4.3 figureElementandfigcaption
Element
3.4.4 articleElement
3.4.5 summaryElementanddetails
Element
3.4.6 sectionElement 3.4.7 asideElement 3.4.8 meterElement 3.4.9 footerElement
3.4.10 Text-LevelSemantics:markElement
andwbrElement


Summary | Self-Review Exercises | Answers to Self-Review Exercises | Exercises


3.1 Introduction
We now continue our presentation of HTML5 by discussing various new features, includ-ing:
•	 new input element types for colors, dates, times, e-mail addresses, numbers, ranges of integer values, telephone numbers, URLs, search queries, months and weeks—browsers that don’t support these input types simply render them as standard text inputelements
•	 autocompletion capabilities that help users quickly re-enter text that they’ve pre-viously entered in a form
•	datalists for providing lists of allowed values that a user can enter in an input element and for autocompleting those values as the user types
•	page-structure elements that enable you to delineate and give meaning to the parts of a page, such as headers, navigation areas, footers, sections, articles, asides, summaries/details, figures, figure captions and more
Support for thefeaturespresented in this chaptervaries amongbrowsers, so for oursample outputs we’ve used several browsers. We’ll discuss many more new HTML5 features throughout the remaining chapters.

3.2 New HTML5 Form inputTypes
Figure 3.1 demonstrates HTML5’s new form inputtypes. These are not yet universally supported by all browsers. In this example, we provide sample outputs from a variety of browsers so that you can see how the inputtypes behave in each.
78	Chapter3  IntroductiontoHTML5:Part2


1  <!DOCTYPE html> 2
3  <!-- Fig. 3.1: newforminputtypes.html -->
4  <!-- New HTML5 form input types and attributes. --> 5  <html>
6	<head>
7	<meta charset="utf-8">
8	<title>New HTML5 Input Types</title> 9     </head>
10
11	<body>
12	<h1>New HTML5 Input Types Demo</h1>
13	<p>This form demonstrates the new HTML5 input types
14	and the placeholder, required and autofocus attributes. 15         </p>
16
17	<form method = "post" action = "http://www.deitel.com"> 18            <p>
19	<label>Color:
20	<input type = "color" autofocus />
21	(Hexadecimal code such as #ADD8E6) 22               </label>
23	</p> 24	<p>
25	<label>Date:
26	<input type = "date" /> 27                     (yyyy-mm-dd)
28	</label> 29            </p>
30	<p>
31	<label>Datetime:
32	<input type = "datetime" />
33	(yyyy-mm-ddThh:mm+ff:gg, such as 2012-01-27T03:15) 34               </label>
35	</p> 36	<p>
37	<label>Datetime-local:
38	<input type = "datetime-local" />
39	(yyyy-mm-ddThh:mm, such as 2012-01-27T03:15) 40               </label>
41	</p> 42	<p>
43	<label>Email:
44	<input type = "email" placeholder = "name@domain.com" 45                     required /> (name@domain.com)
46	</label> 47            </p>
48	<p>
49	<label>Month:
50	<input type = "month" /> (yyyy-mm) 51               </label>
52	</p>
53	<p>

Fig. 3.1  | NewHTML5forminputtypesandattributes.(Part1of2.)
3.2 NewHTML5ForminputTypes	79


54	<label>Number:
55	<input type = "number" 56                     min = "0"
57	max = "7" 58	step = "1"
59	value = "4" />
60	</label> (Enter a number between 0 and 7) 61            </p>
62	<p>
63	<label>Range:
64	0 <input type = "range" 65                     min = "0"
66	max = "20"
67	value = "10" /> 20 68               </label>
69	</p> 70	<p>
71	<label>Search:
72	<input type = "search" placeholder = "search query" /> 73               </label> (Enter your search query here.)
74	</p> 75	<p>
76	<label>Tel:
77	<input type = "tel" placeholder = "(###) ###-####" 78                     pattern = "\(\d{3}\) +\d{3}-\d{4}" required /> 79                     (###) ###-####
80	</label> 81            </p>
82	<p>
83	<label>Time:
84	<input type = "time" /> (hh:mm:ss.ff) 85               </label>
86	</p> 87	<p>
88	<label>URL:
89	<input type = "url"
90	placeholder = "http://www.domainname.com" /> 91	(http://www.domainname.com)
92	</label> 93            </p>
94	<p>
95	<label>Week:
96	<input type = "week" />
97	(yyyy-Wnn, such as 2012-W01) 98               </label>
99	</p> 100	<p>
101	<input type = "submit" value = "Submit" /> 102	<input type = "reset" value = "Clear" /> 103           </p>
104	</form> 105     </body>
106 </html>

Fig. 3.1  | NewHTML5forminputtypesandattributes.(Part2of2.)
80	Chapter3  IntroductiontoHTML5:Part2


3.2.1 inputType color
The colorinputtype (Fig. 3.1, lines 20–21) enables the user to enter a color. At the time of this writing, most browsers render the colorinputtype as a text field in which the user can enter a hexadecamal code or a color name. In the future, when you click a color input, browsers will likely display a color picker similar to the Microsoft Windows color dialog shown in Fig. 3.2.














Fig. 3.2 | Adialogforchoosingcolors.

autofocusAttribute
The autofocusattribute (Fig. 3.1, line 20)—an optional attribute that can be used in only one inputelement on a form—automatically gives the focus to the inputelement, allowing the user to begin typing in that element immediately. Figure 3.3 shows auto-focus on the color element—the first input element in our form—as rendered in Chrome. You do not need to include autofocusin your forms.

















Fig. 3.3 | AutofocusinthecolorinputelementusingChrome.
3.2 NewHTML5ForminputTypes	81


Validation
Traditionally it’s been difficult to validate user input, such as ensuring that an e-mail ad-dress, URL, date or time is entered in the proper format. The new HTML 5 inputtypes are self validating on the client side, eliminating the need to add complicated JavaScript code to your web pages to validate user input, reducing the amount of invalid data sub-mitted and consequently reducing Internet traffic between the server and the client to cor-rect invalid input. The server should still validate all user input.
When a user enters data into a form then submits the form (in this example, by clicking the Submit button), the browser immediately checks the self-validating elements to ensure that the data is correct. For example, if a user enters an incorrect hexadecimal color value when using a browser that renders the colorelements as a text field (e.g., Chrome), a callout pointing to the element will appear, indicating that an invalid value was entered (Fig. 3.4). Figure 3.5 lists each of the new HTML5 inputtypes and provides examples of the proper formats required for each type of data to be valid.















Fig. 3.4 | ValidatingacolorinputinChrome.



inputtype

color
date
datetime
datetime-local
month
number
email
url
time
week

Format

Hexadecimal code yyyy-mm-dd
yyyy-mm-dd
yyyy-mm-ddThh:mm
yyyy-mm
Any numerical value name@domain.com
http://www.domainname.com
hh:mm
yyyy-Wnn


Fig. 3.5  | Self-validatinginputtypes.
82	Chapter3  IntroductiontoHTML5:Part2


If you want to bypass validation, you can add the formnovalidateattribute to input type submitin line 101:

<input type = "submit" value = "Submit" formnovalidate />

3.2.2 inputType date
The dateinputtype (lines 26–27) enables the user to enter a date in the form yyyy-mm-dd. Firefox and Internet Explorer display a text field in which a user can enter a date such as 2012-01-27. Chrome and Safari display a spinner control—a text field with an up-down arrow (   ) on the right side—allowing the user to select a date by clicking the up or down arrow. The start date is the current date. Opera displays a calendar from which you can choose a date. In the future, when the user clicks a dateinput, browsers are likely to display a date control similar to the Microsoft Windows one shown in Fig. 3.6.













Fig. 3.6 | Adatechoosercontrol.

3.2.3 inputType datetime
Thedatetimeinputtype(lines32–33)enablestheusertoenteradate(year,month,day), time (hour, minute, second, fraction of a second) and the time zone set to UTC (Coordi-nated Universal Time or Universal Time, Coordinated). Currently, most of the browsers render datetimeas a text field; Chrome renders an up-down control and Opera renders a date and time control. For more information on the datetimeinput type, visit:

www.w3.org/TR/html5/states-of-the-type-attribute.html# date-and-time-state

3.2.4 inputType datetime-local
The datetime-localinputtype (lines 38–39) enables the user to enter the date and time in a single control. The data is entered as year, month, day, hour, minute, second and frac-tion of a second. Internet Explorer, Firefox and Safari all display a text field. Opera displays a date and time control. For more information on the datetime-localinput type, visit:

www.w3.org/TR/html5/states-of-the-type-attribute.html# local-date-and-time-state
3.2 NewHTML5ForminputTypes	83


3.2.5 inputType email
The emailinputtype (lines 44–45) enables the user to enter an e-mail address or a list of e-mail addresses separated by commas (if the multipleattribute is specified). Currently, all of the browsers display a text field. If the user enters an invalid e-mail address (i.e., the text entered is not in the proper format) and clicks the Submit button, a callout asking the user to enter an e-mail address is rendered pointing to the input element (Fig. 3.7). HTML5 does not check whether an e-mail address entered by the user actually exists— rather it just validates that the e-mail address is in the proper format.










Fig. 3.7 | Validatingane-mailaddressinChrome.

placeholderAttribute
The placeholderattribute (lines 44, 72 and 77) allows you to place temporary text in a text field. Generally, placeholdertext is light gray and provides an example of the text and/or text format the user should enter (Fig. 3.8). When the focus is placed in the text field (i.e., the cursor is in the text field), the placeholdertext disappears—it’s not “sub-mitted” when the user clicks the Submit button (unless the user types the same text).


a)Textfieldwithgray placeholdertext




b)placeholder textdisappears whenthetext fieldgetsthe focus


Fig. 3.8 | placeholdertextdisappearswhentheinputelementgetsthefocus.

HTML5 supports placeholdertext for only six inputtypes—text, search, url, tel,emailandpassword.Becausetheuser’sbrowsermightnotsupportplaceholdertext, we’ve added descriptive text to the right of each inputelement.
84	Chapter3  IntroductiontoHTML5:Part2


requiredAttribute
The requiredattribute(lines45and78)forces theusertoentera valuebeforesubmitting the form. You can add requiredto any of the inputtypes. In this example, the user must enter an e-mail address and a telephone number before being able to submit the form. For example, if the user fails to enter an e-mail address and clicks the Submit button, a callout pointingto theempty element appears, asking the usertoenterthe information (Fig. 3.9).





















Fig. 3.9 | DemonstratingtherequiredattributeinChrome.

3.2.6 inputType month
The monthinputtype (line 50) enables the user to enter a year and month in the format yyyy-mm, such as 2012-01. If the user enters the data in an improper format (e.g., January 2012) and submits the form, a callout stating that an invalid value was entered appears.

3.2.7 inputType number
The numberinputtype (lines 55–59) enables the user to enter a numerical value—mobile browsers typically display a numeric keypad for this inputtype. Internet Explorer, Firefox and Safari display a text field in which the user can enter a number. Chrome andOpera ren-der a spinner control for adjusting the number. The minattribute sets the minimum valid number, in this case "0". The maxattribute sets the maximum valid number, which we set to "7". The stepattribute determines the increment in which the numbers increase. Forex-ample,wesetthestepto"1", sothenumberin thespinnercontrolincreasesordecreasesby one each time the up or down arrow, respectively, in the spinner control is clicked. If you change the stepattribute to "2", the number in the spinner control will increase or decrease by two each time the up or down arrow, respectively, is clicked. The valueattribute sets the initial value displayed in the form (Fig. 3.10). The spinner control includes only the valid
3.2 NewHTML5ForminputTypes	85


numbers. If the user attempts to enter an invalid value by typing in the text field, a callout pointing to the numberinputelement will instruct the user to enter a valid value.








Fig. 3.10  | inputtypenumberwithavalueattributeof4asrenderedinChrome.










Fig. 3.11  | Chromecheckingforavalidnumber.

3.2.8 inputType range
The rangeinputtype (lines 64–67) appears as a slider control in Chrome, Safari and Op-era (Fig. 3.12). You can set the minimum and maximum and specify a value. In our ex-ample, the minattribute is "0", the maxattribute is "20"and the valueattribute is "10", so the slider appears near the center of the range when the document is rendered. The rangeinputtype is inherently self-validating when it is rendered by the browser as a slider control, because the user is unable to move the slider outside the bounds of the minimum or maximum value. A rangeinputis more useful if the user can see the current value chang-ing while dragging the thumb—this can be accomplished with JavaScript, as you’ll learn later in the book.








Fig. 3.12  | rangesliderwithavalueattributeof10asrenderedinChrome.

3.2.9 inputType search
The searchinputtype (line 72) provides a search field for entering a query. This inputel-ement is functionally equivalent to an inputof type text. When the user begins to type in
86	Chapter3  IntroductiontoHTML5:Part2


the search field, Chrome and Safari display an X that can be clicked to clear the field (Fig. 3.13).








Fig. 3.13  | EnteringasearchqueryinChrome.

3.2.10 inputType tel
The telinputtype (lines 77–79) enables the user to enter a telephone number—mobile browsers typically display a keypad specific to entering phone numbers for this inputtype. At the time of this writing, the telinputtype is rendered as a text field in all of the brows-ers. The length and format of telephone numbers varies greatly based on location, making validation quite complex. HTML5 does not self validate the telinputtype. To ensure that the user enters a phone number in a proper format, we’ve added a patternattribute (line 79) that uses a regular expression to determine whether the number is in the format:

(555) 555-5555
When the user enters a phone number in the wrong format, a callout appears requesting the proper format, pointing to the telinputelement (Fig. 3.14). Visit www.regexlib.comfor asearchenginethathelpsyoufindalreadyimplementedregularexpressionsthatyoucanuse to validate inputs.










Fig. 3.14  | Validatingaphonenumberusingthepatternattributeinthetelinputtype.

3.2.11 inputType time
The timeinputtype (line 84) enables the user to enter an hour, minute, seconds and frac-tion of second (Fig. 3.15). The HTML5 specification indicates that a time must have two digits representing the hour, followed by a colon (:) and two digits representing the min-ute. Optionally, you can also include a colon followed by two digits representing the sec-onds and a period followed by one or more digits representing a fraction of a second (shown as ffin our sample text to the right of the time input element in Fig. 3.15.
3.3 inputanddatalistElementsandautocompleteAttribute	87









Fig. 3.15  | timeinputasrenderedinChrome.

3.2.12 inputType url
The urlinputtype (lines 89–91) enables the user to enter a URL. The element is ren-dered as a text field, and the proper format is http://www.deitel.com. If the user enters an improperly formatted URL (e.g., www.deitel.comor www.deitelcom), the URL will not validate (Fig. 3.16). HTML5 does not check whether the URL entered is valid; rather it validates that the URL entered is in the proper format.











Fig. 3.16  | ValidatingaURLinChrome.

3.2.13 inputType week
The weekinputtype enables the user to select a year and week number in the format yyyy-Wnn, where nn is 01–53—for example, 2012-W01represents the first week of 2012. Internet Explorer, Firefox and Safari render a text field. Chrome renders an up-down con-trol. Opera renders week control with a down arrow that, when clicked, brings up a calen-dar for the current month with the corresponding week numbers listed down the left side.


3.3 inputand datalistElements and autocomplete
Attribute
Figure 3.17 shows how to use the new autocompleteattribute and datalistelement.

3.3.1 inputElement autocompleteAttribute
The autocompleteattribute (line 18) can be used on inputtypes to automatically fill in the user’s information based on previous input—such as name, address or e-mail. You can enable autocompletefor an entire form or just for specific elements. For example, an on-
88	Chapter3  IntroductiontoHTML5:Part2


line order form might set automcomplete="on"for the name and address inputs and set autocomplete="off"for the credit card and password inputs for security purposes.

Error-Prevention Tip 3.1
Theautocompleteattributeworks onlyifyouspecifyanameoridattributefortheinput element.


1  <!DOCTYPE html> 2
3  <!-- Fig. 3.17: autocomplete.html -->
4  <!-- New HTML5 form autocomplete attribute and datalist element. --> 5  <html>
6	<head>
7	<meta charset="utf-8">
8	<title>New HTML5 autocomplete Attribute and datalist Element</title> 9     </head>
10
11	<body>
12	<h1>Autocomplete and Datalist Demo</h1>
13	<p>This form demonstrates the new HTML5 autocomplete attribute 14            and the datalist element.
15	</p> 16
17	<!-- turn autocomplete on -->
18	<form method = "post" autocomplete = "on"> 19            <p><label>First Name:
20	<input type = "text" id = "firstName"
21	placeholder = "First name" /> (First name) 22               </label></p>
23	<p><label>Last Name:
24	<input type = "text" id = "lastName"
25	placeholder = "Last name" /> (Last name) 26               </label></p>
27	<p><label>Email:
28	<input type = "email" id = "email"
29	placeholder = "name@domain.com" /> (name@domain.com) 30               </label></p>
31            <p><label for = "txtList">Birth Month: 32               <input type = "text" id = "txtList"
33	placeholder = "Select a month" list = "months" /> 34               <datalist id = "months">
35	<option value = "January"> 36	<option value = "February"> 37	<option value = "March">
38	<option value = "April"> 39	<option value = "May"> 40	<option value = "June"> 41	<option value = "July">
42	<option value = "August">
43	<option value = "September">
44	<option value = "October">

Fig. 3.17  | NewHTML5formautocompleteattributeanddatalistelement.(Part1of3.)
3.3 inputanddatalistElementsandautocompleteAttribute	89


45	<option value = "November"> 46	<option value = "December"> 47               </datalist>
48	</label></p>
49	<p><input type = "submit" value = "Submit" /> 50               <input type = "reset" value = "Clear" /></p> 51         </form>
52	</body>
53  </html>

a)Formrendered inFirefoxbefore theuserinteracts withit















b)autocomplete automaticallyfillsin thedatawhenthe userreturnstoa formsubmitted previouslyand beginstypinginthe First Name inputelement; clickingJane insertsthatvaluein theinput








Fig. 3.17  | NewHTML5formautocompleteattributeanddatalistelement.(Part2of3.)
90	Chapter3  IntroductiontoHTML5:Part2


c)autocomplete withadatalist showingthe previouslyentered value(June) followedbyallitems thatmatchwhatthe userhastypedsofar; clickinganiteminthe autocompletelist insertsthatvaluein theinput




datalist values filteredby what’sbeen typedsofar

Fig. 3.17  | NewHTML5formautocompleteattributeanddatalistelement.(Part3of3.)

3.3.2 datalistElement
The datalistelement (lines 32–47) provides input options for a textinputelement. At the time of this writing, datalistsupport varies by browser. In this example, we use a datalistelement to obtain the user’s birth month. Using Opera, when the user clicks in the text field, a drop-down list of the months of the year appears. If the user types "M"in the text field, the list on months is narrowed to March and May. When using Firefox, the drop-down list of months appears only after the user begins typing in the text field. If the user types "M", all months containing the letter "M"or "m"appear in the drop-down list— March, May, September, November and December.

3.4 Page-Structure Elements
HTML5introducesseveralnewpage-structureelements(Fig. 3.18) thatmeaningfully iden-tify areas of the page as headers, footers, articles, navigation areas, asides, figures and more.

1  <!DOCTYPE html> 2
3  <!-- Fig. 3.18: sectionelements.html --> 4  <!-- New HTML5 section elements. -->
5  <html>
6	<head>
7	<meta charset="utf-8">
8	<title>New HTML5 Section Elements</title>
9	</head>

Fig. 3.18  | NewHTML5sectionelements.(Part1of6.)
3.4 Page-StructureElements	91


10
11	<body>
12	<header> <!-- header element creates a header for the page --> 13            <img src = "deitellogo.png" alt = "Deitel logo" />
14	<h1>Welcome to the Deitel Buzz Online<h1> 15
16	<!-- time element inserts a date and/or time --> 17	<time>2012-01-17</time>
18
19	</header> 20
21	<section id = "1"> <!-- Begin section 1 -->
22	<nav> <!-- nav element groups navigation links  --> 23               <h2> Recent Publications</h2>
24	<ul>
25	<li><a href = "http://www.deitel.com/books/iw3htp5">
26	Internet & World Wide Web How to Program, 5/e</a></li> 27                  <li><a href = "http://www.deitel.com/books/androidfp/"> 28	Android for Programmers: An App-Driven Approach</a>
29	</li>
30	<li><a href = "http://www.deitel.com/books/iphonefp">
31	iPhone for Programmers: An App-Driven Approach</a></li> 32                  <li><a href = "http://www.deitel.com/books/jhtp9/">
33	Java How to Program, 9/e</a></li>
34	<li><a href = "http://www.deitel.com/books/cpphtp8/"> 35                     C++ How to Program, 8/e</a></li>
36	<li>
37	<a href = "http://www.deitel.com/books/vcsharp2010htp"> 38                         Visual C# 2010 How to Program, 4/e</a></li>
39	<li><a href = "http://www.deitel.com/books/vb2010htp"> 40                     Visual Basic 2010 How to Program</a></li>
41	</ul> 42            </nav> 43         </section> 44
45	<section id = "2"> <!-- Begin section 2 --> 46            <h2>How to Program Series Books</h2>
47	<h3><em>Java How to Program, 9/e</em></h3> 48
49	<figure> <!-- figure element describes the image -->
50	<img src = "jhtp.jpg" alt = "Java How to Program, 9/e" /> 51
52	<!-- figurecaption element inserts a figure caption --> 53	<figcaption><em>Java How to Program, 9/e</em>
54	cover.</figcaption> 55            </figure>
56
57	<!--article element represents content from another source --> 58	<article>
59	<header>
60	<h5>From 61                     <em>
62	<a href = "http://www.deitel.com/books/jhtp9/">

Fig. 3.18  | NewHTML5sectionelements.(Part2of6.)
92	Chapter3  IntroductiontoHTML5:Part2


63	Java How to program, 9/e: </a> 64                     </em>
65	</h5> 66               </header> 67
68	<p>Features include: 69                  <ul>
70	<li>Rich coverage of fundamentals, including 71                         <!-- mark element highlights text -->
72	<mark>two chapters on control statements.</mark></li> 73                     <li>Focus on <mark>real-world examples.</mark></li>
74	<li><mark>Making a Difference exercises set.</mark></li> 75	<li>Early introduction to classes, objects,
76	methods and strings.</li>
77	<li>Integrated exception handling.</li>
78	<li>Files, streams and object serialization.</li> 79	<li>Optional modular sections on language and
80	library features of the new Java SE 7.</li> 81                     <li>Other topics include: Recursion, searching, 82	sorting, generic collections, generics, data 83	structures, applets, multimedia,
84	multithreading, databases/JDBC&trade;, web-app 85	development, web services and an optional
86	ATM Object-Oriented Design case study.</li> 87                  </ul>
88
89	<!-- summary element represents a summary for the --> 90	<!-- content of the details element -->
91	<details>
92	<summary>Recent Edition Testimonials</summary> 93	<ul>
94	<li>"Updated to reflect the state of the 95                            art in Java technologies; its deep and 96                            crystal clear explanations make it
97	indispensable. The social-consciousness 98	[Making a Difference] exercises are
99	something really new and refreshing." 100	<strong>&mdash;Jos&eacute; Antonio 101	Gonz&aacute;lez Seco, Parliament of 102	Andalusia</strong></li>
103	<li>"Gives new programmers the benefit of the 104                           wisdom derived from many years of software 105                           development experience."<strong>
106	&mdash;Edward F. Gehringer, North Carolina 107	State University</strong></li>
108	<li>"Introduces good design practices and 109                           methodologies right from the beginning.
110	An excellent starting point for developing 111	high-quality robust Java applications." 112	<strong>&mdash;Simon Ritter,
113	Oracle Corporation</strong></li>
114	<li>"An easy-to-read conversational style.
115	Clear code examples propel readers to

Fig. 3.18  | NewHTML5sectionelements.(Part3of6.)
3.4 Page-StructureElements	93


116	become proficient in Java."
117	<strong>&mdash;Patty Kraft, San Diego State 118	University</strong></li>
119	<li>"A great textbook with a myriad of examples 120                           from various application domains&mdash;
121	excellent for a typical CS1 or CS2 course." 122	<strong>&mdash;William E. Duncan, Louisiana 123	State University</strong></li>
124	</ul> 125                 </details> 126              </p>
127	</article> 128
129	<!-- aside element represents content in a sidebar that’s --> 130	<!-- related to the content around the element -->
131	<aside>
132	The aside element is not formatted by the browsers. 133           </aside>
134
135	<h2>Deitel Developer Series Books</h2>
136	<h3><em>Android for Programmers: An App-Driven Approach 137              </em></h3>
138	Click <a href = "http://www.deitel.com/books/androidfp/"> 139	here</a> for more information or to order this book.
140
141	<h2>LiveLessons Videos</h2>
142	<h3><em>C# 2010 Fundamentals LiveLessons</em></h3>
143	Click <a href = "http://www.deitel.com/Books/LiveLessons/"> 144	here</a> for more information about our LiveLessons videos. 145        </section>
146
147	<section id = "3"> <!-- Begin section 3 --> 148           <h2>Results from our Facebook Survey</h2>
149	<p>If you were a nonprogrammer about to learn Java for the first 150              time, would you prefer a course that taught Java in the
151	context of Android app development? Here are the results from 152	our survey:</p>
153
154	<!-- meter element represents a scale within a range --> 155	0 <meter min = "0"
156	max = "54"
157	value = "14"></meter> 54
158	<p>Of the 54 responders, 14 (green) would prefer to
159	learn Java in the context of Android app development.</p> 160        </section>
161
162	<!-- footer element represents a footer to a section or page, --> 163	<!-- usually containing information such as author name, -->
164	<!-- copyright, etc. --> 165	<footer>
166	<!-- wbr element indicates the appropriate place to break a --> 167	<!-- word when the text wraps -->
168	<h6>&copy; 1992-2012 by Deitel &amp; Associ<wbr>ates, Inc.

Fig. 3.18  | NewHTML5sectionelements.(Part4of6.)
94	Chapter3  IntroductiontoHTML5:Part2


169	All Rights Reserved.<h6>
170	<!-- address element represents contact information for a --> 171	<!-- document or the nearest body element or article -->
172	<address>
173	Contact us at <a href = "mailto:deitel@deitel.com"> 174	deitel@deitel.com</a>
175	</address> 176        </footer> 177     </body>
178 </html>

a)Chromebrowser showingthe headerelement andanavelement thatcontainsan unorderedlistof links















b)Chromebrowser showingthe beginningofa sectioncontaining afigureanda figurecaption










Fig. 3.18  | NewHTML5sectionelements.(Part5of6.)
3.4 Page-StructureElements	95


c)Chromebrowser showinganarticle containingaheader, somecontentanda collapseddetails element,followedby anasideelement












d)Chromebrowser showingtheendof thesectionthat startedinpart(b)










e)Chromebrowser showingthelast section containingameter element,followedby afooterelement










Fig. 3.18  | NewHTML5sectionelements.(Part6of6.)
96	Chapter3  IntroductiontoHTML5:Part2


3.4.1 headerElement
The headerelement (lines 12–19) creates a header for this page that contains both text and graphics. The headerelement can be used multiple times on a page and can include HTML headings (<h1>through <h6>), navigation, images and logos and more. For an ex-ample, see the top of the front page of your favorite newspaper.

timeElement
The timeelement (line 17), which does not need to be enclosed in a header, enables you to identify a date (as we do here), a time or both.

3.4.2 navElement
Thenavelement (lines22–42) groupsnavigationlinks.Inthisexample,weusedthehead-ing Recent Publications and created a ulelement with seven lielements that link to the corresponding web pages for each book.

3.4.3 figureElement and figcaptionElement
The figureelement (lines 49–55) describes a figure (such as an image, chart or table) in the document so that it could be moved to the side of the page or to another page. The figureelementdoesnotincludeanystyling,butyoucanstyletheelementusingCSS.The figcaptionelement(lines53–54)providesacaptionfortheimageinthefigureelement.

3.4.4 articleElement
The articleelement (lines 58–127) describes standalone content that could potentially be used or distributed elsewhere, such as a news article, forum post or blog entry. You can nest articleelements. For example, you might have reader comments about a magazine nested as an articlewithin the magazine article.

3.4.5 summaryElement and detailsElement
The summaryelement (line 92) displays a right-pointing arrow next to a summary or cap-tion when the document is rendered in a browser (Fig. 3.19). When clicked, the arrow points downward and reveals the content in the detailselement (lines 91–125).

3.4.6 sectionElement
The sectionelement describes a section of a document, usually with a heading for each section—these elements can be nested. For example, you could have a sectionelement for a book, then nested sections for each chapter name in the book. In this example, we broke the document into three sections—the first is Recent Publications (lines 21–43). The sectionelement may also be nested in an article.

3.4.7 asideElement
The asideelement (lines 131–133) describes content that’s related to the surrounding content (such as an article) but is somewhat separate from the flow of the text. For ex-ample, an asidein a news story might include some background history. A print adver-tisement might include an asidewith product testimonials from users.
3.4 Page-StructureElements	97
























Fig. 3.19  | Demonstratingthesummaryanddetailelements.

3.4.8 meterElement
The meterelement (lines 155–157) renders a visual representation of a measure within a range (Fig. 3.20). In this example, we show the results of a recent web survey we did. The minattribute is "0"and a maxattribute is "54"—indicating the total number of responses to our survey. The valueattribute is "14", representing the total number of people who responded “yes” to our survey question.















Fig. 3.20  | Chromerenderingthemeterelement.
98	Chapter3  IntroductiontoHTML5:Part2


3.4.9 footerElement
The footerelement (lines 165–176) describes a footer—content that usually appears at the bottom of the content or sectionelement. In this example, we use the footerto de-scribe the copyright notice and contact information. You can use CSS3 to style the footer and position it on the page.

3.4.10 Text-Level Semantics: markElement and wbrElement
Themarkelement(lines72–74)highlightsthetextthat’senclosedintheelement.Thewbr element (line 168) indicates the appropriate place to break a word when the text wraps to multiple lines. You might use wbrto prevent a word from breaking in an awkward place.



Summary
Section 3.2 New HTML5 Form inputTypes
•  HTML5 introduces several new form inputtypes and attributes. These are not yet universally supported by all browsers.
•  The Opera browser offers robust support of the new inputtypes.
•  We provide sample outputs from a variety of browsers so that you can see how the inputtypes behave differently in each.

Section 3.2.1 inputType color
•  The colorinputtype (p. 80) enables the user to enter a color.
•  Most browsers render the colorinputtype as a text field in which the user can enter a hexadec-imal code.
•  In the future, when the user clicks a color input, browsers will likely display a dialog from which the the user can select a color.
•  The autofocusattribute (p. 80)—which can be used in only one inputelement on a form— places the cursor in the text field after the browser loads and renders the page. You do not need to include autofocusin your forms.
•  The new HTML 5 input types self validate on the client side, eliminating the need to add JavaScript code to validate user input and reducing the amount of invalid data submitted.
•  When a user enters data into a form then submits the form, the browser immediately checks that the data is correct.
•  If you want to bypass validation, you can add the formnovalidateattribute (p. 82) to inputtype submit.
•  Using JavaScript, we can customize the validation process.

Section 3.2.2 inputType date
•  The dateinputtype (p. 82) enables the user to enter a date in the format yyyy-mm-dd.
•  Firefox and Internet Explorer all display a text field in which a user can enter a date such as 2012-01-27.
•  Chrome and Safari display a spinner control (p. 82)—a text field with an up-down arrow (	) on the right side—allowing the user to select a date by clicking the up or down arrows.
•  Opera displays a calendar.
Summary   99


Section 3.2.3 inputType datetime
•  The datetimeinputtype (p. 82) enables the user to enter a date (year, month, day), time (hour, minute, second, fraction of a second) and the time zone set to UTC (Coordinated Universal Time or Universal Time, Coordinated).

Section 3.2.4 inputType datetime-local
•  The datetime-localinputtype (p. 82) enables the user to enter the date and time in a single control.
•  The date is entered as year, month, day, hour, minute, second and fraction of a second.

Section 3.2.5 inputType email
•  Theemailinputtype(p. 83)enables theusertoenterane-mailaddressorlistofe-mailaddresses separated by commas.
•  If the user enters an invalid e-mail address (i.e., the text entered is not in the proper format) and clicks the Submit button, a callout asking the user to enter an e-mail address is rendered pointing to the inputelement.
•  HTML5 does not validate whether an e-mail address entered by the user actually exists—rather it just validates that the information is in the proper format.
•  The placeholderattribute (p. 83) allows you to place temporary text in a text field. Generally, placeholdertextis light gray and provides an example of thetextandtextformattheusershould enter. When the focus is placed in the text field (i.e., the cursor is in the text field), the place-holdertext disappears—it’s not “submitted” when the user clicks the Submit button (unless the user types the same text).
•  Adddescriptivetexttotherightofeachinputelementincasetheuser’sbrowserdoesnotsupport placeholdertext.
•  The requiredattribute (p. 84) forces the user to enter a value before submitting the form.
•  You can add requiredto any of the inputtypes. If the user fails to fill enter a required item, a callout pointing to the empty element appears, asking the user to enter the information.

Section 3.2.6 inputType month
•  The monthinputtype (p. 84) enables the user to enter a year and month in the format yyyy-mm, such as 2012-01.
•  If the user enters a month in an improper format and clicks the Submit button, a callout stating that an invalid value was entered appears.

Section 3.2.7 inputType number
•  The numberinputtype (p. 84) enables the user to enter a numerical value.
•  The minattribute sets the minimum valid number, in this case "0".
•  The maxattribute sets the maximum valid number, which we set to "7".
•  The stepattribute determines the increment in which the numbers increase. For example, if we set the stepto "2", the number in the spinner control will increase or decrease by two each time the up or down arrow, respectively, in the spinner control is clicked.
•  The valueattribute sets the initial value displayed in the form.
•  The spinner control includes only the valid numbers. If the user attempts to enter an invalid val-ue by typing in the text field, a calloutpointing to the numberinputelementwill instructthe user to enter a valid value.
100	Chapter3 IntroductiontoHTML5:Part2


Section 3.2.8 inputType range
•  The rangeinputtype (p. 85) appears as a slider control in Chrome, Safari and Opera.
•  You can set the minimum and maximum and specify a value.
•  The slider appears at the value in the range when the HTML5 document is rendered.
•  The rangeinputtype is inherently self-validating when it’s rendered by the browser as a slider control, because the user is unable to move the slider outside the bounds of the minimum or maximum value.

Section 3.2.9 inputType search
•  The searchinputtype (p. 85) provides a search field for entering a query and is functionally equivalent to an input of type text.
•  When the user begins to type in the search field, Chrome and Safari display an X that can be clicked to clear the field.

Section 3.2.10 inputType tel
•  The telinputtype (p. 86) enables the user to enter a telephone number.
•  At the time of this writing, the telinputtype is rendered as a text field in all of the browsers.
•  The length and format of telephone numbers varies greatly based on location, making validation quite complex. HTML5 does not self validate the telinputtype. To ensure that the user enters a phone number in a proper format, you can use the patternattribute.
•  When the user enters a phone number in the wrong format, a callout requesting the proper for-mat appears, pointing to the telinputelement.

Section 3.2.11 inputType time
•  The timeinputtype (p. 86) enables the user to enter an hour, minute, second and fraction of a second.

Section 3.2.12 inputType url
•  The urlinputtype (p. 87) enables the user to enter a URL. The element is rendered as a text field. If the user enters an improperly formatted URL, it will not validate. HTML5 does not en-sure that the URL entered actually exists.

Section 3.2.13 inputType week
•  The weekinputtype (p. 87) enables the user to select a year and week number in the format yyyy-Wnn.
•  Opera renders week control with a down arrow that, when clicked, brings up a calendar control.

Section 3.3.1 inputElement autocompleteAttribute
•  The autocompleteattribute (p. 87) can be used on inputtypes to automatically fill in the user's information based on previous input.
•  You can enable autocompletefor an entire form or just for specific elements.

Section 3.3.2 datalistElement
•  The datalistelement (p. 90) provides input options for a textinputelement. The browser can use these options to display autocompleteoptions to the user.

Section 3.4 Page-Structure Elements
•  HTML5 introduces several new page structure elements.
Summary   101


Section 3.4.1 headerElement
•  The headerelement (p. 96) creates a header for the page that contains text, graphics or both.
•  The headerelement may be used multiple times on a page and often includes HTML headings. •  The timeelement (p. 96) enables you to identify a date, a time or both.

Section 3.4.2 navElement
•  The navelement (p. 96) groups navigation links.

Section 3.4.3 figureElement and figcaptionElement
•  The figureelement (p. 96) describes an image in the document so that it could be moved to the side of the page or to another page.
•  The figcaptionelement (p. 96) provides a caption for the image in the figureelement.

Section 3.4.4 articleElement
•  The articleelement (p. 96) describes content that’s separate from the main content of the page and might be used or distributed elsewhere, such as a news article, forum post or blog entry.
•  articleelements can be nested.

Section 3.4.5 summaryElement and detailsElement
•  The summaryelement (p. 96) displays a right-pointing arrow next to a summary or caption when the document is rendered in a browser. When clicked, the arrow points downward and reveals the content in the detailselement (p. 96).

Section 3.4.6 sectionElement
•  The sectionelement (p. 96) describes a section of a document, usually with a heading for each section.
•  sectionelements can be nested.

Section 3.4.7 asideElement
•  The asideelement (p. 96) describes content that’s related to the surrounding content (such as an article) but that’s somewhat separate from the flow of the text.
•  navelements can be nested in an asideelement.

Section 3.4.8 meterElement
•  The meterelement (p. 97) renders a visual representation of a measure within a range.
•  Useful meter attributes are min, max and value.

Section 3.4.9 footerElement
•  The footerelement (p. 98) describes a footer—content that usually appears at the bottom of the content or sectionelement.
•  You can use CSS3 to style the footer and position it on the page.

Section 3.4.10 Text-Level Semantics: markElement and wbrElement •  The markelement (p. 98) enables you to highlight text.
•  The wbrelement (p. 98) indicates the appropriate place to break a word when the text wraps to multiple lines. You might use wbrto prevent a word from breaking in an awkward place.
102	Chapter3 IntroductiontoHTML5:Part2


Self-Review Exercises
3.1	Fill in the blanks in each of the following:
a)  The colorinputtype enables the user to enter a color. At the time of this writing, most browsers render the color input type as a text field in which the user can enter a
.
b)  The	attribute allows you to place temporary text in a text field.
c)   If you want to bypass validation, you can add the formnovalidateattribute to input type	.
d)  The                     attribute forces the user to enter a value before submitting the form. e)   The                     control is typically displayed for the numberinputtype and includes
only the valid numbers.
f)   The	inputtype enables the userto enteran hour,minute,second and frac-tion of second.
g)  The	element provides input options for a textinputelement.
h)  The	elementdescribescontentthat’sseparatefromthemaincontentofthe page and could potentially be used or distributed elsewhere, such as a news article, fo-rum post or blog entry.
i)   The	element describes the text that usually appears at the bottom of the content or the bottom of a sectionelement.
j)   The	element indicates the appropriate place to break a word when the text wraps to multiple lines.
3.2	State whether each of the following is true or false. If false, explain why.
a)  Any particular HTML5 form inputtypes must render identically in every HTML5-compliant browser.
b)  When the focus is placed in the text field (i.e., the cursor is in the text field), the place-holdertext is submitted to the server.
c)   You do not need to include autofocusin your forms.
d)  The new HTML 5 inputtypes are self validating on the client side, eliminating the need to add complicated scripts to your forms to validate user input and reducing the amount of invalid data submitted.
e)   The rangeinputtype is inherently self-validating when it’s rendered by the browser as a slider control, because the user is unable to move the slider outside the bounds of the minimum or maximum value.
f)   HTML5 self validates the telinputtype.
g)  If the user enters an improperly formatted URL in a urlinputtype, it will not validate. HTML5 does not validate that the URL entered actually exists.
h)  The navelement displays a drop-down menu of hyperlinks. i)   The headerelement may be used only one time on a page. j)   navelements can be nested in an asideelement.
k)  You might use the brkto prevent awkward word breaks.


Answers to Self-Review Exercises
3.1	a)  hexadecimal  code.  b)  placeholder.  c)  submit.  d)  required.  e)  spinner.  f)  time. g) datalist. h) article. i) footer. j) wbr.
3.2	a) False. The rendering of inputtypes can vary among browsers. b) False. When the focus is placed in the text field, the placeholdertext disappears. It’s not “submitted” when the user clicks the Submit button (unless the user types the same text). c) True. d) True. e) True. f) False. The length and format of telephone numbers varies greatly based on location, making validation quite
Exercises   103


complex, so HTML5 does not self validate the telinputtype. To ensure that the user enters a phone number in a proper format, we use the patternattribute. g) True. h) False. The navelement groups navigation links. i) False. The headerelement may be used multiple times on a page and of-ten includes HTML headings (<h1>through <h6>) j) True. k) False. You might use the wbrto pre-vent awkward word breaks.

Exercises
3.3	Fill in the blanks in each of the following:
a)  The	attribute—used in a single inputelement on a form—automatically highlights the inputelement and, if appropriate, places the cursor in the text field after the browser loads and renders the page.
b)  The new HTML 5 inputtypes are	on the client side.
c)   The	inputtype enables the user to enter a numerical value.
d)  The	input type is inherently self-validating when it’s rendered by the browser as a slider control, because the user is unable to move the slider outside the bounds of the minimum or maximum value.
e)   The	attribute can be used on inputtypes to automatically fill in the user's information based on previous input.
f)   The	element provides a caption for the image in the figureelement.
g)  The summaryelement displays a right-pointing arrow next to a summary or caption when the document is rendered in a browser. When clicked, the arrow points down-ward and reveals the content in the	element.
h)  The markelement enables you to	.
3.4	State whether each of the following is true or false. If false, explain why.
a)  Browsers that render the colorinputtype as a text field require the user to enter a color name.
b)  When a user enters data into a form then submits the form (typically, by clicking the Submit button), the browser immediately checks that the data is correct.
c)   HTML5 can validate whether an e-mail address entered by the user actually exists. d)  You can add requiredto any of the inputtypes.
e)   You can enable autocompleteonly for specific inputelements.
f)   The timeelement enables you to indentify a date, a time or both.
g)  The captionelement provides a caption for the image in a figureelement.
h)  The details element displays a right-pointing arrow next to a summary or caption when the document is rendered in a browser. When clicked, the arrow points down-ward and reveals the content in the summaryelement.
i)   The footerelement describes content that usually appears at the bottom of the content or sectionelement.
j)   The highlightelement enables you to highlight text.
3.5	Write an HTML5 element (or elements) to accomplish each of the following tasks:
a)  Students were asked to rate the food in the cafeteria on a scale of 1 to 10. Use a meter element with text to its left and right to indicate that the average rating was 7 out of 10.
b)  Create a detailselement that displays the summarytext "SurveyResults"for Part (a). Whentheuserclicksthearrownexttothesummarytext,anexplanatoryparagraphabout the survey should be displayed.
c)   Create a textinputelement for a first name. The element should automatically receive the focus when the form is rendered in a browser.
d)  Modify Part (c) to eliminate the labelelement and use placeholdertext in the input element.
104	Chapter3 IntroductiontoHTML5:Part2


e)   Use a datalistto  provide an autocompletelist for five states.
f)   Create a rangeinput element that allows the user to select a number from 1 to 100.
g)  Specify that autocomplete should not be allowed for a form. Show only the form’s opening tag.
h)  Use a markelement to highlight the second sentence in the following paragraph.
<p>Students were asked to rate the food in the cafeteria on a scale of 1 to 10. The average result was 7.</p>
3.6	(WebsiteRegistrationFormwithOptionalSurvey)Createawebsiteregistrationformtoob-tain a user’s first name, last name and e-mail address. In addition, include an optional survey ques-tion that asks the user’s year in college (e.g., Freshman). Place the optional survey question in a detailselement that the user can expand to see the question.
3.7	(Creating an Autocomplete Form) Create a simple search form using a searchinputele-ment in which the user can enter a search query. Using the Firefox web browser, test the form by entering Januaryand submitting the form. Then enter a Jin the input element to see previous en-triesthatstartedwithJ—Januaryshouldbedisplayedbelowtheinputelement.Enter Juneandsub-mit the form again. Now enter a Jin the inputelement to see previous entries that started with J— Januaryand Juneshould be displayed below the inputelement. Try this with your own search que-ries as well.
3.8	(Creating an Autocomplete Form with a datalist) Create an autocompleteinputelement with an associated datalistthat contains the days of the week.
3.9	(Laying Out Book Pages in HTML5: Creating the Sections) Mark up the paragraph text from Section 3.2.1 of this chapter as a web page using page-structure elements. The text is provided in the exerciseTextAndImagesfolder with this chapter’s examples. Do not include the figures in this exercise.
3.10	(Laying Out Book Pages in HTML5: Adding Figures) Modify your solution to Exercise 3.9 to add the section’s graphics as figures. The images are provided in the exerciseTextAndImages folder with this chapter’s examples.
3.11	(Laying Out Book Pages in HTML5: Adding a detailsElement) Modify your solution to Exercise 3.10 to add the table in Fig. 3.5. Use the figure caption as the summaryand format the table as an HTML table element inside the detailselement.




IntroductiontoCascading
StyleSheets™(CSS):Part1

4 Fashions fade, style is eternal. —Yves Saint Laurent

How liberating to work in the margins, outside a central perception.
—Don DeLillo




Objectives Inthischapteryou’ll:
ÿ   Controlawebsite’s
appearancewithstylesheets.
ÿ   Useastylesheettogiveall thepagesofawebsitethe
samelookandfeel.
ÿ   Usetheclassattributeto
applystyles.
ÿ   Specifytheprecisefont,size, colorandotherpropertiesof
displayedtext.
ÿ   Specifyelementbackgrounds
andcolors.
ÿ   Understandtheboxmodel andhowtocontrolmargins,
bordersandpadding.
ÿ   Usestylesheetstoseparate
presentationfromcontent.
106	Chapter4 IntroductiontoCascadingStyleSheets™(CSS):Part1



4.1  Introduction 4.2  InlineStyles
4.3  EmbeddedStyleSheets 4.4  ConflictingStyles
4.5  LinkingExternalStyleSheets 4.6  PositioningElements:Absolute
Positioning,z-index
4.7  PositioningElements:Relative Positioning,span
4.8  Backgrounds

4.9  ElementDimensions 4.10  BoxModelandTextFlow
4.11  MediaTypesandMediaQueries 4.12  Drop-DownMenus
4.13  (Optional)UserStyleSheets 4.14  WebResources


Summary | Self-Review Exercise | Answers to Self-Review Exercises | Exercises



4.1 Introduction
In Chapters 2–3, we introduced HTML5 for marking up information to be rendered in a browser. In this chapter and Chapter 5, we shift our focus to formatting and presenting information. To do this, we use a W3C technology called Cascading Style Sheets 3 (CSS3) that allows you to specify the presentation of elements on a web page (e.g., fonts, spacing, sizes, colors, positioning) separately from the document’s structure and content (section headers, body text, links, etc.). This separation of structure from presentation simplifies maintaining and modifying web pages, especially on large-scale websites. In Chapter 5, we introduce many new features in CSS3.
HTML5 was designed to specify the content and structure of a document. Though HTML5 has some attributes that control presentation, it’s better not to mix presentation with content. If a website’s presentation is determined entirely by a style sheet, you can simply swap in a new style sheet to completely change the site’s appearance.
The W3C provides a CSS3 code validator at jigsaw.w3.org/css-validator/. This tool can help you make sure that your code is correct and will work on CSS3-compliant browsers. We’ve run this validator on every CSS3/HTML5 document in this book. For more CSS3 information, check out our CSS3 Resource Center at www.deitel.com/css3.

4.2 Inline Styles
You can declare document styles inline in the HTML5 markup, in embedded style sheets or in separate CSS files. This section presents inline styles that declare an individual ele-ment’s format using theHTML5 attributestyle. Inline styles override anyother styles ap-plied using the techniques we discuss later in the chapter. Figure 4.1 applies inline styles to pelements to alter their font size and color.

Software Engineering Observation 4.1 Inlinestylesdonottrulyseparatepresentationfromcontent.Toapplysimilarstylestomul-tipleelements,useembeddedstylesheetsor external stylesheets,introducedlaterin this chapter.
4.2 InlineStyles   107


1  <!DOCTYPE html> 2
3  <!-- Fig. 4.1: inline.html --> 4  <!-- Using inline styles --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Inline Styles</title> 9     </head>
10	<body>
11	<p>This text does not have any style applied to it.</p> 12
13	<!-- The style attribute allows you to declare --> 14	<!-- inline styles. Separate multiple -->
15	<!-- style properties with a semicolon. -->
16	<p style = "font-size: 20pt;">This text has the
17	<em>font-size</em> style applied to it, making it 20pt. 18         </p>
19
20	<p style = "font-size: 20pt; color: deepskyblue;"> 21            This text has the <em>font-size</em> and
22	<em>color</em> styles applied to it, making it 23	20pt and deep sky blue.</p>
24	</body>
25  </html>














Fig. 4.1  | Usinginlinestyles.

The first inline style declaration appears in line 16. Attribute stylespecifies an ele-ment’s style. Each CSS property (font-sizein this case) is followed by a colon and a value. In line 16, we declare this particular pelement to use a 20-point font size.
Line 20 specifies the two properties, font-sizeand color, separated by a semicolon. In this line, we set the given paragraph’s colorto deepskyblue. Hexadecimal codes may be used in place of color names. Figure 4.2 contains the HTML standard color set. We provide a list of extended hexadecimal color codes and color names in Appendix B. You can also find a complete list of HTML standard and extended colors at www.w3.org/TR/ css3-color/.
108	Chapter4 IntroductiontoCascadingStyleSheets™(CSS):Part1



Colorname

aqua
black
blue
fuchsia
gray
green
lime
maroon

Value

#00FFFF
#000000
#0000FF
#FF00FF #808080
#008000
#00FF00
#800000

Colorname

navy
olive
purple
red
silver
teal
yellow
white

Value

#000080
#808000
#800080
#FF0000
#C0C0C0
#008080
#FFFF00
#FFFFFF


Fig. 4.2 | HTMLstandardcolorsandhexadecimalRGBvalues.

4.3 Embedded Style Sheets
A second technique for using style sheets is embedded style sheets, which enable you to embed a CSS3 document in an HTML5 document’s headsection. Figure 4.3 creates an embedded style sheet containing four styles.

1  <!DOCTYPE html> 2
3  <!-- Fig. 4.3: embedded.html --> 4  <!-- Embedded style sheet. -->
5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Embedded Style Sheet</title> 9
10	<!-- this begins the style sheet section --> 11	<style type = "text/css">
12	em	{ font-weight: bold; 13                        color: black; }
14	h1	{ font-family: tahoma, helvetica, sans-serif; } 15	p	{ font-size: 12pt;
16	font-family: arial, sans-serif; } 17            .special { color: purple; }
18	</style> 19     </head>
20	<body>
21	<!-- this attribute applies the .special style class --> 22	<h1 class = "special">Deitel & Associates, Inc.</h1>
23
24	<p>Deitel & Associates, Inc. is an authoring and 25            corporate training organization specializing in
26	programming languages, Internet and web technology, 27	iPhone and Android app development, and object
28	technology education.</p>
29

Fig. 4.3 | Embeddedstylesheet.(Part1of2.)
4.3 EmbeddedStyleSheets   109


30	<h1>Clients</h1>
31         <p class = "special"> The company's clients include many 32            <em>Fortune 1000 companies</em>, government agencies,
33	branches of the military and business organizations.</p> 34     </body>
35  </html>














Fig. 4.3 | Embeddedstylesheet.(Part2of2.)

The styleElement and MIME Types
The styleelement (lines 11–18) defines the embedded style sheet. Styles placed in the head apply to matching elements wherever they appear in the body. The styleelement’s type attributespecifiestheMIME(MultipurposeInternetMailExtensions)typethatdescribes the style element’s content. CSS documents use the MIME type text/css. As of HTML5, the default typefor a styleelement is "text/css", so this attribute is no longer needed—we kept it here because you’ll see this used in legacy HTML code. Figure 4.4 lists common MIME types used in this book. For a complete list of MIME types, visit:

www.w3schools.com/media/media_mimeref.asp



MIMEtype

text/css
image/png
text/javascript
text/plain
image/jpeg
text/html

Description

CSS documents PNG images JavaScript markup Plain text
JPEG image
HTML markup


Fig. 4.4 | AfewcommonMIMEtypes.

The style sheet’s body (lines 12–17) declares the CSS rules for the style sheet. To achieve the separation between the CSS3 code and the HTML5 that it styles, we’ll use a CSS selector to specify the elements that will be styled according to a rule. Our first rule
110	Chapter4 IntroductiontoCascadingStyleSheets™(CSS):Part1


(line 12) begins with the selector em, which selects all emelements in the document. An em element indicates that its contents should be emphasized. Browsers usually render emele-ments in an italic font. Each rule’s body is enclosed in curly braces ({and }). CSS rules in embedded style sheets use the same syntax as inline styles; the property name is followed by a colon (:) and the property value. Multiple properties are separated by semicolons (;). The font-weightproperty in line 12 specifies the “boldness” of text. Possible values are bold, normal (the default), bolder (bolder than bold text) and lighter (lighter than normaltext). Boldness also can be specified with multiples of 100, from 100 to 900. Text specifiedasnormalisequivalentto400,andboldtextisequivalentto700.However,many systems do not have fonts that can scale with this level of precision, so using these numeric values might not display the desired effect.
In this example, all emelements will be displayed in a bold black font. We also apply styles to all h1and pelements (lines 14–16).

Style Classes
Line 17 declares a selector for a style class named special. Style-class declarations are pre-ceded by a period (.). They define styles that can be applied to any element. In this exam-ple,classspecialsetscolortopurple.We’llshowhowtoapplyastyleclassmomentarily. You can also declare idselectors. If an element in your page has an id, you can declare a selector of the form #elementId to specify that element’s style.

font-familyProperty
The font-familyproperty (line 14) specifies the name of the font to use. Not all users have thesamefontsinstalledontheircomputers,soCSSallowsyoutospecifyacomma-separated list of fonts to use for a particular style. The browser attempts to use the fonts in the order in which they appearin the list. It’s advisableto end a font list witha generic font family name in case the other fonts are not installed on the user’s computer (Fig. 4.5). In this example, if the tahomafont is not found on the system, the browser will look for the helveticafont. If neither is found, the browser will display its default sans-seriffont.


Genericfontfamilies

serif
sans-serif
cursive
fantasy
monospace

Examples

times new roman, georgia arial, verdana, futura
script
critter
courier fixedsys
,


Fig. 4.5 | Genericfontfamilies.

font-sizeProperty
Property font-size(line 15) specifies a 12-point font. Other possible measurements in addition to pt(point) are introduced in Section 4.4. Relative values—xx-small, x-small, small, smaller, medium, large, larger, x-largeand xx-large—also can be used. Gen-erally, relative font-sizevalues are preferred over points, because an author does not know the specific measurements of each client’s display. Relative values permit more flexible viewing of web pages. For example, users can change font sizes the browser displays for readability.
4.4 ConflictingStyles   111


A user may view a web page on a handheld device with a small screen. Specifying a fixed font size (such as 18pt) prevents the browser from scaling fonts. A relative font size, such as largeor large , allows the browser to determine the actual size of the text dis-played.Usingrelativesizesalsomakespagesmoreaccessibletouserswithdisabilities.Users with impaired vision, for example, may configure theirbrowser to use a larger default font, upon which all relative sizes are based. Text that the author specifies to be smallerthan the main text still displays in a smaller size font. Accessibility is an important consider-ation—in 1998, Congress passed the Section 508 Amendment to the Rehabilitation Act of 1973, mandating that websites of federal government agencies be accessible to disabled users. For more information, visit www.access-board.gov/508.htm.
r

Applying a Style Class
Line 22 uses the HTML5 attribute classin an h1element to apply a style class—in this case, the class named special(declared with the .specialselector in the style sheet on line 17). When the browser renders the h1element, the text appears on screen with the properties of bothan h1element (tahoma, helvetica or sans-seriffont defined in line 14) and the .specialstyle class applied (the color purpledefined in line 17). The browser also still applies its own default style to the h1element—the header is displayed in a large font size. Similarly, all emelements will still be italicized by the browser, but they will also be bold as a result of lines 12–13.
The formatting rules for both the pelement and the .specialclass are applied to the text in lines 31–33. In many cases, the styles applied to an element (the parent or ancestor element) also apply to the element’s nested elements (child or descendant elements). The emelementnestedinthepelementinline32inheritsthestylefromthepelement(namely, the 12-point font size in line 15) but retains its italic style. So styles defined for the para-graph and not defined for the emelement are still applied to this emelement that’s nested in the pelement. Multiple values of one property can be set or inherited on the same ele-ment, so the browser must reduce them to one value for that property per element before they’re rendered. We discuss the rules for resolving these conflicts in the next section.

4.4 Conflicting Styles
Styles may be defined by a user, an author or a user agent. A user is a person viewing your web page, you’re the author—the person who writes the document—and the user agent is the program used to render and display the document (e.g., a web browser).
•	Styles cascade (and hence the term “Cascading Style Sheets”), or flow together, such that the ultimate appearance of elements on a page results from combining styles defined in several ways.
•	Styles defined by the user take precedence over styles defined by the user agent. •	Styles defined by authors take precedence over styles defined by the user.
Most styles defined for parent elements are also inherited by child (nested) elements. This makes sense for most styles, such as font properties, but there are certain properties that you don’t want to be inherited. For example, the background-imageproperty allows youtosetanimageasthebackgroundofanelement.Ifthebodyelementisassignedaback-ground image, we don’t want the same image to be in the background of every element in the body of our page. Instead, the background-imageproperty of all child elements retains
112	Chapter4 IntroductiontoCascadingStyleSheets™(CSS):Part1


its default value of none. In this section, we discuss the rules for resolving conflicts between styles defined for elements and styles inherited from parent and ancestor elements.
Figure 4.3 contains an example of inheritancein whicha child emelement inherits the font-sizeproperty from its parent pelement. However, in Fig. 4.3, the child emelement has a colorproperty that conflicts with (i.e., has a different value than) the colorproperty of its parent pelement. Properties defined for child and descendant elements have a higher specificity than properties defined for parent and ancestor elements. Conflicts are resolved in favor of properties with a higher specificity, so the child’s styles take precedence. Figure 4.6 illustrates examples of inheritance and specificity.

1  <!DOCTYPE html> 2
3  <!-- Fig. 4.6: advanced.html -->
4  <!-- Inheritance in style sheets. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>More Styles</title> 9	<style type = "text/css">
10	body	{ font-family: arial, helvetica, sans-serif; } 11	a.nodec  { text-decoration: none; }
12	a:hover  { text-decoration: underline; } 13	li em   { font-weight: bold; }
14	h1, em   { text-decoration: underline; } 15	ul	{ margin-left: 20px; }
16	ul ul	{ font-size: .8em; } 17         </style>
18	</head> 19	<body>
20	<h1>Shopping list for Monday:</h1> 21
22	<ul>
23	<li>Milk</li> 24	<li>Bread
25	<ul>
26	<li>white bread</li> 27	<li>Rye bread</li>
28	<li>Whole wheat bread</li> 29               </ul>
30	</li>
31	<li>Carrots</li> 32	<li>Yogurt</li>
33	<li>Pizza <em>with mushrooms</em></li> 34         </ul>
35
36	<p><em>Go to the</em>
37	<a class = "nodec" href = "http://www.deitel.com"> 38               Grocery store</a>
39         </p> 40     </body>
41  </html>

Fig. 4.6  | Inheritanceinstylesheets.(Part1of2.)
4.4 ConflictingStyles   113














Grocerystorelink withnodecoration











Grocerystorelink withunderline displayedwhen userhoversover thelink

Fig. 4.6  | Inheritanceinstylesheets.(Part2of2.)

Line 11 applies property text-decorationto all aelements whose classattribute is set to nodec(line 37). The text-decorationproperty applies decorations to text in an element. By default, browsers underline the text of an a(anchor) element. Here, we set the text-decoration property to none to indicate that the browser should not underline hyperlinks. Other possible values for text-decorationinclude overline, line-through and underline. The .nodecappended to ais a more specific class selector; this style in line 11 applies only to a(anchor) elements that specify the nodecin their classattribute.

Portability Tip 4.1
To ensure that your style sheets work in various web browsers, test them on many client web browsers, and use the W3C CSS Validator.

Line 12 specifies a style for hover, which is a pseudo-class. Pseudo-classes give you access to information that’s not declared in the document, such as whether the mouse is hovering over an element or whether the user has previously clicked (visited) a particular
114	Chapter4 IntroductiontoCascadingStyleSheets™(CSS):Part1


hyperlink. The hover pseudo-class is activated dynamically when the user moves the mouse cursor over (that is, hovers over) an element. Pseudo-classes are separated by a colon (with no surrounding spaces) from the name of the element to which they’re applied.

Common Programming Error 4.1
Including a space before or after the colon separating a pseudo-class from the name of the element to which it’s applied prevents the pseudo-class from being applied properly.

Line13causesallemelementsthatarechildrenoflielementstobebold.Inthescreen output of Fig. 4.6, Go to the (contained in an emelement in line 36) does not appear bold, becausetheemelementisnotnestedinanlielement.However,theemelementcontaining with mushrooms (line 33) is nested in an lielement, so it’s formatted in bold. The syntax for applying rules to multiple elements is similar. In line 14, we separate the selectors with a comma to apply an underline style rule to all h1and all emelements.
Line 15 assigns a 20-pixel left margin to all ulelements. We’ll discuss the marginprop-erties in detail in Section 4.10. A pixel is a relative-length measurement—it varies in size, based on screen resolution. Other relative lengths include em(which, as a measurement, means the font’suppercaseM height—themost frequently usedfont measurement),ex(the font’s x-height—usually set to a lowercase x’s height) and percentages (e.g., font-size: 50%). To set an element to display text at 150 percent of its default text size, you could use

font-size: 1.5em
or

font-size: 150%
Other units of measurement available in CSS are absolute-length measurements—i.e., units that do not vary in size based on the system. These units are in(inches), cm(centi-meters), mm(millimeters), pt(points; 1 pt= 1/72 in) and pc(picas; 1 pc= 12 pt). Line 16 specifies that all nested unordered lists (ulelements that are descendants of ulelements) are to have font size .8em. [Note: When setting a style property that takes a measurement (e.g. font-size, margin-left), no units are necessary if the value is zero.]

Good Programming Practice 4.1
Whenever possible, use relative-length measurements. If you use absolute-length measure-ments, your document may not scale well on some client browsers (e.g., smartphones).

4.5 Linking External Style Sheets
Style sheets are a convenient way to create a document with a uniform theme. With exter-nal style sheets (i.e., separate documents that contain only CSS rules), you can provide a uniform look and feel to an entire website (or to a portion of one). You can also reuse the same external style sheet across multiple websites. Different pages on a site can all use the same style sheet. When changes to the styles are required, you need to modify only a single CSS file to make style changes across all the pages that use those styles. This concept is sometimes known as skinning. While embedded style sheets separate content from pre-sentation, both are still contained in a single file, preventing a web designer and a content author from conveniently working in parallel. External style sheets solve this problem by separating the content and style into separate files.
4.5 LinkingExternalStyleSheets   115


Figure 4.7 presents an external style sheet. Lines 1–2 are CSS comments. These may be placed in any type of CSS code (i.e., inline styles, embedded style sheets and external style sheets) and always start with /*and end with */. Text between these delimiters is ignored by the browser. The rules in this external style sheet are the same as those in the embedded style sheet in Fig. 4.6, lines 10–16.

1  /* Fig. 4.7: styles.css */ 2  /* External style sheet */
3  body	{ font-family: arial, helvetica, sans-serif; } 4  a.nodec  { text-decoration: none; }
5  a:hover  { text-decoration: underline; } 6  li em   { font-weight: bold; }
7  h1, em   { text-decoration: underline; } 8  ul	{ margin-left: 20px; }
9  ul ul   { font-size: .8em; }

Fig. 4.7  | Externalstylesheet.

Figure 4.8 contains an HTML5 document that references the external style sheet. Lines 9–10 show a link element that uses the rel attribute to specify a relationship between the current document and another document. Here, we declare the linked docu-ment to be a stylesheetfor this document. The typeattribute specifies the related doc-ument’s MIME type as text/css. The hrefattribute provides the style sheet document’s URL. Using just the file name styles.css, as we do here, indicates that styles.cssis in the same directory as external.html. The rendering results are the same as in Fig. 4.6.

1  <!DOCTYPE html> 2
3  <!-- Fig. 4.8: external.html -->
4  <!-- Linking an external style sheet. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Linking External Style Sheets</title> 9	<link rel = "stylesheet" type = "text/css"
10	href = "styles.css"> 11     </head>
12	<body>
13	<h1>Shopping list for <em>Monday</em>:</h1> 14
15	<ul>
16	<li>Milk</li> 17	<li>Bread
18	<ul>
19	<li>white bread</li> 20	<li>Rye bread</li>
21	<li>Whole wheat bread</li> 22               </ul>
23	</li>

Fig. 4.8 | Linkinganexternalstylesheet.(Part1of2.)
116	Chapter4 IntroductiontoCascadingStyleSheets™(CSS):Part1


24	<li>Carrots</li> 25	<li>Yogurt</li>
26	<li>Pizza <em>with mushrooms</em></li> 27         </ul>
28
29	<p><em>Go to the</em>
30	<a class = "nodec" href = "http://www.deitel.com"> 31               Grocery store</a>
32         </p> 33     </body>
34  </html>































Fig. 4.8  | Linkinganexternalstylesheet.(Part2of2.)

4.6 Positioning Elements: Absolute Positioning, z-index
Before CSS, controlling element positioning in HTML documents was difficult—the browser determined positioning. CSS introduced the positionproperty and a capability
4.6 PositioningElements:AbsolutePositioning,z-index   117


called absolute positioning, which gives you greater control over how document elements are displayed. Figure 4.9 demonstrates absolute positioning.

1  <!DOCTYPE html> 2
3  <!-- Fig. 4.9: positioning.html -->
4  <!-- Absolute positioning of elements. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Absolute Positioning</title> 9	<style type = "text/css">
10	.background_image { position: absolute; 11                                 top: 0px;
12	left: 0px;
13	z-index: 1; }
14	.foreground_image { position: absolute; 15                                 top: 25px;
16	left: 100px; 17	z-index: 2; }
18	.text	{ position: absolute; 19                                 top: 25px;
20	left: 100px; 21	z-index: 3;
22	font-size: 20pt;
23	font-family: tahoma, geneva, sans-serif; } 24         </style>
25	</head> 26	<body>
27	<p><img src = "background_image.png" class = "background_image" 28            alt = "First positioned image" /></p>
29
30	<p><img src = "foreground_image.png" class = "foreground_image" 31            alt = "Second positioned image" /></p>
32
33	<p class = "text">Positioned Text</p> 34     </body>
35  </html>













Fig. 4.9  | Absolutepositioningofelements.(Part1of2.)
118	Chapter4 IntroductiontoCascadingStyleSheets™(CSS):Part1













Fig. 4.9 | Absolutepositioningofelements.(Part2of2.)

Normally, elements are positioned on the page in the order in which they appear in the HTML5 document. Lines 10–13 define a style called background_imagefor the first imgelement (background_image.png) on the page. Specifying an element’s positionas absoluteremoves the element from the normal flow of elements on the page, instead positioning it according to the distance from the top, left, rightor bottommargins of its containing block-level element. This means that it’s displayed on its own line and has a virtual box around it. Some examples of block-level elements include section, div, p and heading elements (h1through h6). Here, we position the element to be 0pixels away from both the topand leftmargins of its containing element. In line 27, this style is applied to the image, which is contained in a pelement.
Thez-indexpropertyallowsyoutolayeroverlappingelements.Elementsthathavehigher z-indexvaluesaredisplayedinfrontofelementswithlowerz-indexvalues.Inthisexample, .background_image has the lowest z-index (1), so it displays in the background. The .foreground_imageCSS rule (lines 14–17) gives the circle image (foreground_image.png, in lines 30–31) a z-indexof 2, so it displays in front of background_image.png. The pele-ment in line 33 is given a z-indexof 3in line 21, so its content (PositionedText) displays in front of the other two. If you do not specify a z-indexor if elements have the same z-indexvalue, the elements are placed from background to foreground in the order in which they’re encountered in the document. The default z-indexvalue is 0.

4.7 Positioning Elements: Relative Positioning, span
Absolute positioning is not the only way to specify page layout. Figure 4.10 demonstrates relative positioning, in which elements are positioned relative to other elements.
Setting the positionproperty to relative, as in class super(lines 15–16), lays out the element on the page and offsets it by the specified top, bottom, leftor rightvalue. Unlike absolute positioning, relative positioning keeps elements in the general flow of ele-ments on the page, so positioning is relative to other elements in the flow. Recall that ex (line 16) is the x-height of a font, a relative-length measurement typically equal to the height of a lowercase x. Class super(lines 15–16) lays out the text at the end of the sen-tence as superscript, and class sub(lines 17–18) lays out the text as subscript relative to the other text. Class shiftleft(lines 19–20) shifts the text at the end of the sentence left and class shiftright(lines 21–22) shifts the text right.
4.7 PositioningElements:RelativePositioning,span   119


1  <!DOCTYPE html> 2
3  <!-- Fig. 4.10: positioning2.html -->
4  <!-- Relative positioning of elements. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Relative Positioning</title> 9	<style type = "text/css">
10	p	{ font-size: 1.3em;
11	font-family: verdana, arial, sans-serif; } 12            span        { color: red;
13	font-size: .6em; 14	height: 1em; }
15	.super	{ position: relative; 16                           top: -1ex; }
17	.sub	{ position: relative; 18                           bottom: -1ex; }
19	.shiftleft  { position: relative; 20                           left: -1ex; }
21	.shiftright { position: relative; 22                           right: -1ex; }
23	</style> 24     </head>
25	<body>
26	<p>The text at the end of this sentence
27	<span class = "super">is in superscript</span>.</p> 28
29	<p>The text at the end of this sentence
30	<span class = "sub">is in subscript</span>.</p> 31
32	<p>The text at the end of this sentence
33	<span class = "shiftleft">is shifted left</span>.</p> 34
35	<p>The text at the end of this sentence
36	<span class = "shiftright">is shifted right</span>.</p> 37     </body>
38  </html>

v












Fig. 4.10  | Relativepositioningofelements.
120	Chapter4 IntroductiontoCascadingStyleSheets™(CSS):Part1


Inline and Block-Level Elements
We introduce the spanelement in line 27. Lines 12–14 define the CSS rule for all span elements in this example. The span’s heightdetermines how much vertical space it will occupy. The font-sizedetermines the size of the text inside the span.
Element spanis a grouping element—by default, it does not apply any formatting to its contents. Its primary purpose is to apply CSS rules or idattributes to a section of text. Element spanis an inline-level element—it does not change the flow of elements in the document. Examples of inline elements include span, img, a, emand strong. The divele-ment is also a grouping element, but it’s a block-level element. We’ll discuss inline and block-level elements in more detail in Section 4.10.

4.8 Backgrounds
CSS provides control over the backgrounds of block-level elements. CSS can set a back-ground color or add background images to HTML5 elements. Figure 4.11 adds a corpo-rate logo to the bottom-right corner of the document. This logo stays fixed in the corner even when the user scrolls up or down the screen.

background-imageProperty
The background-imageproperty (line 10) specifies the image URL for the image lo-go.pngin the format url(fileLocation). You can also set the background-colorproperty (line 14) in case the image is not found (and to fill in areas the image does not cover).

1  <!DOCTYPE html> 2
3  <!-- Fig. 4.11: background.html -->
4  <!-- Adding background images and indentation --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Background Images</title> 9	<style type = "text/css">
10	body  { background-image: url(logo.png); 11                    background-position: bottom right; 12                    background-repeat: no-repeat;
13	background-attachment: fixed; 14	background-color: lightgrey; } 15            p     { font-size: 18pt;
16	color: Darkblue; 17	text-indent: 1em;
18	font-family: arial, sans-serif; } 19            .dark { font-weight: bold; }
20	</style> 21     </head>
22     <body> 23         <p>
24	This example uses the background-image,
25	background-position and background-attachment
26	styles to place the <span class = "dark">Deitel

Fig. 4.11  | Addingbackgroundimagesandindentation.(Part1of2.)
4.8 Backgrounds   121


27	& Associates, Inc.</span> logo in the
28	bottom-right corner of the page. Notice how the logo 29	stays in the proper position when you resize the
30	browser window. The background-color fills in where 31	there is no image.
32         </p> 33     </body>
34  </html>


















Fig. 4.11  | Addingbackgroundimagesandindentation.(Part2of2.)

background-positionProperty
The background-positionproperty (line 11)places the image on thepage. The keywords top, bottom, center, leftand rightare used individually or in combination for vertical andhorizontalpositioning.Youcanpositionanimageusing lengthsbyspecifyingthehor-izontal length followed by the vertical length. For example, to position the image as hori-zontally centered (positioned at 50 percent of the distance across the screen) and 30 pixels from the top, use

background-position: 50% 30px;

background-repeatProperty
Thebackground-repeatproperty (line12)controlsbackgroundimage tiling,whichplac-es multiple copies of the image next to each other to fill the background. Here, we set the tiling to no-repeatto display only one copy of the background image. Other values in-clude repeat(the default) to tile the image vertically and horizontally, repeat-xto tile the image only horizontally or repeat-yto tile the image only vertically.

background-attachment:fixedProperty
The next property setting, background-attachment:fixed(line 13), fixes the image in the position specified by background-position. Scrolling the browser window will not
122	Chapter4 IntroductiontoCascadingStyleSheets™(CSS):Part1


move the image from its position. The default value, scroll, moves the image as the user scrolls through the document.

text-indentproperty
Line 17 uses the text-indentproperty to indent the first line of text in the element by a specified amount, in this case 1em. You might use this property to create a web page that reads more like a novel, in which the first line of every paragraph is indented.

font-styleproperty
Another CSS property that formats text is the font-styleproperty, which allows you to set text to none, italic or oblique (oblique is simply more slanted than italic—the browser will default to italicif the system or font does not support oblique text).

4.9 Element Dimensions
In addition to positioning elements, CSS rules can specify the actual dimensions of each page element. Figure 4.12 demonstrates how to set the dimensions of elements.

1  <!DOCTYPE html> 2
3  <!-- Fig. 4.12: width.html -->
4  <!-- Element dimensions and text alignment. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Box Dimensions</title> 9	<style type = "text/css">
10	p { background-color: lightskyblue; 11                  margin-bottom: .5em;
12	font-family: arial, helvetica, sans-serif; } 13         </style>
14	</head> 15	<body>
16	<p style = "width: 20%">Here is some 17            text that goes in a box which is
18	set to stretch across twenty percent 19	of the width of the screen.</p>
20
21	<p style = "width: 80%; text-align: center">
22	Here is some CENTERED text that goes in a box
23	which is set to stretch across eighty percent of 24	the width of the screen.</section>
25
26	<p style = "width: 20%; height: 150px; overflow: scroll"> 27            This box is only twenty percent of
28	the width and has a fixed height.
29	What do we do if it overflows? Set the 30	overflow property to scroll!</p>
31	</body>
32  </html>

Fig. 4.12  | Elementdimensionsandtextalignment.(Part1of2.)
4.10 BoxModelandTextFlow	123




















Fig. 4.12  | Elementdimensionsandtextalignment.(Part2of2.)

Specifying the widthand heightof an Element
The inline style in line 16 illustrates how to set the widthof an element on screen; here, we indicate that the pelement should occupy 20 percent of the screen width. If not spec-ified, the width will fit the size of the browser window. The height of an element can be setsimilarly,usingtheheightproperty.Thewidthandheightvaluesalsocanbespecified as relative or absolute lengths. For example,

width: 10em
setstheelement’swidthto10timesthefont size.Thisworksonlyforblock-levelelements.

text-alignProperty
Most elements are left-aligned by default, but this alignment can be altered. Line 21 sets text in the element to be centeraligned; other values for the text-alignproperty include leftand right.

overflowProperty and Scroll Bars Inthethirdpelement,wespecifyapercentagewidthandapixelheight.Oneproblemwith setting both dimensions of an element is that the content inside the element can exceed the set boundaries, in which case the element is simply made large enough for all the content to fit. However, in line 26, we set the overflowproperty to scroll, a setting that adds scroll bars if the text overflows the boundaries.

4.10 Box Model and Text Flow
All block-level HTML5 elements have a virtual box drawn around them, based on what is known as the box model. When the browser renders an element using the box model, the content is surrounded by padding, a border and a margin (Fig. 4.13).
124	Chapter4 IntroductiontoCascadingStyleSheets™(CSS):Part1






Content



Fig. 4.13  | Boxmodelforblock-levelelements.


Padding
Border
Margin


CSS controls the border using three properties: border-width, border-colorand border-style. We illustrate these properties in Fig. 4.14.

1  <!DOCTYPE html> 2
3  <!-- Fig. 4.14: borders.html -->
4  <!-- Borders of block-level elements. --> 5  <html>
6	<head>
7	<meta charset = "utf-8"> 8	<title>Borders</title>
9	<style type = "text/css">
10	div	{ text-align: center; 11                       width: 50%;
12	position: relative; 13	left: 25%;
14	border-width: 6px; } 15            .thick  { border-width: thick; }
16	.medium { border-width: medium; } 17	.thin   { border-width: thin; } 18	.solid { border-style: solid; } 19	.double { border-style: double; } 20	.groove { border-style: groove; } 21	.ridge  { border-style: ridge; } 22	.dotted { border-style: dotted; } 23	.inset  { border-style: inset; } 24	.outset { border-style: outset; } 25	.dashed { border-style: dashed; } 26	.red	{ border-color: red; }
27	.blue   { border-color: blue; } 28         </style>
29	</head> 30	<body>
31	<div class = "solid">Solid border</div><hr> 32	<div class = "double">Double border</div><hr> 33	<div class = "groove">Groove border</div><hr> 34	<div class = "ridge">Ridge border</div><hr> 35	<div class = "dotted">Dotted border</div><hr> 36	<div class = "inset">Inset border</div><hr>
37	<div class = "thick dashed">Thick dashed border</div><hr>
38	<div class = "thin red solid">Thin red solid border</div><hr>

Fig. 4.14  | Bordersofblock-levelelements.(Part1of2.)
4.10 BoxModelandTextFlow	125


39	<div class = "medium blue outset">Medium blue outset border</div> 40     </body>
41  </html>



















Fig. 4.14  | Bordersofblock-levelelements.(Part2of2.)

The border-widthproperty may be set to any valid CSS length (e.g., em, ex, px) or to the predefined value of thin, mediumor thick. The border-colorproperty sets the color. [Note: This property has different meanings for different border styles—e.g., some display the border color in multiple shades.] The border-styleoptions are none, hidden, dotted, dashed, solid, double, groove, ridge, insetand outset. Borders grooveand ridgehave opposite effects, as do insetand outset. When border-style is set to none, no border is rendered. Each border property may be set for an individual side of the box (e.g., border-top-styleor border-left-color).

Floating Elements
We’ve seen with absolute positioning that it’s possible to remove elements from the normal flow of text. Floating allows you to move an element to one side of the screen; other content inthedocumentthenflows aroundthefloatedelement.Figure 4.15demonstrateshowfloat-ing elements and the box model can be used to control the layout of an entire page.
Looking at the HTML5 code, we can see that the general structure of this document consists of a headerand two main sections. Each section contains an h1subheading and a paragraph of text.
Block-level elements (such as sections) render with a line break before and after their content, so the headerand two sections will render vertically one on top of another. In the absence of our styles, the h1s that represent our subheadings would also stack vertically on top of the text in the ptags. However, in line 24 we set the floatproperty to rightin the class floated, which is applied to the h1headings. This causes each h1to float to the right edge of its containing element, while the paragraph of text will flow around it.
126	Chapter4 IntroductiontoCascadingStyleSheets™(CSS):Part1


1  <!DOCTYPE html> 2
3  <!-- Fig. 4.15: floating.html --> 4  <!-- Floating elements. -->
5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Flowing Text Around Floating Elements</title> 9	<style type = "text/css">
10	header   { background-color: skyblue; 11                        text-align: center;
12	font-family: arial, helvetica, sans-serif; 13	padding: .2em; }
14	p	{ text-align: justify;
15	font-family: verdana, geneva, sans-serif; 16	margin: .5em; }
17	h1	{ margin-top: 0px; }
18	.floated { background-color: lightgrey; 19                        font-size: 1.5em;
20	font-family: arial, helvetica, sans-serif; 21	padding: .2em;
22	margin-left: .5em; 23	margin-bottom: .5em; 24	float: right;
25	text-align: right; 26	width: 50%; }
27	section  { border: 1px solid skyblue; } 28         </style>
29	</head> 30	<body>
31	<header><img src = "deitel.png" alt = "Deitel" /></header> 32	<section>
33	<h1 class = "floated">Corporate Training and Authoring</h1> 34	<p>Deitel & Associates, Inc. is an internationally
35	recognized corporate training and authoring organization 36	specializing in programming languages, Internet/web
37	technology, iPhone and Android app development and
38	object technology education. The company provides courses 39	on Java, C++, C#, Visual Basic, C, Internet and web
40	programming, Object Technology and iPhone and Android 41	app development.</p>
42	</section> 43	<section>
44	<h1 class = "floated">Programming Books and Videos</h1> 45	<p>Through its publishing
46	partnership with Pearson, Deitel & Associates,
47	Inc. publishes leading-edge programming textbooks, 48	professional books and interactive web-based and DVD 49	LiveLessons video courses.</p>
50	</section> 51     </body>
52  </html>

Fig. 4.15  | Floatingelements.(Part1of2.)
4.11 MediaTypesandMediaQueries   127




















Fig. 4.15  | Floatingelements.(Part2of2.)

marginand paddingProperties
Line 16 assigns a margin of .5emto all paragraph elements. The marginproperty sets the space between the outside of an element’s border and all other content on the page. Line 21 assigns .2emof padding to the floated h1s. The paddingproperty determines the dis-tance between the content inside an element and the inside of the element’s border. Mar-gins for individual sides of an element can be specified (lines 17, 22 and 23) by using the properties margin-top, margin-right, margin-leftand margin-bottom. Padding can be specified in the same way, using padding-top, padding-right, padding-leftand pad-ding-bottom. To see the effects of margins and padding, try putting the margin and pad-ding properties inside comments and observing the difference.
In line 27, we assign a border to the sectionboxes using a shorthand declaration of the border properties, which allow you to define all three border properties in one line. The syntax for this shorthand is

border: width  style  color
Our border is one pixel thick, solid, and the same color as the background-colorprop-erty of the header(line 10). This allows the border to blend with the headerand makes the page appear as one box with a line dividing its sections.

4.11 Media Types and Media Queries
CSS media types allow you to decide what a page should look like, depending on the kind of media being used to display the page. The most common media type for a web page is the screenmedia type, which is a standard computer screen. Other media types in CSS include handheld, braille, speechand print. The handheldmedium is designed for mobile Internet devices such as smartphones, while brailleis for machines that can read or print web pages in braille. speechstyles allow you to give a speech-synthesizing web
128	Chapter4 IntroductiontoCascadingStyleSheets™(CSS):Part1


browser more information about the content of a page. The printmedia type affects a web page’s appearance when it’s printed. For a complete list of CSS media types, see
http://www.w3.org/TR/REC-CSS2/media.html#media-types
Media types allow you to decide how a page should be presented on any one of these media without affecting the others. Figure 4.16 gives a simple classic example that applies one set of styles when the document is viewed on all media (including screens) other than a printer,andanotherwhenthedocumentisprinted.Toseethedifference,lookatthescreen captures below the paragraph or use the Print Preview feature in your browser if it has one.

1  <!DOCTYPE html> 2
3  <!-- Fig. 4.16: mediatypes.html --> 4  <!-- CSS media types. -->
5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Media Types</title> 9	<style type = "text/css">
10	@media all 11	{
12	body  { background-color: steelblue; }
13	h1	{ font-family: verdana, helvetica, sans-serif; 14                        color: palegreen; }
15	p	{ font-size: 12pt; 16                        color: white;
17	font-family: arial, sans-serif; } 18            } /* End @media all declaration. */
19	@media print 20	{
21	body  { background-color: white; } 22	h1	{ color: seagreen; }
23	p	{ font-size: 14pt; 24                        color: steelblue;
25	font-family: "times new roman", times, serif; } 26            } /* End @media print declaration. */
27	</style> 28     </head>
29	<body>
30	<h1>CSS Media Types Example</h1> 31
32	<p>
33	This example uses CSS media types to vary how the page 34	appears in print and how it appears on any other media. 35	This text will appear in one font on the screen and a 36	different font on paper or in a print preview. To see 37	the difference in Internet Explorer, go to the Print
38	menu and select Print Preview. In Firefox, select Print 39	Preview from the File menu.
40         </p> 41     </body>
42  </html>

Fig. 4.16  | CSSmediatypes. (Part1of2.)
4.11 MediaTypesandMediaQueries   129



a)Backgroundcolorappearsonthescreen.












b)Backgroundcolorissettowhitefortheprintmediatype.













Fig. 4.16  | CSSmediatypes. (Part2of2.)

Inline10,webeginablockofstylesthatappliestoallmediatypes,declaredby@media alland enclosed in curly braces ({and }). In lines 10–18, we define some styles for all media types. Lines 19–26 set styles to be applied only when the page is printed.
The styles we applied for all media types look nice on a screen but would not look good on a printed page. A colored background would use a lot of ink, and a black-and-white printer may print a page that’s hard to read because there isn’t enough contrast between the colors.

Look-and-Feel Observation 4.1
Pages with dark background colors and light text use a lot of ink and may be difficult to read when printed, especially on a black-and white-printer. Use the printmedia type to avoid this.

Look-and-Feel Observation 4.2
In general, sans-serif fonts look better on a screen, while serif fonts look better on paper. The printmedia type allows your web page to display a sans-serif font on a screen and change to a serif font when it’s printed.
130	Chapter4 IntroductiontoCascadingStyleSheets™(CSS):Part1


To solve these problems, we apply specificstyles forthe printmedia type. We change the body’s background-color, the colorof the h1tag, and the font-size, color, and font-familyof the ptag to be more suited for printing and viewing on paper. Notice that most of these styles conflict with the declarations in the section for all media types. Since the printmedia type has higher specificity than the allmedia type, the printstyles over-ride the allmedia type’s styles when the page is printed. The h1’s font-familyproperty is not overridden in the printsection, so it retains its old value when the page is printed.

Media Queries
Media queries (covered in detail in Section 5.17) allow you to format your content to spe-cific output devices. Media queries include a media type and expressions that check the media features of the output device. Some of the common media features include:
•	width—the width of the part of the screen on which the document is rendered, including any scrollbars
•	height—the height of the part of the screen on which the document is rendered, including any scrollbars
•	device-width—the width of the screen of the output device
•	device-height—the height of the screen of the output device
•	orientation—if the heightis greater than the width, orientationis portrait, and if the widthis greater than the height, orientationis landscape
•	aspect-ratio—the ratio of widthto height
•	device-aspect-ratio—the ratio of device-widthto device-height
For a complete list of media features and for more information on media queries, see

http://www.w3.org/TR/css3-mediaqueries/

4.12 Drop-Down Menus
Drop-downmenusareagoodwaytoprovidenavigationlinkswithoutusingalotofscreen space. In this section, we take a second look at the :hoverpseudo-class and introduce the displayproperty to create a simple drop-down menu using CSS3 and HTML5.
We’ve already seen the :hoverpseudo-class used to change a link’s style when the mouse hovers over it. We’ll use this feature in a more advanced way to cause a menu to appear when the mouse hovers over a menu button. Another important property is display, which allows you to decide whether an element is rendered on the page or not. Possible values include block, inlineand none. The blockand inlinevalues display the element as a block element or an inline element, while nonestops the element from being rendered. The code for the drop-down menu is shown in Fig. 4.17.

1  <!DOCTYPE html> 2
3  <!-- Fig. 4.17: dropdown.html -->
4  <!-- CSS drop-down menu. -->

Fig. 4.17  | CSSdrop-downmenu. (Part1of3.)
4.12 Drop-DownMenus   131


5  <html>
6	<head>
7	<meta charset = "utf-8"> 8	<title>
9	Drop-Down Menu 10         </title>
11	<style type = "text/css">
12	body	{ font-family: arial, sans-serif } 13	nav	{ font-weight: bold;
14	color: white;
15	border: 2px solid royalblue; 16	text-align: center;
17	width: 10em;
18	background-color: royalblue; } 19            nav ul          { display: none;
20	list-style: none; 21	margin: 0;
22	padding: 0; } 23            nav:hover ul    { display: block }
24	nav ul li	{ border-top: 2px solid royalblue; 25                               background-color: white;
26	width: 10em;
27	color: black; }
28	nav ul li:hover { background-color: powderblue; } 29	a	{ text-decoration: none; }
30	</style> 31     </head>
32	<body>
33	<nav>Menu 34            <ul>
35               <li><a href = "#">Home</a></li> 36               <li><a href = "#">News</a></li>
37	<li><a href = "#">Articles</a></li> 38	<li><a href = "#">Blog</a></li>
39	<li><a href = "#">Contact</a></li> 40            </ul>
41	</nav> 42     </body>
43  </html>

a)Acollapsedmenu










Fig. 4.17  | CSSdrop-downmenu. (Part2of3.)
132	Chapter4 IntroductiontoCascadingStyleSheets™(CSS):Part1



b)Adrop-downmenu isdisplayedwhenthe mousecursoris hoveredoverMenu








c)Hoveringthemouse cursoroveramenulink highlightsthelink









Fig. 4.17  | CSSdrop-downmenu. (Part3of3.)

Lines 33–41 create a navelement containing the the text Menuand an unordered list (ul)of fivelinksthat shouldappearin thedrop-down menu—Home,News,Articles, Blog and Contact. Initially, Menuis the only text visible on the page. When the mouse cursor hovers over the navelement, the five links appear below the menu.
The drop-down menu functionality is located in the CSS3 code. Two lines define the drop-down functionality. Line 19 sets displayto nonefor any unordered list (ul) that’s nested in a nav. This instructs the browser not to render the ul’s contents. Line 23, which is similar to line 19, selects only ulelements nested in a navelement that currently has the mouse hovering over it. Setting displayto blockspecifies that when the mouse is over the nav, the ulwill be displayed as a block-level element.
The style in line 28 is applied only to a lielement that’s a child of a ulelement in a navelement, and only when that lihas the mouse cursor over it. This style changes the background-colorof the currently highlighted menu option. The rest of the CSS simply adds style to the menu’s components.
This drop-down menu is just one example of more advanced CSS formatting. Many additional resources are available online for CSS navigation menus and lists.

4.13 (Optional) User Style Sheets
Users can define their own user style sheets to format pages based on their preferences. For example, people with visual impairments may want to increase the page’s text size. You
4.13 (Optional)UserStyleSheets   133


needtobecarefulnottoinadvertentlyoverrideuserpreferenceswithdefinedstyles.Thissection discusses possible conflicts between author styles and user styles. For the purpose of this section, we demonstrate the concepts in Internet Explorer 9.
Figure 4.18 contains an author style. The font-sizeis set to 9ptfor all <p>tags that have class noteapplied to them.

1  <!DOCTYPE html> 2
3  <!-- Fig. 4.18: user_absolute.html --> 4  <!-- pt measurement for text size. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>User Styles</title> 9	<style type = "text/css">
10	.note { font-size: 9pt; } 11         </style>
12	</head> 13	<body>
14	<p>Thanks for visiting my website. I hope you enjoy it. 15	</p><p class = "note">Please Note: This site will be
16	moving soon. Please check periodically for updates.</p> 17     </body>
18  </html>








Fig. 4.18  | ptmeasurementfortextsize.

User style sheets are external style sheets. Figure 4.19 shows a user style sheet that sets the body’s font-sizeto 20pt, colorto yellowand background-colorto navy. The font-size value specified in the user style sheet conflicts with the one in line 10 of Fig. 4.18.

1  /* Fig. 4.19: userstyles.css */ 2  /* A user style sheet */
3  body	{ font-size: 20pt; 4              color: yellow;
5	background-color: navy; }

Fig. 4.19  | Auserstylesheet.

Adding a User Style Sheet
User style sheets are not linked to a document; rather, they’re set in the browser’s options. To add a user style sheet in IE9, select Internet Options..., located in the Tools menu. In
134	Chapter4 IntroductiontoCascadingStyleSheets™(CSS):Part1


the Internet Options dialog (Fig. 4.20) that appears, click Accessibility..., check the Format documents using my style sheet checkbox, and type the location of the user style sheet. IE9 applies the user style sheet to any document it loads. To add a user style sheet in Firefox, find your Firefox profile using the instructions at www.mozilla.org/support/firefox/ profile#locateand place a style sheet called userContent.cssin the chromesubdirec-tory. For information on adding a user style sheet in Chrome, see www.google.com/ support/forum/p/Chrome/thread?tid=1fa0dd079dbdc2ff&hl=en.































Fig. 4.20  | UserstylesheetinInternetExplorer9.

The web page from Fig. 4.18 is displayed in Fig. 4.21, with the user style sheet from Fig. 4.19 applied.

Defining font-sizein a User Style Sheet
In the preceding example, if the user defines font-sizein a user style sheet, the author style has a higher precedence and overrides the user style. The 9ptfont specified in the au-thorstylesheetoverridesthe20ptfontspecifiedintheuserstylesheet.Thissmallfontmay
4.13 (Optional)UserStyleSheets   135










Fig. 4.21  | Userstylesheetappliedwithptmeasurement.

make pages difficult to read, especially for individuals with visual impairments. You can avoid this problem by using relativemeasurements (e.g.,emorex) instead of absolutemea-surements, such as pt. Figure 4.22 changes the font-sizeproperty to use a relative mea-surement (line 10) that does not override the user style set in Fig. 4.19. Instead, the font size displayed is relative to the one specified in the user style sheet. In this case, text en-closedin the <p>tagdisplays as20pt, and <p>tags that havethe class noteappliedtothem are displayed in 15pt(.75times 20pt).

1  <!DOCTYPE html> 2
3  <!-- Fig. 4.22: user_relative.html --> 4  <!-- em measurement for text size. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>User Styles</title> 9	<style type = "text/css">
10	.note { font-size: .75em; } 11         </style>
12	</head> 13	<body>
14	<p>Thanks for visiting my website. I hope you enjoy it. 15	</p><p class = "note">Please Note: This site will be
16	moving soon. Please check periodically for updates.</p> 17     </body>
18  </html>








Fig. 4.22  | emmeasurementfortextsize.

Figure 4.23 displays the web page from Fig. 4.22 in Internet Explorer with the user style sheet from Fig. 4.19 applied. Note that the second line of text displayed is larger than the same line of text in Fig. 4.21.
136	Chapter4 IntroductiontoCascadingStyleSheets™(CSS):Part1












Fig. 4.23  | Userstylesheetappliedwithemmeasurement.

4.14 Web Resources http://www.deitel.com/css3
The Deitel CSS3 Resource Center contains links to some of the best CSS3 information on the web. There you’ll find categorized links to tutorials, references, code examples, demos, videos, and more. Check out the demos section for more advanced examples of layouts, menus and other web-page components.






Summary
Section 4.1 Introduction
•  Cascading Style Sheets™ 3 (CSS3; p. 106) allows you to specify the presentation of elements on a web page (e.g., fonts, spacing, sizes, colors, positioning) separately from the structure and con-tent of the document (section headers, body text, links, etc.).
•  This separation of structure from presentation (p. 106) simplifies maintaining and modifying web pages, especially on large-scale websites.

Section 4.2 Inline Styles
•  An inline style (p. 106) allows you to declare a style for an individual element by using the style attribute (p. 106) in the element’s start tag.
•  Each CSS property (such as font-size, p. 107) is followed by a colon and the value of the attri-bute. Multiple property declarations are separated by a semicolon.
•  The colorproperty (p. 107) sets text color. Hexadecimal codes or color names may be used.

Section 4.3 Embedded Style Sheets
•  Embedded style sheets (p. 108) enable you to embed an entire CSS3 document in an HTML5 document’s head section.
•  Stylesthat areplacedin astyleelement useselectors(p. 109) to apply styleelements throughout the entire document body.
•  An emelement indicates that its contents should be emphasized. Browsers usually render emele-ments in an italic font.
Summary   137


•  styleelement attribute typespecifies the MIME type (the specific encoding format, p. 109) of the style sheet. Style sheets use text/css.
•  Each rule body (p. 109) in a style sheet begins and ends with a curly brace ({and }).
•  Thefont-weightproperty(p. 110)specifiesthe“boldness”oftext.Possiblevalues are bold,nor-mal(the default), bolder(bolder than bold text) and lighter(lighter than normaltext).
•  Boldness also can be specified with multiples of 100, from 100 to 900. Text specified as normal is equivalent to 400, and boldtext is equivalent to 700.
•  Style-class declarations are preceded by a period and are applied to elements of the specific class. The classattribute (p. 111) applies a style class to an element.
•  The CSS rules in a style sheet use the same format as inline styles.
•  The background-colorattribute specifies the background color of the element.
•  The font-familyproperty (p. 110) names a specific font that should be displayed. Generic font families allow authors to specify a type of font instead of a specific one, in case a browser does not support a specific font.
•  The font-sizeproperty (p. 110) specifies the size used to render the font.
•  You should end a font list with a generic font family (p. 110) name in case the other fonts are not installed on the user’s computer.
•  Inmanycases,thestylesappliedtoanelement(theparentor ancestorelement,p. 111)alsoapply to the element’s nested elements (child or descendant elements, p. 111).

Section 4.4 Conflicting Styles
•  Styles may be defined by a user, an author or a user agent. A user (p. 111) is a person viewing your web page, you’re the author (p. 111)—the person who writes the document—and the user agent (p. 111) is the program used to render and display the document (e.g., a web browser).
•  Styles cascade (hence the term “Cascading Style Sheets,” p. 111), or flow together, such that the ultimate appearance of elements on a page results from combining styles defined in several ways.
•  Most styles are inherited from parent elements (p. 111). Styles defined for children (p. 111) have higher specificity (p. 112) and take precedence over the parent’s styles.
•  Pseudo-classes (p. 113) give the author access to information that’s not declared in the docu-ment, such as whether the mouse is hovering over an element or whether the user has previously clicked (visited) a particular hyperlink. The hoverpseudo-class (p. 114) is activated when the user moves the mouse cursor over an element.
•  The text-decorationproperty (p. 113) applies decorations to textin an element, such as under-line, overlineand line-through.
•  To apply rules to multiple elements, separate the elements with commas in the style sheet.
•  To apply rules only to a certain type of element that’s a child of another type, separate the ele-ment names with spaces.
•  A pixel is a relative-length measurement (p. 114): It varies in size based on screen resolution. Other relative lengths are em(p. 114), ex(p. 114) and percentages.
•  The other units of measurement available in CSS are absolute-length measurements (p. 114)— that is, units that do not vary in size. These units can be in(inches), cm(centimeters, p. 114), mm (millimeters, p. 114), pt(points; 1 pt= 1/72 in, p. 114) or pc(picas; 1 pc= 12 pt).

Section 4.5 Linking External Style Sheets
•  With external style sheets (i.e., separate documents that contain only CSS rules; p. 114), you can provide a uniform look and feel to an entire website (or to a portion of one).
138	Chapter4 IntroductiontoCascadingStyleSheets™(CSS):Part1


•  When you need to change styles, you need to modify only a single CSS file to make style changes across all the pages that use those styles. This is sometimes known as skinning (p. 114).
•  CSS comments (p. 115) may be placed in any type of CSS code (i.e., inline styles, embedded style sheets and external style sheets) and always start with /*and end with */.
•  link’s relattribute (p. 115) specifies a relationship between two documents (p. 115). For style sheets, the relattribute declares the linked document to be a stylesheet(p. 115) for the docu-ment. The typeattribute specifies the MIME type of the related document as text/css. The hrefattribute provides the URL for the document containing the style sheet.

Section 4.6 Positioning Elements: Absolute Positioning, z-index
•  The CSS positionproperty (p. 116) allows absolute positioning (p. 117), which provides great-er control over where on a page elements reside. Specifying an element’s positionas absolute removes it from the normal flow of elements on the page and positions it according to distance from the top, left, rightor bottommargin of its parent element.
•  The z-indexproperty (p. 118) allows a developer to layer overlapping elements. Elements that have higher z-indexvalues are displayed in front of elements with lower z-indexvalues.

Section 4.7 Positioning Elements: Relative Positioning, span
•  Unlike absolute positioning, relative positioning keeps elements in the general flow on the page and offsets them by the specified top, left, rightor bottomvalue.
•  Elementspan(p. 120)isagroupingelement(p. 120)—itdoesnotapplyanyinherentformatting to its contents. Its primary purpose is to apply CSS rules or idattributes to a section of text.
•  spanis an inline-level element (p. 120)—it applies formatting to text without changing the flow of the document. Examples of inline elements include span, img, a, emand strong.
•  The divelement is also a grouping element, but it’s a block-level element. This means it’s dis-played on its own line and has a virtual box around it. Examples of block-level elements (p. 120) include div(p. 120), pand heading elements (h1through h6).

Section 4.8 Backgrounds
•  Property background-imagespecifies the URL of the image, in the format url(fileLocation). The property background-position(p. 121) places the image on the page using the values top, bot-tom, center, left and right individually or in combination for vertical and horizontal positioning. You can also position by using lengths.
•  The background-repeatproperty (p. 121) controls the tiling of the background image (p. 121). Setting the tiling to no-repeatdisplays one copy of the background image on screen. The back-ground-repeatproperty can be set to repeat(the default) to tile the image vertically and horizon-tally,torepeat-xtotiletheimageonlyhorizontallyortorepeat-ytotiletheimageonlyvertically.
•  The background-attachment(p. 121) setting fixedfixes the image in the position specified by background-position. Scrolling the browser window will not move the image from its set posi-tion. The default value, scroll, moves the image as the user scrolls the window.
•  The text-indentproperty (p. 122) indents the first line of text in the element by the specified amount.
•  The font-styleproperty (p. 122) allows you to set text to none, italicor oblique.

Section 4.9 Element Dimensions
•  An element’s dimensions can be set with CSS by using properties heightand width(p. 123).
•  Text in an element can be centered using text-align(p. 123); other values for the text-align property are leftand right.
Summary   139


•  A problem with setting both vertical and horizontal dimensions of an element is that the content inside the element might sometimes exceed the set boundaries, in which case the element grows to fit the content. You can set the overflowproperty (p. 123) to scroll; this setting adds scroll bars if the text overflows the boundaries set for it.

Section 4.10 Box Model and Text Flow
•  Allblock-levelHTML5elementshaveavirtualboxdrawnaroundthem,basedonwhatisknown as the box model (p. 123).
•  When the browser renders elements using the box model, the content of each element is sur-rounded by padding (p. 123), a border (p. 123) and a margin (p. 123).
•  The border-widthproperty (p. 124) may be set to any of the CSS lengths or to the predefined value of thin, mediumor thick.
•  The border-styles (p. 124) available are none, hidden, dotted, dashed, solid, double, groove, ridge, insetand outset.
•  The border-colorproperty (p. 124) sets the color used for the border.
•  The classattribute allows more than one class to be assigned to an element by separating each class name from the next with a space.
•  Browsers normally place text and elements on screen in the order in which they appear in the document. Elements can be removed from the normal flow of text. Floating allows you to move an element to one side of the screen; other content in the document will then flow around the floated element.
•  CSS uses a box model to render elements on screen. The content of each element is surrounded by padding, a border and margins. The properties of this box are easily adjusted.
•  The marginproperty (p. 127) determines the distance between the outside edge of the element’s border and any adjacent element.
•  Margins for individual sides of an element can be specified by using margin-top, margin-right, margin-leftand margin-bottom.
•  The paddingproperty (p. 127) determines the distance between the content inside an element and the inside edge of the border. Padding also can be set for each side of the box by using pad-ding-top, padding-right, padding-leftand padding-bottom.

Section 4.11 Media Types and Media Queries
•  CSS media types (p. 127) allow you to decide what a page should look like depending on the kind of media being used to display the page. The most commonly used for a web page is the screenmedia type (p. 127), which is a standard computer screen.
•  A block of styles that applies to all media types is declared by @media alland enclosed in curly braces. To create a block of styles that apply to a single media type such as print, use @media printand enclose the style rules in curly braces.
•  OthermediatypesinCSS2includehandheld,braille,auralandprint.Thehandheldmedium (p. 127) is designed for mobile Internet devices, while braille(p. 127) is for machines that can read or print web pages in braille. auralstyles (p. 127) allow the programmer to give a speech-synthesizingweb browsermoreinformation aboutthecontentofthewebpage.Theprintmedia type (p. 127) affects a web page’s appearance when it’s printed.
•  Media queries (p. 130) allow you to format your content to specific output devices. Media que-ries include a media type and expressions that check the devices’ media features (p. 130).

Section 4.12 Drop-Down Menus
•  The :hoverpseudo-class is used to apply styles to an element when the mouse cursor is over it.
140	Chapter4 IntroductiontoCascadingStyleSheets™(CSS):Part1


•  The displayproperty (p. 130) allows you to decide whether an element is displayed as a block element or inlineelement or not rendered at all (none).

Section 4.13 (Optional) User Style Sheets
•  Users can define their own user style sheets (p. 132) to format pages based on their preferences.
•  Absolute font-size measurements override user style sheets, while relative font sizes will yield to a user-defined style.
•  If the user defines font size in a user style sheet, the author style (p. 133) has a higher precedence and overrides the user style.

Self-Review Exercises
4.1	Assume that the size of the base font on a system is 12 points. a)  How big is a 36-point font in ems?
b)  How big is a 9-point font in ems?
c)   How big is a 24-point font in picas? d)  How big is a 12-point font in inches? e)   How big is a 1-inch font in picas?
4.2	Fill in the blanks in the following statements:
a)  Using the	element allows you to use external style sheets in your pages.
b)  To apply a CSS rule to more than one element at a time, separate the element names with a(n)	.
c)   Pixels are a(n)	-length measurement unit.
d)  The	pseudo-class is activated when the user moves the mouse cursor over the specified element.
e)   Setting the	property to scrollprovides a mechanism for creating scrollable content without compromising an element’s dimensions.
f)	 is  a  generic  inline  element  that  applies  no  inherent  formatting,  and is a generic block-level element that applies no inherent formatting.
g)  Setting property background-repeatto	tiles the specified background-image vertically.
h)  To begin a block of styles that applies only to the printmedia type, you use the decla-ration	print, followed by an opening curly brace ({).
i)   The	property allows you to indent the first line of text in an element.
j)   The three components of the box model are the	,	and	.

Answers to Self-Review Exercises
4.1	a) 3 ems. b) 0.75 ems. c) 2 picas. d) 1/6 inch. e) 6 picas.
4.2	a) link. b) comma. c) relative. d) :hover. e) overflow. f) span, div. g) repeat-y. h) @media. i) text-indent. j) padding, border, margin.

Exercises
4.3	Write a CSS rule that makes all text 1.5 times larger than the base font of the system and colors the text red.
4.4	Write a CSS rule that places a background image halfway down the page, tiling it horizon-tally. The image should remain in place when the user scrolls up or down.
Exercises   141


4.5	Write a CSS rule that gives all h1and h2elements a padding of 0.5 ems, a dashedborder style and a margin of 0.5 ems.
4.6	WriteaCSSrulethatchangesthecolorofallelementscontainingattributeclass="green-Move"to green and shifts them down 25 pixels and right 15 pixels.
4.7	Make a layout template that contains a headerand two paragraphs. Use floatto line up the two paragraphs as columns side by side. Give the headerand two paragraphs a border and/or a background color so you can see where they are.
4.8	Add an embedded style sheet to the HTML5 document in Fig. 2.3. The style sheet should contain a rule that displays h1elements in blue. In addition, create a rule that displays all links in blue without underlining them. When the mouse hovers over a link, change the link’s background color to yellow.
4.9	Make a navigation button using a divwith a link inside it. Give it a border, background, and text color, and make them change when the user hovers the mouse over the button. Use an ex-ternal style sheet. Make sure your style sheet validates at http://jigsaw.w3.org/css-validator/. Note that some warnings may be unavoidable, but your CSS should have no errors.
5
Art is when things appear rounded.
—Maurice Denis

In matters of style, swim with the current; in matters of principle, stand like a rock.
—Thomas Jefferson

Everything that we see is a shadowcastbythatwhichwedo not see.
—Martin Luther King, Jr.





IntroductiontoCascading
StyleSheets™(CSS):Part2



Objectives Inthischapteryou’ll:
ÿ   Addtextshadowsandtext-
strokeeffects.
ÿ   Createroundedcorners.
ÿ   Addshadowstoelements.
ÿ   Createlinearandradial
gradients,andreflections.
ÿ   Createanimations, transitionsand
transformations.
ÿ   Usemultiplebackground
imagesandimageborders. ÿ   Createamulticolumnlayout.
ÿ   Useflexibleboxmodellayout
and:nth-childselectors.
ÿ   Usethe@font-faceruleto
specifyfontsforawebpage. ÿ   UseRGBAandHSLAcolors. ÿ   Usevendorprefixes.
ÿ   Usemediaqueriesto customizecontenttofit
variousscreensizes.
5.1 Introduction   143



5.1  Introduction 5.2  TextShadows
5.3  RoundedCorners 5.4  Color
5.5  BoxShadows
5.6  LinearGradients;IntroducingVendor Prefixes
5.7  RadialGradients
5.8  (Optional:WebKitOnly)TextStroke 5.9  MultipleBackgroundImages
5.10  (Optional:WebKitOnly)Reflections 5.11  ImageBorders

5.12  Animation;Selectors
5.13  TransitionsandTransformations
5.13.1 transitionandtransform
Properties 5.13.2 Skew
5.13.3 TransitioningBetweenImages
5.14  DownloadingWebFontsandthe @font-faceRule
5.15  FlexibleBoxLayoutModuleand :nth-childSelectors
5.16  MulticolumnLayout 5.17  MediaQueries 5.18  WebResources


Summary | Self-Review Exercise | Answers to Self-Review Exercises | Exercises


5.1 Introduction
In the preceding chapter we presented “traditional” CSS capabilities. In this chapter, we introduce many features new to CSS3 (see the Objectives).
These capabilities are being built into the browsers, resulting in faster and more eco-nomical web development and better client-side performance. This reduces the need for JavaScript libraries and sophisticated graphics software packages such as Adobe Photo-shop, Adobe Illustrator, Corel PaintShop Pro and Gimp to create interesting effects.
CSS3 is still under development. We demonstrate many key CSS3 capabilities that are in the draft standard, as well as a few nonstandard capabilities that may eventually be added.

5.2 Text Shadows
The CSS3 text-shadowproperty makes it easy to add a text shadow effect to any text (Fig. 5.1). First we add a text-shadowproperty to our styles (line 12). The property has four values: -4px, 4px, 6pxand DimGrey, which represent:
•	Horizontal offset of theshadow—the numberof pixels that the text-shadowwill appear to the left or the right of the text. In this example, the horizontal offset of the shadow is -4px. A negative value moves the text-shadowto the left; a positive value moves it to the right.
•	Vertical offset of the shadow—the number of pixels that the text-shadowwill be shiftedup ordown from the text. In thisexample, thevertical offset of theshadow is 4px. A negative value moves the shadow up, whereas a positive value moves it down.
•	 blur radius—the blur (in pixels) of the shadow. A blur-radius of 0pxwould result in a shadow with a sharp edge (no blur). The greater the value, the greater the blurring of the edges. We used a blur radius of 6px.
•	color—determines the color of the text-shadow. We used dimgrey.
144	Chapter5 IntroductiontoCascadingStyleSheets™(CSS):Part2


1  <!DOCTYPE html> 2
3  <!-- Fig. 5.1: textshadow.html --> 4  <!-- Text shadow in CSS3. -->
5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Text Shadow</title> 9	<style type = "text/css">
10	h1 11	{
12	text-shadow: -4px 4px 6px dimgrey; /* add shadow */ 13	font-size: 400%; /* increasing the font size */
14	}
15	</style> 16     </head>
17	<body>
18	<h1>Text Shadow</h1> 19     </body>
20  </html>




DimGrey text-shadow


Fig. 5.1  | TextshadowinCSS3.

5.3 Rounded Corners
The border-radiusproperty allows you to add rounded corners to an element (Fig. 5.2). In this example, we create two rectangles with solid Navyborders. For the first rectangle, wesettheborder-radiusto15px(line17).Thisaddsslightly roundedcornerstotherect-angle. For the second rectangle, we increase the border-radiusto 50px(line 27), making the left and right sides completely round. Any border-radiusvalue greater than half of the shortest side length produces a completely round end. You can also specify the radius for each corner with border-top-left-radius, border-top-right-radius, border-bottom-left-radiusand border-bottom-right-radius.

1  <!DOCTYPE html> 2
3  <!-- Fig. 5.2: roundedcorners.html -->
4  <!-- Using border-radius to add rounded corners to two elements. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">

Fig. 5.2  | Usingborder-radiustoaddroundedcornerstotwoelements.(Part1of2.)
5.4 Color	145


8	<title>Rounded Corners</title> 9	<style type = "text/css">
10	div 11	{
12	border: 3px solid navy; 13	padding: 5px 20px;
14	background: lightcyan; 15	width: 200px;
16	text-align: center;
17	border-radius: 15px; /* adding rounded corners */ 18	margin-bottom: 20px;
19	}
20	#round2 21	{
22	border: 3px solid navy; 23	padding: 5px 20px;
24	background: lightcyan; 25	width: 200px;
26	text-align: center;
27	border-radius: 50px; /* increasing border-radius */ 28            }
29	</style> 30     </head>
31	<body>
32	<div>The border-radius property adds rounded corners 33            to an element.</div>
34	<div id = "round2">Increasing the border-radius rounds the corners 35            of the element more.</div>
36	</body>
37  </html>











Fig. 5.2  | Usingborder-radiustoaddroundedcornerstotwoelements.(Part2of2.)

5.4 Color
CSS3 allows you to express color in several ways in addition to standard color names (such as Aqua) or hexadecimal RGB values (such as #00FFFFfor Aqua). RGB (Red, Green, Blue) or RGBA (Red, Green, Blue, Alpha) gives you greater control over the exact colors in your web pages. The value for each color—red, green and blue—can range from 0to 255. The alphavalue—whichrepresentsopacity—can beanyvalueintherange0.0(fullytransparent) through 1.0(fully opaque). For example, if you were to set the backgroundcolor as follows:
146	Chapter5 IntroductiontoCascadingStyleSheets™(CSS):Part2


background: rgba(255, 0, 0, 0.5);
the resulting color would be a half-opaque red. Using RGBA colors gives you far more op-tions than using only the existing HTML color names—there are over 140 HTML color names, whereas there are 16,777,216 different RGB colors (256 x 256 x 256) and varying opacities of each.
CSS3 also allows you to express color using HSL (hue, saturation, lightness) or HSLA (hue, saturation, lightness, alpha) values. The hue is a color or shade expressed as a value from 0to 359representing the degrees on a color wheel (a wheel is 360 degrees). The colors on the wheel progress in the order of the colors of the rainbow—red, orange, yellow, green, blue, indigo and violet. The value for red, which is at the beginning of the wheel, is 0. Green hues have values around 120and blue hues have values around 240. A hue value of 359, which is just left of 0on the wheel, would result in a red hue. The satu-ration—theintensityofthehue—isexpressedasapercentage,where100%isfullysaturated (the full color) and 0%is gray. Lightness—the intensity of light or luminance of the hue— is also expressed as a percentage. A lightness of 50%is the actual hue. If you decrease the amount of light to 0%, the color appears completely dark (black). If you increase the amount of light to 100%, the color appears completely light (white). For example, if you wanted to use an hslavalue to get the same color red as in our example of an rgbavalue, you would set the backgroundproperty as follows:

background: hsla(0, 100%, 50%, 0.5);
The resulting color would be a half-opaque red. An excellent tool that allows you to pick colors from a color wheel to find the corresponding RGB and HSL values is available at:

http://www.workwithcolor.com/hsl-color-schemer-01.htm


5.5 Box Shadows
You can shadow any block-level element in CSS3. Figure 5.3 shows you how to create a box shadow. The divstyle in lines 10–19 indicates that divs are 200px-by-200pxboxes with a Plum-colored background (lines 12–14). Next, we add the box-shadowproperty with four values (line 15):
•	 Horizontaloffsetoftheshadow(25px)—thenumberof pixelsthatthebox-shadow willappeartotheleftortherightofthebox.Apositivevaluemovesthebox-shadow to the right
•	 Vertical offset of the shadow (25px)—the number of pixels the box-shadowwill be shifted up or down from the box. A positive value moves the box-shadowdown.
•	 Blur radius—A blur-radius of 0pxwould result in a shadow with a sharp edge (no blur). The greater the value, the more the edges of the shadow are blurred.  We used a blur radius of 10px.
•	Color—the box-shadow’s color (in this case, dimgrey).
In lines 20–26, we create a style that’s applied only to the second div, which changes the box-shadow’s horizontal offset to -25pxand vertical offset to -25px(line 25) to show the effects of using negative values. A negative horizontal offset value moves the box-shadowto the left. A negative vertical offset value moves the shadow up.
5.5 BoxShadows   147


1  <!DOCTYPE html> 2
3  <!-- Fig. 5.3: boxshadow.html -->
4  <!-- Creating box-shadow effects. --> 5  <html>
6	<head>
7	<meta charset = "utf-8"> 8	<title>Box Shadow</title> 9	<style type = "text/css">
10	div 11	{
12	width: 200px; 13	height: 200px;
14	background-color: plum;
15	box-shadow: 25px 25px 50px dimgrey; 16	float: left;
17	margin-right: 120px; 18	margin-top: 40px;
19	}
20	#box2 21	{
22	width: 200px; 23	height: 200px;
24	background-color: plum;
25	box-shadow: -25px -25px 50px dimgrey; 26            }
27	h2 28	{
29	text-align: center; 30            }
31	</style> 32     </head>
33	<body>
34	<div><h2>Box Shadow Bottom and Right</h2></div>
35	<div id = "box2"><h2>Box Shadow Top and Left</h2></div> 36     </body>
37  </html>














Fig. 5.3  | Creatingbox-shadoweffects.
148	Chapter5 IntroductiontoCascadingStyleSheets™(CSS):Part2

5.6 Linear Gradients; Introducing Vendor Prefixes
Linear gradients are a type of image that gradually transitions from one color to the next horizontally, vertically or diagonally. You can transition between as many colors as you like and specify the points at which to change colors, called color-stops, represented in pixels or percentages along the gradient line—the angle at which the gradient extends. You can use gradients in any property that accepts an image.

Creating Linear Gradients
In Fig. 5.4, we create three linear gradients—vertical, horizontal and diagonal—in separate rectangles. As you study this example, you’ll notice that the backgroundproperty for each of the three linear gradient styles (vertical, horizontal and diagonal) is defined multiple times in each style—once for WebKit-based browsers, once for Mozilla Firefox and once using the standard CSS3 syntax for linear gradients. This occurs frequently when working with CSS3, because many of its features are not yet finalized. In the meantime, many of the browsers have gone ahead and begun implementing these features so you can use them now. Later in this section, we’ll discuss the vendor prefixes that allow us to use many of CSS3’s evolving features.

1  <!DOCTYPE html> 2
3  <!-- Fig. 5.4: lineargradient.html --> 4  <!-- Linear gradients in CSS3. -->
5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Linear Gradient</title> 9	<style type = "text/css">
10	div 11	{
12	width: 200px; 13	height: 200px;
14	border: 3px solid navy; 15	padding: 5px 20px;
16	text-align: center;
17	background: -webkit-gradient(
18	linear, center top, center bottom,
19	color-stop(15%, white), color-stop(50%, lightsteelblue), 20	color-stop(75%, navy) );
21	background: -moz-linear-gradient(
22	top center, white 15%, lightsteelblue 50%, navy 75% ); 23            background: linear-gradient(
24	to bottom, white 15%, lightsteelblue 50%, navy 75% ); 25            float: left;
26	margin-right: 15px; 27         }
28	#horizontal 29	{
30	width: 200px;
31	height: 200px;

Fig. 5.4  | LineargradientsinCSS3.(Part1of2.)
5.6 LinearGradients;IntroducingVendorPrefixes   149


32	border: 3px solid orange; 33	padding: 5px 20px;
34	text-align: center;
35	background: -webkit-gradient( 36               linear, left top, right top,
37	color-stop(15%, white), color-stop(50%, yellow), 38	color-stop(75%, orange) );
39	background: -moz-linear-gradient(
40	left, white 15%, yellow 50%, orange 75% ); 41            background: linear-gradient(
42	90deg, white 15%, yellow 50%, orange 75% ); 43	margin-right: 15px;
44	}
45	#angle 46	{
47	width: 200px; 48	height: 200px;
49	border: 3px solid Purple; 50	padding: 5px 20px;
51	text-align: center;
52	background: -webkit-gradient(
53	linear, left top, right bottom,
54	color-stop(15%, white), color-stop(50%, plum), 55	color-stop(75%, purple) );
56	background: -moz-linear-gradient(
57	top left, white 15%, plum 50%, purple 75% ); 58            background: linear-gradient(
59	45deg, white 15%, plum 50%, purple 75% ); 60         }
61	</style> 62     </head>
63	<body>
64	<div><h2>Vertical Linear Gradient</h2></div>
65	<div id = "horizontal"><h2>Horizontal Linear Gradient</h2></div> 66	<div id = "angle"><h2>Diagonal Linear Gradient</h2></div>
67	</body>
68  </html>

G













Fig. 5.4  | LineargradientsinCSS3.(Part2of2.)
150	Chapter5 IntroductiontoCascadingStyleSheets™(CSS):Part2


WebKit Vertical Linear Gradient
The example’s body contains three divelements. The first has a vertical linear gradient from top to bottom. We’re creating a background gradient, so we begin with the back-groundproperty. The linear gradient syntax for WebKit (lines 17–20) differs slightly from that for Firefox (lines 21–22). For WebKit browsers, we use -webkit-gradient. We then specify the type of gradient (linear) and the direction of the linear gradient, from center topto centerbottom(line 18). This creates a gradient that gradually changes colors from the top to the bottom. Next, we specify the color-stops for the linear gradient (lines 19– 20). Within each color-stopare two values—the first is the location of the stop (e.g., 15%, which is 15% down from the top of the box) and the second is the color (e.g., white). We transition from Whiteat the top to lightsteelbluein the center to navyat the bottom. You can use as many color-stops as you like.

Mozilla Vertical Linear Gradient
For Mozilla browsers, we use -moz-linear-gradient(line 21). In line 22, we specify the gradient-line(topcenter), which is the direction of the gradient. After the gradient-linewe specify each colorand color-stop(line 22).

Standard Vertical Linear Gradient
The standard CSS3 syntax for linear gradients is also slightly different. First, we specify the linear-gradient(line 23). In line 24, we include the values for the gradient. We begin with the direction of the gradient (top), followed by each colorand color-stop (line 22).

Horizontal Linear Gradient
In lines 28–44 we create a rectangle with a horizontal (left-to-right) gradient that gradually changes from whiteto yellowto orange. For WebKit, the direction of the gradient is lefttopto righttop(line 36), followed by the colors and color-stops (lines 37–38). For Mozilla, we specify the gradient-line(left), followed by the colors and color-stops (line 40). The standard CSS3 syntax begins with the direction (left), indicating that thegradient changes from left toright, followedby the colorsandcolor-stops(lines 42–43). The direction can also be specified in degrees, with 0 degrees straight up and pos-itive degrees progressing clockwise. For a left-to-right gradient, you’d specify 90deg. For top-to-bottom, you’d specify 0deg.

Diagonal Linear Gradient
In the third rectangle we create a diagonal linear gradient that gradually changes from whiteto plumto purple(lines 45–60). For WebKit, the direction of the gradient is left toptorightbottom(line 53),followed by the colors andcolor-stops(lines54–55). For Mozilla, we specify the gradient-line(topleft), followed by the colors and color-stops (line 57). The standard CSS3 syntax begins with the direction (135deg), indicating that the gradient changes at a 45-degree angle, followed by the colors and color-stops (line 59).

Vendor Prefixes
In this example (Fig. 5.4), lines 17–24, 35–42 and 52–59 each define three versions of the backgroundstyle for definingthelineargradients.Theversionsin lines 17,35, and52and
5.7 RadialGradients   151


lines 21, 39 and 56 contain the prefixes -webkit-and -moz-, respectively. These are ven-dor prefixes (Fig. 5.5) and are used for properties that are still being finalized in the CSS specification but have already been implemented in various browsers.



Vendorprefix

-ms-
-moz-
-o-
-webkit-

Browsers

Internet Explorer
Mozilla-based browsers, including Firefox Opera and Opera Mobile
WebKit-based browsers, including Google Chrome, Safari (and Safari on the iPhone) and Android


Fig. 5.5  | Vendorprefixes.

Prefixes are not available for every browser or for every property. For example, at the time of this writing, linear gradients were implemented only in WebKit-based browsers and Mozilla Firefox. If we remove the prefixed versions of the linear gradient styles in this example, the gradients will not appear when the page is rendered in a WebKit-based browser or Firefox. If you run this program in browsers that don’t support gradients yet, the gradients will not appear. It’s good practice to include the multiple prefixes when they’re available so that your pages render properly in the various browsers. As the CSS3 features are finalized and incorporated fully into the browsers, the prefixes will become unnecessary. For example, we did not use any prefixes for the box-shadow example (Fig. 5.3) because it’s fully implemented in WebKit-based, Firefox, Opera and Internet Explorer browsers. Many of the new CSS3 features have not yet been implemented in Internet Explorer—we expect this to change with IE 10.
When using vendor prefixes in styles, always place them before the nonprefixed ver-sion (as in lines 17–22 of Fig. 5.4). The last version of the style that a given browser sup-ports takes precedence and the browser will use it. So, by listing the standard non-prefixed version last, the browser will use the standard version over the prefixed version when the standard version is supported. To save space in the remainder of this chapter, we do not include all vendor prefixes for every example. Some online tools that can help you add the appropriate vendor prefixes to your code are:

http://prefixmycss.com/ http://cssprefixer.appspot.com/
There are also several sites that list the CSS3 and HTML5 features supported in each of the major browsers, including:

http://caniuse.com/ http://findmebyip.com/litmus/


5.7 Radial Gradients
Radial gradients are similar to linear gradients, but the color changes gradually from an inner point (the start) to an outer circle (the end) (Fig. 5.6). In this example, the radial-
152	Chapter5 IntroductiontoCascadingStyleSheets™(CSS):Part2


gradientproperty (lines 16–18) has three values. The first is the position of the start of the radial gradient—in this case, the centerof the rectangle. Other possible values for the position include top, bottom, leftandright. The second value is thestart color (yellow), and the third is the end color (red). The resulting effect is a box with a yellow center that gradually changes to red in a circle around the starting position. In this case, notice that other than the vendor prefixes, the syntax of the gradient is identical for WebKit browsers, Mozilla and the standard CSS3 radial-gradient.


1  <!DOCTYPE html> 2
3  <!-- Fig. 5.6: radialgradient.html --> 4  <!-- Radial gradients in CSS3. -->
5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Radial Gradient</title> 9	<style type = "text/css">
10	div 11	{
12	width: 200px; 13	height: 200px; 14	padding: 5px;
15	text-align: center;
16	background: -webkit-radial-gradient(center, yellow, red); 17	background: -moz-radial-gradient(center, yellow, red); 18	background: radial-gradient(center, yellow, red);
19	}
20	</style> 21     </head>
22	<body>
23	<div><h2>Radial Gradient</h2></div> 24     </body>
25  </html>






Radialgradient beginswith yellowinthe center,then changestoredin acircleasitmoves towardtheedgesof thebox



Fig. 5.6  | RadialgradientsinCSS3.
5.8 (Optional:WebKitOnly)TextStroke	153

5.8 (Optional: WebKit Only) Text Stroke
The -webkit-text-strokeproperty is a nonstandard property for WebKit-based brows-ers that allows you to add an outline (text stroke) around text. Four of the seven browsers we use in this book are WebKit based—Safari and Chrome on the desktop and the mobile browsers in iOS and Android. Currently, the CSS3 specification is evolving andthis prop-erty is not likely to appear as part of the standard in the short term. However, WebKit tends to be leading edge, so it’s possible that this feature could be added later.
Line 12 in Fig. 5.7 sets the color of the h1text to LightCyan. We add a -webkit-text-strokewith two values (line 13)—the outline thickness (2px) and the color of the text stroke (black). We used the font-size500%here so you could see the outline better. This non-standard effect can be implemented for a one pixel stroke—with a bit more effort—using pure CSS3 as shown at http://css-tricks.com/7405-adding-stroke-to-web-text/.

1  <!DOCTYPE html> 2
3  <!-- Fig. 5.7: textstroke.html --> 4  <!-- Text stroke in CSS3. -->
5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Text Stroke</title> 9	<style type = "text/css">
10	h1 11	{
12	color: lightcyan;
13	-webkit-text-stroke: 2px black; /* vendor prefix */ 14	font-size: 500%; /* increasing the font size */
15	}
16	</style> 17     </head>
18  <body>
19	<h1>Text Stroke</h1> 20  </body>
21  </html>




coloris lightcyan
text-stroke is2pxblack

Fig. 5.7  | Atext-strokerenderedinChrome.

5.9 Multiple Background Images
CSS3 allows you to add multiple background images to an element (Fig. 5.8). The style at lines 10–16 begins by adding two background-images—logo.pngand ocean.png(line
154	Chapter5 IntroductiontoCascadingStyleSheets™(CSS):Part2


12). Next, we specify each image’s placement using property background-position(line 13). The comma-separated list of values matches the order of the comma-separated list of images in the background-imageproperty. The first value—bottom right—places the first image, logo.png, in the bottom-right corner of the background in the border-box. The last value—100%center—centers the entire second image, ocean.png, in the con-tent-boxso that it appears behind the content and stretches to fill the content-box. The background-origin(line 14) determines where each image is placed using the box model we discussed in Fig. 4.13. The first image (logo.png) is in the outermost border-box, and the second image (ocean.png) is in the innermost content-box.


1  <!DOCTYPE html> 2
3  <!-- Fig. 5.8: multiplebackgrounds.html --> 4  <!-- Multiple background images in CSS3. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Multiple Backgrounds</title> 9	<style type = "text/css">
10	div.background 11	{
12	background-image: url(logo.png), url(ocean.png); 13	background-position: bottom right, 100% center; 14	background-origin: border-box, content-box;
15	background-repeat: no-repeat, repeat; 16            }
17	div.content 18	{
19	padding: 10px 15px; 20	color: white;
21	font-size: 150%; 22            }
23	</style> 24     </head>
25	<body>
26	<div class = "background"> 27	<div class = "content">
28	<p>Deitel & Associates, Inc., is an internationally recognized 29               authoring and corporate training organization. The company 30               offers instructor-led courses delivered at client sites
31	worldwide on programming languages and other software topics 32	such as C++, Visual C++<sup>&reg;</sup>, C, Java&trade;,
33               C#<sup>&reg;</sup>, Visual Basic<sup>&reg;</sup>, 34               Objective-C<sup>&reg;</sup>, XML<sup>&reg;</sup>,
35	Python<sup>&reg;</sup>, JavaScript, object technology, 36	Internet and web programming, and Android and iPhone app 37	development.</p>
38	</div></div> 39     </body>
40  </html>

Fig. 5.8  | MultiplebackgroundimagesinCSS3.(Part1of2.)
5.10 (Optional:WebKitOnly)Reflections	155










Thesecondimage (ocean.png)is centeredbehindthe contentandstretched asneededtofillthe background

Thefirstimage (logo.png)isplaced atthebottomright withnorepeat

Fig. 5.8 | MultiplebackgroundimagesinCSS3.(Part2of2.)

5.10 (Optional: WebKit Only) Reflections
Figure 5.9 shows how to add a simple reflection of an image using the -webkit-box-re-flectproperty (lines 13–17 and 20–23). Like -webkit-text-stroke, this is a nonstan-dard property that’s available only in WebKit-based browsers for now, but it’s an elegant effect that we wanted to show.
The -webkit-box-reflectproperty’s first value is the direction of the reflection—in this case, below(line 13) or right(line 20). The direction value may be above, below, left, or right. The second value is the offset, which determines the space between the image and its reflection. In this example, the offset is 5px, so there’s a small space between the image and its reflection. Optionally, you can specify a gradient to apply to the reflection. The gradient in lines 14–16 causes the bottom reflection to fade away from top to bottom. The gradient in lines 21–23 causes the right reflection to fade away from left to right. The reflection effects shown here can be accomplished using pure CSS3—with a lot more code. For one example of this, see http://www.xhtml-lab.com/css/create-reflection-effect-using-css3.

1  <!DOCTYPE html> 2
3  <!-- Fig. 5.9: reflection.html --> 4  <!-- Reflections in CSS3. -->
5  <html>
6	<head>
7	<meta charset = "utf-8"> 8	<title>Reflection</title>
9	<style type = "text/css">

Fig. 5.9  | ReflectionsinCSS3.(Part1of2.)
156	Chapter5 IntroductiontoCascadingStyleSheets™(CSS):Part2


10	img { margin: 10px; } 11	img.below
12	{
13	-webkit-box-reflect: below 5px 14                  -webkit-gradient(
15	linear, left top, left bottom, 16	from(transparent), to(white)); 17            }
18	img.right 19	{
20	-webkit-box-reflect: right 5px 21                  -webkit-gradient(
22	linear, right top, left top, 23	from(transparent), to(white)); 24            }
25	</style> 26     </head>
27	<body>
28	<img class = "below" src = "jhtp.png" width = "138" height = "180" 29            alt = "Java How to Program book cover">
30	<img class = "right" src = "jhtp.png" width = "138" height = "180" 31            alt = "Java How to Program book cover">
32	</body>
33  </html>






Horizontal reflection





Verticalreflection






Fig. 5.9  | ReflectionsinCSS3.(Part2of2.)

5.11 Image Borders
The CSS3 border-imageproperty uses images to place a border around any block-level element(Fig. 5.10).Inline12,wesetadiv’sborder-widthto30px,whichisthethickness
5.11 ImageBorders   157


of the border we’re placing around the element. Next, we specify a widthof 234px, which is the width of the entire rectangular border (line 13).

Stretching an Image Border
In this example, we create two image border styles. In the first (lines 16–22), we stretch (and thus distort) the sides of the imageto fit aroundthe element whileleaving the corners of the border image unchanged (not stretched). The border-imageproperty has six values (lines 18–21):
•	border-image-source—the URL of the image to use in the border (in this case, url(border.png)).


1  <!DOCTYPE html> 2
3  <!-- Fig. 5.10: imageborder.html -->
4  <!-- Stretching and repeating an image to create a border. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Image Border</title> 9	<style type = "text/css">
10	div 11	{
12	border-width: 30px; 13	width: 234px;
14	padding: 20px 20px; 15            }
16	#stretch 17	{
18	-webkit-border-image: url(border.png) 80 80 80 80 stretch; 19	-moz-border-image: url(border.png) 80 80 80 80 stretch;
20	-o-border-image: url(border.png) 80 80 80 80 stretch; 21	border-image: url(border.png) 80 80 80 80 stretch;
22	}
23	#repeat 24	{
25	-webkit-border-image:url(border.png) 34% 34% repeat; 26	-moz-border-image:url(border.png) 34% 34% repeat;
27	-o-border-image:url(border.png) 34% 34% repeat; 28	border-image:url(border.png) 34% 34% repeat;
29	}
30	</style> 31     </head>
32	<body>
33	<h2>Image Borders</h2>
34	<img src = "border.png" alt = "image used to demonstrate borders"> 35	<p><div id="stretch">Stretching the image border</div></p>
36	<p><div id="repeat">Repeating the image border</div></p> 37     </body>
38  </html>

Fig. 5.10  | Stretchingandrepeatinganimagetocreateaborder.(Part1of2.)
158	Chapter5 IntroductiontoCascadingStyleSheets™(CSS):Part2












Originalimageusedto createtheimageborder





Cornersoftheimage remainthesamebut thefoursidesofthe imagearestretched


Cornersoftheimage remainthesamebut thefoursidesofthe imagearerepeated



Fig. 5.10  | Stretchingandrepeatinganimagetocreateaborder.(Part2of2.)

•	border-image-slice—expressed with four space-separated values in pixels (in this case, 80808080). These values are the inward offsets from the top, right, bot-tom and left sides of the image. Since our original image is square, we used the same value for each. The border-image-slice divides the image into nine regions: four corners, four sides and a middle, which is transparent unless other-wise specified. These regions may overlap. If you use values that are larger than the actual image size, the border-image-slicevalues will be interpreted as 100%. Youmaynotusenegativevalues.Wecouldexpresstheborder-image-sliceintwo values—8080—inwhichcasethefirstvaluewouldrepresentthetopandbottom, andthe second valuetheleft andright.Theborder-image-slicemay alsobeex-pressed in percentages, which we demonstrate in the second part of this example.
•	 border-image-repeat—specifies how the regions of the border image are scaled and tiled (repeated). By indicating stretchjust once, we create a border that will stretch the top, right, bottom and left regions to fit the area. You may specify two values for the border-image-repeat property. For example, if we specified
5.12 Animation;Selectors   159


stretch repeat, the top and bottom regions of the image border would be stretched, andtherightandleftregionsoftheborderwouldberepeated(i.e.,tiled) to fit the area. Other possible values for the border-image-repeatproperty in-clude roundand space. If you specify round, the regions are repeated using only whole tiles, and the border image is scaled to fit the area. If you specify space, the regions are repeated to fill the area using only whole tiles, and any excess space is distributed evenly around the tiles.

Repeating an Image Border
In lines 23–29 we create an image border by repeating the regions to fit the space. The border-image property includes four values:
•	border-image-source—the URL of the image to use in the border (once again, url(border.png)).
•	border-image-slice—in this case, we provided two values expressed in percent-ages (34%34%) for the top/bottom and left/right, respectively.
•	 border-image-repeat—the value repeatspecifies that the tiles are repeated to fit the area, using partial tiles to fill the excess space.
For additional information about the border-imageproperty, see

http://www.w3.org/TR/2002/WD-css3-border-20021107/ #the-border-image-uri

5.12 Animation; Selectors
In Fig. 5.11, we create a simple animation of an image that moves in a diamond pattern as it changes opacity.

1  <!DOCTYPE html> 2
3  <!-- Fig. 5.11: animation.html --> 4  <!-- Animation in CSS3. -->
5  <html>
6	<head>
7	<meta charset = "utf-8"> 8	<title>Animation</title> 9	<style type = "text/css">
10	img 11	{
12	position: relative;
13	-webkit-animation: movingImage linear 10s 1s 2 alternate; 14	-moz-animation: movingImage linear 10s 1s 2 alternate;
15	animation: movingImage linear 10s 2 1s alternate; 16            }
17	@-webkit-keyframes movingImage 18	{
19	0%   {opacity: 0; left: 50px; top: 0px;}

Fig. 5.11  | AnimationinCSS3.Thedottedlinesshowthediamondpaththattheimagetakes, (Part1of2.)
160	Chapter5 IntroductiontoCascadingStyleSheets™(CSS):Part2


20	25%  {opacity: 1; left: 0px; top:5 0px;} 21	50%  {opacity: 0; left: 50px; top: 100px;} 22	75%  {opacity: 1; left: 100px; top: 50px;} 23	100% {opacity: 0; left: 50px; top: 0px;} 24            }
25	@-moz-keyframes movingImage 26	{
27	0%   {opacity: 0; left: 50px; top: 0px;} 28	25%  {opacity: 1; left: 0px; top:5 0px;} 29	50%  {opacity: 0; left: 50px; top: 100px;} 30	75%  {opacity: 1; left: 100px; top: 50px;} 31	100% {opacity: 0; left: 50px; top: 0px;} 32            }
33	@keyframes movingImage 34	{
35	0%   {opacity: 0; left: 50px; top: 0px;} 36	25%  {opacity: 1; left: 0px; top: 50px;} 37	50%  {opacity: 0; left: 50px; top: 100px;} 38	75%  {opacity: 1; left: 100px; top: 50px;} 39	100% {opacity: 0; left: 50px; top: 0px;} 40            }
41	</style> 42     </head>
43	<body>
44	<img src = "jhtp.png" width = "138" height = "180" 45            alt = "Java How to Program book cover">
46	<div></div> 47     </body>
48  </html>


Theanimationstartsand endsatthetopofthe diamond,movingtheimage inthecounterclockwise directioninitially.Whenthe animationreachesthetopof thediamond,theanimation reverses,continuinginthe clockwisedirection.The animationterminateswhen theimagereachesthetopof thediamondforasecond time.







Fig. 5.11  | AnimationinCSS3.Thedottedlinesshowthediamondpaththattheimagetakes, (Part2of2.)
5.12 Animation;Selectors   161


animationProperty
The animationproperty (lines 13–15) allows you to represent several animation properties in a shorthand notation, rather than specifying each separately, as in:

animation-name: movingImage; animation-timing-function: linear; animation-duration: 10s;
animation-delay: 1s; animation-iteration-count: 2;
animation-direction: alternate;
In the shorthand notation, the values are listed in the following order:
•	 animation-name—represents the name of the animation (movingImage). This name associates the animation with the keyframes that define various properties of the element being animated at different stages of the animation. We’ll discuss keyframes shortly.
•	 animation-timing-function (lines 13–15)—determines how the animation progresses in one cycle of its duration. Possible values include linear, ease, ease-in, ease-out, ease-in-out, cubic-bezier. The value linear, which we usein thisexample, specifies that theanimationwillmoveatthesame speedfrom start to finish. The default value, ease, starts slowly, increases speed, then ends slowly. The ease-invalue starts slowly, then speeds up, whereas the ease-out value starts faster, then slows down. The ease-in-outstarts and ends slowly. Fi-nally, the cubic-beziervalue allows you to customize the timing function with four values between 0and 1, such as cubic-bezier(1,0,0,1).
•	 animation-duration—specifies the time in seconds (s) or milliseconds (ms) that the animation takes to complete one iteration (10sin this case). The default du-ration is 0.
•	animation-delay—specifies the number of seconds (1sin this case) or millisec-onds after the page loads before the animation begins. The default value is 0. If the animation-delayis negative, such as -3s, the animation will begin three sec-onds into its cycle.
•	 animation-iteration-count—specifies the number of times the animation will run. The default is 1. You may use the value infiniteto repeat the animation continuously.
•	 animation-direction—specifies the direction in which the animation will run. The value alternateused here specifies that the animation will run in alternat-ing directions—in this case, counterclockwise (as we define with our keyframes), then clockwise. The default value, normal, would run the animation in the same direction for each cycle.
The shorthand animationproperty cannot be used with the animation-play-state property—it must be specified separately. If you do not include the animation-play-state,whichspecifieswhethertheanimationispausedorrunning,itdefaultstorunning.

@keyframesRule and Selectors
For the element being animated, the @keyframesrule (lines 17, 25 and 33) defines the element’s properties that will change during the animation, the values to which those
162	Chapter5 IntroductiontoCascadingStyleSheets™(CSS):Part2


properties will change, and when they’ll change. The @keyframesrule is followed by the name of the animation (movingImage) to which the keyframes are applied. CSS rules con-sist of one or more selectors followed by a declaration block in curly braces ({}). Selectors enable you to apply styles to elements of a particular type or attribute. A declaration block consists of one or more declarations, each of which includes the property name followed by a colon (:), a value and a semicolon (;). You may include multiple declarations in a declaration block. For example, consider line 19:

0% {opacity: 0; left: 50px; top 0px;}

The selector, 0%, is followed by a declaration block with three declarations—opacity, leftand right.
In this example, the @keyframesrule includes five selectors to represent the points-in-time for our animation. Recall that our animation will take 10 seconds (10sin lines 13– 15) to complete. In that context, 0%indicates the beginning of a single animation cycle, 25%represents 2.5 seconds into the animation, 50%represents 5 seconds into the anima-tion, 75%represents 7.5 seconds into the animation and 100%represents the end of a single animation cycle. You can break down the animation into as many points as you like. At each point, we specify the opacityof the image and the image position in pixels from the leftand from the top. We begin and end the animation at the same point—left: 50px; top: 0px;—creating a diamond pattern along which the image moves.


5.13 Transitions and Transformations
With CSS3 transitions, you can change an element’s style over a specified duration—for example, you can vary an element’s opacity from opaque to transparent over a duration of one second. CSS3 transformations allow you to move, rotate, scale and skew elements. And youcanmaketransitionsandtransformationsoccursimultaneously,doingthingslikehav-ing objects grow and change their color at once. Note that transitions are similar in con-cepttotheanimations(Section 5.12),but transitions allowyoutospecifyonly thestarting and ending values of the CSS properties being changed. An animation’s keyframes enable you to control intermediate states throughout the animation’s duration.


5.13.1 transitionand transformProperties
Figure 5.12 uses the transitionand transformproperties to scale and rotate an image 360degreeswhenthecursorhoversoverit.Webeginbydefiningthetransition(line16). For each property that will change, the transition property specifies the duration of that change. In this case, we indicate that a transform(discussed shortly) will take four sec-onds, but we could specify a comma-separated list of property names that will change and the individual durations over which each property will change. For example:

transition: transform 4s, opacity 2s;
indicates that a transformtakes four seconds to apply and the opacitychanges over two seconds—thus, the transform will continue for another two seconds after the opacity change completes. In this example, we define the transformonly when the user hovers the mouse over the image.
5.13 TransitionsandTransformations   163


1  <!DOCTYPE html> 2
3  <!-- Fig. 5.12: transitions.html --> 4  <!-- Transitions in CSS3. -->
5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Transitions</title> 9	<style type = "text/css">
10	img 11	{
12	margin: 80px;
13	-webkit-transition: -webkit-transform 4s; 14	-moz-transition: -moz-transform 4s;
15	-o-transition: -o-transform 4s; 16	transition: transform 4s;
17	}
18	img:hover 19	{
20	-webkit-transform: rotate(360deg) scale(2, 2); 21	-moz-transform: rotate(360deg) scale(2, 2);
22	-o-transform: rotate(360deg) scale(2, 2); 23	transform: rotate(360deg) scale(2, 2);
24	}
25	</style> 26     </head>
27	<body>
28	<img src = "cpphtp.png" width = "76" height = "100" 29            alt = "C++ How to Program book cover">
30	</body>
31  </html>

a)	b)	c)	d)










Fig. 5.12  | Transitioninganimageoverafour-seconddurationandapplyingrotateandscale transforms.

The :hoverpseudo-class (lines 18–24) formerly worked only for anchor elements but now works with any element. In this example, we use :hoverto begin the rotation and scaling of the image. The transformproperty (line 23) specifies that the image will rotate 360degand will scale to twice its original width and height when the mouse hovers over the image. The transformproperty uses transformation functions, such as rotateand
164	Chapter5 IntroductiontoCascadingStyleSheets™(CSS):Part2


scale, to perform the transformations. The rotatetransformation function receives the number of degrees. Negative values cause the element to rotate left. A value of 720deg would cause the element to rotate clockwise twice. The scaletransformation function specifies how to scale the width and height. The value 1represents the original width or original height, so values greater than 1increase the size and values less than 1decrease the size. A complete list of CSS3 transformation functions can be found at:

www.w3.org/TR/css3-2d-transforms/#transform-functions

5.13.2 Skew
CSS3 transformations also allow you to skew block-level elements, slanting them at an an-gle either horizontally (skewX) or vertically (skewY). In the following example, we use the animationand transformproperties to skew an element (a rectangle and text) horizon-tally by 45 degrees (Fig. 5.13). First we create a rectangle with a LightGreenbackground, a solid DarkGreenborder and rounded corners. The animationproperty (lines 21–23) specifies that the element will skewin a three-second (3s) interval for an infinitedura-tion. The fourth value, linear, is the animation-timing-function.

1  <!DOCTYPE html> 2
3  <!-- Fig. 5.13: skew.html -->
4  <!-- Skewing and transforming elements in CSS3. --> 5  <html>
6	<head>
7	<meta charset = "utf-8"> 8	<title>Skew</title>
9	<style type = "text/css"> 10            .skew .textbox
11	{
12	margin-left: 75px;
13	background: lightgreen; 14	height: 100px;
15	width: 200px;
16	padding: 25px 0;
17	text-align: center; 18	font-size: 250%;
19	border: 3px solid DarkGreen; 20	border-radius: 15px;
21	-webkit-animation: skew 3s infinite linear; 22	-moz-animation: skew 3s infinite linear;
23	animation: skew 3s infinite linear; 24            }
25	@-webkit-keyframes skew 26	{
27	from { -webkit-transform: skewX(0deg); } 28	25% { -webkit-transform: skewX(45deg); } 29	50% { -webkit-transform: skewX(0); }
30	75% { -webkit-transform: skewX(-45deg); } 31	to { -webkit-transform: skewX(0); }
32	}

Fig. 5.13  | SkewingandtransformingelementsinCSS3.(Part1of2.)
5.13 TransitionsandTransformations   165


33	@-moz-keyframes skew 34	{
35	from { -webkit-transform: skewX(0deg); } 36	25% { -webkit-transform: skewX(45deg); } 37	50% { -webkit-transform: skewX(0); }
38	75% { -webkit-transform: skewX(-45deg); } 39	to { -webkit-transform: skewX(0); }
40	}
41	@-keyframes skew 42	{
43	from { -webkit-transform: skewX(0deg); } 44	25% { -webkit-transform: skewX(45deg); } 45	50% { -webkit-transform: skewX(0); }
46	75% { -webkit-transform: skewX(-45deg); } 47	to { -webkit-transform: skewX(0); }
48	}
49	</style> 50     </head>
51	<body>
52	<div class = "box skew">
53	<div class = "textbox">Skewing Text</div> 54      </div>
55	</body>
56  </html>

a)Bordereddivatskewedleftposition	b)Bordereddivatcentered	c)Bordereddivatskewedrightposition position








Fig. 5.13  | SkewingandtransformingelementsinCSS3.(Part2of2.)

Next, we use the @keyframesrule and selectors to specify the angle of the skewtrans-formation at different intervals (lines 25–48). When the page is rendered, the element is not skewed (0deg; lines 27, 35 and 43). The transformation then skews the element 45 degrees (45deg) to the right (lines 28, 36 and 44), back to 0deg(lines 29, 37 and 45) and then left by 45deg(lines 30, 38 and 46) and back to 0deg(lines 31, 39 and 47).

5.13.3 Transitioning Between Images
We can also use the transitionproperty to create the visually beautiful effect of melting one image into another (Fig. 5.14). The transitionproperty includes three values. First, we specify that the transition will occur on the opacityof the image. The second value, 4s, is the transition-duration. The third value, ease-in-out, is the transition-timing-function. Next, we define :hoverwith an opacityof 0, so when the cursor hov-ers over the top image, its opacity becomes fully transparent, revealing the bottom image
166	Chapter5 IntroductiontoCascadingStyleSheets™(CSS):Part2


directlybehindit(lines22–23).Inlines28–29weaddthebottomandtopimages,placing one directly behind the other.

1  <!DOCTYPE html> 2
3  <!-- Fig. 5.14: meltingimages.html -->
4  <!-- Melting one image into another using CSS3. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Melting Images</title> 9	<style type = "text/css">
10	#cover 11	{
12	position: relative; 13	margin: 0 auto;
14	}
15	#cover img 16	{
17	position: absolute; 18	left: 0;
19	-webkit-transition: opacity 4s ease-in-out; 20	transition: opacity 4s ease-in-out;
21	}
22	#cover img.top:hover 23               { opacity:0; } 24         </style>
25	</head> 26	<body>
27	<div id = "cover">
28	<img class = "bottom" src = "jhtp.png" alt = "Java 9e cover"> 29	<img class = "top" src = "jhtp8.png" alt = "Java 8e cover"> 30         </div>
31	</body>
32  </html>

a)	b)	c)









Fig. 5.14  | MeltingoneimageintoanotherusingCSS3.

5.14 Downloading Web Fonts and the @font-faceRule
Using the @font-facerule, you can specify fonts for a web page, even if they’re not in-stalled on the user's system. You can use downloadable fonts to help ensure a uniform look
5.14 DownloadingWebFontsandthe@font-faceRule	167


across client sites.  In Fig. 5.15, we use the Google web font named “Calligraffitti.” You can find numerous free, open-source web fonts at http://www.google.com/webfonts. Make sure the fonts you get from other sources have no legal encumbrances.


1  <!DOCTYPE html> 2
3  <!-- Fig. 5.15: embeddedfonts.html -->
4  <!-- Embedding fonts for use in your web page. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Embedded Fonts</title>
9	<link href = 'http://fonts.googleapis.com/css?family=Calligraffitti' 10            rel = 'stylesheet' type = 'text/css'>
11	<style type = "text/css"> 12            body
13	{
14	font-family: "Calligraffitti"; 15	font-size: 48px;
16	text-shadow: 3px 3px 3px DimGrey; 17            }
18	</style> 19     </head>
20	<body> 21         <div>
22	<b>Embedding the Google web font "Calligraffitti"</b> 23         </div>
24	</body>
25  </html>













Fig. 5.15  | Embeddingfontsforuseinyourwebpage.

To get Google’s Calligraffitti font, go to http://www.google.com/webfontsand use the search box on the site to find the font “Calligraffitti.” You can find this by using the search box on the site. Next, click Quick-use to get the linkto the style sheet that contains the @font-facerule. Paste that linkelement into the head section of your document (lines 9–10). The referenced CSS style sheet contains the following CSS rules:
168	Chapter5 IntroductiontoCascadingStyleSheets™(CSS):Part2


@media screen { @font-face {
font-family: 'Calligraffitti'; font-style: normal;
font-weight: normal;
src: local('Calligraffiti'), url('http://themes.googleusercontent.com/static/fonts/
calligraffitti/v1/vLVN2Y-z65rVu1R7lWdvyKIZAuDcNtpCWuPSaIR0Ie8 .woff') format('woff');
} }
The@mediascreenrulespecifiesthatthefontwillbeusedwhenthedocumentisren-dered on a computer screen (as discussed in Section 4.11). The @font-facerule includes the font-family(Calligraffitti), font-style (normal) and font-weight(normal). You may include multiple fonts with varying styles and weights. The @font-facerule also includes the location of the font.

5.15 Flexible Box Layout Module and :nth-child
Selectors
Flexible Box Layout Module (FBLM) makes it easy to align the contents of boxes, change their size, change their order dynamically, and lay out the contents in any direction. In the example of Fig. 5.16, we create flexible divs for four of our programming tips. When the mouse hovers over one of the divs, the divexpands, the text changes from black to white, the background color changes and the layout of the text changes.
Lines48–66 define a divtowhichweapply the flexboxCSS class. That divcontains four other divs. The flexbox class’s displayproperty is set to the new CSS3 value box (lines 16–17). The box-orientproperty specifies the orientation of the box layout (lines 18–19). The default value is horizontal(which we specified anyway). You can also use vertical. For the nested divs, we specify a one-second ease-outtransition(lines 23– 24). This will take effect when these the :hoverpseudo-class style (lines 38–39) is applied to one of these divs to expand it.

1  <!DOCTYPE html> 2
3  <!-- Fig. 5.16: fblm.html -->
4  <!-- Flexible Box Layout Module. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Flexible Box Layout Model</title>
9	<link href = 'http://fonts.googleapis.com/css?family=Rosario' 10            rel = 'stylesheet' type = 'text/css'>
11	<style type = "text/css"> 12	.flexbox
13	{
14	width: 600px;
15	height: 420px;

Fig. 5.16  | FlexibleBoxLayoutModule.(Part1of3.)
5.15 FlexibleBoxLayoutModuleand:nth-childSelectors   169


16	display: -webkit-box; 17	display: box;
18	-webkit-box-orient: horizontal; 19	box-orient: horizontal;
20	}
21	.flexbox > div 22	{
23	-webkit-transition: 1s ease-out; 24	transition: 1s ease-out;
25	-webkit-border-radius: 10px; 26	border-radius: 10px;
27	border: 2px solid black; 28	width: 120px;
29	margin: 10px -10px 10px 0px; 30	padding: 20px 20px 20px 20px;
31	box-shadow: 10px 10px 10px dimgrey; 32         }
33	.flexbox > div:nth-child(1){ background-color: lightgrey; } 34	.flexbox > div:nth-child(2){ background-color: lightgrey; } 35	.flexbox > div:nth-child(3){ background-color: lightgrey; } 36	.flexbox > div:nth-child(4){ background-color: lightgrey; } 37
38	.flexbox > div:hover {
39	width: 200px; color: white; font-weight: bold; }
40	.flexbox > div:nth-child(1):hover { background-color: royalblue; } 41	.flexbox > div:nth-child(2):hover { background-color: crimson; } 42	.flexbox > div:nth-child(3):hover { background-color: crimson; } 43	.flexbox > div:nth-child(4):hover { background-color: darkgreen; } 44	p { height: 250px; overflow: hidden; font-family: "Rosario" }
45	</style> 46    </head>
47	<body>
48	<div class = "flexbox">
49	<div><img src = "GPP.png" alt = "Good programming practice icon"> 50            <p>Good Programming Practices call attention to techniques that 51            will help you produce programs that are clearer, more
52	understandable and more maintainable.</p></div>
53	<div><img src = "EPT.png" alt = "Error prevention tip icon">
54	<p>Error-Prevention Tips contain suggestions for exposing bugs 55	and removing them from your programs; many describe aspects of 56	programming that prevent bugs from getting into programs in
57	the first place.</p></div>
58	<div><img src = "CPE.png" alt = "Common programming error icon"> 59            <p>Common Programming Errors point out the errors that students 60            tend to make frequently. These Common Programming Errors reduce 61            the likelihood that you'll make the same mistakes.</p></div>
62	<div><img src = "SEO.png"><p>Software Engineering Observations 63            highlight architectural and design issues that affect the 64            construction of software systems, especially large-scale 65            systems.</p></div>
66	</div> 67     </body>
68  </html>

Fig. 5.16  | FlexibleBoxLayoutModule.(Part2of3.)
170	Chapter5 IntroductiontoCascadingStyleSheets™(CSS):Part2


a)Eachnesteddivhasalightbackgroundcolorandblacktexttostart.Someofthetextishidden.



















b)Whenthemousehoversover:nth-child(2),theflexboxexpands,thebackground-color changestoCrimson,theoverflowtextisrevealedandthetextchangestoaboldwhitefont



















Fig. 5.16  | FlexibleBoxLayoutModule.(Part3of3.)


:nth-childSelectors
In CSS3, you can use selectors to easily select elements to style based on their attributes. For example, you could select every other row in a table and change the background color
5.16 MulticolumnLayout	171


toblue,makingthetableeasiertoread.Youcanalsouseselectorstoenableordisableinput elements. In lines 33–36 we use :nth-childselectors to select each of the four divele-ments in the flexboxdivto style. The style in line 33 uses div:nth-child(1)to select the div element that’s the first child of its parent and applies the background-color LightBlue. Similarly, div:nth-child(2)selects the divelement that’s the second child of its parent, div:nth-child(3)selects the third child of its parent, and div:nth-child(4) selects the fourth child of its parent—each applies a specified background-color.
Next, lines 38–43 define styles that are applied to the nested divelements when the mouse hovers over them. The style at lines 38–39 sets the width(200px), color(white) and font-weight(bold). Next, we use :nth-childselectors to specify a new background color for each nested div(line 40–43).
Finally, we style the pelement—the text within each div(line 44). We specify a para-graph height of 250pxand the overflowas hidden, which hides any text that does not fit in the specified paragraph height. In the output, notice that the text in the second child element(theError-PreventionTips),theoverflowtextishidden.Whenthemousehovers over the element, all of the text is revealed. We also specify the Google font "Rosario", which we embedded in our style sheet (lines 9–10).
Selectors are a large topic. In later chapters, we’ll demonstrate additional CSS3 selector capabilities. To learn more about their powerful capabilities, visit:

http://www.w3.org/TR/css3-selectors/

5.16 Multicolumn Layout
CSS3 allows you to easily create multicolumn layouts. In Figure 5.17, we create a three-column layout by setting the column-countproperty to 3(lines 15–18) and the column-gapproperty (the spacing between columns) to 30px(lines 20-23). We then add a thin blacklinebetweeneachcolumnusingthecolumn-ruleproperty(lines25–28).Whenyou run this example, try resizing your browser window. You’ll notice that the width of the columnschangestofitthethree-columnlayoutinthebrowser.InSection 5.17,we’llshow you how to use media queries to modify this example so the number of columns varies dy-namically based on the size of the device screen or browser window, allowing you to cus-tomize the layout for devices such as smartphones, tablets, notebooks, desktops and more.


1  <!DOCTYPE html> 2
3  <!-- Fig. 5.17: multicolumns.html --> 4  <!-- Multicolumn text in CSS3. -->
5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Multicolumns</title> 9	<style type = "text/css">
10	p
11	{ margin:0.9em 0em; } 12	.multicolumns
13	{

Fig. 5.17  | MulticolumntextinCSS3.(Part1of3.)
172	Chapter5 IntroductiontoCascadingStyleSheets™(CSS):Part2


14	/* setting the number of columns to 3 */ 15	-webkit-column-count: 3;
16	-moz-column-count: 3; 17	-o-column-count: 3; 18	column-count: 3;
19	/* setting the space between columns to 30px */ 20	-webkit-column-gap: 30px;
21	-moz-column-gap: 30px; 22	-o-column-gap: 30px; 23	column-gap: 30px;
24	/* adding a 1px black line between each column */ 25	-webkit-column-rule: 1px outset black;
26	-moz-column-rule: 1px outset black; 27	-o-column-rule: 1px outset black; 28	column-rule: 1px outset black;
29	}
30	</style> 31     </head>
32	<body>
33	<header>
34	<h1>Computers, Hardware and Software<h1/> 35         </header>
36	<div class = "multicolumns">
37	<p>A computer is a device that can perform computations and make 38               logical decisions phenomenally faster than human beings can. 39               Many of today's personal computers can perform billions of
40	calculations in one second&mdash;more than a human can perform 41	in a lifetime. Supercomputers are already performing thousands 42	of trillions (quadrillions) of instructions per second! To put 43	that in perspective, a quadrillion-instruction-per-second
44	computer can perform in one second more than 100,000
45	calculations for every person on the planet! And&mdash;these 46	"upper limits" are growing quickly!</p>
47	<p>Computers process data under the control of sets of
48	instructions called computer programs. These programs guide 49	the computer through orderly sets of actions specified by
50	people called computer programmers. The programs that run on a 51	computer are referred to as software. In this book, you'll
52	learn today's key programming methodology that's enhancing
53	programmer productivity, thereby reducing software-development 54	costs&mdash;object-oriented programming.</p>
55	<p>A computer consists of various devices referred to as hardware 56               (e.g., the keyboard, screen, mouse, hard disks, memory, DVDs 57               and processing units). Computing costs are dropping
58	dramatically, owing to rapid developments in hardware and
59	software technologies. Computers that might have filled large 60	rooms and cost millions of dollars decades ago are now
61	inscribed on silicon chips smaller than a fingernail, costing 62	perhaps a few dollars each. Ironically, silicon is one of the 63	most abundant materials&mdash;it's an ingredient in common
64	sand. Silicon-chip technology has made computing so economical 65	that more than a billion general-purpose computers are in use
66	worldwide, and this is expected to double in the next few

Fig. 5.17  | MulticolumntextinCSS3.(Part2of3.)
5.17 MediaQueries   173


67	years.</p>
68	<p>Computer chips (microprocessors) control countless devices. 69               These embedded systems include anti-lock brakes in cars,
70	navigation systems, smart home appliances, home security 71	systems, cell phones and smartphones, robots, intelligent
72	traffic intersections, collision avoidance systems, video game 73	controllers and more. The vast majority of the microprocessors 74	produced each year are embedded in devices other than general-75	purpose computers.</p>
76	<footer>
77	<em>&copy; 2012 by Pearson Education, Inc. 78                  All Rights Reserved.</em>
79	</footer> 80         </div>
81	</body>
82  </html>






















Fig. 5.17  | MulticolumntextinCSS3.(Part3of3.)


5.17 Media Queries
With CSSmedia types (Section 4.11), youcan vary yourstyling basedon thetypeof device on which your page is being presented. The classic examples are varying font styles and sizes, based on whether a page is printed or displayed on a screen. Users generally prefer sans-serif fonts on screens and serif fonts on paper. With CSS3 media queries you can de-termine the finer attributes of the media on which the user is viewing the page, such as the length and width of the viewing area on the screen, to better customize your presentation.
174	Chapter5 IntroductiontoCascadingStyleSheets™(CSS):Part2


In Section 5.16 we created a page with a multicolumn layout that included three col-umns of text and a thin black rule between each column. No matter how you resized your browser window, the text was still rendered in three columns, even if the columns had to be extremely narrow. In Fig. 5.18, we modify that multicolumn exampleto alterthe num-bers of columns and the rules between columns based on the screen size of the device on which the page is viewed.

@media-Rule
The @mediarule is used to determine the type and size of device on which the page is ren-dered. When the browser looks at the rule, the result is either true or false. The rule’s styles are applied only if the result is true. First, we use the @mediarule to determine whether the page is being rendered on a handheld device (e.g., a smartphone) with a max-widthof 480px, or a device with a screen that has a max-device-widthof 480px, or on a screen hav-ing max-widthof 480px(lines 13–15). If this is true, we set the column-countto 1—the page will be rendered in a single column on handheld devices such as an iPhone or in browser windows that have been resized to 480pxor less (lines 17–19).


1  <!DOCTYPE html> 2
3  <!-- Fig. 5.18: mediaqueries.html -->
4  <!-- Using media queries to reformat a page based on the device width. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Media Queries</title> 9	<style type = "text/css">
10	p
11	{ margin: 0.9em 0em; }
12	/* styles for smartphones with screen widths 480px or smaller */ 13	@media handheld and (max-width: 480px),
14	screen and (max-device-width: 480px), 15	screen and (max-width: 480px)
16	{
17	div {
18	-webkit-column-count: 1; 19	column-count: 1; }
20	}
21	/* styles for devices with screen widths of 481px to 1024px */ 22	@media only screen and (min-width: 481px) and
23	(max-width: 1024px) 24            {
25	div {
26	-webkit-column-count: 2; 27	column-count: 2;
28	-webkit-column-gap: 30px; 29	column-gap: 30px;
30	-webkit-column-rule: 1px outset black; 31	column-rule: 1px outset black; }
32	}

Fig. 5.18  | Usingmediaqueriestoreformatapagebasedonthedevicewidth.(Part1of4.)
5.17 MediaQueries   175


33	/* styles for devices with screen widths of 1025px or greater */ 34	@media only screen and (min-width: 1025px)
35	{
36	div {
37	-webkit-column-count: 3; 38	column-count: 3;
39	-webkit-column-gap: 30px; 40	column-gap: 30px;
41	-webkit-column-rule: 1px outset black; 42	column-rule: 1px outset black; }
43	}
44	</style> 45     </head>
46	<body>
47	<header>
48	<h1>Computers, Hardware and Software</h1> 49         </header>
50	<div>
51	<p>A computer is a device that can perform computations and make 52               logical decisions phenomenally faster than human beings can. 53               Many of today's personal computers can perform billions of
54	calculations in one second&mdash;more than a human can perform 55	in a lifetime. Supercomputers are already performing thousands 56	of trillions (quadrillions) of instructions per second! To put 57	that in perspective, a quadrillion-instruction-per-second
58	computer can perform in one second more than 100,000
59	calculations for every person on the planet! And&mdash;these 60	"upper limits" are growing quickly!</p>
61	<p>Computers process data under the control of sets of
62	instructions called computer programs. These programs guide 63	the computer through orderly sets of actions specified by
64	people called computer programmers. The programs that run on a 65	computer are referred to as software. In this book, you'll
66	learn today's key programming methodology that's enhancing
67	programmer productivity, thereby reducing software-development 68	costs&mdash;object-oriented programming.</p>
69	<p>A computer consists of various devices referred to as hardware 70               (e.g., the keyboard, screen, mouse, hard disks, memory, DVDs 71               and processing units). Computing costs are dropping
72	dramatically, owing to rapid developments in hardware and
73	software technologies. Computers that might have filled large 74	rooms and cost millions of dollars decades ago are now
75	inscribed on silicon chips smaller than a fingernail, costing 76	perhaps a few dollars each. Ironically, silicon is one of the 77	most abundant materials&mdash;it's an ingredient in common
78	sand. Silicon-chip technology has made computing so economical 79	that more than a billion general-purpose computers are in use 80	worldwide, and this is expected to double in the next few
81	years.</p>
82	<p>Computer chips (microprocessors) control countless devices. 83               These embedded systems include anti-lock brakes in cars,
84	navigation systems, smart home appliances, home security
85	systems, cell phones and smartphones, robots, intelligent

Fig. 5.18  | Usingmediaqueriestoreformatapagebasedonthedevicewidth.(Part2of4.)
176	Chapter5 IntroductiontoCascadingStyleSheets™(CSS):Part2


86	traffic intersections, collision avoidance systems, video game 87	controllers and more. The vast majority of the microprocessors 88	produced each year are embedded in devices other than general-89	purpose computers.</p>
90	<footer>
91	<em>&copy; 2012 by Pearson Education, Inc. 92                  All Rights Reserved.</em>
93	</footer> 94         </div>
95	</body>
96  </html>

a)Stylesforsmartphones withscreenwidths 480pxorsmaller














b)Stylesfordeviceswithscreenwidthsof481pxto1024px


















Fig. 5.18  | Usingmediaqueriestoreformatapagebasedonthedevicewidth.(Part3of4.)
5.18 WebResources   177


c)Stylesfordeviceswithscreenwidthsof1024pxorgreater
















Fig. 5.18  | Usingmediaqueriestoreformatapagebasedonthedevicewidth.(Part4of4.)

If the condition in lines 13–15 is false, a second @mediarule determines whether the page is being rendered on devices with a min-widthof 481pxand a max-widthof 1024px (lines 22–23). If this condition is true, we set the column-countto 2(lines 26–27), the column-gap(the space between columns) to 30px(lines 28–29) and the column-rule(the vertical line between the columns) to 1pxoutsetblack(lines 30–31).
If the conditions in the first two @mediarules are false, we use a third @mediarule to determine whether the page is being rendered on devices with a min-widthof 1025px(line 34). If the condition of this rule is true, we set the column-countto 3(lines 37–38), the column-gapto 30px(lines 39–40) and the column-ruleto 1pxoutsetblack(lines 41–42).

5.18 Web Resources http://www.w3.org/Style/CSS/ W3C home page for CSS3.
http://www.deitel.com/css3/
The Deitel CSS3 Resource Center includes links to tutorials, examples, the W3C standards docu-mentation and more.
http://layerstyles.org http://www.colorzilla.com/gradient-editor/ http://css3generator.com/ http://css3please.com/
Sites that help you generate cross-browser CSS3 code.
http://findmebyip.com/litmus/
Find the CSS3 features that are supported by each of the major browsers.
http://cssprefixer.appspot.com/
The CSSPrefixer tool helps you add vendor prefixes to your CSS3 code.
http://css-tricks.com/examples/HSLaExplorer/ A CSS demo that allows you to play with HSLA colors.
178	Chapter5 IntroductiontoCascadingStyleSheets™(CSS):Part2


Summary
Section 5.2 Text Shadows
•  The CSS3 text-shadowproperty (p. 143) makes it easy to add a text-shadow effect to any text. The shadow’s horizontal offset is the number of pixels that the text-shadowwill appear to the left or the right of the text. A negative value moves the text-shadowto the left; a positive value movesittotheright.Theverticaloffsetisthenumberofpixelsthatthetext-shadowwillbeshift-ed up or down from the text. A negative value moves the shadow up, whereas a positive value moves it down.
•  The blur radius (p. 143) has a value of 0(no shadow) or greater.

Section 5.3 Rounded Corners
•  The border-radiusproperty (p. 144) adds rounded corners (p. 144) to any element.

Section 5.4 Color
•  RGBA (Red, Green, Blue, Alpha, p. 145) gives you greater control over the exact colors in your web pages. The value for each color—red, green and blue—can range from 0to 255. The alpha value—which represents opacity—can be any value in the range 0.0 (fully transparent) through 1.0(fully opaque).
•  CSS3 also allows you to express color using HSLA (hue, saturation, lightness, alpha) values (p. 146).
•  The hue is a color or shade expressed as a value from 0 to 359 representing the degrees on a color wheel (a wheel is 360 degrees). The colors on the wheel progress in the order of the colors of the rainbow—red, orange, yellow, green, blue, indigo and violet.
•  The saturation (p. 146)—the intensity of the hue—is expressed as a percentage, where 100% is fully saturated (the full color) and 0% is gray.
•  Lightness (p. 146)—the intensity of light or luminance of the hue—is also expressed as a per-centage.Alightnessof50%istheactualhue.If youdecreasetheamountoflightto0%,thecolor appears completely dark (black). If you increase the amount of light to 100%, the color appears completely light (white).

Section 5.5 Box Shadows
•  The box-shadowproperty (p. 146) adds a shadow to an element.
•  The horizontal offset of the shadow defines the numberof pixels thatthe box-shadowwill appear to the left or the right of the box. The vertical offset of the shadow defines the number of pixels the box-shadowwill be shifted up or down from the box.
•  The blur radius of the shadow can have a value of 0(no shadow) or greater.

Section 5.6 Linear Gradients; Introducing Vendor Prefixes
•  Linear gradients (p. 148) are a type of image that gradually transitions from one color to the next horizontally, vertically or diagonally.
•  You can transition between as many colors as you like and specify the points at which to change colors, called color-stops (p. 148), represented in pixels or percentages along the so-called gra-dient line.
•  You can use gradients in any property that accepts an image.
•  Browsers currently implement gradients differently, so you’ll need vendor prefixes and different syntax for each browser.
Summary   179


•  Vendor prefixes (e.g., -webkit-and -moz-, p. 151) are used for properties that are still being fi-nalized in the CSS specification but have already been implemented in various browsers.
•  Prefixes are not available for every browser or for every property.
•  It’sgoodpracticetoincludethemultipleprefixeswhenthey’reavailablesothatyourpagesrender properly in the various browsers.
•  Always place vendor-prefixed styles before the nonprefixed version. The last version of the style that a given browser supports takes precedence and will be used by the browser.

Section 5.7 Radial Gradients
•  Radial gradients (p. 151) are similar to linear gradients, but the color changes gradually from an inner circle (the start) to an outer circle (the end).
•  The radial-gradientproperty (p. 151) has three values. The first is the position of the start of the radial gradient (center). Other possible values for the position include top, bottom, leftand right. The second value is the start color, and the third is the end color.
•  Other than the vendor prefixes, the syntax of the gradient is identical for WebKit browsers, Mozilla Firefox and the standard CSS3 radial-gradient.

Section 5.8 (Optional: WebKit Only) Text Stroke
•  The-webkit-text-strokeproperty(p. 153)isanonstandardpropertyforWebKit-basedbrows-ers that allows you to add an outline (text stroke) around text. The -webkit-text-strokeprop-erty has two values—the thickness of the outline and the color of the text stroke.

Section 5.9 Multiple Background Images
•  CSS3 allows you to add multiple background images (p. 153) to an element.
•  We specify each image’s placement using property background-position. The comma-separated list of values matches the order of the comma-separated list of images in the background-image property.
•  The background-origin(p. 154) determines where each image is placed using the box model.

Section 5.10 (Optional: WebKit Only) Reflections
•  The -webkit-box-reflectproperty (p. 155) allows you to add a simple reflection (p. 155) of an image. Like -webkit-text-stroke, this is a nonstandard property that’s available only in Web-Kit-based browsers for now.
•  The property’s first value is the direction of the reflection. The direction value may be above, be-low, left, or right.
•  Thesecondvalueistheoffset,which determinesthespacebetween theimageanditsreflection. •  Optionally, you can specify a gradient to apply to the reflection.

Section 5.11 Image Borders
•  The CSS3 border-imageproperty (p. 156) uses images to place a border around any element.
•  The border-widthis the thickness of the border being placed around the element. The widthis the width of the entire rectangular border.
•  The border-image-source(p. 157) is the URL of the image to use in the border.
•  The  border-image-slice(p. 158) specifies the inward offsets from the top, right, bottom and left sides of the image.
•  The border-image-slicedivides the image into nine regions: four corners, four sides and a mid-dle, which is transparent unless otherwise specified. You may not use negative values.
180	Chapter5 IntroductiontoCascadingStyleSheets™(CSS):Part2


•  We can express the border-image-slicein just two values, in which case the first value repre-sents the top and bottom, and the second value the left and right.
•  The border-image-slicemay be expressed in pixels or percentages.
•  border-image-repeat(p. 158) specifies how the regions of the border image are scaled and tiled (repeated). By indicating stretchjust once, we create a border that will stretch the top, right, bottom and left regions to fit the area.
•  You may specify two values for the border-image-repeatproperty. For example, if we specified stretchrepeat, the top and bottom regions of the image border would be stretched, and the right and left regions of the border would be repeated (i.e., tiled) to fit the space, using partial tiles to fill the excess space.
•  Other possible values for the border-image-repeatproperty include roundand space. If you specify round, the regions are repeated using only whole tiles, and the border image is scaled to fit the area. If you specify space, the regions are repeated to fill the area using only whole tiles, and any excess space is distributed evenly around the tiles.

Section 5.12 Animation; Selectors
•  The animationproperty (p. 161) allows you to represent several animation properties in a short-hand notation, rather than specifying each animation property separately.
•  Theanimation-name(p. 161)representsthenameoftheanimation.Thisnameassociatesthean-imation with the keyframes that define various properties of the element being animated at dif-ferent stages of the animation.
•  Theanimation-timing-function(p. 161)determineshowtheanimationprogressesinonecycle of its duration. Possible values include linear, ease, ease-in, ease-out, ease-in-out, cubic-bezier. The value linearspecifies that the animation will move at the same speed from start to finish.Thedefaultvalue,ease,startsslowly,increasesspeed,thenendsslowly.Theease-invalue starts slowly, then speeds up, whereas the ease-outvalue starts faster, then slows down. The ease-in-outstarts and ends slowly. Finally, the cubic-beziervalue allows you to customize the timing function with four values between 0and 1, such as cubic-bezier(1,0,0,1).
•  The animation-duration(p. 161) specifies the time in seconds (s) or milliseconds (ms) that the animation takes to complete one iteration. The default duration is 0.
•  The animation-delay(p. 161) specifies the number of seconds or milliseconds after the page loads before the animation begins. The default value is 0. If the animation-delayis negative, such as -3s, the animation begins three seconds into its cycle.
•  The animation-iteration-count(p. 161) specifies the number of times the animation will run. The default is 1. You may use the value infiniteto repeat the animation continuously.
•  The animation-direction(p. 161) specifies the direction in which the animation will run. The value alternateused here specifies that the animation will run in alternating directions. The de-fault value, normal, would run the animation in the same direction for each cycle.
•  The shorthand animationproperty cannot be used with the animation-play-stateproperty (p. 161)—it must be specified separately. If you do not include the animation-play-state, which specifies whether the animation is pausedor running, it defaults to running.
•  For the element being animated, the @keyframes rule(p. 161) defines the element’s properties that will change during the animation, the values to which those properties will change, and when they’ll change.
•  The @keyframesrule is followed by the name of the animation to which the keyframes are ap-plied. Rules (p. 162) consist of one or more selectors (p. 162) followed by a declaration block (p. 162) in curly braces ({}).
Summary   181


•  Selectors enable you to apply styles to elements of a particular type or attribute.
•  A declaration block consists of one or more declarations, each of which includes the property namefollowedbyacolon(:),avalueandasemicolon(;).Youmayincludemultipledeclarations in a declaration block.

Section 5.13 Transitions and Transformations
•  With CSS3 transitions (p. 162), you can change an element’s style over a specified duration.
•  CSS3 transformations (p. 162) allow you to move, rotate, scale and skew elements.
•  Transitions are similar in concept to animations, but transitions allow you to specify only the starting and ending values of the CSS properties being changed. An animation’s keyframes en-able you to control intermediate states throughout the animation’s duration.
•  For each property that will change, the transitionproperty (p. 162) specifies the duration of that change.
•  As of CSS3, the :hoverpseudo-class now works with any element.
•  Thetransformproperty(p. 162)usestransformationfunctions(p. 163),suchasrotate(p. 163) and scale(p. 164), to perform the transformations.
•  The rotatetransformation function receives number of degrees. Negative values cause the ele-ment to rotate left. A value of 720degwould cause the element to rotate clockwise twice.
•  The scaletransformation function specifies how to scale the width and height. The value 1rep-resents the original width or original height, so values greater than 1increase the size and values less than 1decrease the size.
•  CSS3 transformations also allow you to skew (p. 164) block-level elements, slanting them at an angle either horizontally (skewX) or vertically (skewY).
•  The transition-durationis the amount of time it takes to complete the transition.
•  The transition-timing-functiondetermines how the transition progresses in one cycle of its duration.

Section 5.14 Downloading Web Fonts and the @font-faceRule
•  Using the @font-facerule (p. 166), you can specify fonts for a web page, even if they’re not in-stalled on the user’s system. Downloadable fonts help ensure a uniform look across client sites.
•  You can find numerous free, open-source web fonts at http://www.google.com/webfonts. Make sure the fonts you get from other sources have no legal encumbrances.
•  The @media screenrule specifies that the font will be used when the document is rendered on a computer screen.
•  The @font-facerule includes the font-family, font-styleand font-weight. Multiple fonts can be specified with varying styles and weights. The @font-facerule also includes the font’s location.

Section 5.15 Flexible Box Layout Module and :nth-childSelectors
•  FlexibleBox LayoutModule(FBLM,p. 168)makesiteasytoalignthecontentsofboxes,change their size, change their order dynamically, and lay out the contents in any direction.
•  The box-orientproperty (p. 168) specifies the orientation of the box layout. The default value is horizontal. You can also use vertical.
•  In CSS3, you can use selectors to easily style attributes. For example, you can select every other row in a table and change the background color to blue, making the table easier to read. You can also use selectors to enable or disable input elements.
182	Chapter5 IntroductiontoCascadingStyleSheets™(CSS):Part2


•  We use :nth-childselectors (p. 171) to select each of the for the four divelements in the flex-box divto style.
•  div:nth-child(1)selects the divelement that’s the first child of its parent and applies the spec-ified style. Similarly, div:nth-child(2)selects the divelement that’s the second child of its par-ent, div:nth-child(3)selects the third child of its parent, and div:nth-child(4)selects the fourth child of its parent.
•  Setting the overflowto hiddenhides any text that does not fit in the specified paragraph height.

Section 5.16 Multicolumn Layout
•  CSS3 allows you to easily create multicolumn layouts (p. 171) using the column-countproperty (p. 171).
•  The column-gapproperty (p. 171) specifies the spacing between columns. •  Add lines between columns using the column-ruleproperty (p. 171).
•  Resizing your browser window changes the width of the columns to fit the three-column layout in the browser.

Section 5.17 Media Queries
•  With CSS3 media queries you can determine the finer attributes of the media on which the user is viewing the page, such as the length and width of the viewing area on the screen, to customize your presentation.
•  The @mediarule (p. 174) is used to determine the type and size of device on which the page is rendered. When the browser looks at the rule, the result is either true or false. The rule’s styles are applied only if the result is true.

Self-Review Exercises
5.1	Fill in the blanks in the following statements:
a)  The	property makes it easy to add a text shadow effect to any text. b)  The	property allows you to add rounded corners to any element. c)   CSS3 includes two new ways to express color—	and	.
d)  The	defines the number of pixels that the box-shadowwill appear to the left or the right of the box.
e)		are similar to linear gradients, but the color changes gradually from an inner circle (the start) to an outer circle (the end).
f)   The	divides theimageinto nineregions:fourcorners,foursides anda middle, which is transparent unless otherwise specified.
g)  The animation-timing-functiondetermines how the animation progresses in one cy-cle of its duration. Possible values include               ,               ,               ,               ,
and	.
h)  For the element being animated, the	defines the element’s properties that will change during the animation, the values to which those properties will change, and when they’ll change.
i)		are similar in concept to animations, but they allow you to specify only the starting and ending values of the CSS properties being changed. An animation’s key-frames enable you to control intermediate states throughout the animation’s duration.
j)   CSS3	allow you to move, rotate, scale and skew elements.
k)		consistofoneor more selectors followedby a declarationblockin curly braces ({}).
l)   In CSS3, you can use	to easily style attributes.
AnswerstoSelf-ReviewExercises   183


5.2	State whether each of the following is true or false. If false, explain why.
a)  The @font-facerule specifies that an embedded font will be used when the document is rendered on a computer screen.
b)  You can use gradients in any property that accepts an image. c)   A horizontal gradient gradually changes from top to bottom.
d)  You can add lines between columns using the column-gapproperty.
e)   The @mediarule determines the type and size of device on which the page is rendered. When the browser looks at the rule, the result is either true or false. The rule’s styles are applied only if the result is false.
f)   To add multiple background images to an element, use the background-positionto specify where each image is placed using the box model.

Answers to Self-Review Exercises
5.1	a) text-shadow. b) border-radius. c) RGBA and HSLA. d) horizontal offset. e) Radial gra-dients. f) border-image-slice. g) linear, ease, ease-in, ease-out, ease-in-out, cubic-bezier. h) @keyframesrule. i) Transitions. j) transformations. k) Rules. l) selectors.
5.2	a) False. The @media screenrule specifies that an embedded font will be used when the document is rendered on a computer screen. b) True. c) False. A horizontal gradient gradually changesfromlefttoright.d)False.Youcanaddlinesbetweencolumnsusingthecolumn-ruleprop-erty.e)The @mediarule’sstylesareappliedonlyiftheresultistrue.f)False.Thebackground-origin specifies where each image is placed using the box model.

Exercises
For each of the following, build and render a web page that makes the indicated effect(s) appear. Validate your page with the following validators:
1. For CSS3: http://jigsaw.w3.org/css-validator/(under More Options > Profile, select CSS level 3) [Note: Many CSS3 properties will not validate because they’re not yet stan-dardized.]
2. For HTML5: http://validator.w3.org/#validate_by_upload
Also, test your page with as many as possible of the seven browsers we’re using in this book.
5.3       (Text Shadow) Create a text shadow on the phrase "NewfeaturesinCSS3"with a horizon-tal offset of 2px, a vertical offset of 5px, a blur radius of 6pxand a text-shadowcolor deepskyblue.
5.4	(Text Stroke) Create a text stroke on the phrase "New WebKit features". Make the color of the text LightBlue. Use a 3pxNavytext-stroke and set the font-sizeto 700%.
5.5	(Rounded Corners) Create three divelements, each with a widthand heightof 100px. On the first element, create slightly rounded corners using a borderof 3pxblackand border-radiusof 10px. On the second element, use a borderof 3pxblackand increase the border-radiusto 50px. On the third, use a borderof 3pxblackand increase the border-radius to 100px. Make the back-ground-colorof each element a different color of your choosing. Inside each element, display the value of the border-radiusin bold text.
5.6	(Box Shadow) Create three divelements of varying colors, each with a widthand heightof 200px. On the first box, add a dimgreybox-shadowwith a horizontal offset of 15px, a vertical offset of 15pxand a blur radius of 20px. On the second box, add a dimgreybox-shadowwith a horizontal offset of -15px, a vertical offset of -15pxand a blur radius of 30px. On the third box, add a dimgreybox-shadowwith a horizontal offset of 15px, a vertical offset of 15pxand a blur radius of 10px.
184	Chapter5 IntroductiontoCascadingStyleSheets™(CSS):Part2


5.7	(Linear Gradient) Create a divelement with a widthand heightof 500px. Create a diag-onal linear gradient using the colors of the rainbow—Red, Orange, Yellow, Green, Blue, Indigo, Violet.
5.8	(Radial Gradient) Create a divelement with a widthand heightof 500px. Create a radial gradient with three colors. Start the gradient in the bottom-left corner with the colors changing as they move along the gradient line to the right.
5.9	(Animation) Create an infinite animation of an element moving in a square pattern.
5.10	(Skew) Modify the skew example in Fig. 5.13 to skew the element top to bottom 30deg, then left to right 30deg, alternating infinitely.
5.11	(Melting Images) Modify the example in Fig. 5.14 using five pictures. It might be interest-ing to try pictures of you or a family member at different ages or a landscape at various times. Set the transition-durationto 3sand a transition-timing-functionto linear
.
5.12	(Multicolumn Text) Change the format of the example in Fig. 5.17 to two columns, add a sub title andan author name and increase thecolorand thickness of the column-rule. Add an image and float the text around the image.
5.13	(FBLM) Modify the example in Fig. 5.16 to use a vertical flexbox.
5.14	(Transformation with :hover) Create a transformation program that includes four images. When the user hovers over an image, the size of the image should increase by 20%.
5.15	(Reflection) Create a reflection of an image 20pxto the right of the original image.
5.16	(Media Queries) Create your own multicolumn web page and use media queries to adjust the formatting to use one column for mobile devices that have a maximum width of 480px.




JavaScript:Introductionto Scripting

6
Comment is free, but facts are sacred.
—C. P. Scott

The creditor hath a better memory than the debtor.
—James Howell

When faced with a decision, I alwaysask,“Whatwouldbethe most fun?”
—Peggy Walker




Objectives Inthischapteryouwill:
ÿ   WritesimpleJavaScript
programs.
ÿ   Useinputandoutput
statements.
ÿ   Learnbasicmemory
concepts.
ÿ   Usearithmeticoperators.
ÿ   Learntheprecedenceof
arithmeticoperators.
ÿ   Writedecision-making statementstochooseamong
alternativecoursesofaction.
ÿ   Userelationalandequality operatorstocomparedata
items.
186	Chapter6 JavaScript:IntroductiontoScripting



6.1  Introduction
6.2  YourFirstScript:DisplayingaLineof TextwithJavaScriptinaWebPage
6.3  ModifyingYourFirstScript
6.4  ObtainingUserInputwithprompt Dialogs
6.4.1 DynamicWelcomePage
6.4.2 AddingIntegers

6.5  MemoryConcepts 6.6  Arithmetic
6.7  DecisionMaking:Equalityand RelationalOperators
6.8  WebResources


Summary | Self-Review Exercises | Answers to Self-Review Exercises | Exercises


6.1 Introduction
In this chapter, we begin our introduction to the JavaScript1 scripting language, which is used to enhance the functionality and appearance of web pages.2
In Chapters 6–11, we present a detailed discussion of JavaScript—the de facto stan-dard client-side scripting language for web-based applications due to its highly portable nature.  Our  treatment  of  JavaScript  serves  two  purposes—it  introduces  client-side scripting (used in Chapters 6–18), which makes web pages more dynamic and interactive, and it provides the programming foundation for the server-side scripting presented later in the book.
Before you can run code examples with JavaScript on your computer, you may need to change your browser’s security settings. By default, Internet Explorer 9 prevents scripts on your local computer from running, and displays a warning message. To allow scripts to run in files on your computer, select Internet Options from the Tools menu. Click the Advanced tab and scroll down to the Security section of the Settings list. Check the box labeled Allow active content to run in files on My Computer. Click OK and restart Internet Explorer. HTML5 documents on your own computer that contain JavaScript code will now run properly. Firefox, Chrome, Opera, Safari (including on the iPhone) and the Android browser have JavaScript enabled by default.

6.2 Your First Script: Displaying a Line of Text with
JavaScript in a Web Page
Webeginwithasimplescript(orprogram)thatdisplaysthetext"WelcometoJavaScript Programming!"in the HTML5 document. All major web browsers contain JavaScript in-terpreters, which process the commands written in JavaScript. The JavaScript code and its result are shown in Fig. 6.1.

1.    Many people confuse the scripting language JavaScript with the programming language Java. Java is a full-fledged object-oriented programming language. Java is popular for developing large-scale dis-tributed enterprise applications and web applications. JavaScript is a browser-based scripting lan-guage developed by Netscape and implemented in all major browsers.
2.    JavaScript was originally created by Netscape. Both Netscape and Microsoft have been instrumental in the standardization of JavaScript by ECMA International—formerly the European Computer Manufacturers’  Association—as  ECMAScript  (www.ecma-international.org/publications/ standards/ECMA-262.htm). The latest version of JavaScript is based on ECMAScript 5.
6.2 YourFirstScript:DisplayingaLineofTextwithJavaScriptinaWebPage	187


1  <!DOCTYPE html> 2
3  <!-- Fig. 6.1: welcome.html -->
4  <!-- Displaying a line of text. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>A First Program in JavaScript</title> 9	<script type = "text/javascript">
10
11	document.writeln(
12	"<h1>Welcome to JavaScript Programming!</h1>" ); 13
14	</script>
15	</head><body></body>
16  </html>






Scriptresult


Fig. 6.1  | Displayingalineoftext.

Lines 11–12 do the “real work” of the script, namely, displaying the phrase Welcome toJavaScriptProgramming!as an h1heading in the web page.
Line 6 starts the <head>section of the document. For the moment, the JavaScript code we write will appear in the<head>section. The browser interprets the contents of the <head>section first, so the JavaScript programs we write there execute before the <body> of the HTML5 document displays. In later chapters on JavaScript, we illustrate inline scripting, in which JavaScript code is written in the <body>of an HTML5 document.

The scriptElement and Commenting Your Scripts
Line 9 uses the <script>tag to indicate to the browser that the text which follows is part of a script. The typeattribute specifies the MIMEtype of the script as well as thescripting language used in the script—in this case, a textfile written in javascript. In HTML5, the default MIME type for a <script>is "text/html", so you can omit the type attribute from your <script> tags. We’ve introduced this here, because you’ll see it in legacy HTML documents with embedded JavaScripts.

Strings
Lines 11–12 instruct the browser’s JavaScript interpreter to perform an action, namely, to display in the web page the string of characters contained between the double quotation (") marks (also called a string literal). Individual white-space characters between words in a string are not ignored by the browser. However, if consecutive spaces appear in a string,
188	Chapter6 JavaScript:IntroductiontoScripting


browsers condense them to a single space. Also, browsers ignore leading white-space char-acters (i.e., white space at the beginning of a string).

Software Engineering Observation 6.1
Strings in JavaScript can be enclosed in either double quotation marks (") or single quotation marks (').


Using the documentObject
Lines 11–12 use the browser’s documentobject, which represents the HTML5 document the browser is currently displaying. This object allows you to specify text to display in the HTML5 document. The browser creates a set of objects that allow you to access and ma-nipulate every element of an HTML5 document. In the next several chapters, we overview some of these objects as we discuss the Document Object Model (DOM).
An object resides in the computer’s memory and contains information used by the script. The term object normally implies that attributes (data) and behaviors (methods) are associated with the object. The object’s methods use the attributes to perform useful actions for the client of the object (i.e., the script that calls the methods). A method may require additional information (arguments) to perform its actions; this information is enclosed in parentheses after the name of the method in the script. In lines 11–12, we call the documentobject’s writelnmethod to write a line of HTML5 markup in the HTML5 document. The parentheses following the method name writelncontain the one argu-ment that method writelnrequires (in this case, the string of HTML5 that the browser is to display). Method writelninstructs the browser to write the argument string into the web page for rendering. If the string contains HTML5 elements, the browser interprets these elements and renders them on the screen. In this example, the browser displays the phraseWelcometoJavaScriptProgramming!asanh1-levelHTML5heading,becausethe phrase is enclosed in an h1element.


Statements
The code elements in lines 11–12, including document.writeln, its argument in the pa-rentheses (the string) and the semicolon (;), together are called a statement. Every state-ment ends with a semicolon (also known as the statement terminator)—although this practice is not required by JavaScript, it’s recommended as a way of avoiding subtle prob-lems. Line 14 indicates the end of the script. In line 15, the tags <body>and </body>spec-ify that this HTML5 document has an empty body.

Good Programming Practice 6.1
Terminate every statement with a semicolon. This notation clarifies where one statement ends and the next statement begins.

Common Programming Error 6.1
Forgetting the ending </script>tag for a script may prevent the browser from interpret-ing the script properly and may prevent the HTML5 document from loading properly.

Open the HTML5 document in your browser. If the script contains no syntax errors, it should produce the output shown in Fig. 6.1.
6.3 ModifyingYourFirstScript   189


Common Programming Error 6.2
JavaScript is case sensitive. Not using the proper uppercase and lowercase letters is a syn-tax error. A syntax error occurs when the script interpreter cannot recognize a statement. The interpreter normally issues an error message to help you locate and fix the incorrect statement. Syntax errors are violations of the rules of the programming language. The in-terpreternotifiesyouofasyntaxerrorwhenitattemptstoexecutethestatementcontaining theerror.Each browserhasitsown way to display JavaScript Errors.For example,Firefox has the Error Console (in its Web Developer menu) and Chrome has the JavaScript con-sole (in its Tools menu). To view script errors in IE9, select Internet Options… from the Tools menu. In the dialog that appears, select the Advanced tab and click the checkbox labeled Display a notification about every script error under the Browsing category.

Error-Prevention Tip 6.1 Whentheinterpreterreportsasyntaxerror,sometimestheerrorisnotinthelineindicated by the error message. First, check the line for which the error was reported. If that line does not contain errors, check the preceding several lines in the script.

A Note About document.writeln
In this example, we displayed an h1 HTML5 element in the web browser by using document.writelnto write the element into the web page. For simplicity in Chapters 6– 9, we’ll continue to do this as we focus on presenting fundamental JavaScript program-mingconcepts.Typically,you’lldisplaycontentbymodifyinganexistingelementinaweb page—a technique we’ll begin using in Chapter 10.

A Note About Embedding JavaScript Code into HTML5 Documents
In Section 4.5, we discussed the benefits of placing CSS3 code in external style sheets and linking them to your HTML5 documents. For similar reasons, JavaScript code is typically placed in a separate file, then included in the HTML5 document that uses the script. This makes the code more reusable, because it can be included into any HTML5 document—as is the case with the many JavaScript libraries used in professional web development today. We’ll begin separating both CSS3 and JavaScript into separate files starting in Chapter 10.

6.3 Modifying Your First Script
This section continues our introduction to JavaScript programming with two examples that modify the example in Fig. 6.1.

Displaying a Line of Colored Text
A script can display WelcometoJavaScriptProgramming!in many ways. Figure 6.2 dis-plays the text in magenta, using the CSS colorproperty. Most of this example is identical to Fig. 6.1, so we concentrate only on lines 11–13 of Fig. 6.2, which display one line of text inthedocument.Thefirststatementusesdocumentmethodwritetodisplayastring.Unlike writeln, writedoes not position the output cursor in the HTML5 document at the begin-ningofthenextlineafterwritingitsargument.[Note:Theoutputcursorkeepstrackofwhere the next character appears in the document’s markup, not where the next character appears in the web page as rendered by the browser.] The next character written in the document appears immediately after the last character written with write. Thus, when lines 12–13 ex-ecute, the first character written, “W,” appears immediately after the last character displayed
190	Chapter6 JavaScript:IntroductiontoScripting


1  <!DOCTYPE html> 2
3  <!-- Fig. 6.2: welcome2.html -->
4  <!-- Printing one line with multiple statements. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Printing a Line with Multiple Statements</title> 9	<script type = "text/javascript">
10	<!--
11	document.write( "<h1 style = ’color: magenta’>" ); 12	document.write( "Welcome to JavaScript " +
13	"Programming!</h1>" ); 14            // -->
15	</script>
16	</head><body></body>
17  </html>






Magentatext


Fig. 6.2  | Printingonelinewithseparatestatements.

withwrite(the>characterinsidetherightdoublequoteinline11).Eachwriteorwriteln statement resumes writing characters where the last writeor writelnstatement stopped writing characters. So, after a writelnstatement, the next output appears on the beginning of the next line. Thus, the two statements in lines 11–13 result in one line of HTML5 text. Remember that statements in JavaScript are separated by semicolons (;). Therefore, lines 12–13 represent only one complete statement. JavaScript allows large statements to be split overmanylines.The+operator(calledthe“concatenationoperator”whenusedinthisman-ner) in line 12 joins two strings together—it’s explained in more detail later in this chapter.

Common Programming Error 6.3
Splitting a JavaScript statement in the middle of a string is a syntax error.

The preceding discussion has nothing to do with the actual rendering of the HTML5 text. Remember that the browser does not create a new line of text unless the browser window is too narrow for the text being rendered or the browser encounters an HTML5 element that explicitly starts a new line—for example, <p>to start a new paragraph.

Common Programming Error 6.4
Many people confuse the writing of HTML5 text with the rendering of HTML5 text. Writing HTML5 text creates the HTML5 that will be rendered by the browser for presentation to the user.
6.3 ModifyingYourFirstScript   191


Nesting Quotation Marks
Recall that a string can be delimited by single (') or double (") quote characters. Within a string, you can’t nest quotes of the same type, but you can nest quotes of the other type. A string that’s delimited by double quotes, can contain single quotes. Similarly. a string that’s delimited by single quotes, can contain nest double quotes. Line 11 nests single quotesinsideadouble-quotedstringtoquotethestyleattribute’svalueintheh1element.

Displaying Text in an Alert Dialog
The first two scripts in this chapter display text in the HTML5 document. Sometimes it’s useful to display information in windows called dialogs (or dialog boxes) that “pop up” on the screen to grab the user’s attention. Dialogs typically display important messages to users browsing the web page. JavaScript allows you easily to display a dialog box contain-ing a message. The script in Fig. 6.3 displays WelcometoJavaScriptProgramming!as three lines in a predefined dialog called an alertdialog.

1  <!DOCTYPE html> 2
3  <!-- Fig. 6.3: welcome3.html -->
4  <!-- Alert dialog displaying multiple lines. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Printing Multiple Lines in a Dialog Box</title> 9	<script type = "text/javascript">
10	<!--
11	window.alert( "Welcome to\nJavaScript\nProgramming!" ); 12	// -->
13	</script> 14     </head>
15	<body>
16	<p>Click Refresh (or Reload) to run this script again.</p> 17     </body>
18  </html>

Titlebar


ClickingtheOK button dismissesthedialog.
Mousecursor

Fig. 6.3  | Alertdialogdisplayingmultiplelines.

The windowObject
Line 11 in the script uses the browser’s windowobject to display an alert dialog. The argu-menttothewindowobject’salertmethodisthestringtodisplay.Executingthepreceding statement displays the dialog shown in Fig. 6.3. The title bar of this Chrome dialog con-tains the string JavaScript Alert to indicate that the browser is presenting a message to the user. The dialog provides an OK button that allows the user to dismiss (i.e., close) the di-alog by clicking the button. To dismiss the dialog, position the mouse cursor (also called
192	Chapter6 JavaScript:IntroductiontoScripting


the mouse pointer) over the OK button and click the mouse, or simply press the Enter key. The contents of the dialog vary by browser. You can refresh the page to run the script again.

Escape Sequences
The alertdialog in this example contains three lines of plain text. Normally, a dialog dis-plays a string’s characters exactly as they appear. However, the dialog does not display the characters\n(line11).Thebackslash(\)inastringisanescapecharacter.Itindicatesthat a“special”characteristobeusedinthestring.Whenabackslashisencounteredinastring, the next character is combined with the backslash to form an escape sequence. The escape sequence \nis the newline character, which causes the cursor (i.e., the current screen po-sition indicator) to move to the beginning of the next line in the dialog. Some other com-mon JavaScript escape sequences are listed in Fig. 6.4. The \nand \tescape sequences in the table do not affect HTML5 rendering unless they’re in a preelement (this element displays the text between its tags in a fixed-width font exactly as it’s formatted between the tags, including leading white-space characters and consecutive white-space characters).



Escapesequence

\n
\t
\\

\"




\'

Description

New line—position the screen cursor at the beginning of the next line. Horizontal tab—move the screen cursor to the next tab stop.
Backslash—used to represent a backslash character in a string.
Double quote—used to represent a double-quote character in a string contained in double quotes. For example,
window.alert( "\"in double quotes\"" );
displays "in double quotes"in an alertdialog.
Single quote—used to represent a single-quote character in a string. For example,
window.alert( '\'in single quotes\'' );
displays 'in single quotes'in an alertdialog.


Fig. 6.4 | Somecommonescapesequences.

6.4 Obtaining User Input with promptDialogs
Scripting gives you the ability to generate part or all of a web page’s content at the time it’s shown to the user. A script can adapt the content based on input from the user or other variables, such as the time of day or the type of browser used by the client. Such web pages are said to be dynamic, as opposed to static, since their content has the ability to change. The next two subsections use scripts to demonstrate dynamic web pages.

6.4.1 Dynamic Welcome Page
Ournextscriptcreatesadynamicwelcomepagethatobtainstheuser’sname,thendisplays it on the page. The script uses another predefined dialog box from the windowobject—a promptdialog—which allows the user to enter a value that the script can use. The script
6.4 ObtainingUserInputwithpromptDialogs   193


asks the user to enter a name, then displays the name in the HTML5 document. Figure 6.5 presents the script and sample output. In later chapters, we’ll obtain inputs via GUI components in HTML5 forms, as introduced in Chapters 2–3.]


1  <!DOCTYPE html> 2
3  <!-- Fig. 6.5: welcome4.html -->
4  <!-- Prompt box used on a welcome screen --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Using Prompt and Alert Boxes</title> 9	<script type = "text/javascript">
10	<!--
11	var name; // string entered by the user 12
13	// read the name from the prompt box as a string 14	name = window.prompt( "Please enter your name" ); 15
16	document.writeln( "<h1>Hello " + name +
17	", welcome to JavaScript programming!</h1>" ); 18            // -->
19	</script>
20	</head><body></body>
21  </html>















Fig. 6.5  | Promptboxusedonawelcomescreen.

Declarations, Keywords and Variables
Line 11 is a declaration that contains the JavaScript keyword var. Keywords are words that have special meaning in JavaScript. The keyword varat the beginning of the state-ment indicates that the word nameis a variable. A variable is a location in the computer’s memorywhereavaluecanbestoredforusebyascript.Allvariableshaveanameandvalue, and should be declared with a varstatement before they’re used in a script.
194	Chapter6 JavaScript:IntroductiontoScripting


Identifiers and Case Sensitivity
Thename of a variable can beany valid identifier. An identifieris a series of characters con-sisting of letters, digits, underscores ( _) and dollar signs ($) that does not begin with a digit and is not a reserved JavaScript keyword. [Note: A complete list of reserved keywords can be found in Fig. 7.2.] Identifiers may not contain spaces. Some valid identifiers are Welcome, $value, _value, m_inputField1and button7. The name 7buttonis not a valid identifier, because it begins with a digit, and the name input fieldis not valid, because it contains a space.Rememberthat JavaScriptiscase sensitive—uppercaseandlowercaseletters arecon-sidered to be different characters, so name, Nameand NAMEare different identifiers.

Good Programming Practice 6.2
Choosing meaningful variable names helps a script to be “self-documenting” (i.e., easy to understand by simply reading the script).

Good Programming Practice 6.3
By convention, variable-name identifiers begin with a lowercase first letter. Each subse-quent word should begin with a capital first letter. For example, identifier itemPricehas a capital Pin its second word, Price.

Common Programming Error 6.5
Splitting a statement in the middle of an identifier is a syntax error.

Declarations end with a semicolon and can be split over several lines with each variable in the declaration separated by a comma—known as a comma-separated list of variable names. Several variables may be declared either in one or in multiple declarations.

JavaScript Comments
It’s helpful to indicate the purpose of each variable in the script by placing a JavaScript comment at the end of each line in the declaration. In line 11, a single-line comment that begins with the characters //states the purpose of the variable in the script. This form of comment is called a single-line comment because it terminates at the end of the line in which it appears. A //comment can begin at any position in a line of JavaScript code and continues until the end of the line. Comments do not cause the browser to perform any action when the script is interpreted; rather, comments are ignored by the JavaScript inter-preter.

Good Programming Practice 6.4
Although it’s not required, declare each variable on a separate line. This allows for easy insertion of a comment next to each declaration. This is a widely followed professional coding standard.

Multiline Comments
You can also write multiline comments. For example,

/* This is a multiline comment. It can be
split over many lines. */
6.4 ObtainingUserInputwithpromptDialogs   195


is a multiline comment spread over several lines. Such comments begin with the delimiter /*andendwiththedelimiter*/.Alltext between thedelimitersofthecommentis ignored by the interpreter.
JavaScriptadoptedcommentsdelimitedwith/*and*/fromtheCprogramminglan-guage and single-line comments delimited with //from the C++ programming language. JavaScript programmers generally prefer C++-style single-line comments over C-style comments. Throughout this book, we use C++-style single-line comments.

windowObject’s promptMethod
Line 13 is a comment indicating the purpose of the statement in the next line. Line 14 calls the windowobject’s promptmethod, which displays the dialog in Fig. 6.6. The dialog allows the user to enter a string representing the user’s name.




Thisisthe prompttothe user




Thisisthevaluetheuser typesintothealertdialog







WhentheuserclicksOK,the valuetypedbytheuserisreturned totheprogramasastring


Thisisthetext fieldinwhichthe usertypesthe value


Fig. 6.6 | Promptdialogdisplayedbythewindowobject’spromptmethod.

The argument to promptspecifies a message telling the user what to type in the text field. This message is called a prompt because it directs the user to take a specific action. An optional second argument, separated from the first by a comma, may specify the default string displayed in the text field; our code does not supply a second argument. In this case, most browsers leave the text field empty, and Internet Explorer displays the default value undefined. The user types characters in the text field, then clicks the OK button to submit the string to the script. We normally receive input from a user through aGUIcomponentsuchasthepromptdialog,asinthisscript,orthroughanHTML5form GUI component, as we’ll see in later chapters.
The user can type anything in thetext fieldof the promptdialog. For this script, what-ever the user enters is considered the name. If the user clicks the Cancel button, no string value is sent to the script. Instead, the promptdialog submits the value null, a JavaScript keyword signifying that a variable has no value. Note that nullis not a string literal, but rather a predefined term indicating the absence of value. Writing a nullvalue to the doc-ument, however, displays the word nullin the web page.

Assignment Operator
The statement in line 14 assigns the value returned by the windowobject’s promptmethod (a stringcontainingthecharacterstypedbytheuser—orthedefaultvalueornulliftheCancel buttonisclicked)tovariablenamebyusingtheassignmentoperator,=.Thestatementisread as, “namegets the value returned by window.prompt("Pleaseenteryourname").” The =
196	Chapter6 JavaScript:IntroductiontoScripting


operator is called a binary operator because it has two operands—nameand the result of the expression window.prompt("Pleaseenteryourname"). This entire statement is called an assignment because it assigns a value to a variable. The expression to the right of the assign-ment operator is always evaluated first.

Good Programming Practice 6.5
Place a space on each side of a binary operator. This format makes the operator stand out and makes the script more readable.

String Concatenation
Lines 16–17 use document.writelnto display the new welcome message. The expression inside the parentheses uses the operator +to “add” a string (the literal "<h1>Hello,"), the variable name(the string that the user entered in line 14) and another string (the literal ", welcometoJavaScriptprogramming!</h1>"). JavaScript has a version of the +operator for string concatenation that enables a string and a value of another data type (including anotherstring)tobecombined.Theresultofthisoperationisanew(andnormallylonger) string. If we assume that namecontains the string literal "Jim", the expression evaluates as follows: JavaScript determines that the two operands of the first +operator (the string "<h1>Hello,"and the value of variable name) are both strings, then concatenates the two into one string. Next, JavaScript determines that the two operands of the second + opera-tor (the result of the first concatenation operation, the string "<h1>Hello,Jim", and the string ",welcometoJavaScriptprogramming!</h1>") are both strings and concatenates the two. This results in the string "<h1>Hello,Jim,welcometoJavaScriptprogram-ming!</h1>". The browser renders thisstring as part of theHTML5 document. Note that the space between Hello,and Jimis part of the string "<h1>Hello,".
As you’ll see later, the + operator used for string concatenation can convert other vari-able types to strings if necessary. Because string concatenation occurs between two strings, JavaScript must convert other variable types to strings before it can proceed with the oper-ation. For example, if a variable agehas an integer value equal to 21, then the expression "myageis "+ageevaluates to the string "myageis21". JavaScript converts the value of ageto a string and concatenates it with the existing string literal "myageis".
Afterthebrowserinterpretsthe<head>sectionoftheHTML5document(whichcon-tains the JavaScript), it then interprets the <body>of the HTML5 document (which is empty; line 20) and renders the HTML5. The HTML5 page is not rendered until the prompt is dismissed because the prompt pauses execution in the head, before the bodyis processed. If you reload the page after entering a name, the browser will execute the script again and so you can change the name.

6.4.2 Adding Integers
Our next script illustrates another use of promptdialogs to obtain input from the user. Figure 6.7 inputs two integers (whole numbers, such as 7, –11, 0 and 31914) typed by a user at the keyboard, computes the sum of the values and displays the result.
Lines 11–15 declare the variables firstNumber, secondNumber, number1, number2 and sum. Single-line comments state the purpose of each of these variables. Line 18 employs a promptdialog to allow the user to enter a string representing the first of the two integers that will be added. The script assigns the first value entered by the user to the vari-
6.4 ObtainingUserInputwithpromptDialogs   197


able firstNumber. Line 21 displays a promptdialog to obtain the second number to add and assigns this value to the variable secondNumber.

1  <!DOCTYPE html> 2
3  <!-- Fig. 6.7: addition.html --> 4  <!-- Addition script. -->
5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>An Addition Program</title> 9	<script type = "text/javascript">
10	<!--
11	var firstNumber; // first string entered by user 12	var secondNumber; // second string entered by user 13	var number1; // first number to add
14	var number2; // second number to add 15	var sum; // sum of number1 and number2 16
17	// read in first number from user as a string
18	firstNumber = window.prompt( "Enter first integer" ); 19
20	// read in second number from user as a string
21	secondNumber = window.prompt( "Enter second integer" ); 22
23	// convert numbers from strings to integers 24	number1 = parseInt( firstNumber );
25	number2 = parseInt( secondNumber ); 26
27	sum = number1 + number2; // add the numbers 28
29	// display the results
30	document.writeln( "<h1>The sum is " + sum + "</h1>" ); 31	// -->
32	</script>
33	</head><body></body>
34  </html>













Fig. 6.7  | Additionscript. (Part1of2.)
198	Chapter6 JavaScript:IntroductiontoScripting










Fig. 6.7 | Additionscript. (Part2of2.)

As in the preceding example, the user can type anything in the promptdialog. For this script, if the user either types a non-integer value or clicks the Cancel button, a logic error will occur, and the sum of the two values will appear in the HTML5 document as NaN (meaningnotanumber).Alogicerroriscausedbysyntacticallycorrectcodethatproduces an incorrect result. In Chapter 11, we discuss the Numberobject and its methods that can determine whether a value is a number.
Recall that a promptdialog returns to the script as a string the value typed by the user. Lines 24–25 convert the two strings input by the user to integer values that can be used in a calculation. Function parseInt converts its string argument to an integer. Line 24 assigns to the variable number1the integer that function parseIntreturns. Similarly, line 25 assigns an integer value to variable number2. Any subsequent references to number1and number2in the script use these integer values. We refer to parseIntas a function rather than a method because we do not precede the function call with an object name (such as documentor window) and a dot (.). The term method means that the function belongs to a particular object. For example, method writelnbelongs to the documentobject and method promptbelongs to the windowobject.
Line 27 calculates the sum of the variables number1and number2using the addition operator, +, and assigns the result to variable sumby using the assignment operator, =. Notice that the +operator can perform both addition and string concatenation. In this case, the +operator performs addition, because both operands contain integers. After line 27 performs this calculation, line 30 uses document.writelnto display the result of the addition on the web page.

Common Programming Error 6.6
Confusing the +operator used for string concatenation with the +operator used for addi-tion often leads to undesired results. For example, if integer variable yhas the value 5, the expression "y+2="+y+2results in "y+2=52", not "y+2=7", because first the value of y(i.e., 5) is concatenated with the string "y+2=", then the value 2is concatenated with the new, larger string "y+2=5". The expression "y+2="+(y+2)produces the string "y+2=7"because the parentheses ensure that y+2is calculated.

Validating JavaScript
As discussed in the Preface, we validated our code using HTML5, CSS3 and JavaScript validationtools.Browsersaregenerally forgivinganddon’ttypicallydisplayerrormessages to the user. As a programmer, you should thoroughly test your web pages and validate them. Validation tools report two types of messages—errors and warnings. Typically, you must resolve errors; otherwise, your web pages probably won’t render or execute correctly.
6.5 MemoryConcepts   199


Pages with warnings normally render and execute correctly; however, some organizations have strict protocols indicating that all pages must be free of both warnings and errors be-fore they can be posted on a live website.
When you validate this example at www.javascriptlint.com, lines 24–25 produce the warning message:

parseInt missing radix parameter
Function parseInthas an optional second parameter, known as the radix, that specifies the base number system that’s used to parse the number (e.g., 8 for octal, 10 for decimal and 16 for hexadecimal). The default is base 10, but you can specify any base from 2 to 32. For example, the following statement indicates that firstNumbershould be treated as a decimal (base 10) integer:

number1 = parseInt( firstNumber, 10 );
This prevents numbers in other formats like octal (base 8) from being converted to incor-rect values.

6.5 Memory Concepts
Variable names such as number1, number2and sumactually correspond to locations in the computer’s memory. Every variable has a name, a type and a value.
In the addition script in Fig. 6.7, when line 24 executes, the string firstNumber(pre-viously entered by the user in a promptdialog) is converted to an integer and placed into a memory location to which the name number1has been assigned by the interpreter. Sup-pose the user entered the string 45 as the value for firstNumber. The script converts firstNumberto an integer, and the computer places the integer value 45into location number1, as shown in Fig. 6.8. Whenever a value is placed in a memory location, the value replaces the previous value in that location. The previous value is lost.


number1	45

Fig. 6.8 | Memorylocationshowingthenameandvalueofvariablenumber1.

Suppose that the user enters 72as the second integer. When line 25 executes, the script converts secondNumberto an integer and places that integer value, 72, into location number2; then the memory appears as shown in Fig. 6.9.


number1	45

number2	72

Fig. 6.9 | Memorylocationsafterinputtingvaluesforvariablesnumber1andnumber2.

Once the script has obtained values for number1and number2, it adds the values and places the sum into variable sum. The statement
200	Chapter6 JavaScript:IntroductiontoScripting


sum = number1 + number2;
performs the addition and also replaces sum’s previous value. After sumis calculated, the memory appears as shown in Fig. 6.10. Note that the values of number1and number2ap-pear exactly as they did before they were used in the calculation of sum. These values were used, but not destroyed, when the computer performed the calculation—when a value is read from a memory location, the process is nondestructive.


number1	45

number2	72

sum	117

Fig. 6.10  | Memorylocationsaftercalculatingthesumofnumber1andnumber2.

Data Types in JavaScript UnlikeitspredecessorlanguagesC,C++andJava,JavaScriptdoes notrequirevariables tohave a declared type before they can be used in a script. A variable in JavaScript can contain a value of any data type, and in many situations JavaScript automatically converts between values of different types for you. For this reason, JavaScript is referred to as a loosely typed language. When a variable is declared in JavaScript, but is not given a value, the variable has an unde-fined value. Attempting to use the value of such a variable is normally a logic error.
When variables are declared, they’re not assigned values unless you specify them. Assigning the value nullto a variable indicates that it does not contain a value.

6.6 Arithmetic
Many scripts perform arithmetic calculations. Figure 6.11 summarizes the arithmetic op-erators. Note the use of various special symbols not used in algebra. The asterisk (*) indi-cates multiplication; the percent sign (%) is the remainder operator, which will be discussed shortly. The arithmetic operators in Fig. 6.11 are binary operators, because each operates on two operands. For example, the expression sum+valuecontains the binary operator +and the two operands sumand value.


JavaScript
operation

Addition Subtraction Multiplication Division
Remainder

Arithmetic
operator

+
-
*
/
%

Algebraic
expression

f + 7 p – c bm
x
y
x/y or -- or x ¸ y
r mod s

JavaScript
expression

f + 7
p - c
b * m
x / y
r % s


Fig. 6.11 | Arithmeticoperators.
6.6 Arithmetic	201


Remainder Operator, %
JavaScript provides the remainder operator, %, which yields the remainder after division. The expression x%yyields the remainder after xis divided by y. Thus, 17%5yields 2(i.e., 17 divided by 5 is 3, with a remainder of 2), and 7.4%3.1yields 1.2. In later chapters, we consider applications of the remainder operator, such as determining whether one number is a multiple of another. There’s no arithmetic operator for exponentiation in JavaScript. (Chapter 8 shows how to perform exponentiation in JavaScript using the Math object’s powmethod.)
Arithmetic expressions in JavaScript must be written in straight-line form to facilitate entering scripts into the computer. Thus, expressions such as “adivided by b” must be written as a/b, so that all constants, variables and operators appear in a straight line. The following algebraic notation is generally not acceptable to computers:

--
a
b

Parentheses are used to group expressions in the same manner as in algebraic expres-sions. For example, to multiply atimes the quantity b+cwe write:
a * ( b + c )

Operator Precedence
JavaScript applies the operators in arithmetic expressions in a precise sequence determined by the following rules of operator precedence, which are generally the same as those fol-lowed in algebra:
1.  Multiplication, division and remainder operations are applied first. If an expres-sion contains several multiplication, division and remainder operations, opera-tors  are  applied  from  left  to  right.  Multiplication,  division  and  remainder operations are said to have the same level of precedence.
2.  Addition and subtraction operations are applied next. If an expression contains several addition and subtraction operations, operators are applied from left to right. Addition and subtraction operations have the same level of precedence.
The rules of operator precedence enable JavaScript to apply operators in the correct order. When we say that operators are applied from left to right, we’re referring to the associativ-ity of the operators—the order in which operators of equal priority are evaluated. We’ll see that some operators associate from right to left. Figure 6.12 summarizes the rules of oper-ator precedence. The table in Fig. 6.12 will be expanded as additional JavaScript operators are introduced. A complete precedence chart is included in Appendix C.


Operator(s)

*, /or %


+or -

Operation(s)

Multiplication Division Remainder
Addition Subtraction

Orderofevaluation(precedence)

Evaluated first. If there are several such opera-tions, they’re evaluated from left to right.

Evaluated last. If there are several such operations, they’re evaluated from left to right.


Fig. 6.12 | Precedenceofarithmeticoperators.
202	Chapter6 JavaScript:IntroductiontoScripting


Let’s consider several algebraic expressions. Each example lists an algebraic expression and the equivalent JavaScript expression.
The following is an example of an arithmetic mean (average) of five terms:
a + b + c + d + e
5


Algebra:

JavaScript:

m =  --------------------------------------

m = ( a + b + c + d + e ) / 5;


Parentheses are required to group the addition operators, because division has higher pre-cedence than addition. The entire quantity (a+b+c+d+e)is to be divided by 5. If the parentheses are erroneously omitted, we obtain a+b+c+d+e/5, which evaluates as

a + b + c + d + --
e
5

and would not lead to the correct answer.
The following is an example of the equation of a straight line:


Algebra:
JavaScript:

y  =  mx + b
y = m * x + b;

No parentheses are required. The multiplication operator is applied first, because multi-plication has a higher precedence than addition. The assignment occurs last, because it has a lower precedence than multiplication and addition.
As in algebra, it’s acceptable to use unnecessary parentheses in an expression to make the expression clearer. These are also called redundant parentheses. For example, the pre-ceding second-degree polynomial might be parenthesized as follows:

y = ( a * x * x ) + ( b * x ) + c;


6.7 Decision Making: Equality and Relational Operators
This section introduces a version of JavaScript’s ifstatement that allows a script to make a decision based on the truth or falsity of a condition. If the condition is met (i.e., the con-dition is true), the statement in the body of the ifstatement is executed. If the condition is not met (i.e., the condition is false), the statement in the body of the ifstatement is not executed. We’ll see an example shortly.
Conditions in ifstatements can be formed by using the equality operators and rela-tional operators summarized in Fig. 6.13. The relational operators all have the same level of precedence and associate from left to right. The equality operators both have the same level of precedence, which is lower than the precedence of the relational operators. The equality operators also associate from left to right. Each comparison results in a value of trueor false.

Common Programming Error 6.7
Confusing the equality operator, ==, with the assignment operator, =, is a logic error. The equality operator should be read as “is equal to,” and the assignment operator should be read as “gets” or “gets the value of.” Some people prefer to read the equality operator as “double equals” or “equals equals.”
6.7 DecisionMaking:EqualityandRelationalOperators   203



Standardalgebraic equalityoperatoror
relationaloperator

Equality operators =
¹
Relational operators >
< ³
£

JavaScriptequality orrelational
operator


==
!=


>
<
>=
<=

Sample JavaScript
condition


x == y
x != y


x > y
x < y
x >= y
x <= y


Meaningof
JavaScriptcondition


xis equal to y xis not equal to y

xis greater than y xis less than y
xis greater than or equal to y
xis less than or equal to y


Fig. 6.13 | Equalityandrelationaloperators.

The script in Fig. 6.14 uses four ifstatements to display a time-sensitive greeting on a welcome page. The script obtains the local time from the user’s computer and converts it from 24-hour clock format (0–23) to a 12-hour clock format (0–11). Using this value, the script displays an appropriate greeting for the current time of day. The script and sample output are shown in Fig. 6.14. Lines 11–13 declare the variables used in the script. Also note that JavaScript allows you to assign a value to a variable when it’s declared.

Creating and Using a New DateObject
Line 12 sets the variable nowto a new Dateobject, which contains information about the current local time. In Section 6.2, we introduced the documentobject, which encapsulates data pertainingto the current web page. Here, weuse JavaScript’s built-inDateobject to ac-quire the current local time. We create a new object by using the newoperator followed by the type of the object, in this case Date, and a pair of parentheses. Some objects require that arguments be placed in the parentheses to specify details about the object to be created. In

1  <!DOCTYPE html> 2
3  <!-- Fig. 6.14: welcome5.html -->
4  <!-- Using equality and relational operators. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Using Relational Operators</title> 9	<script type = "text/javascript">
10	<!--
11	var name; // string entered by the user
12	var now = new Date();	// current date and time 13	var hour = now.getHours(); // current hour (0-23) 14
15	// read the name from the prompt box as a string
16	name = window.prompt( "Please enter your name" );

Fig. 6.14  | Usingequalityandrelationaloperators.(Part1of2.)
204	Chapter6 JavaScript:IntroductiontoScripting


17
18	// determine whether it’s morning 19	if ( hour < 12 )
20	document.write( "<h1>Good Morning, " ); 21
22	// determine whether the time is PM 23	if ( hour >= 12 )
24	{
25	// convert to a 12-hour clock 26	hour = hour - 12;
27
28	// determine whether it is before 6 PM 29	if ( hour < 6 )
30	document.write( "<h1>Good Afternoon, " ); 31
32	// determine whether it is after 6 PM 33	if ( hour >= 6 )
34	document.write( "<h1>Good Evening, " ); 35            } // end if
36
37	document.writeln( name +
38	", welcome to JavaScript programming!</h1>" ); 39            // -->
40	</script>
41	</head><body></body>
42  </html>










Fig. 6.14  | Usingequalityandrelationaloperators.(Part2of2.)

this case, we leave the parentheses empty to create a default Dateobject containing informa-tionaboutthecurrentdateandtime.Afterline12executes,thevariablenowreferstothenew Dateobject. We did not need to use the newoperator when we used the documentand win-dowobjects because these objects always are created by the browser. Line 13 sets the variable hourtoanintegerequaltothecurrenthour(ina24-hourclockformat)returnedbytheDate object’s getHoursmethod. Chapter 11 presents a more detailed discussion of the Dateob-ject’s attributes and methods, and of objects in general. The script uses window.promptto allow the user to enter a name to display as part of the greeting (line 16).

Decision-Making with the ifStatement
To display the correct time-sensitive greeting, the script must determine whether the user is visiting the page during the morning, afternoon or evening. The first ifstatement (lines
6.7 DecisionMaking:EqualityandRelationalOperators   205


19–20) compares the value of variable hourwith 12. If houris less than 12, then the user is visiting the page during the morning, and the statement at line 20 outputs the string "Good morning". If this condition is not met, line 20 is not executed. Line 23 determines whether houris greater than or equal to 12. If houris greater than or equal to 12, then the user is visiting the page in either the afternoon or the evening. Lines 24–35 execute to de-termine the appropriate greeting. If houris less than 12, then the JavaScript interpreter does not execute these lines and continues to line 37.

Blocks and Decision-Making with Nested ifStatements Thebrace{inline24beginsablockofstatements(lines24–35)thatareexecutedtogether if houris greater than or equal to 12. Line 26 subtracts 12from hour, converting the cur-rent hour from a 24-hour clock format (0–23) to a 12-hour clock format (0–11). The if statement (line 29) determines whether houris now less than 6. If it is, then the time is between noon and 6 PM, and line 30 outputs the beginning of an HTML5 h1element ("<h1>GoodAfternoon, "). If houris greater than or equal to 6, the time is between 6 PM and midnight, and the script outputs the greeting "GoodEvening"(lines 33–34). The brace }in line 35 ends the block of statements associated with the ifstatement in line 23. Note that ifstatements can be nested—one ifstatement can be placed inside another. The ifstatements that determine whether the user is visiting the page in the afternoon or the evening (lines 29–30 and lines 33–34) execute only if the script has already established that houris greater than or equal to 12(line 23). If the script has already determined the current time of day to be morning, these additional comparisons are not performed. Chapter 7 discusses blocks and nested ifstatements. Finally, lines 37–38 output the rest of the HTML5 h1element (the remaining part of the greeting), which does not depend on the time of day.

Good Programming Practice 6.6 Includecommentsaftertheclosingcurlybraceofcontrolstatements(suchasifstatements) to indicate where the statements end, as in line 35 of Fig. 6.14.

Note the indentation of the ifstatements throughout the script. Such indentation enhances script readability.

Good Programming Practice 6.7
Indent the statement in the body of an ifstatement to make the body of the statement stand out and to enhance script readability.

The Empty Statement
Note that there’s no semicolon (;) at the end of the first line of each ifstatement. Includ-ing such a semicolon would result in a logic error at execution time. For example,

if ( hour < 12 ) ;
document.write( "<h1>Good Morning, " );
would actually be interpreted by JavaScript erroneously as

if ( hour < 12 ) ;
document.write( "<h1>Good Morning, " );
206	Chapter6 JavaScript:IntroductiontoScripting


where the semicolon on the line by itself—called the empty statement—is the statement toexecuteiftheconditionintheifstatementistrue.Whentheemptystatementexecutes, no task is performed in the script. The script then continues with the next statement, which executes regardless of whether the condition is true or false. In this example, "<h1>Good Morning, "would be printed regardless of the time of day.

Error-Prevention Tip 6.2
A lengthy statement may be spread over several lines. If a single statement must be split across lines, choose breaking points that make sense, such as after a comma in a comma-separated list or after an operator in a lengthy expression. If a statement is split across two or more lines, indent all subsequent lines.

Validating This Example’s Script
When you validate this example with www.javascriptlint.com, the following warning message is displayed for the ifstatements in lines 19, 29 and 33:

block statement without curly braces
You saw that an ifstatement’s body may contain multiple statements in a block that’s de-limitedbycurlybraces(lines23–35).Thecurlybracesarenotrequiredforanifstatement thathasaone-statementbody,suchastheonesinlines19,29and33.Manyprogrammers consider it a good practice to enclose every ifstatement’s body in curly braces—in fact, manyorganizationsrequirethis.Forthisreason,thevalidatorissuestheprecedingwarning message.Youcaneliminatethisexample’swarningmessagesby enclosingtheifstatement bodies in curly braces. For example, the ifat lines 19–20 can be written as:

if ( hour < 12 ) {
document.write( "<h1>Good Morning, " ); }

The Strict Equals (===) and Strict Does Not Equal (!==) Operators
As we mentioned in Section 6.5, JavaScript can convert between types for you. This in-cludes cases in which you’re comparing values. For example, the comparison "75"==75 yields the value truebecause JavaScript converts the string "75"to the number 75before performingtheequality(==)comparison.Topreventimplicitconversionsincomparisons, which can lead to unexpected results, JavaScript provides the strict equals (===) and strict does not equal (!==) operators. The comparison "75"===75yields the value falsebe-cause one operand is a string and the other is a number. Similarly, 75"!==75yields true because the operand’s types are not equal, therefore the values are not equal. If you do not use these operators when comparing values to null, 0, true, falseor the empty string (""), javascriptlint.com’s JavaScript validator displays warnings of potential implicit conversions.

Operator Precedence Chart
The chart in Fig. 6.15 shows the precedence of the operators introduced in this chapter. The operators are shown from top to bottom in decreasing order of precedence. Note that all of these operators, with the exception of the assignment operator, =, associate from left to right. Addition is left associative, so an expression like x+y+zis evaluated as if it had
6.8 WebResources   207


been written as (x+y)+z. The assignment operator, =, associates from right to left, so an expression like x=y=0is evaluated as if it had been written as x=(y=0), which first assigns the value 0to variable y, then assigns the result of that assignment, 0, to x.

Good Programming Practice 6.8
Refer to the operator precedence chart when writing expressions containing many opera-tors. Confirm that the operations are performed in the order in which you expect them to be performed. If you’re uncertain about the order of evaluation, use parentheses to force the order, exactly as you would do in algebraic expressions. Be sure to observe that some operators,suchasassignment(=),associatefromrighttoleftratherthanfromlefttoright.


Operators	Associativity	Type


*   /   %              left to right +   -                  left to right
<   <=  >  >=	left to right

multiplicative additive
relational



==  !=  === !===
=

left to right
right to left

equality
assignment


Fig. 6.15 | Precedenceandassociativityoftheoperatorsdiscussedsofar.

6.8 Web Resources www.deitel.com/javascript
The Deitel JavaScript Resource Center contains links to some of the best JavaScript resources on the web.Thereyou’llfindcategorizedlinkstoJavaScripttools,codegenerators,forums,books,libraries, frameworksandmore.Alsocheck outthetutorialsforallskilllevels,fromintroductorytoadvanced.



Summary
Section 6.1 Introduction
•  JavaScript (p. 186) is used to enhance the functionality and appearance of web pages.

Section 6.2 Your First Script: Displaying a Line of Text with JavaScript in a Web Page •  Often, JavaScripts appear in the <head>section of the HTML5 document.
•  The browser interprets the contents of the <head>section first.
•  The <script>tag indicates to the browser that the text that follows is part of a script (p. 186). Attribute type(p. 187) specifies the MIME type of the scripting language used in the script— such as text/javascript.
•  A string of characters (p. 187) can be contained between double (") quotation marks (p. 187). •  A string (p. 187) is sometimes called a character string, a message or a string literal.
•  The browser’s documentobject (p. 188) represents the HTML5 document the browser is currently displaying. The documentobject allows a you to specify HTML5 text to display in the document.
•  The browser creates a complete set of objects that allow you to access and manipulate every ele-ment of an HTML5 document.
208	Chapter6 JavaScript:IntroductiontoScripting


•  An object (p. 188) resides in the computer’s memory and contains information used by the script. The term object normally implies that attributes (data) (p. 188) and behaviors (methods) (p. 188) are associated with the object. The object’s methods use the attributes’ data to perform useful actions for the client of the object (i.e., the script that calls the methods).
•  The documentobject’s writelnmethod (p. 188) writes a line of HTML5 text in a document.
•  Every statement ends with a semicolon (also known as the statement terminator; p. 188), al-though this practice is not required by JavaScript.
•  JavaScript is case sensitive. Not using the proper uppercase and lowercase letters is a syntax error.

Section 6.3 Modifying Your First Script
•  Sometimes it’s useful to display information in windows called dialogs (or dialog boxes; p. 191) that “pop up” on the screen to grab the user’s attention. Dialogs typically display important mes-sages to the user browsing the web page.
•  The browser’s windowobject (p. 191) uses method alert(p. 191) to display an alert dialog.
•  The escape sequence \nis the newline character (p. 192). It causes the cursor in the HTML5 document to move to the beginning of the next line.

Section 7.4 Obtaining User Input with promptDialogs
•  Keywords (p. 193) are words with special meaning in JavaScript.
•  The keyword var(p. 193) at the beginning of the statement indicates that the word name is a variable. A variable (p. 193) is a location in the computer’s memory where a value can be stored for use by a script. All variables have a name and value, and should be declared with a var state-ment before they’re used in a script.
•  The name of a variable can be any valid identifier consisting of letters, digits, underscores ( _) and dollar signs ($) that does not begin with a digit and is not a reserved JavaScript keyword.
•  Declarations end with a semicolon and can be split over several lines with each variable in the declaration separated by a comma—known as a comma-separated list of variable names. Several variables may be declared in one declaration or in multiple declarations.
•  It’s helpful to indicate the purpose of a variable in the script by placing a JavaScript comment at the end of the variable’s declaration. A single-line comment (p. 194) begins with the characters //and terminates at the end of the line. Comments do not cause the browser to perform any action when the script is interpreted; rather, comments are ignoredby the JavaScript interpreter.
•  Multiline comments begin with the delimiter /*and end with the delimiter */. All text between the delimiters of the comment is ignored by the interpreter.
•  The windowobject’s promptmethod displays a dialog into which the user can type a value. The first argument is a message (called a prompt) that directs the user to take a specific action. An optional second argument, separated from the first by a comma, may specify the default string to be displayed in the text field.
•  A variable is assigned a value with an assignment (p. 196), using the assignment operator, =. The =operator is called a binary operator (p. 196), because it has two operands (p. 196).
•  JavaScript has a version of the +operator for string concatenation (p. 196) that enables a string and a value of another data type (including another string) to be concatenated.

Section 6.5 Memory Concepts
•  Every variable has a name, a type and a value.
•  When a value is placed in a memory location, the value replaces the previous value in that loca-tion. When a value is read out of a memory location, the process is nondestructive.
Self-ReviewExercises   209


•  JavaScript does not require variables to have a declared type before they can be used in a script. A variable in JavaScript can contain a value of any data type, and in many situations, JavaScript automatically converts between values of different types for you. For this reason, JavaScript is re-ferred to as a loosely typed language (p. 200).
•  When a variable is declared in JavaScript, but is not given a value, it has an undefined value (p. 200). Attempting to use the value of such a variable is normally a logic error.
•  When variables are declared, they’re not assigned default values, unless you specify them. To in-dicate that a variable does not contain a value, you can assign the value nullto it.

Section 6.6 Arithmetic
•  The basic arithmetic operators (+, -, *, /, and %; p. 200) are binary operators, because each op-erates on two operands.
•  Parentheses can be used to group expressions in the same manner as in algebraic expressions.
•  JavaScriptapplies theoperators inarithmetic expressions in a precise sequencedeterminedby the following rules of operator precedence (p. 201).
•  When we say that operators are applied from left to right, we’re referring to the associativity of the operators (p. 201). Some operators associate from right to left.

Section 6.7 Decision Making: Equality and Relational Operators
•  JavaScript’s ifstatement (p. 202) allows a script to make a decision based on the truth or falsity of a condition. If the condition is met (i.e., the condition is true; p. 202), the statement in the body of the ifstatement is executed. If the condition is not met (i.e., the condition is false), the statement in the body of the ifstatement is not executed.
•  Conditions in ifstatements can be formed by using the equality operators (p. 202) and relation-al operators (p. 202).

Self-Review Exercises
6.1	Fill in the blanks in each of the following statements: a)	begins a single-line comment.
b)  Every JavaScript statement should end with a(n)	. c)   The	statement is used to make decisions.
d)  The	object displays alertdialogs and promptdialogs. e)                  words are reserved for use by JavaScript.
f)   Methods	and	of the	object write HTML5 text into an HTML5 document.
6.2	State whether each of the following is true or false. If false, explain why.
a)  Comments cause the computer to print the text after the //on the screen when the script is executed.
b)  JavaScript considers the variables numberand NuMbErto be identical. c)   The remainder operator (%) can be used only with numeric operands.
d)  The arithmetic operators *, /, %, +and -all have the same level of precedence. e)   Method parseIntconverts an integer to a string.
6.3       Write JavaScript statements to accomplish each of the following tasks: a)  Declare variables c, thisIsAVariable, q76354and number.
b)  Displayadialogaskingtheusertoenteraninteger.Showadefaultvalueof0inthedialog. c)   Convert a string to an integer, and store the converted value in variable age. Assume
that the string is stored in stringValue.
210	Chapter6 JavaScript:IntroductiontoScripting


d)  If the variable numberis not equal to 7, display "Thevariablenumberisnotequalto 7"in a message dialog.
e)   Output a line of HTML5 text that will display the message "ThisisJavaScript"in the HTML5 document.
6.4	Identify and correct the errors in each of the following statements: a)  if ( c < 7 );
window.alert( "c is less than 7" ); b)  if ( c => 7 )
window.alert( "c is equal to or greater than 7" );
6.5	Write a statement (or comment) to accomplish each of the following tasks:
a)  State that a script will calculate the product of three integers [Hint: Use text that helps to document a script.]
b)  Declare the variables x, y, zand result. c)   Declare the variables xVal, yValand zVal.
d)  Prompt the user to enter the first value, read the value from the user and store it in the variable xVal.
e)   Prompt the user to enter the second value, read the value from the user and store it in the variable yVal.
f)   Prompt the user to enter the third value, read the value from the user and store it in the variable zVal.
g)  Convert the string xValto an integer, and store the result in the variable x. h)  Convert the string yValto an integer, and store the result in the variable y. i)   Convert the string zValto an integer, and store the result in the variable z.
j)   Compute the product of the three integers contained in variables x, yand z, and assign the result to the variable result.
k)  Write a line of HTML5 text containing the string "Theproductis"followed by the value of the variable result.
6.6	Using the statements you wrote in Exercise 6.5, write a complete script that calculates and prints the product of three integers.


Answers to Self-Review Exercises
6.1	a)  //. b) Semicolon (;).  c) if.  d) window.  e) Keywords. f) write, writeln, document.
6.2	a)  False. Comments do not cause any action to be performed when the script is executed. They’reusedtodocumentscriptsandimprovetheirreadability. b) False.JavaScriptiscasesensitive, so these variables are distinct.  c) True.  d) False. The operators *, /and %are on the same level of precedence, and the operators +and -are on a lower level of precedence.  e) False. Function par-seIntconverts a string to an integer value.
6.3	a)  var c, thisIsAVariable, q76354, number;
b)  value = window.prompt( "Enter an integer", "0" ); c)   var age = parseInt( stringValue );
d)  if (number != 7 )
window.alert( "The variable number is not equal to 7" ); e)   document.writeln( "This is JavaScript" );
6.4	a)  Error: There should not be a semicolon after the right parenthesis of the condition in the ifstatement.
Correction: Remove the semicolon after the right parenthesis. [Note: The result of this error is that the output statement is executed whether or not the condition in the if
AnswerstoSelf-ReviewExercises   211


statementistrue.Thesemicolonaftertherightparenthesisisconsideredanemptystate-ment—a statement that does nothing.]
b)  Error: The relational operator =>is incorrect. Correction: Change =>to >=.
6.5	 a)  // Calculate the product of three integers b)  var x, y, z, result;
c)   var xVal, yVal, zVal;
d)  xVal = window.prompt( "Enter first integer:", "0" ); e)   yVal = window.prompt( "Enter second integer:", "0" ); f)   zVal = window.prompt( "Enter third integer:", "0" ); g)  x = parseInt( xVal );
h)  y = parseInt( yVal ); i)   z = parseInt( zVal ); j)   result = x * y * z;
k)  document.writeln( "<h1>The product is " + result + "</h1>" );
6.6	The script is as follows:

1   <!DOCTYPE html> 2
3   <!-- Exercise 6.6: product.html --> 4   <html>
5	<head>
6	<meta charset = "utf-8">
7	<title>Product of Three Integers</title> 8	<script type = "text/javascript">
9	<!--
10	// Calculate the product of three integers 11	var x, y, z, result;
12	var xVal, yVal, zVal; 13
14	xVal = window.prompt( "Enter first integer:" ); 15	yVal = window.prompt( "Enter second integer:" ); 16	zVal = window.prompt( "Enter third integer:" ); 17
18	x = parseInt( xVal ); 19	y = parseInt( yVal ); 20	z = parseInt( zVal ); 21
22	result = x * y * z;
23	document.writeln( "<h1>The product is " + result + "<h1>" ); 24	// -->
25	</script>
26	</head><body></body> 27   </html>
212	Chapter6 JavaScript:IntroductiontoScripting










Exercises
6.7	Fill in the blanks in each of the following statements:
a)	are used to document a script and improve its readability.
b)  A dialog capable of receiving input from the user is displayed with method	of object	.
c)   A JavaScript statement that makes a decision is the	statement. d)  Calculations are normally performed by	operators.
e)   Method	of object	displays a dialog with a message to the user.
6.8	Write JavaScript statements that accomplish each of the following tasks: a)  Display the message "Entertwonumbers"using the windowobject. b)  Assign the product of variables band cto variable a.
c)   State that a script performs a sample payroll calculation.
6.9	 State whether each of the following is true or false. If false, explain why. a)  JavaScript operators are evaluated from left to right.
b)  The following are all valid variable names: _under_bar_, m928134, t5, j7, her_sales$, his_$account_total, a, b$, c, z, z2.
c)   AvalidJavaScriptarithmeticexpressionwithnoparenthesesisevaluatedfromlefttoright. d)  The following are all invalid variable names: 3g, 87, 67h2, h22, 2h.
6.10	Fill in the blanks in each of the following statements:
a)  What arithmetic operations have the same precedence as multiplication?	. b)  When parentheses are nested, which ones evaluate first?	.
c)   A location in the computer’s memory that may contain different values at various times throughout the execution of a script is called a	.
6.11	Whatdisplays in thealertdialogwhen eachof thegiven JavaScript statements is performed? Assume that x=2and y=3.
a)  window.alert( "x = " + x );
b)  window.alert( "The value of x + x is " + ( x + x ) ); c)   window.alert( "x =" );
d)  window.alert( ( x + y ) + " = " + ( y + x ) );
6.12	Which of the following JavaScript statements contain variables whose values are changed? a)  p = i + j + k + 7;
b)  window.alert( "variables whose values are destroyed" ); c)   window.alert( "a = 5" );
d)  stringVal = window.prompt( "Enter string:" );
6.13	 Giveny=ax3 +7,whichofthefollowingarecorrectJavaScriptstatementsforthisequation? a)  y = a * x * x * x + 7;
b)  y = a * x * x * (x + 7); c)   y = (a * x) * x * (x + 7); d)  y = (a * x) * x * x + 7;
Exercises   213


e)   y = a * (x * x * x) + 7; f)   y = a * x * (x * x + 7);
6.14	State the order of evaluation of the operators in each of the following JavaScript statements, and show the value of xafter each statement is performed.
a)  x = 7 + 3 * 6 / 2 - 1;
b)  x = 2 % 2 + 2 * 2 - 2 / 2;
c)   x = ( 3 * 9 * ( 3 + ( 9 * 3 / ( 3 ) ) ) );
6.15	Write a script that displays the numbers 1 to 4 on the same line, with each pair of adjacent numbers separated by one space. Write the script using the following methods:
a)  Using one document.writelnstatement. b)  Using four document.writestatements.
6.16	Write a script that asks the user to enter two numbers, obtains the two numbers from the user and outputs text that displays the sum, product, difference and quotient of the two numbers. Use the techniques shown in Fig. 6.7.
6.17	Write a script that asks the user to enter two integers, obtains the numbers from the user and outputs text that displays the larger number followed by the words “islarger” in an alert dia-log. If the numbers are equal, output HTML5 text that displays the message “Thesenumbersare equal.” Use the techniques shown in Fig. 6.14.
6.18	Write a scriptthat takes threeintegers from the user and displays thesum,average, product, smallest and largest of the numbers in an alertdialog.
6.19	Write a script that gets from the user the radius of a circle and outputs HTML5 text that displays thecircle’s diameter, circumference andarea. Use theconstant value 3.14159 forp. Usethe GUI techniques shown in Fig. 6.7. [Note: You may also use the predefined constant Math.PIfor the value of p. This constant is more precise than the value 3.14159. The Mathobject is defined by Java-Script and provides many common mathematical capabilities.] Use the following formulas (r is the radius): diameter = 2r, circumference = 2pr, area = pr2.
6.20     Write a script that reads five integers and determines and outputs markup that displays the largestandsmallestintegersinthegroup.Useonlythescriptingtechniquesyoulearnedinthischapter.
6.21	Write a script that reads an integer and determines and outputs HTML5 text that displays whether it’s odd or even. [Hint: Use the remainder operator. An even number is a multiple of 2. Any multiple of 2 leaves a remainder of zero when divided by 2.]
6.22	Write a script that reads in two integers and determines and outputs HTML5 text that dis-plays whether the first is a multiple of the second. [Hint: Use the remainder operator.]
6.23	Write a script that inputs three numbers and determines and outputs markup that displays the number of negative numbers, positive numbers and zeros input.
6.24	Write a script that calculates the squares and cubes of the numbers from 0 to 5 and outputs HTML5 text that displays the resulting values in an HTML5 table format, as show below. [Note: This script does not require any input from the user.]
7 Let’s all move one place on. —Lewis Carroll

The wheel is come full circle. —William Shakespeare

How many apples fell on Newton’sheadbeforehetookthe hint!
—Robert Frost





JavaScript:Control StatementsI




Objectives Inthischapteryouwill:
ÿ   Learnbasicproblem-solving
techniques.
ÿ   Developalgorithmsthrough theprocessoftop-down,
stepwiserefinement.
ÿ   Usetheifandif…else selectionstatementsto chooseamongalternative
actions.
ÿ   Usethewhilerepetition statementtoexecute statementsinascript
repeatedly.
ÿ   Implementcounter-controlledrepetitionand
sentinel-controlledrepetition.
ÿ   Usetheincrement, decrementandassignment
operators.
7.1 Introduction   215



7.1  Introduction 7.2  Algorithms 7.3  Pseudocode
7.4  ControlStatements 7.5  ifSelectionStatement
7.6  if…elseSelectionStatement 7.7  whileRepetitionStatement
7.8  FormulatingAlgorithms:Counter-ControlledRepetition

7.9  FormulatingAlgorithms:Sentinel-ControlledRepetition
7.10  FormulatingAlgorithms:Nested ControlStatements
7.11  AssignmentOperators
7.12  IncrementandDecrementOperators 7.13  WebResources


Summary | Self-Review Exercises | Answers to Self-Review Exercises | Exercises


7.1 Introduction
Before writing a script to solve a problem, we must have a thorough understanding of the problem and a carefully planned approach to solving it. When writing a script, it’s equally essential to understand the types of building blocks that are available and to employ prov-en program-construction principles. In this chapter and Chapter 8, we discuss these issues as we present the theory and principles of structured programming.

7.2 Algorithms
Any computable problem can be solved by executing a series of actions in a specific order. A procedure for solving a problem in terms of
1.  the actions to be executed, and
2.  the order in which the actions are to be executed
is called an algorithm. Correctly specifying the order in which the actions are to execute isimportant—thisiscalledprogramcontrol.InthischapterandChapter 8,weinvestigate the program-control capabilities of JavaScript.

7.3 Pseudocode
Pseudocode is an informal language that helps you develop algorithms. The pseudocode we present here is useful for developing algorithms that will be converted to structured portionsofJavaScriptprograms.PseudocodeissimilartoeverydayEnglish;it’sconvenient and user friendly, although it’s not an actual computer programming language.

Software Engineering Observation 7.1
Pseudocode is often used to “think out” a script during the script-design process. Carefully prepared pseudocode can easily be converted to JavaScript.

7.4 Control Statements
Normally, statements in a script execute one after the other in the order in which they’re written. This process is called sequential execution. Various JavaScript statements we’ll
216	Chapter7 JavaScript:ControlStatementsI


soon discuss enable you to specify that the next statement to execute may not necessarily be the next one in sequence. This is known as transfer of control.
During the 1960s, it became clear that the indiscriminate use of transfers of control was the root of much difficulty experienced by software development groups. The finger of blame was pointed at the goto statement, which allowed the programmer to specify a transfer of control to one of a wide range of possible destinations in a program. Research demonstrated that programs could be written without gotostatements. The notion of so-called structured programming became almost synonymous with “goto elimination.” JavaScriptdoesnothaveagotostatement.Structuredprogramsareclearer,easiertodebug and modify and more likely to be bug free in the first place.
Research determined that all programs could be written in terms of only three control structures, namely the sequence structure, the selection structure and the repetition structure. The sequence structure is built into JavaScript—unless directed otherwise, the computer executes JavaScript statements one after the other in the order in which they’re written (i.e., in sequence). The flowchart segment of Fig. 7.1 illustrates a typical sequence structure in which two calculations are performed in order.





addgradetototal


add1tocounter


total = total + grade;


counter = counter + 1;




Fig. 7.1 | FlowchartingJavaScript’ssequencestructure.

A flowchart is a graphical representation of an algorithm or of a portion of an algo-rithm.Flowchartsaredrawnusingcertainspecial-purposesymbols,suchasrectangles,dia-monds, ovals and small circles; these symbols are connected by arrows called flowlines, which indicate the order in which the actions of the algorithm execute.
Like pseudocode, flowcharts often are useful for developing and representing algo-rithms, although many programmers prefer pseudocode. Flowcharts show clearly how control structures operate; that’s all we use them for in this text.
Consider the flowchart segment for the sequence structure in Fig. 7.1. For simplicity, we use the rectangle symbol (or action symbol) to indicate any type of action, including a calculation or an input/output operation. The flowlines in the figure indicate the order in which the actions are performed—the first action adds gradeto total, then the second action adds 1to counter. JavaScript allows us to have as many actions as we want in a sequence structure. Anywhere a single action may be placed, as we’ll soon see, we may place several actions in sequence.
Inaflowchartthatrepresentsacompletealgorithm,ovalsymbolscontainingthewords “Begin” and “End” represent the start and end of the algorithm, respectively. In a flow-chart that shows only a portion of an algorithm, as in Fig. 7.1, the oval symbols are omitted in favor of using small circle symbols, also called connector symbols.
7.4 ControlStatements   217


Perhaps the most important flowcharting symbol is the diamond symbol, also called the decision symbol, which indicates that a decision is to be made. We discuss the dia-mond symbol in the next section.
JavaScript provides three types of selection structures; we discuss each in this chapter and in Chapter 8. The ifselection statement performs (selects) an action if a condition is trueorskipstheactioniftheconditionisfalse.Theif…elseselectionstatementperforms an action if a condition is true and performs a different action if the condition is false. The switch selection  statement  (Chapter 8)  performs  one  of  many  different  actions, depending on the value of an expression.
The ifstatement is called a single-selection statement because it selects or ignores a single action (or, as we’ll soon see, a single group of actions). The if…elsestatement is a double-selection statement because it selects between two different actions (or groups of actions). The switchstatement is a multiple-selection statement because it selects among many different actions (or groups of actions).
JavaScript provides four repetition statements—while, do…while, forand for…in. (do…whileand forare covered in Chapter 8; for…inis covered in Chapter 10.) Each ofthewords if, else, switch, while, do,forandinis aJavaScriptkeyword.Thesewords are reserved by the language to implement various features, such as JavaScript’s control structures. In addition to keywords, JavaScript has other words that are reserved for use by thelanguage, such as the values null, trueand false, andwords that are reservedfor pos-sible future use. A complete list of JavaScript reserved words is shown in Fig. 7.2.

Common Programming Error 7.1
Using a keyword as an identifier (e.g., for variable names) is a syntax error.



JavaScriptreservedkeywords


break	case	catch
delete	do	else
for	function	if
new	null	return
throw	true	try
void	while	with

continue
false
in
switch
typeof

default
finally
instanceof
this
var

Keywords that are reserved but not used by JavaScript


class
implements
private
yield

const
import
protected

enum	export
interface	let
public	static

extends
package
super


Fig. 7.2 | JavaScriptreservedkeywords.

As we’ve shown, JavaScript has only eight control statements: sequence, three types of selection and four types of repetition. A script is formed by combining control statements as necessary to implement the script’s algorithm. Each control statement is flowcharted
218	Chapter7 JavaScript:ControlStatementsI


with two small circle symbols, one at the entry point to the control statement and one at the exit point.
Single-entry/single-exit control statements make it easy to build scripts; the control statements are attached to one another by connecting the exit point of one to the entry point of thenext. Thisprocess is similar to theway in which a child stacks building blocks, so we call it control-statement stacking. We’ll learn that there’s only one other way in which control statements may be connected—control-statement nesting. Thus, algo-rithms in JavaScript are constructed from only eight different types of control statements combined in only two ways.

7.5 ifSelection Statement
A selection statement is used to choose among alternative courses of action in a script. For example, suppose that the passing grade on an examination is 60 (out of 100). Then the pseudocode statement

If student’s grade is greater than or equal to 60 Print “Passed”
determines whether the condition “student’s grade is greater than or equal to 60” is true or false. If the condition is true, then “Passed” is printed, and the next pseudocode state-ment in order is “performed” (remember that pseudocode is not a real programming lan-guage). If the condition is false, the print statement is ignored, and the next pseudocode statement in order is performed.
Note that the second line of this selection statement is indented. Such indentation is optionalbutishighlyrecommended,becauseitemphasizestheinherentstructureofstruc-tured programs. The JavaScript interpreter ignores white-space characters—blanks, tabs and newlines used for indentation and vertical spacing.

Good Programming Practice 7.1
Consistently applying reasonable indentation conventions improves script readability. We use three spaces per indent.

The preceding pseudocode If statement can be written in JavaScript as

if ( studentGrade >= 60 ) document.writeln( "<p>Passed</p>" );
The JavaScript code corresponds closely to the pseudocode. This similarity is the reason that pseudocode is a useful script-development tool. The statement in the body of the if statement outputs the character string "Passed"in the HTML5 document.
The flowchart in Fig. 7.3 illustrates the single-selection ifstatement. This flowchart contains what is perhaps the most important flowcharting symbol—the diamond symbol (ordecisionsymbol),whichindicatesthatadecisionistobemade.Thedecisionsymbolcon-tains an expression, such as a condition, that can be either true or false. The decision symbol has two flowlines emerging from it. One indicates the path to follow in the script when the expression in the symbol is true; the other indicates the path to follow in the script when the expression is false. A decision can be made on any expression that evaluates to a value of JavaScript’s boolean type (i.e., any expression that evaluates to true or false—also known as a boolean expression).
7.6 if…elseSelectionStatement   219







grade>=60	true	print“Passed”


false


Fig. 7.3 | Flowchartingthesingle-selectionifstatement.


Software Engineering Observation 7.2
In JavaScript, any nonzero numeric value in a condition evaluates to true, and 0 evaluates to false. For strings, any string containing one or more characters evaluates to true, and the empty string (the string containing no characters, represented as "") evaluates to false. Also, a variable that’s been declared with var but has not been assigned a value evaluates to false.

Note that the ifstatement is a single-entry/single-exit control statement. We’ll soon learn that the flowcharts for the remaining control statements also contain (besides small circle symbols and flowlines) only rectangle symbols, to indicate the actions to be per-formed, and diamond symbols, to indicate decisions to be made. This type of flowchart emphasizes the action/decision model of programming. We’ll discuss the variety of ways in which actions and decisions may be written.

7.6 if…elseSelection Statement
The ifselection statement performs an indicated action only when the condition evalu-ates to true; otherwise, the action is skipped. The if…elseselection statement allows you to specify that a different action is to be performed when the condition is truethan when the condition is false. For example, the pseudocode statement

If student’s grade is greater than or equal to 60 Print “Passed”
Else
Print “Failed”
prints Passedif the student’s grade is greater than or equal to 60 and prints Failedif the student’s grade is less than 60. In either case, after printing occurs, the next pseudocode statement in sequence (i.e., the next statement after the whole if…elsestatement) is per-formed. Note that the body of the Else part of the statement is also indented.

Good Programming Practice 7.2
Indent both body statements of an if…elsestatement.
220	Chapter7 JavaScript:ControlStatementsI


The preceding pseudocode If…Else statement may be written in JavaScript as

if ( studentGrade >= 60 ) document.writeln( "<p>Passed</p>" );
else
document.writeln( "<p>Failed</p>" );

The flowchart in Fig. 7.4 illustrates the if…elseselection statement’s flow of control. Once again, note that the only symbols in the flowchart besides small circles and arrows are rectangles for actions and a diamond for a decision.






false	grade>=60	true

print“Failed”	print“Passed”





Fig. 7.4  | Flowchartingthedouble-selectionif…elsestatement.


Conditional Operator (?:)
JavaScript provides an operator, called the conditional operator (?:), that’s closely related totheif…elsestatement. Theoperator ?:is JavaScript’s only ternary operator—ittakes three operands. The operands together with the ?:form a conditional expression. The first operand is a boolean expression, the second is the value for the conditional expression if the expression evaluates to trueand the third is the value for the conditional expression if the expression evaluates to false. For example, the following statement

document.writeln( studentGrade >= 60 ? "Passed" : "Failed" );

contains a conditional expression that evaluates to the string "Passed"if the condition studentGrade>=60is true and evaluates to the string "Failed"if the condition is false. Thus,thisstatementwiththeconditionaloperatorperformsessentiallythesameoperation as the preceding if…elsestatement.


Nested if...elseStatements
Nested if…elsestatements test for multiple cases by placing if…elsestatements inside if…elsestatements. For example, the following pseudocode statement indicates that the script should print Afor exam grades greater than or equal to 90, Bfor grades in the range 80 to 89, Cfor grades in the range 70 to 79, Dfor grades in the range 60 to 69 and Ffor all other grades:
7.6 if…elseSelectionStatement   221


If student’s grade is greater than or equal to 90 Print “A”
Else
If student’s grade is greater than or equal to 80 Print “B”
Else
If student’s grade is greater than or equal to 70 Print “C”
Else
If student’s grade is greater than or equal to 60 Print “D”
Else
Print “F”
This pseudocode may be written in JavaScript as

if ( studentGrade >= 90 ) document.writeln( "A" );
else
if ( studentGrade >= 80 ) document.writeln( "B" );
else
if ( studentGrade >= 70 ) document.writeln( "C" );
else
if ( studentGrade >= 60 ) document.writeln( "D" );
else
document.writeln( "F" );
If studentGradeis greater than or equal to 90, all four conditions will be true, but only the document.writelnstatement after the first test will execute. After that particular doc-ument.writelnexecutes, the elsepart of the outer if…elsestatement is skipped.

Good Programming Practice 7.3
If there are several levels of indentation, each level should be indented the same additional amount of space.

Mostprogrammersprefertowritetheprecedingifstatementintheequivalentform:

if ( grade >= 90 ) document.writeln( "A" );
else if ( grade >= 80 ) document.writeln( "B" );
else if ( grade >= 70 ) document.writeln( "C" );
else if ( grade >= 60 ) document.writeln( "D" );
else
document.writeln( "F" );
The latter form is popular because it avoids the deep indentation of the code to the right. Such deep indentation can force lines to be split and decrease script readability.
222	Chapter7 JavaScript:ControlStatementsI


Dangling-elseProblem
It’s important to note that the JavaScript interpreter always associates an elsewith the previous if, unless told to do otherwise by the placement of braces ({}). The following code illustrates the dangling-elseproblem. For example,

if ( x > 5 )
if ( y > 5 )
document.writeln( "<p>x and y are > 5</p>" ); else
document.writeln( "<p>x is <= 5</p>" );

appears to indicate with its indentation that if xis greater than 5, the ifstructure in its body determines whether yis also greater than 5. If so, the body of the nested ifstructure outputs the string "xandyare>5". Otherwise, it appears that if xis not greater than 5, the elsepart of the if…elsestructure outputs the string "xis<=5".
Beware! The preceding nested ifstatement does not execute as it appears. The inter-preter actually interprets the preceding statement as

if ( x > 5 )
if ( y > 5 )
document.writeln( "<p>x and y are > 5</p>" ); else
document.writeln( "<p>x is <= 5</p>" );

in which the body of the first ifstatement is a nested if…elsestatement. This statement tests whether xis greater than 5. If so, execution continues by testing whether yis also greater than 5. If the second condition is true, the proper string—"xandyare>5"—is displayed. However, if the second condition is false, the string "xis<=5"is displayed, even though we know that xis greater than 5.
To force the first nested ifstatement to execute as it was intended originally, we must write it as follows:

if ( x > 5 ) {
if ( y > 5 )
document.writeln( "<p>x and y are > 5</p>" ); }
else
document.writeln( "<p>x is <= 5</p>" );

The braces ({}) indicate to the JavaScript interpreter that the second ifstatement is in the body of the first ifstatement and that the elseis matched with the first ifstatement.

Blocks
The ifselection statement expects only one statement in its body. To include several state-ments in an ifstatement’s body, enclose the statements in braces ({and }). This also can be done in the elsesection of an if…elsestatement. A set of statements contained with-in a pair of braces is called a block.

Software Engineering Observation 7.3
A block can be placed anywhere in a script that a single statement can be placed.
7.7 whileRepetitionStatement   223


Software Engineering Observation 7.4
Unlike individual statements, a block does not end with a semicolon. However, each statement within the braces of a block should end with a semicolon.

The following example includes a block in the elsepart of an if…elsestatement:

if ( grade >= 60 )
document.writeln( "<p>Passed</p>" ); else
{
document.writeln( "<p>Failed</p>" );
document.writeln( "<p>You must take this course again.</p>" ); }

In this case, if gradeis less than 60, the script executes both statements in the body of the elseand prints

Failed
You must take this course again.

Note the braces surrounding the two statements in the elseclause. These braces are im-portant. Without them, the statement

document.writeln( "<p>You must take this course again.</p>" );

wouldbeoutside the body of theelsepart of theifand wouldexecute regardlessofwheth-er the grade is less than 60.
Syntax errors (e.g., when one brace in a block is left out of the script) are caught by the interpreter when it attempts to interpret the code containing the syntax error. They prevent the browser from executing the code. While many browsers notify users of errors, that information is of little use to them.That’s why it’s important to validate your JavaScripts and thoroughly test them. A logic error (e.g., the one caused when both braces around a block are left out of the script) also has its effect at execution time. A fatal logic error causes a script to fail and terminate prematurely. A nonfatal logic error allows a script to continue executing, but it produces incorrect results.

Software Engineering Observation 7.5
Just as a block can be placed anywhere a single statement can be placed, it’s also possible to have no statement at all (the empty statement) in such places. We represent the empty statement by placing a semicolon (;) where a statement would normally be.


7.7 whileRepetition Statement
A repetition structure (also known as a loop) allows you to specify that a script is to repeat an action while some condition remains true. The pseudocode statement
While there are more items on my shopping list Purchase next item and cross it off my list
describes the repetition that occurs during a shopping trip. The condition “there are more items on my shopping list” may be true or false. If it’s true, then the action “Purchase next item and cross it off my list” is performed. This action is performed repeatedly while the
224	Chapter7 JavaScript:ControlStatementsI


condition remains true. The statement(s) contained in the While repetition structure con-stitute its body. The body of a loop such as the While structure may be a single statement or a block. Eventually, the condition becomes false—when the last item on the shopping listhasbeen purchasedandcrossedoffthelist.At thispoint,therepetitionterminates,and the first pseudocode statement after the repetition structure “executes.”

Common Programming Error 7.2
If the body of a whilestatement never causes the while statement’s condition to become true, a logic error occurs. Normally, such a repetition structure will never terminate—an error called an infinite loop. Many browsers show a dialog allowing the user to terminate a script that contains an infinite loop.

As an example of a whilestatement, consider a script segment designed to find the first power of 2 larger than 1000. Variable productbegins with the value 2. The statement is as follows:

var product = 2;

while ( product <= 1000 ) product = 2 * product;
When the while statement finishes executing, product contains the result 1024. The flowchart in Fig. 7.5 illustrates the flow of control of the preceding whilerepetition state-ment. Once again, note that (besides small circles and arrows) the flowchart contains only a rectangle symbol and a diamond symbol.





product <= 1000	true	product = 2 * product


false


Fig. 7.5 | Flowchartingthewhilerepetitionstatement.

When the script enters the whilestatement, productis 2. The script repeatedly mul-tiplies variable productby 2, so producttakes on the values 4, 8, 16, 32, 64, 128, 256, 512 and 1024 successively. When productbecomes 1024, the condition product<=1000 in the while statement becomes false. This terminates the repetition, with 1024 as product’s final value. Execution continues with the next statement after the whilestate-ment. [Note: If a whilestatement’s condition is initially false, the body statement(s) will never execute.]
The flowchart clearly shows the repetition. The flowline emerging from the rectangle wrapsbacktothedecision,whichthescripttestseachtimethroughtheloopuntilthedeci-sion eventually becomes false. At this point, the whilestatement exits, and control passes to the next statement in the script.
7.8 FormulatingAlgorithms:Counter-ControlledRepetition   225

7.8 Formulating Algorithms: Counter-Controlled
Repetition
To illustrate how to develop algorithms, we solve several variations of a class-average prob-lem. Consider the following problem statement:
A class of ten students took a quiz. The grades (integers in the range 0 to 100) for this quiz are available to you. Determine the class average on the quiz.
The class average is equal to the sum of the grades divided by the number of students (10 in this case). The algorithm for solving this problem on a computer must input each of the grades, perform the averaging calculation and display the result.
Let’s use pseudocode to list the actions to execute and specify the order in which they should execute. We use counter-controlled repetition to input the grades one at a time. This technique uses a variable called a counter to control the number of times a set of statements executes. In this example, repetition terminates when the counter exceeds 10. In this section, we present a pseudocode algorithm (Fig. 7.6) and the corresponding script (Fig. 7.7). In the next section, we show how to develop pseudocode algorithms. Counter-controlled repetition often is called definite repetition, because the number of repetitions is known before the loop begins executing.

1  Set total to zero
2  Set grade counter to one
3
4  While grade counter is less than or equal to ten 5	Input the next grade
6	Add the grade into the total 7	Add one to the grade counter
8
9  Set the class average to the total divided by ten
10  Print the class average

Fig. 7.6 | Pseudocodealgorithmthatusescounter-controlledrepetitiontosolvetheclass-averageproblem.

1  <!DOCTYPE html> 2
3  <!-- Fig. 7.7: average.html -->
4  <!-- Counter-controlled repetition to calculate a class average. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Class Average Program</title> 9	<script>
10
11	var total; // sum of grades
12	var gradeCounter; // number of grades entered 13	var grade; // grade typed by user (as a string)
14	var gradeValue; // grade value (converted to integer)

Fig. 7.7 | Counter-controlledrepetitiontocalculateaclassaverage.(Part1of2.)
226	Chapter7 JavaScript:ControlStatementsI


15	var average; // average of all grades 16
17	// initialization phase 18	total = 0; // clear total
19	gradeCounter = 1; // prepare to loop 20
21	// processing phase
22	while ( gradeCounter <= 10 ) // loop 10 times 23	{
24
25	// prompt for input and read grade from user
26	grade = window.prompt( "Enter integer grade:", "0" ); 27
28	// convert grade from a string to an integer 29	gradeValue = parseInt( grade );
30
31	// add gradeValue to total 32	total = total + gradeValue; 33
34	// add 1 to gradeCounter
35	gradeCounter = gradeCounter + 1; 36            } // end while
37
38	// termination phase
39	average = total / 10;   // calculate the average 40
41	// display average of exam grades 42	document.writeln(
43	"<h1>Class average is " + average + "</h1>" ); 44
45	</script>
46	</head><body></body>
47  </html>

a)Thisdialogisdisplayed10 times.Userinputis100,88,93, 55,68,77,83,95,73and62. Userenterseachgradeand pressesOK.



b)Theclassaverageis displayedinawebpage







Fig. 7.7  | Counter-controlledrepetitiontocalculateaclassaverage.(Part2of2.)
7.8 FormulatingAlgorithms:Counter-ControlledRepetition   227


Variables Used in the Algorithm
Note the references in the algorithm to a total and a counter. A total is a variable in which a script accumulates the sum of a series of values. A counter is a variable a script uses to count—in this case, to count the number of grades entered. Variables that store totals should normally be initialized to zero before they’re used in a script.
Lines 11–15 declare variables total, gradeCounter, grade, gradeValue, average. The variable gradewill store the string the user types into the promptdialog. The variable gradeValuewillstoretheintegervalueofthegradetheuserentersintothepromptdialog.

Initializing Variables
Lines 18–19 are assignments that initialize totalto 0and gradeCounterto 1. Note that variables totaland gradeCounterare initialized before they’re used in a calculation.

Common Programming Error 7.3
Not initializing a variable that will be used in a calculation results in a logic error that produces the value NaN (“Not a Number”).

The whileRepetition Statement
Line 22 indicates that the whilestatement continues iterating while the value of grade-Counteris less than or equal to 10. Line 26 corresponds to the pseudocode statement “In-put the next grade.” The statement displays a prompt dialog with the prompt "Enter integergrade:"on the screen.
Aftertheuserentersthegrade, line29convertsitfrom astringtoan integer.Wemust convert the string to an integer in this example; otherwise, the addition operation in line 32 will be a string-concatenation.
Next, the script updates the totalwith the new gradeValueentered by the user. Line 32 adds gradeValueto the previous value of totaland assigns the result to total. This statement seems a bit strange, because it does not follow the rules of algebra. Keep in mind that JavaScript operator precedence evaluates the addition (+) operation before the assign-ment (=) operation. The value of the expression on the right side of the assignment oper-ator always replaces the value of the variable on the left side.
The script now is ready to increment the variable gradeCounterto indicate that a grade has been processed and to read the next grade from the user. Line 35 adds 1to gradeCounter, so the condition in the whilestatement will eventually become falseand terminate the loop. After this statement executes, the script continues by testing the con-dition in the whilestatement in line 22. If the condition is still true, the statements in lines 26–35 repeat. Otherwise the script continues execution with the first statement in sequence after the body of the loop (i.e., line 39).

Calculating and Displaying the Results
Line 39 assigns the results of the average calculation to variable average. Lines 42–43 write a line of HTML5 text in the document that displays the string "Classaverageis" followed by the value of variable averageas an <h1>element.

Testing the Program
Open the HTML5 document in a web browser to execute the script. This script parses any user input as an integer. In the sample execution in Fig. 7.7, the sum of the values entered
228	Chapter7 JavaScript:ControlStatementsI


(100, 88, 93, 55, 68, 77, 83, 95, 73 and 62) is 794. Although the script treats all input as integers, the averaging calculation in the script does not produce an integer. Rather, the calculation produces a floating-point number (i.e., a number containing a decimal point). The average of the 10 integers input by the user in this example is 79.4. If your script re-quirestheusertoenterfloating-pointnumbers,youcanconverttheuserinputfromstrings to numbers using the JavaScript function parseFloat, which we introduce in Section 9.2.

Software Engineering Observation 7.6
If the string passed to parseIntcontains a floating-point numeric value, parseIntsimply truncates the floating-point part. For example,thestring "27.95"resultsin the integer 27, and the string "–123.45"results in the integer –123. If the string passed to parseIntdoes begin with a numeric value, parseIntreturns NaN(not a number). If you need to know whetherparseIntreturnedNaN,JavaScriptprovidesthefunctionisNaN,whichdetermines whetheritsargumenthasthevalueNaNand,ifso,returnstrue;otherwise,itreturnsfalse.

Floating-Point Numbers
JavaScript actually represents all numbers as floating-point numbers in memory. Floating-point numbers often develop through division, as shown in this example. When we divide 10 by 3, the result is 3.3333333…, with the sequence of 3s repeating infinitely. The com-puter allocates only a fixed amount of space to hold such a value, so the stored floating-point value can be only an approximation. Although floating-point numbers are not al-ways 100 percent precise, they have numerous applications. For example, when we speak of a “normal” body temperature of 98.6, we do not need to be precise to a large number of digits. When we view the temperature on a thermometer and read it as 98.6, it may ac-tually be 98.5999473210643. The point here is that few applications require such high-precision floating-point values, so calling this number simply 98.6 is fine for many appli-cations.

A Note About Input Via promptDialogs
In this example, we used promptdialogs to obtain user input. Typically, such input would be accomplished via form elements in an HTML5 document, but this requires additional scripting techniques that are introduced starting in Chapter 9. For now, we’ll continue to use promptdialogs.


7.9 Formulating Algorithms: Sentinel-Controlled
Repetition
Let’s generalize the class-average problem. Consider the following problem:
Develop a class-averaging script that will process an arbitrary number of grades each time the script is run.
Inthefirstclass-averageexample,thenumberofgrades(10)wasknown inadvance.Inthis example, no indication is given of how many grades the user will enter. The script must process an arbitrary number of grades. How can the script determine when to stop the in-put of grades? How will it know when to calculate and display the class average?
One way to solve this problem is to use a special value called a sentinel value (also called a signal value, a dummy value or a flag value) to indicate the end of data entry. The
7.9 FormulatingAlgorithms:Sentinel-ControlledRepetition   229


user types in grades until all legitimate grades have been entered. Then the user types the sentinel value to indicate that the last grade has been entered. Sentinel-controlled repeti-tion is often called indefinite repetition, because the number of repetitions is not known before the loop begins executing.
Clearly, you must choose a sentinel value that cannot be confused with an acceptable input value. –1 is an acceptable sentinel value for this problem, because grades on a quiz are normally nonnegative integers from 0 to 100. Thus, an execution of the class-average script might process a stream of inputs suchas 95, 96, 75, 74, 89 and –1. The script would compute and print the class average for the grades 95, 96, 75, 74 and 89 (–1 is the sentinel value, so it should not enter into the average calculation).

DevelopingthePseudocodeAlgorithmwithTop-Down,StepwiseRefinement:TheTop and First Refinement
We approach the class-average script with a technique called top-down, stepwise refine-ment, a technique that’s essential to the development of well-structured algorithms. We begin with a pseudocode representation of the top:

Determine the class average for the quiz
The top is a single statement that conveys the script’s overall purpose. As such, the top is, in effect, a complete representation of a script. Unfortunately, the top rarely conveys suffi-cient detail from which to write the JavaScript algorithm. Therefore we must begin a re-finement process. First, we divide the top into a series of smaller tasks and list them in the order in which they need to be performed, creating the following first refinement:

Initialize variables
Input, sum up and count the quiz grades Calculate and print the class average
Here, only the sequence structure is used; the steps listed are to be executed in order, one after the other.

Software Engineering Observation 7.7
Each refinement,aswell as the top itself, isa complete specification of the algorithm; only the level of detail varies.


Proceeding to the Second Refinement
To proceed to the next level of refinement (the second refinement), we commit to specific variables. We need a running total of the numbers, a count of how many numbers have been processed, a variable to receive the string representation of each grade as it’s input, a variable to store the value of the grade after it’s converted to an integer and a variable to hold the calculated average. The pseudocode statement

Initialize variables may be refined as follows:
Initialize total to zero Initialize gradeCounter to zero
230	Chapter7 JavaScript:ControlStatementsI


Only the variables total and gradeCounter are initialized before they’re used; the variables average,gradeandgradeValue(forthecalculatedaverage,theuserinputandtheintegerrep-resentation of the grade, respectively) need not be initialized, because their values are de-termined as they’re calculated or input.
The pseudocode statement

Input, sum up and count the quiz grades

requires a repetition statement that successively inputs each grade. We do not know in ad-vance how many grades are to be processed, so we’ll use sentinel-controlled repetition. The user will enter legitimate grades, one at a time. After entering the last legitimate grade, the user will enter the sentinel value. The script will test for the sentinel value after the user enters each grade and will terminate the loop when the sentinel value is encountered. The second refinement of the preceding pseudocode statement is then

Input the first grade (possibly the sentinel) While the user has not as yet entered the sentinel
Add this grade into the running total Add one to the grade counter
Input the next grade (possibly the sentinel)

In pseudocode, we do not use braces around the pseudocode that forms the body of the While structure. We simply indent the pseudocode under the While to show that it be-longs to the body of the While. Remember, pseudocode is only an informal development aid.
The pseudocode statement

Calculate and print the class average

may be refined as follows:

If the counter is not equal to zero
Set the average to the total divided by the counter Print the average
Else
Print “No grades were entered”

We test for the possibility of division by zero—a logic error that, if undetected, would causethescripttoproduceinvalidoutput.Thecompletesecondrefinementofthepseudo-code algorithm for the class-average problem is shown in Fig. 7.8.

Error-Prevention Tip 7.1
When performing division by an expression whose value could be zero, explicitly test for this case, and handle it appropriately in your script (e.g., by displaying an error message) rather than allowing the division by zero to occur.

Software Engineering Observation 7.8
Many algorithms can be divided logically into three phases: an initialization phase that initializes the script variables, a processing phase that inputs data values and adjusts variables accordingly, and a termination phase that calculates and prints the results.
7.9 FormulatingAlgorithms:Sentinel-ControlledRepetition   231


The Complete Second Refinement
The pseudocode algorithm in Fig. 7.8 solves the more general class-average problem. This algorithm was developed after only two refinements. Sometimes more refinements are necessary.

1  Initialize total to zero
2  Initialize gradeCounter to zero
3
4  Input the first grade (possibly the sentinel)
5
6  While the user has not as yet entered the sentinel 7	Add this grade into the running total
8	Add one to the grade counter
9	Input the next grade (possibly the sentinel)
10
11  If the counter is not equal to zero
12	Set the average to the total divided by the counter 13	Print the average
14  Else
15	Print “No grades were entered”

Fig. 7.8  | Sentinel-controlledrepetitiontosolvetheclass-averageproblem.

Software Engineering Observation 7.9
You terminate the top-down, stepwise refinement process after specifying the pseudocode algorithm in sufficient detail for you to convert the pseudocode to JavaScript. Then, implementing the JavaScript is normally straightforward.

Software Engineering Observation 7.10
Experience has shown that the most difficult part of solving a problem on a computer is developing the algorithm for the solution.

Software Engineering Observation 7.11
Many experienced programmers write scripts without ever using script-development tools like pseudocode. As they see it, their ultimate goal is to solve the problem on a computer, and writing pseudocode merely delays the production of final outputs. Although this approachmayworkfor simpleand familiarproblems,itcan leadto seriouserrorsin large, complex projects.

Implementing Sentinel-Controlled Repetition to Calculate a Class Average
Figure 7.9showstheJavaScriptandasampleexecution.Althougheachgradeisaninteger, the averaging calculation is likely to produce a number with a decimal point (a real num-ber).
In this example, we see that control structures may be stacked on top of one another (in sequence) just as a child stacks building blocks. The whilestatement (lines 29–43) is followed immediately by an if…elsestatement (lines 46–55) in sequence. Much of the code in this script is identical to the code in Fig. 7.7, so we concentrate in this example on the new features.
232	Chapter7 JavaScript:ControlStatementsI


1  <!DOCTYPE html> 2
3  <!-- Fig. 7.9: average2.html -->
4  <!-- Sentinel-controlled repetition to calculate a class average. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Class Average Program: Sentinel-controlled Repetition</title> 9	<script>
10
11	var total; // sum of grades
12	var gradeCounter; // number of grades entered 13	var grade; // grade typed by user (as a string)
14	var gradeValue; // grade value (converted to integer) 15	var average; // average of all grades
16
17	// initialization phase 18	total = 0; // clear total
19	gradeCounter = 0; // prepare to loop 20
21	// processing phase
22	// prompt for input and read grade from user 23	grade = window.prompt(
24	"Enter Integer Grade, -1 to Quit:", "0" ); 25
26	// convert grade from a string to an integer 27	gradeValue = parseInt( grade );
28
29	while ( gradeValue != -1 ) 30	{
31	// add gradeValue to total 32	total = total + gradeValue; 33
34	// add 1 to gradeCounter
35	gradeCounter = gradeCounter + 1; 36
37	// prompt for input and read grade from user 38	grade = window.prompt(
39	"Enter Integer Grade, -1 to Quit:", "0" ); 40
41	// convert grade from a string to an integer 42	gradeValue = parseInt( grade );
43	} // end while 44
45	// termination phase
46	if ( gradeCounter != 0 ) 47	{
48	average = total / gradeCounter; 49
50	// display average of exam grades 51	document.writeln(
52	"<h1>Class average is " + average + "</h1>" );
53	} // end if

Fig. 7.9 | Sentinel-controlledrepetitiontocalculateaclassaverage.(Part1of2.)
7.9 FormulatingAlgorithms:Sentinel-ControlledRepetition   233


54	else
55	document.writeln( "<p>No grades were entered</p>" ); 56
57	</script>
58	</head><body></body>
59  </html>

Thisdialogisdisplayedfourtimes.User inputis97,88,72and–1.













Fig. 7.9  | Sentinel-controlledrepetitiontocalculateaclassaverage.(Part2of2.)

Line 19 initializes gradeCounter to 0, because no grades have been entered yet. Remember that the script uses sentinel-controlled repetition. To keep an accurate record of the number of grades entered, the script increments gradeCounteronly after processing a valid grade value.

Script Logic for Sentinel-Controlled Repetition vs. Counter-Controlled Repetition Note the difference in logic for sentinel-controlled repetition as compared with the coun-ter-controlledrepetitioninFig. 7.7.Incounter-controlledrepetition,wereadavaluefrom the user during each iteration of the whilestatement’s body for the specified number of iterations. In sentinel-controlled repetition, we read one value (lines 23–24) and convert it to an integer (line 27) before the script reaches the whilestatement. The script uses this value to determine whether the script’s flow of control should enter the body of the while statement. If the whilestatement’s condition is false(i.e., the user typed the sentinel as the first grade), the script ignores the body of the whilestatement (i.e., no grades were entered). If the condition is true, the body begins execution and processes the value en-tered by the user (i.e., adds the value to the totalin line 32). After processing the value, the script increments gradeCounterby 1 (line 35), inputs the next gradefrom the user (lines 38–39) and converts the gradeto an integer (line 42), before the end of the while statement’s body. When the script reaches the closing right brace (}) of the body in line 43, execution continues with the next test of the condition of the whilestatement (line 29), using the new value just entered by the user to determine whether the whilestate-ment’s body should execute again. Note that the next value always is input from the user immediately before the script evaluates the condition of the whilestatement. This order allows us todeterminewhetherthevaluejust enteredby theuseristhesentinelvalue before
234	Chapter7 JavaScript:ControlStatementsI


processing it (i.e., adding it to the total). If the value entered is the sentinel value, the whilestatement terminates and the script does not add the value to the total.
Note the block in the whileloop in Fig. 7.9 (lines 30–43). Without the braces, the last three statements in the body of the loop would fall outside the loop, causing the code to be interpreted incorrectly, as follows:

while ( gradeValue != -1 )
// add gradeValue to total total = total + gradeValue;

// add 1 to gradeCounter gradeCounter = gradeCounter + 1;

// prompt for input and read grade from user grade = window.prompt(
"Enter Integer Grade, -1 to Quit:", "0" );

// convert grade from a string to an integer gradeValue = parseInt( grade );
This interpretation would cause an infinite loop in the script if the user did not input the sentinel -1as the first input value in lines 23–24 (i.e., before the whilestatement).

7.10 Formulating Algorithms: Nested Control
Statements
Let’sworkthroughanothercompleteproblem.Weonceagainformulatethealgorithmus-ing pseudocode and top-down, stepwise refinement, and write a corresponding script.
Consider the following problem statement:
A college offers a course that prepares students for the state licensing exam for real estate brokers. Last year, 10 of the students who completed this course took the licens-ing exam. Naturally, the college wants to know how well its students performed. You’ve been asked to write a script to summarize the results. You’ve been given a list of these 10 students. Next to each name is written a 1 if the student passed the exam and a 2 if the student failed.
Your script should analyze the results of the exam as follows:
1. Input each test result (i.e., a 1 or a 2). Display the message “Enter result” on the screen each time the script requests another test result.
2. Count the number of test results of each type.
3. Display a summary of the test results indicating the number of students who passed and the number of students who failed.
4. If more than eight students passed the exam, print the message “Bonus to instructor!” After reading the problem statement carefully, we make the following observations:
1. The script must process test results for 10 students. A counter-controlled loop will be used.
2.  Each test result is a number—either a 1 or a 2. Each time the script reads a test result, the script must determine whether the number is a 1 or a 2. We test for a 1 in our algorithm. If the number is not a 1, we assume that it’s a 2.
7.10 FormulatingAlgorithms:NestedControlStatements   235


3.  Two counters are used to keep track of the exam results—one to count the num-ber of students who passed the exam and one to count the number of students who failed the exam.
After the script processes all the results, it must decide whether more than eight stu-dents passed the exam. Let’s proceed with top-down, stepwise refinement. We begin with a pseudocode representation of the top:

Analyze exam results and decide whether a bonus should be paid
Once again, it’s important to emphasize that the top is a complete representation of the script,butthatseveralrefinementsarenecessarybeforethepseudocodecanbeevolvednat-urally into JavaScript. Our first refinement is as follows:

Initialize variables
Input the 10 exam grades and count passes and failures
Print a summary of the exam results and decide whether a bonus should be paid
Here, too, even though we have a complete representation of the entire script, further re-finementisnecessary.Wenowcommittospecificvariables.Countersareneededtorecord the passes and failures; a counter will be used to control the looping process, and a variable is needed to store the user input. The pseudocode statement

Initialize variables may be refined as follows:
Initialize passes to zero Initialize failures to zero Initialize student to one
Note that only the counters for the number of passes, the number of failures and the num-ber of students are initialized. The pseudocode statement

Input the 10 exam grades and count passes and failures
requires a loop that successively inputs the result of each exam. Here, it’s known in ad-vance that there are precisely 10 exam results, so counter-controlled repetition is appropri-ate.  Inside  the  loop  (i.e.,  nested  within  the  loop),  a  double-selection  structure  will determine whether each exam result is a pass or a failure and will increment the appropri-ate counter accordingly. The refinement of the preceding pseudocode statement is then

While student counter is less than or equal to ten Input the next exam result
If the student passed Add one to passes
Else
Add one to failures Add one to student counter
Blank lines can be used to set off the If…Else control structure to improve script readabil-ity. The pseudocode statement

Print a summary of the exam results and decide whether a bonus should be paid
236	Chapter7 JavaScript:ControlStatementsI


may be refined as follows:

Print the number of passes Print the number of failures
If more than eight students passed Print “Bonus to instructor!”

Complete Second Refinement of Pseudocode and Conversion to JavaScript
The complete second refinement appears in Fig. 7.10. Note that blank lines are also used to set off the While statement for script readability.

1  Initialize passes to zero 2  Initialize failures to zero 3  Initialize student to one
4
5  While student counter is less than or equal to ten 6	Input the next exam result
7
8	If the student passed 9        Add one to passes
10	Else
11	Add one to failures
12	Add one to student counter
13
14  Print the number of passes 15  Print the number of failures
16
17  If more than eight students passed
18	Print “Bonus to Instructor!”

Fig. 7.10  | Examination-resultsproblempseudocode.

This pseudocode is now refined sufficiently for conversion to JavaScript. The Java-Script and two sample executions are shown in Fig. 7.11.

1  <!DOCTYPE html> 2
3  <!-- Fig. 7.11: analysis.html -->
4  <!-- Examination-results calculation. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Analysis of Examination Results</title> 9	<script>
10
11	// initializing variables in declarations 12	var passes = 0; // number of passes
13	var failures = 0; // number of failures 14	var student = 1; // student counter
15	var result; // an exam result

Fig. 7.11  | Examination-resultscalculation.(Part1of3.)
7.10 FormulatingAlgorithms:NestedControlStatements   237


16
17	// process 10 students; counter-controlled loop 18	while ( student <= 10 )
19	{
20	result = window.prompt( "Enter result (1=pass,2=fail)", "0" ); 21
22	if ( result == "1" )
23	passes = passes + 1; 24               else
25	failures = failures + 1; 26
27	student = student + 1; 28            } // end while
29
30	// termination phase
31	document.writeln( "<h1>Examination Results</h1>" ); 32	document.writeln( "<p>Passed: " + passes +
33	"; Failed: " + failures + "</p>" ); 34
35	if ( passes > 8 )
36	document.writeln( "<p>Bonus to instructor!</p>" ); 37
38	</script>
39	</head><body></body>
40  </html>

a)Thisdialogisdisplayed10 times.Userinputis1,2,1,1, 1,1,1,1,1and1.




b)Ninestudentspassedand onefailed,therefore"Bonus to instructor!"is printed.







c)Thisdialogisdisplayed10 times.Userinputis1,2,1,2, 2,1,2,2,1and1.




Fig. 7.11  | Examination-resultscalculation.(Part2of3.)
238	Chapter7 JavaScript:ControlStatementsI



d)Fivestudentspassedand fivefailed,sonobonusispaid totheinstructor.








Fig. 7.11  | Examination-resultscalculation.(Part3of3.)

Lines 12–15 declare the variables used to process the examination results. Note that JavaScript allows variable initialization to be incorporated into declarations (passes is assigned 0, failuresis assigned 0and studentis assigned 1). Some scripts may require reinitialization at the beginning of each repetition; such reinitialization would normally occur in assignment statements.
The processing of theexam resultsoccursin the whilestatement in lines 18–28. Note that the if…elsestatement in lines 22–25 in the loop tests only whether the exam result was 1; it assumesthat allother exam resultsare 2. Normally, youshouldvalidate thevalues input by the user (i.e., determine whether the values are correct).

Good Programming Practice 7.4
When inputting values from the user, validate the input to ensure that it’s correct. If an input value is incorrect, prompt the user to input the value again. The HTML5 self-val-idating controls can help you check the formatting of your data, but you may need addi-tional tests to check that properly formatted values make sense in the context of your application.

7.11 Assignment Operators
JavaScript provides several additional assignment operators (called compound assignment operators) for abbreviating assignment expressions. For example, the statement

c = c + 3;
can be abbreviated with the addition assignment operator, +=, as c += 3;
The +=operator adds the value of the expression on the right of the operator to the value of the variable on the left of the operator and stores the result in the variable on the left of the operator. Any statement of the form

variable  = variable  operator  expression;
where operator is one of the binary operators +, -, *, /or %(or others we’ll discuss later in the text), can be written in the form

variable  operator = expression;
7.12 IncrementandDecrementOperators   239


Thus, the assignment c+=3adds 3to c. Figure 7.12 shows the arithmetic assignment op-erators, sample expressions using these operators and explanations of the meaning of the operators.



Assignment
operator

+=
-=
*=
/=
%=

Initialvalue
ofvariable

c = 3
d = 5
e = 4
f = 6
g = 12

Sample
expression

c += 7
d -= 4
e *= 5
f /= 3
g %= 9


Explanation

c = c + 7
d = d - 4
e = e * 5
f = f / 3
g = g % 9


Assigns

10to c 1to d 20to e 2to f
3to g


Fig. 7.12 | Arithmeticassignmentoperators.

7.12 Increment and Decrement Operators
JavaScriptprovidestheunaryincrementoperator(++)anddecrementoperator(--)(sum-marized in Fig. 7.13). If a variable cis incremented by 1, the increment operator, ++, can be used rather than the expression c=c+1or c+=1. If an increment or decrement oper-ator is placed before a variable, it’s referred to as the preincrement or predecrement oper-ator, respectively. If an increment or decrement operator is placed after a variable, it’s referred to as the postincrement or postdecrement operator, respectively.



Operator

++

++

--

--

Example

++a

a++

--b

b--

Called

preincrement

postincrement

predecrement

postdecrement

Explanation

Increment aby 1, then use the new value of ain the expression in which aresides.
Use the current value of ain the expression in which aresides, then increment aby 1.
Decrement bby 1, then use the new value of bin the expression in which bresides.
Use the current value of bin the expression in which bresides, then decrement bby 1.


Fig. 7.13  | Incrementanddecrementoperators.

Preincrementing (or predecrementing) a variable causes the script to increment (dec-rement) the variable by 1, then use the new value of the variable in the expression in which it appears. Postincrementing (postdecrementing) the variable causes the script to use the current value of the variable in the expression in which it appears, then increment (decre-ment) the variable by 1.
The script in Fig. 7.14 demonstrates the difference between the preincrementing and postincrementing versions of the ++increment operator. Postincrementing the variable c
240	Chapter7 JavaScript:ControlStatementsI


1  <!DOCTYPE html> 2
3  <!-- Fig. 7.14: increment.html -->
4  <!-- Preincrementing and Postincrementing. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Preincrementing and Postincrementing</title> 9	<script>
10
11	var c; 12
13	c = 5;
14	document.writeln( "<h3>Postincrementing</h3>" ); 15	document.writeln( "<p>" + c ); // prints 5
16	// prints 5 then increments 17	document.writeln( " " + c++ );
18	document.writeln( " " + c + "</p>" ); // prints 6 19
20	c = 5;
21	document.writeln( "<h3>Preincrementing</h3>" ); 22	document.writeln( "<p>" + c ); // prints 5
23	// increments then prints 6 24	document.writeln( " " + ++c );
25	document.writeln( " " + c + "</p>" ); // prints 6 26
27	</script>
28	</head><body></body>
29  </html>












Fig. 7.14  | Preincrementingandpostincrementing.

causes it to be incremented after it’s used in the document.writelnmethod call (line 17). Preincrementing the variable ccauses it to be incremented before it’s used in the docu-ment.writelnmethod call (line 24). The script displays the value of cbefore and after the ++operator is used. The decrement operator (--) works similarly.

Good Programming Practice 7.5
For readability, unary operators should be placed next to their operands, with no inter-vening spaces.
7.12 IncrementandDecrementOperators   241


The three assignment statements in Fig. 7.11 (lines 23, 25 and 27, respectively),

passes = passes + 1; failures = failures + 1; student = student + 1;
can be written more concisely with assignment operators as

passes += 1; failures += 1; student += 1;
with preincrement operators as

++passes; ++failures; ++student;
or with postincrement operators as

passes++; failures++; student++;
When incrementing or decrementing a variable in a statement by itself, the preincre-ment and postincrement forms have the same effect, and the predecrement and postdecre-ment forms have thesame effect. It’s only when a variableappears in thecontext of a larger expression that preincrementing the variable and post-incrementing the variable have dif-ferent effects. Predecrementing and postdecrementing behave similarly.

Common Programming Error 7.4
Attempting to use the increment or decrement operator on an expression other than a left-hand-side expression—commonly called an lvalue—is a syntax error. A left-hand-side expression is a variable or expression that can appear on the left side of an assignment op-eration. For example, writing ++(x+1)is a syntax error, because (x+1)is not a left-hand-side expression.

Figure 7.15 lists the precedence and associativity of the operators introduced to this point. The operators are shown top-to-bottom in decreasing order of precedence. The second column describes the associativity of the operators at each level of precedence. The conditional operator (?:), the unary operators increment (++) and decrement (--) and the assignment operators=, +=, -=,*=,/=and%=associatefromright toleft. Allotheroperators shown here associate from left to right. The third column names the groups of operators.


Operator	Associativity	Type


++  --	right to left *   /   %	left to right +   -	left to right
<   <=  >   >=	left to right

unary multiplicative additive
relational


Fig. 7.15 | Precedenceandassociativityoftheoperatorsdiscussedsofar.(Part1of2.)
242	Chapter7 JavaScript:ControlStatementsI


Operator	Associativity	Type


==  !=  === !===
?:

left to right
right to left

equality
conditional

=   +=  -=  *=  /=  %=	right to left	assignment

Fig. 7.15 | Precedenceandassociativityoftheoperatorsdiscussedsofar.(Part2of2.)

7.13 Web Resources www.deitel.com/javascript/
The Deitel JavaScript Resource Center contains links to some of the best JavaScript resources on the web.Thereyou’llfindcategorizedlinkstoJavaScripttools,codegenerators,forums,books,libraries, frameworksandmore.Alsocheck outthetutorialsforallskilllevels,fromintroductorytoadvanced. Be sure to visit the related Resource Centers on HTML5 (www.deitel.com/html5/) and CSS3 (www.deitel.com/css3/).


Summary
Section 7.2 Algorithms
•  Any computable problem can be solved by executing a series of actions in a specific order.
•  A procedure (p. 215) for solving a problem in terms of the actions (p. 215) to execute and the order in which the actions are to execute (p. 215) is called an algorithm (p. 215).
•  Specifying the order in which the actions are to be executed in a computer program is called pro-gram control (p. 215).

Section 7.3 Pseudocode
•  Pseudocode (p. 215) is an informal language that helps you develop algorithms.
•  Carefully prepared pseudocode may be converted easily to a corresponding script.

Section 7.4 Control Statements
•  Normally,statementsinascriptexecuteoneaftertheother,intheorderinwhichthey’rewritten. This process is called sequential execution (p. 215).
•  Various JavaScript statements enable you to specify that the next statement to be executed may not necessarily be the next one in sequence. This is known as transfer of control (p. 216).
•  All scripts could be written in terms of only three control structures—namely, the sequence structure, (p. 216) the selection structure (p. 216) and the repetition structure (p. 216).
•  A flowchart (p. 216) is a graphical representation of an algorithm orof a portion of an algorithm. Flowcharts are drawn using certain special-purpose symbols, such as rectangles (p. 216), dia-monds (p. 217), ovals (p. 216) and small circles (p. 216); these symbols are connected by arrows called flowlines (p. 216), which indicate the order in which the actions of the algorithm execute.
•  JavaScript provides three selection structures. The ifselection statement (p. 217) performs an action only if a condition is true. The if…elseselection statement performs an action if a condi-tion is true and a different action if the condition is false. The switchselection statement per-forms one of many different actions, depending on the value of an expression.
•  JavaScript provides four repetition statements—while(p. 217), do…while, forand for…in.
Summary   243


•  Keywords (p. 217) cannot be used as identifiers (e.g., for variable names).
•  Single-entry/single-exit control structures (p. 218) make it easy to build scripts. Control state-ments are attached to one another by connecting the exit point of one control statement to the entry point of the next. This procedure is called control-statement stacking (p. 218). There’s only one other way control statements may be connected: control-statement nesting (p. 218).

Section 7.5 ifSelection Statement
•  TheJavaScriptinterpreterignoreswhite-spacecharacters:blanks,tabsandnewlinesusedforinden-tation and vertical spacing. Programmers insert white-space characters to enhance script clarity.
•  A decision can be made on any expression that evaluates to trueor false(p. 218).
•  The indentation convention you choose should be carefully applied throughout your scripts. It’s difficult to read scripts that do not use uniform spacing conventions.

Section 7.6 if…elseSelection Statement
•  The conditional operator (?:; p. 220) is closely related to the if…elsestatement. Operator ?: is JavaScript’s only ternary operator—it takes three operands. The operands together with the ?: operator form a conditional expression (p. 220). The first operand is a boolean expression, the second is the value for the conditional expression if the boolean expression evaluates to true and the third is the value for the conditional expression if the boolean expression evaluates to false.
•  Nested if…elsestatements (p. 220) test for multiple cases by placing if…elsestatements in-side other if…elsestructures.
•  The JavaScript interpreter always associates an elsewith the previous if, unless told to do oth-erwise by the placement of braces ({}).
•  The ifselection statement expects only one statement in its body. To include several statements in the body, enclose the statements in a block (p. 222) delimited by braces ({and }).
•  A logic error (p. 223) has its effect at execution time. A fatal logic error (p. 223) causes a script to fail and terminate prematurely. A nonfatal logic error (p. 223) allows a script to continue ex-ecuting, but the script produces incorrect results.

Section 7.7 whileRepetition Statement
•  The whilerepetition statement allows the you to specify that an action is to be repeated while some condition remains true.

Section 7.8 Formulating Algorithms: Counter-Controlled Repetition
•  Counter-controlled repetition (p. 225) is often called definite repetition, because the number of repetitions is known before the loop begins executing.
•  Uninitialized variables used in mathematical calculations result in logic errors and produce the value NaN(not a number).
•  JavaScript represents all numbers as floating-point numbers in memory. Floating-point numbers (p. 228) often develop through division. The computer allocates only a fixed amount of space to hold such a value, so the stored floating-point value can only be an approximation.

Section 7.9 Formulating Algorithms: Sentinel-Controlled Repetition
•  In sentinel-controlled repetition, a special value called a sentinel value (also called a signal value, a dummy value or a flag value, p. 228) indicates the end of data entry. Sentinel-controlled repe-tition is often called indefinite repetition (p. 229), because the number of repetitions is not known in advance.
•  It’s necessary to choose a sentinel value that cannot be confused with an acceptable input value.
244	Chapter7 JavaScript:ControlStatementsI


•  Top-down, stepwise refinement (p. 229) is a technique essential to the development of well-structured algorithms. The top (p. 229) is a single statement that conveys the overall purpose of the script. As such, the top is, in effect, a complete representation of a script. The stepwise refine-ment process divides the top into a series of smaller tasks. Terminate the top-down, stepwise re-finement process when the pseudocode algorithm is specified in sufficient detail for you to be able to convert the pseudocode to JavaScript.

Section 7.10 Formulating Algorithms: Nested Control Statements •  Control statements can be nested to perform more complex tasks.

Section 7.11 Assignment Operators
•  JavaScript provides the arithmetic assignment operators +=, -=, *=, /=and %=(p. 238), which ab-breviate certain common types of expressions.

Section 7.12 Increment and Decrement Operators
•  The increment operator,++(p. 239),and the decrement operator, --(p. 239), increment or dec-rement a variable by 1, respectively. If the operator is prefixed to the variable, the variable is in-cremented or decremented by 1, then used in its expression. If the operator is postfixed to the variable, the variable is used in its expression, then incremented or decremented by 1.

Self-Review Exercises
7.1	Fill in the blanks in each of the following statements:
a)  All scripts can be written in terms of three types of control statements:	, and	.
b)  The	double-selection statement is used to execute one action when a condi-tion is true and another action when that condition is false.
c)   Repeating a set of instructions a specific number of times is called                repetition. d)  When it’s not known in advance how many times a set of statements will be repeated, a(n)                (or a(n)               ,                or               ) value can be used to terminate
the repetition.
7.2	Write four JavaScript statements that each add 1 to variable x, which contains a number.
7.3	Write JavaScript statements to accomplish each of the following tasks:
a)  Assign the sum of xand yto z, and increment the value of xby 1 after the calculation. Use only one statement.
b)  Test whether the value of the variable countis greater than 10. If it is, print "Countis greaterthan10".
c)   Decrement the variable xby 1, then subtract it from the variable total. Use only one statement.
d)  Calculate the remainder after qis divided by divisor, and assign the result to q. Write this statement in two different ways.
7.4	Write a JavaScript statement to accomplish each of the following tasks: a)  Declare variables sumand x.
b)  Assign 1to variable x. c)   Assign 0to variable sum.
d)  Add variable xto variable sum, and assign the result to variable sum. e)   Print "Thesumis:", followed by the value of variable sum.
7.5	Combine the statements you wrote in Exercise 7.4 into a script that calculates and prints the sum of the integers from 1 to 10. Use the whilestatement to loop through the calculation and increment statements. The loop should terminate when the value of xbecomes 11.
AnswerstoSelf-ReviewExercises   245


7.6	Determine the value of each variable after the calculation is performed. Assume that, when each statement begins executing, all variables have the integer value 5.
a)  product *= x++; b)  quotient /= ++x;
7.7	 Identify and correct the errors in each of the following segments of code: a)  while ( c <= 5 ) {
product *= c;
++c;
b)  if ( gender == 1 ) document.writeln( "Woman" );
else;
document.writeln( "Man" );
7.8	 What is wrong with the following whilerepetition statement? while ( z >= 0 )
sum += z;


Answers to Self-Review Exercises
7.1	a) Sequence, selection and repetition.  b) if…else. c) Counter-controlled (or definite). d) Sentinel, signal, flag or dummy.
7.2	 x = x + 1; x += 1; ++x;
x++;
7.3	a)  z = x++ + y;
b)  if ( count > 10 )
document.writeln( "Count is greater than 10" ); c)   total -= --x;
d)  q %= divisor;
q = q % divisor;
7.4	 a)  var sum, x; b)  x = 1;
c)   sum = 0;
d)  sum += x; or sum = sum + x;
e)   document.writeln( "The sum is: " + sum );
7.5	The solution is as follows:

1   <!DOCTYPE html> 2
3   <!-- Exercise 7.5: ex08_05.html --> 4   <html>
5	<head>
6	<meta charset = "utf-8">
7	<title>Sum the Integers from 1 to 10</title> 8	<script>
9	var sum; // stores the total
10	var x; //counter control variable 11
12	x = 1; 13	sum = 0; 14
246	Chapter7 JavaScript:ControlStatementsI


15	while ( x <= 10 ) 16	{
17	sum += x; 18	++x;
19	} // end while
20	document.writeln( "The sum is: " + sum ); 21          </script>
22	</head><body></body> 23   </html>







7.6	a)  product = 25, x = 6;
b)  quotient = 0.833333…, x = 6;
7.7	a)  Error: Missing the closing right brace of the whilebody. Correction: Add closing right brace after the statement ++c;.
b)  Error: The ;after elsecauses a logic error. The second output statement always executes. Correction: Remove the semicolon after else.
7.8	The value of the variable zis never changed in the body of the whilestatement. Therefore, iftheloop-continuationcondition(z>=0)istrue,aninfiniteloopiscreated.Topreventthecreation of the infinite loop, zmust be decremented so that it eventually becomes less than 0.

Exercises
7.9	Identify and correct the errors in each of the following segments of code. [Note: There may be more than one error in each piece of code; unless declarations are present, assume all variables are properly declared and initialized.]
a)  if ( age >= 65 );
document.writeln( "Age greater than or equal to 65" ); else
document.writeln( "Age is less than 65" ); b)  var x = 1, total;
while ( x <= 10 )
{
total += x; ++x;
}
c)   var x = 1; var total = 0;
While ( x <= 100 ) total += x;
++x;
d)  var y = 5; while ( y > 0 )
{
document.writeln( y ); ++y;
Exercises   247


7.10	Without running it, determine what the following script prints:

1   <!DOCTYPE html> 2
3   <!-- Exercise 7.10: ex08_10.html --> 4   <html>
5	<head>
6	<meta charset = "utf-8">
7	<title>Mystery Script</title> 8	<script>
9
10	var y;
11	var x = 1;
12	var total = 0; 13
14	while ( x <= 10 ) 15	{
16	y = x * x;
17	document.writeln( "<p>" + y + "</p>" ); 18	total += y;
19	++x;
20	} // end while 21
22	document.writeln( "<p>Total is " + total + "</p>" ); 23
24	</script>
25	</head><body></body> 26   </html>

For Exercises 7.11–7.14, perform each of the following steps: a)  Read the problem statement.
b)  Formulate the algorithm using pseudocode and top-down, stepwise refinement. c)   Define the algorithm in JavaScript.
d)  Test, debug and execute the JavaScript. e)   Process three complete sets of data.
7.11	Drivers are concerned with the mileage obtained by their automobiles. One driver has kept trackofseveraltankfulsofgasolinebyrecordingthenumberofmilesdrivenandthenumberofgallons used for each tankful. Develop a script that will take as input the miles driven and gallons used (both as integers) for each tankful. The script should calculate and output HTML5 text that displays the number of miles per gallon obtained for each tankful and prints the combined number of miles per gallon obtained for all tankfuls up to this point. Use promptdialogs to obtain the data from the user.
7.12	Develop a script that will determine whether a department-store customer has exceeded the credit limit on a charge account. For each customer, the following facts are available:
a)  Account number
b)  Balance at the beginning of the month
c)   Total of all items charged by this customer this month
d)  Total of all credits applied to this customer's account this month e)   Allowed credit limit
The script should input each of these facts from a promptdialog as an integer, calculate the new balance (= beginning balance + charges – credits), display the new balance and determine whether the new balance exceeds the customer’s credit limit. For customers whose credit limit is exceeded, the script should output HTML5 text that displays the message “Credit limit exceeded.”
7.13     A large company pays its salespeople on a commission basis. The salespeople receive $200 per week, plus 9 percent of their gross sales for that week. For example, a salesperson who sells $5000
248	Chapter7 JavaScript:ControlStatementsI


worth of merchandise in a week receives $200 plus 9 percent of $5000, or a total of $650. You have been supplied with a list of the items sold by each salesperson. The values of these items are as follows:
Item   Value 1	239.99 2	129.75 3	99.95 4	350.89
Develop a script that inputs one salesperson’s items sold for last week, calculates the salesperson’s earnings and outputs HTML5 text that displays the salesperson’s earnings.
7.14	Develop a script that will determine the gross pay for each of three employees. The compa-ny pays “straight time” for the first 40 hours worked by each employee and pays “time and a half” for all hours worked in excess of 40 hours. You’re given a list of the employees of the company, the number of hours each employee worked last week and the hourly rate of each employee. Your script should input this information for each employee, determine the employee’s gross pay and output HTML5 text that displays the employee’s gross pay. Use promptdialogs to input the data.
7.15	The process of finding the largest value (i.e., the maximum of a group of values) is used fre-quently in computerapplications.For example,a script that determines thewinner ofa sales contest would input the number of units sold by each salesperson. The salesperson who sells the most units wins the contest. Write a pseudocode algorithm and then a script that inputs a series of 10 single-digit numbers as characters, determines the largest of the numbers and outputs a message that dis-plays the largest number. Your script should use three variables as follows:
a)  counter: A counter to count to 10 (i.e., to keep track of how many numbers have been input and to determine when all 10 numbers have been processed);
b)  number: The current digit input to the script; c)   largest: The largest number found so far.
7.16	Write a script that uses looping to print the following table of values. Output the results in an HTML5 table. Use CSS to center the data in each column.












7.17	Using an approach similar to that in Exercise 7.15, find the two largest values among the 10 digits entered. [Note: You may input each number only once.]
7.18	Without running it, determine what the following script prints:

1   <!DOCTYPE html> 2
3   <!-- Exercise 7.18: ex08_18.html --> 4   <html>
5	<head>
Exercises   249


6	<meta charset = "utf-8">
7	<title>Mystery Script</title> 8	<script>
9
10	var row = 10; 11	var column; 12
13	while ( row >= 1 ) 14	{
15	column = 1;
16	document.writeln( "<p>" ); 17
18	while ( column <= 10 ) 19	{
20	document.write( row % 2 == 1 ? "<" : ">" ); 21	++column;
22	} // end while 23
24	--row;
25	document.writeln( "</p>" ); 26              } // end while
27
28	</script>
29	</head><body></body> 30   </html>

7.19	(Dangling-Else Problem) Determine the output for each of the given segments of code when xis 9and yis 11, and when xis 11and yis 9. Note that the interpreter ignores the indentation in ascript.Also,theJavaScript interpreteralways associates anelsewith the previous if, unless told to do otherwise by the placement of braces ({}). You may not be sure at first glance which ifan elsematches. This situation is referred to as the “dangling-else” problem. We’ve eliminated the in-dentation from the given code to makethe problem morechallenging. [Hint: Apply the indentation conventions you have learned.]
a)  if ( x < 10 )
if ( y > 10 )
document.writeln( "<p>*****</p>" ); else
document.writeln( "<p>#####</p>" );
document.writeln( "<p>$$$$$</p>" ); b)  if ( x < 10 )
{
if ( y > 10 )
document.writeln( "<p>*****</p>" ); }
else {
document.writeln( "<p>#####</p>" ); document.writeln( "<p>$$$$$</p>" ); }
7.20	A palindrome is a number or a text phrase that reads the same backward and forward. For example, each of thefollowing five-digit integers is apalindrome: 12321, 55555, 45554 and 11611. Writeascriptthatreads inafive-digitintegeranddetermineswhetherit’sapalindrome.Ifthenum-ber is not five digits long, display an alertdialog indicating the problem to the user. Allow the user to enter a new value after dismissing the alertdialog. [Hint: It’s possible to do this exercise with
250	Chapter7 JavaScript:ControlStatementsI


the techniques learned in this chapter. You’ll need to use both division and remainder operations to “pick off” each digit.]
7.21	Write a script that outputs HTML5 text that keeps displaying in the browser window the multiples of the integer2—namely, 2, 4,8,16, 32, 64, etc.Your loop should not terminate (i.e., you should create an infinite loop). What happens when you run this script?
7.22	A company wants to transmit data over the telephone, but it’s concerned that its phones may be tapped. All of its data is transmitted as four-digit integers. It has asked you to write a script that will encrypt its data so that the data may be transmitted more securely. Your script should read a four-digit integer entered by the user in a promptdialog and encrypt it as follows: Replace each digit by (the sum of that digit plus 7) modulus 10. Then swap the first digit with the third, and swap the second digit with the fourth. Then output HTML5 text that displays the encrypted integer.
7.23	Write a script that inputs an encrypted four-digit integer (from Exercise 7.22) and decrypts it to form the original number.




JavaScript:Control StatementsII

8 Who can control his fate? —William Shakespeare

Not everything that can be counted counts, and not every thing that counts can be counted.
—Albert Einstein




Objectives Inthischapteryou’ll:
ÿ   Learntheessentialsof
counter-controlledrepetition
ÿ   Usetheforanddo…while repetitionstatementsto executestatementsina
programrepeatedly.
ÿ   Performmultipleselection usingtheswitchselection
statement.
ÿ   Usethebreakand continueprogram-control
statements
ÿ   Usethelogicaloperatorsto
makedecisions.
252	Chapter8 JavaScript:ControlStatementsII



8.1  Introduction
8.2  EssentialsofCounter-Controlled Repetition
8.3  forRepetitionStatement
8.4  ExamplesUsingtheforStatement 8.5  switchMultiple-Selection
Statement

8.6  do…whileRepetitionStatement 8.7  breakandcontinueStatements 8.8  LogicalOperators
8.9  WebResources


Summary | Self-Review Exercises | Answers to Self-Review Exercises | Exercises


8.1 Introduction
In this chapter, we introduce JavaScript’s remaining control statements (with the excep-tion of for…in, which is presented in Chapter 10). In later chapters, you’ll see that con-trol statements also are helpful in manipulating objects.


8.2 Essentials of Counter-Controlled Repetition Counter-controlled repetition requires:
1.  The name of a control variable (or loop counter). 2.  The initial value of the control variable.
3.  The increment (or decrement) by which the control variable is modified each time through the loop (also known as each iteration of the loop).
4.  The condition that tests for the final value of the control variable to determine whether looping should continue.
To see the four elements of counter-controlled repetition, consider the simple script shown in Fig. 8.1, which displays lines of HTML5 text that illustrate the seven different font sizes supported by HTML5. The declaration in line 11 names the control variable (counter), reserves space for it in memory and sets it to an initial value of 1. The declara-tion and initialization of countercould also have been accomplished by these statements:

var counter; // declare counter
counter = 1; // initialize counter to 1
Lines 15–16 in the whilestatement write a paragraph element consisting of the string “HTML5fontsize” concatenated with the control variable counter’s value, which repre-sents the font size. An inline CSS styleattribute sets the font-sizeproperty to the value of counterconcatenated with ex.
Line 17 in the whilestatement increments the control variable by 1 for each iteration ofthe loop(i.e., eachtimethebody oftheloopis performed).Theloop-continuation con-dition (line13) in the whilestatement tests whetherthe valueof the controlvariable isless than or equal to 7(the final value for which the condition is true). Note that the body of this whilestatement executes even when the control variable is 7. The loop terminates when the control variable exceeds 7(i.e., counterbecomes 8).
8.3 forRepetitionStatement   253


1  <!DOCTYPE html> 2
3  <!-- Fig. 8.1: WhileCounter.html -->
4  <!-- Counter-controlled repetition. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Counter-Controlled Repetition</title> 9	<script>
10
11	var counter = 1; // initialization 12
13	while ( counter <= 7 ) // repetition condition 14	{
15	document.writeln( "<p style = 'font-size: " +
16	counter + "ex'>HTML5 font size " + counter + "ex</p>" ); 17               ++counter; // increment
18	} //end while 19
20	</script>
21	</head><body></body>
22  </html>





















Fig. 8.1  | Counter-controlledrepetition.

8.3 forRepetition Statement
The forrepetition statement conveniently handles all the details of counter-controlled repetition. Figure 8.2 illustrates the power of the forstatement by reimplementing the script of Fig. 8.1. The outputs of these scripts are identical.
254	Chapter8 JavaScript:ControlStatementsII


1  <!DOCTYPE html> 2
3  <!-- Fig. 8.2: ForCounter.html -->
4  <!-- Counter-controlled repetition with the for statement. --> 5  <html>
6	<head>
7	<meta charset="utf-8">
8	<title>Counter-Controlled Repetition</title> 9	<script>
10
11	// Initialization, repetition condition and 12	// incrementing are all included in the for 13	// statement header.
14            for ( var counter = 1; counter <= 7; ++counter ) 15               document.writeln( "<p style = 'font-size: " +
16	counter + "ex'>HTML5 font size " + counter + "ex</p>" ); 17
18	</script>
19	</head><body></body>
20  </html>

Fig. 8.2  | Counter-controlledrepetitionwiththeforstatement.


When the forstatement begins executing (line 14), the control variable counteris declared and initialized to 1. Next, the loop-continuation condition, counter <= 7, is checked. The condition contains the final value (7) of the control variable. The initial value of counteris 1. Therefore, the condition is satisfied (i.e., true), so the body state-ment (lines 15–16) writes a paragraph element in the bodyof the HTML5 document. Then, variable counteris incremented in the expression ++counterand the loop con-tinues execution with the loop-continuation test. The control variable is now equal to 2, so the final value is not exceeded and the program performs the body statement again (i.e., performs the next iteration of the loop). This process continues until the control variable counterbecomes 8, at which point the loop-continuation test fails and the repetition ter-minates.
The program continues by performing the first statement after the forstatement. (In this case, the script terminates, because the interpreter reaches the end of the script.)
Figure 8.3takesa closerlookatthe forstatementatline 14of Fig. 8.2. The forstate-ment’s first line (including the keyword forand everything in parentheses after it) is often called the forstatement header. Note that the forstatement “does it all”—it specifies each  of  the  items  needed  for  counter-controlled  repetition  with  a  control  variable. Remember that a block is a group of statements enclosed in curly braces that can be placed anywhere that a single statement can be placed, so you can use a block to put multiple statements into the body of a forstatement, if necessary.


A Closer Look at the forStatement’s Header
Figure 8.3 uses the loop-continuation condition counter<=7. If you incorrectly write counter<7, the loop will execute only six times. This is an example of the common logic error called an off-by-one error.
8.3 forRepetitionStatement   255




for keyword

Controlvariable name

Final value ofcontrolvariablefor whichtheconditionistrue


for ( var counter = 1; counter <= 7; ++counter )


Initial value of controlvariable

Loop-continuation condition

Increment of controlvariable


Fig. 8.3 | forstatementheadercomponents.

General Format of a forStatement
The general format of the forstatement is

for ( initialization; loopContinuationTest; increment  ) statements
wheretheinitialization expressionnamestheloop’scontrol variableandprovidesits initial value, loopContinuationTest is the expression that tests the loop-continuation condition (containing the final value of the control variable for which the condition is true), and increment is an expression that increments the control variable.

Optional Expressions in a forStatement Header
The three expressions in the forstatement’s header are optional. If loopContinuationTest is omitted, the loop-continuation condition is true, thus creating an infinite loop. One might omit the initialization expression if the control variable is initialized before the loop. One might omit the increment expression if the increment is calculated by statements in the loop’s body or if no increment is needed. The two semicolons in the header are required.

Arithmetic Expressions in the forStatement’s Header
Theinitialization,loop-continuationconditionandincrementportionsofaforstatement can contain arithmetic expressions. For example, assume that x=2and y=10. If xand y are not modified in the body of the loop, then the statement

for ( var j = x; j <= 4 * x * y; j += y / x )
is equivalent to the statement

for ( var j = 2; j <= 80; j += 5 )

Negative Increments
The “increment” of a forstatement may be negative, in which case it’s really a decrement and the loop actually counts downward.

Loop-Continuation Condition Initially false
If the loop-continuation condition initially is false, the forstatement’s body is not per-formed. Instead, execution proceeds with the statement following the forstatement.

Error-Prevention Tip 8.1
Although the value of the control variable can be changed in the body of a forstatement, avoid changing it, because doing so can lead to subtle errors.
256	Chapter8 JavaScript:ControlStatementsII


Flowcharting a forStatement
The forstatement is flowcharted much like the whilestatement. For example, Fig. 8.4 shows the flowchart of the forstatement in lines 14–17 of Fig. 8.2. This flowchart makes it clear that the initialization occurs only once and that incrementing occurs after each ex-ecution of the body statement. Note that, besides small circles and arrows, the flowchart contains only rectangle symbols and a diamond symbol.


Establishinitial value ofcontrol variable

var counter = 1




counter <= 7

false
Determineif final value of controlvariable hasbeen reached

document.writeln(
true	"<p style='font-size: "
+ counter +
"ex'>HTML5 font size " + counter + "ex</p>" );
Bodyofloop (thismaybemany statements)


++counter
Increment thecontrol variable


Fig. 8.4 | forrepetitionstatementflowchart.

8.4 Examples Using the forStatement
The examples in this section show methods of varying the control variable in a forstate-ment. In each case, we write the appropriate forheader. Note the change in the relational operator for loops that decrement the control variable.
a)   Vary the control variable from 1to 100in increments of 1.

for ( var i = 1; i <= 100; ++i )
b)   Vary the control variable from 100to 1in increments of -1(i.e., decrements of 1).

for ( var i = 100; i >= 1; --i )
c)   Vary the control variable from 7to 77in steps of 7.

for ( var i = 7; i <= 77; i += 7 )
d)   Vary the control variable from 20to 2in steps of -2.

for ( var i = 20; i >= 2; i -= 2 )

Common Programming Error 8.1
Not using the proper relational operator in the loop-continuation condition of a loop that counts downward (e.g., using i<=1instead of i >= 1in a loop that counts down to 1) is a logic error.
8.4 ExamplesUsingtheforStatement   257


Summing Integers with a forStatement
Figure 8.5 uses the forstatement to sum the even integers from 2to 100. Note that the increment expression (line 13) adds 2to the control variable numberafter the body exe-cutes during each iteration of the loop. The loop terminates when numberhas the value 102(which is not added to the sum), and the script continues executing at line 16.

1  <!DOCTYPE html> 2
3  <!-- Fig. 8.5: Sum.html -->
4  <!-- Summation with the for repetition structure. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Sum the Even Integers from 2 to 100</title> 9	<script>
10
11	var sum = 0; 12
13	for ( var number = 2; number <= 100; number += 2 ) 14               sum += number;
15
16	document.writeln( "The sum of the even integers " + 17               "from 2 to 100 is " + sum );
18
19	</script>
20	</head><body></body>
21  </html>








Fig. 8.5  | Summationwiththeforrepetitionstructure.

Thebodyoftheforstatement in Fig. 8.5actuallycouldbemergedintotherightmost (increment) portion of the forheader by using a comma, as follows:

for ( var number = 2; number <= 100; sum += number, number += 2) ;
In this case, the comma represents the comma operator, which guarantees that the expres-sion to its left is evaluated before the expression to its right. Similarly, the initialization sum=0could be merged into the initialization section of the forstatement.

Good Programming Practice 8.1
Although statements preceding a forstatement and in the body of a forstatement can often be merged into the forheader, avoid doing so, because it makes the program more difficult to read.
258	Chapter8 JavaScript:ControlStatementsII


Calculating Compound Interest with the forStatement
The next example computes compound interest (compounded yearly) using the forstate-ment. Consider the following problem statement:
A person invests $1000.00 in a savings account yielding 5 percent interest. Assuming that all the interest is left on deposit, calculate and print the amount of money in the account at the end of each year for 10 years. Use the following formula to determine the amounts:
a = p (1 + r) n where
p is the original amount invested (i.e., the principal) r is the annual interest rate
n is the number of years
a is the amount on deposit at the end of the nth year.
This problem involves a loop that performs the indicated calculation for each of the 10 years the money remains on deposit. Figure 8.6 presents the solution to this problem, displaying the results in a table. Lines 9–18 define an embedded CSS style sheet that for-mats various aspects of the table. The CSS property border-collapse(line 11) with the value collapseindicates that the table’s borders should be merged so that there is no extra space between adjacent cells or between cells and the table’s border. Lines 13–14 specify the formatting for the table, tdand thelements, indicating that they should all have a 1pxsolidblackborder and padding of 4pxaround their contents.


1  <!DOCTYPE html> 2
3  <!-- Fig. 8.6: Interest.html -->
4  <!-- Compound interest calculation with a for loop. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Calculating Compound Interest</title> 9	<style type = "text/css">
10	table	{ width: 300px;
11	border-collapse: collapse;
12	background-color: lightblue; } 13            table, td, th { border: 1px solid black;
14	padding: 4px; } 15            th            { text-align: left; 16	color: white;
17	background-color: darkblue; } 18            tr.oddrow     { background-color: white; }
19	</style> 20	<script> 21
22	var amount; // current amount of money
23	var principal = 1000.00; // principal amount 24	var rate = 0.05; // interest rate
25

Fig. 8.6 | Compoundinterestcalculationwithaforloop.(Part1of2.)
8.4 ExamplesUsingtheforStatement   259


26	document.writeln("<table>" ); // begin the table 27	document.writeln(
28	"<caption>Calculating Compound Interest</caption>" ); 29            document.writeln(
30	"<thead><tr><th>Year</th>" ); // year column heading 31            document.writeln(
32	"<th>Amount on deposit</th>" ); // amount column heading 33            document.writeln( "</tr></thead><tbody>" );
34
35	// output a table row for each year
36	for ( var year = 1; year <= 10; ++year ) 37	{
38	amount = principal * Math.pow( 1.0 + rate, year ); 39
40	if ( year % 2 !== 0 )
41	document.writeln( "<tr class='oddrow'><td>" + year + 42                     "</td><td>" + amount.toFixed(2) + "</td></tr>" ); 43               else
44	document.writeln( "<tr><td>" + year +
45	"</td><td>" + amount.toFixed(2) + "</td></tr>" ); 46            } //end for
47
48	document.writeln( "</tbody></table>" ); 49
50	</script>
51	</head><body></body>
52  </html>

















Fig. 8.6  | Compoundinterestcalculationwithaforloop.(Part2of2.)

Outputting the Beginning of an HTML5 table
Lines 22–24 declare three variables and initialize principalto 1000.0and rateto .05. Line 26 writes an HTML5 <table>tag, and lines 27–28 write the captionthat summa-rizes the table’s content. Lines 29–30 create the table’s header section (<thead>), a row
260	Chapter8 JavaScript:ControlStatementsII


(<tr>) and a column heading (<th>) containing “Year.” Lines 31–32 create a table head-ing for “Amountondeposit”, write the closing </tr>and </thead>tags, and write the opening tag for the body of the table (<body>).

Performing the Interest Calculations
The forstatement (lines 36–46) executes its body 10 times, incrementing control variable yearfrom 1 to 10 (note that yearrepresents n in the problem statement). JavaScript does not include an exponentiation operator—instead, we use the Mathobject’s powmethod. Math.pow(x,y)calculates the value of xraised to the yth power. Method Math.powtakes two numbers as arguments and returns the result. Line 38 performs the calculation using the formula given in the problem statement.

Formatting the tableRows
Lines 40–45 write a line of HTML5 markup that creates the next row in the table. If it’s an odd-numbered row, line 41 indicates that the row should be formatted with the CSS style class oddrow(defined on line 18)—this allows us to format the background color dif-ferently for odd- and even-numbered rows to make the table more readable. The first col-umn is the current yearvalue. The second column displays the value of amount. Line 48 writes the closing </tbody>and </table>tags after the loop terminates.

NumberMethod toFixed
Lines 42 and 45 introduce the Number object and its toFixed method. The variable amountcontains a numerical value, so JavaScript represents it as a Numberobject. The to-Fixedmethod of a Numberobject formats the value by rounding it to the specified number of decimal places. On line 34, amount.toFixed(2)outputs the value of amount with two decimal places, which is appropriate for dollar amounts.

A Warning about Displaying Rounded Values
Variables amount, principaland raterepresent numbers in this script. Remember that JavaScript represents all numbers as floating-point numbers. This feature is convenient in this example, because we’re dealing with fractional parts of dollars and need a type that allows decimal points in its values.
Unfortunately, floating-point numbers can cause trouble. Here’s a simple example of what can go wrong when using floating-point numbers to represent dollar amounts dis-played with two digits to the right of the decimal point: Two dollar amounts stored in the machine could be 14.234 (which would normally be rounded to 14.23 for display as a dollar amount) and 18.673 (which would normally be rounded to 18.67). When these amounts are added, they produce the internal sum 32.907, which would normally be rounded to 32.91 for display purposes. Thus your printout could appear as:

14.23 + 18.67

32.91

but a person adding the individual numbers as printed would expect the sum to be 32.90. You’ve been warned!
8.5 switchMultiple-SelectionStatement   261

8.5 switchMultiple-Selection Statement
Previously, we discussed the if single-selection statement and the if…else double-selection statement. Occasionally, an algorithm will contain a series of decisions in which a variable or expression is tested separately for each of the values it may assume, and dif-ferent actions are taken for each value. JavaScript provides the switchmultiple-selection statement to handle such decision making. The script in Fig. 8.7 demonstrates three dif-ferent CSS list formats determined by the value the user enters.

1  <!DOCTYPE html> 2
3  <!-- Fig. 8.7: SwitchTest.html -->
4  <!-- Using the switch multiple-selection statement. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Switching between HTML5 List Formats</title> 9	<script>
10
11	var choice; // user’s choice
12	var startTag; // starting list item tag 13	var endTag; // ending list item tag
14	var validInput = true; // true if input valid else false 15	var listType; // type of list as a string
16
17	choice = window.prompt( "Select a list style:\n" +
18	"1 (numbered), 2 (lettered), 3 (roman numbered)", "1" ); 19
20	switch ( choice ) 21	{
22	case "1":
23	startTag = "<ol>"; 24	endTag = "</ol>";
25	listType = "<h1>Numbered List</h1>"; 26	break;
27	case "2":
28	startTag = "<ol style = 'list-style-type: upper-alpha'>"; 29	endTag = "</ol>";
30	listType = "<h1>Lettered List</h1>"; 31	break;
32	case "3":
33	startTag = "<ol style = 'list-style-type: upper-roman'>"; 34	endTag = "</ol>";
35	listType = "<h1>Roman Numbered List</h1>"; 36	break;
37	default:
38	validInput = false; 39	break;
40	} //end switch 41
42	if ( validInput === true )
43	{

Fig. 8.7 | Usingtheswitchmultiple-selectionstatement.(Part1of3.)
262	Chapter8 JavaScript:ControlStatementsII


44	document.writeln( listType + startTag ); 45
46	for ( var i = 1; i <= 3; ++i )
47	document.writeln( "<li>List item " + i + "</li>" ); 48
49	document.writeln( endTag ); 50            } //end if
51	else
52	document.writeln( "Invalid choice: " + choice ); 53
54	</script>
55	</head><body></body>
56  </html>


































Fig. 8.7  | Usingtheswitchmultiple-selectionstatement.(Part2of3.)
8.5 switchMultiple-SelectionStatement   263
















Fig. 8.7 | Usingtheswitchmultiple-selectionstatement.(Part3of3.)

Line 11 declares the variable choice. This variable stores the user’s choice, which determines what type of HTML5 ordered list to display. Lines 12–13 declare variables startTagand endTag, which will store the HTML5 tags that will be used to create the list element. Line 14 declares variable validInputand initializes it to true. The script uses this variable to determine whether the user made a valid choice (indicated by the value of true). If a choice is invalid, the script sets validInputto false. Line 15 declares variable listType, which will store an h1element indicating the list type. This heading appears before the list in the HTML5 document.
Lines 17–18 prompt the user to enter a 1to display a numbered list, a 2to display a lettered list and a 3to display a list with roman numerals. Lines 20–40 define a switch statement that assigns to the variables startTag, endTagand listTypevalues based on the value input by the user in the promptdialog. We create these different lists using the CSS property list-style-type, which allows us to set the numbering system for the list. Possible values include decimal(numbers—the default), lower-roman(lowercase Roman numerals), upper-roman(uppercase Roman numerals), lower-alpha(lowercase letters), upper-alpha(uppercase letters), and more.
The switchstatement consists of a series of caselabels and an optional defaultcase (which is normally placed last). When the flow of control reaches the switchstatement, the script evaluates the controlling expression (choicein this example) in the parentheses following keyword switch. The value of this expression is compared with the value in each of the case labels, starting with the first case label. Assume that the user entered 2. Remember that the value typed by the user in a promptdialog is returned as a string. So, the string 2is compared to the string in each casein the switchstatement. If a match occurs (case"2":), the statements for that caseexecute. For the string 2(lines 28–31), we set startTagto an opening oltag with the style property list-style-typeset to upper-alpha, set endTagto "</ol>"to indicate the end of an ordered list and set listTypeto "<h1>LetteredList</h1>".Ifnomatchoccursbetweenthecontrollingexpression’svalue and a caselabel, the defaultcase executes and sets variable validInputto false.
The breakstatement in line 31 causes program control to proceed with the first state-ment after the switch statement. The break statement is used because the cases in a
264	Chapter8 JavaScript:ControlStatementsII


switchstatementwouldotherwiseruntogether.Ifbreakisnotusedanywhereinaswitch statement,then eachtimeamatchoccursinthestatement,thestatementsforthatcase and all the remaining cases execute.
Next, the flow of control continues with the if statement in line 42, which tests whether the variable validInput is true. If so, lines 44–49 write the listType, the startTag, three list items (<li>) and the endTag. Otherwise, the script writes text in the HTML5 document indicating that an invalid choice was made (line 52).

Flowcharting the switchStatement
Each casecan have multiple actions (statements). The switchstatement is different from others in that braces are not required around multiple actions in a caseof a switch. The general switchstatement (i.e., using a breakin each case) is flowcharted in Fig. 8.8.




casea	true

false

caseb	true
false
. . .


casez	true

false
defaultaction(s)


caseaaction(s)	break


casebaction(s)	break






casezaction(s)	break



Fig. 8.8 | switchmultiple-selectionstatement.

The flowchart makes it clear that each breakstatement at the end of a casecauses con-trol to exit from the switchstatement immediately. The breakstatement is not required for the last casein the switchstatement (or the defaultcase, when it appears last), because program control simply continues with the next statement after the switch statement. Having several caselabels listed together (e.g., case1:case2:with no statements between the cases) simply means that the same set of actions is to occur for each of these cases.

8.6 do…whileRepetition Statement
The do…whilerepetition statement is similar to the whilestatement. In the whilestate-ment, the loop-continuation test occurs at the beginning of the loop, before the body of the loopexecutes.Thedo…whilestatementteststheloop-continuationconditionaftertheloop body executes—therefore, the loop body always executes at least once. When a do…whileter-
8.6 do…whileRepetitionStatement   265


minates, execution continues with the statement after the whileclause. It’s not necessary to use braces in a do…whilestatement if there’s only one statement in the body.
The script in Fig. 8.9 uses a do…whilestatement to display each of the six different HTML5headingtypes(h1throughh6).Line11declarescontrolvariablecounterandini-tializes it to 1. Upon entering the do…while statement, lines 14–16 write a line of HTML5 text in the document. The value of control variable counteris used to create the starting and ending header tags (e.g., <h1>and </h1>) and to create the line of text to dis-play (e.g., Thisisanh1levelhead). Line 17 increments the counterbefore the loop-continuation test occurs at the bottom of the loop.

1  <!DOCTYPE html> 2
3  <!-- Fig. 8.9: DoWhileTest.html -->
4  <!-- Using the do...while repetition statement. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Using the do...while Repetition Statement</title> 9	<script>
10
11	var counter = 1; 12
13	do {
14	document.writeln( "<h" + counter + ">This is " + 15                  "an h" + counter + " level head" + "</h" +
16	counter + ">" ); 17               ++counter;
18	} while ( counter <= 6 ); 19
20	</script> 21
22	</head><body></body>
23  </html>
















Fig. 8.9  | Usingthedo…whilerepetitionstatement.
266	Chapter8 JavaScript:ControlStatementsII


Flowcharting the do…whileStatement
The do…whileflowchart in Fig. 8.10 makes it clear that the loop-continuation test does not occur until the action executes at least once.



action(s)

condition	true

false


Fig. 8.10  | do…whilerepetitionstatementflowchart.

Common Programming Error 8.2
Infinite loops are caused when the loop-continuation condition never becomes falsein a while, foror do…whilestatement. To prevent this, make sure that there’s not a semi-colon immediately after the header of a whileor forstatement. In a counter-controlled loop, make sure that the control variable is incremented (or decremented) in the body of the loop. In a sentinel-controlled loop, the sentinel value should eventually be input.


8.7 breakand continueStatements
In addition to the selection and repetition statements, JavaScript provides the statements breakand continueto alter the flow of control. Section 8.5 demonstrated how breakcan be used to terminate a switchstatement’s execution. This section shows how to use break in repetition statements.

breakStatement
The breakstatement, when executed in a while, for, do…whileor switchstatement, causes immediate exit from the statement. Execution continues with the first statement af-ter the structure. Figure 8.11 demonstrates the breakstatement in a forrepetition state-ment. Duringeachiteration oftheforstatementinlines13–19,thescriptwritesthevalue of countin the HTML5 document. When the ifstatement in line 15 detects that count is 5, the breakin line 16 executes. This statement terminates the forstatement, and the program proceeds to line 21 (the next statement in sequence immediately after the for statement), where the script writes the value of countwhen the loop terminated (i.e., 5). The loop executes line 18 only four times.

1  <!DOCTYPE html> 2
3  <!-- Fig. 8.11: BreakTest.html -->
4  <!-- Using the break statement in a for statement. -->

Fig. 8.11  | Usingthebreakstatementinaforstatement.(Part1of2.)
8.7 breakandcontinueStatements   267


5  <html>
6	<head>
7	<meta charset = "utf-8"> 8	<title>
9	Using the break Statement in a for Statement 10         </title>
11	<script> 12
13	for ( var count = 1; count <= 10; ++count ) 14	{
15	if ( count == 5 )
16	break; // break loop only if count == 5 17
18	document.writeln( count + " " ); 19            } //end for
20
21	document.writeln(
22	"<p>Broke out of loop at count = " + count + "</p>" ); 23
24	</script>
25	</head><body></body>
26  </html>










Fig. 8.11  | Usingthebreakstatementinaforstatement.(Part2of2.)


continueStatement
The continuestatement, when executed in a while, foror do…whilestatement, skips theremainingstatementsinthebodyofthestatementandproceedswiththenextiteration of the loop. In whileand do…whilestatements, the loop-continuation test evaluates im-mediately after the continuestatement executes. In forstatements, the increment expres-sion executes, then the loop-continuation test evaluates. Improper placement of continue before the increment in a whilemay result in an infinite loop.
Figure 8.12 uses continuein a forstatement to skip line 19if line16 determines that the value of count is 5. When the continue statement executes, the script skips the remainder of the for statement’s body (line 19). Program control continues with the increment of the forstatement’s control variable (line 14), followed by the loop-continu-ation test to determine whether the loop should continue executing. Although breakand continueexecute quickly, you can accomplish what they do with the other control state-ments, which many programmers feel results in better engineered software.
268	Chapter8 JavaScript:ControlStatementsII


1  <!DOCTYPE html> 2
3  <!-- Fig. 8.12: ContinueTest.html -->
4  <!-- Using the continue statement in a for statement. --> 5  <html>
6	<head>
7	<meta charset = "utf-8"> 8	<title>
9	Using the continue Statement in a for Statement 10         </title>
11
12	<script> 13
14	for ( var count = 1; count <= 10; ++count ) 15	{
16	if ( count == 5 )
17	continue; // skip remaining loop code only if count == 5 18
19	document.writeln( count + " " ); 20            } //end for
21
22	document.writeln( "<p>Used continue to skip printing 5</p>" ); 23
24	</script> 25
26	</head><body></body>
27  </html>










Fig. 8.12  | Usingthecontinuestatementinaforstatement.


8.8 Logical Operators
Sofar,we’vestudiedonlysimpleconditionssuchascount<=10,total>1000andnumber !=sentinelValue. These conditions were expressed in terms of the relational operators >, <, >=and <=, and the equality operators ==and !=. Each decision tested one condition. To make a decision based on multiple conditions, we performed these tests in separate state-ments or in nested ifor if…elsestatements.
JavaScript provides logical operators that can be used to form more complex condi-tionsbycombiningsimpleconditions.Thelogicaloperatorsare&&(logicalAND),||(log-ical OR) and !(logical NOT, also called logical negation).
8.8 LogicalOperators   269


&&(Logical AND) Operator
Suppose that, at some point in a program, we wish to ensure that two conditions are both truebefore we choose a certain path of execution. In this case, we can use the logical && operator, as follows:

if ( gender == 1 && age >= 65 ) ++seniorFemales;
This ifstatement contains two simple conditions. The condition gender==1might be evaluated to determine, for example, whether a person is a female. The condition age>= 65is evaluated to determine whether a person is a senior citizen. The ifstatement then considers the combined condition

gender == 1 && age >= 65
This condition is trueif and only if both of the simple conditions are true. If this com-bined condition is indeed true, the count of seniorFemalesis incremented by 1. If either or both of the simple conditions are false, the program skips the incrementing and pro-ceeds to the statement following theifstatement. Thepreceding combinedcondition can be made more readable by adding redundant parentheses:

( gender == 1 ) && ( age >= 65 )
The table in Fig. 8.13 summarizes the &&operator. The table shows all four possible combinations of falseand truevalues for expression1 and expression2. Such tables are often called truth tables. JavaScript evaluates to falseor trueall expressions that include relational operators, equality operators and/or logical operators.



expression1

false
false
true
true

expression2

false
true
false
true

expression1&&expression2

false
false
false
true


Fig. 8.13  | Truthtableforthe&&(logicalAND)operator.

||(Logical OR) Operator
Now let’s consider the ||(logical OR) operator. Suppose we wish to ensure that either or both of two conditions are truebefore we choose a certain path of execution. In this case, we use the ||operator, as in the following program segment:

if ( semesterAverage >= 90 || finalExam >= 90 ) document.writeln( "Student grade is A" );

This statement also contains two simple conditions. The condition semesterAverage>= 90is evaluated to determine whether the student deserves an “A” in the course because of a solid performance throughout the semester. The condition finalExam>=90is evaluated to determine whether the student deserves an “A” in the course because of an outstanding performance on the final exam. The ifstatement then considers the combined condition
270	Chapter8 JavaScript:ControlStatementsII


semesterAverage >= 90 || finalExam >= 90
and awards the student an “A” if either or both of the simple conditions are true. Note that the message "StudentgradeisA"is not printed only when both of the simple condi-tions are false. Figure 8.14 is a truth table for the logical OR operator (||).



expression1

false
false
true
true

expression2

false
true
false
true

expression1||expression2

false
true
true
true


Fig. 8.14 | Truthtableforthe||(logicalOR)operator.

The &&operator has a higher precedence than the ||operator. Both operators asso-ciate from left to right. An expression containing &&or ||operators is evaluated only until truth or falsity is known. Thus, evaluation of the expression

gender == 1 && age >= 65

stops immediately if genderis not equal to 1(i.e., the entire expression is false) and con-tinues if genderis equal to 1(i.e., the entire expression could still be trueif the condition age>=65is true). Similarly, the ||operator immediately returns trueif the first operand is true. This performance feature for evaluation of logical AND and logical OR expres-sions is called short-circuit evaluation.


!(Logical Negation) Operator
JavaScript provides the !(logical negation) operator to enable you to “reverse” the mean-ing of a condition (i.e., a truevalue becomes false, and a falsevalue becomes true). Unlike the logical operators &&and ||, which combine two conditions (i.e., they’re binary operators), the logical negation operator has only a single condition as an operand (i.e., it’s a unary operator). The logical negation operator is placed before a condition to choose a pathofexecutioniftheoriginalcondition(withoutthelogicalnegationoperator)isfalse, as in the following program segment:

if ( ! ( grade == sentinelValue ) ) document.writeln( "The next grade is " + grade );
The parentheses around the condition grade==sentinelValueare needed because the logical negation operator has a higher precedence than the equality operator. Figure 8.15 is a truth table for the logical negation operator.
In most cases, you can avoid using logical negation by expressing the condition dif-ferently with an appropriate relational or equality operator. For example, the preceding statement may also be written as follows:

if ( grade != sentinelValue )
document.writeln( "The next grade is " + grade );
8.9 WebResources   271



expression

false
true

!expression

true
false


Fig. 8.15 | Truthtablefor operator!(logicalnegation).

Boolean Equivalents of Nonboolean Values
An interesting feature of JavaScript is that most nonboolean values can be converted to a boolean trueor falsevalue (if they’re being used in a context in which a boolean value is needed). Nonzero numeric values are considered to be true. The numeric value zero is considered to be false. Any string that contains characters is considered to be true. The emptystring(i.e.,thestringcontainingnocharacters) isconsideredtobe false.Thevalue nulland variables that have been declared but not initialized are considered to be false. All objects (such as the browser’s documentand windowobjects and JavaScript’s Mathob-ject) are considered to be true.

Operator Precedence and Associativity
Figure 8.16 shows the precedence and associativity of the JavaScript operators introduced uptothispoint.Theoperatorsareshowntoptobottomindecreasingorderofprecedence.


Operator	Associativity	Type


++   --   !
*	/	%
+	-
<	<=   >	>=
==   !=   ===  !==
&&
||
?:
=	+=   -=   *=   /=   %=

right to left left to right left to right left to right left to right left to right left to right right to left
right to left

unary multiplicative additive relational equality logical AND logical OR conditional
assignment


Fig. 8.16  | Precedenceandassociativityoftheoperatorsdiscussedsofar.

8.9 Web Resources www.deitel.com/javascript/
The Deitel JavaScript Resource Center contains links to some of the best JavaScript resources on the web.Thereyou’llfindcategorizedlinkstoJavaScripttools,codegenerators,forums,books,libraries, frameworksandmore.Alsocheck outthetutorialsforallskilllevels,fromintroductorytoadvanced. Be sure to visit the related Resource Centers on HTML5 (www.deitel.com/HTML5/) and CSS3 (www.deitel.com/css3/).
272	Chapter8 JavaScript:ControlStatementsII


Summary
Section 8.2 Essentials of Counter-Controlled Repetition
•  Counter-controlled repetition requires: the name of a control variable, the initial value of the control variable, the increment (or decrement) by which the control variable is modified each time through the loop, and the condition that tests for the final value of the control variable to determine whether looping should continue.

Section 8.3 forRepetition Statement
•  The forstatement (p. 253) conveniently handles all the details of counter-controlled repetition with a control variable.
•  The forstatement’s first line (including the keyword for and everything in parentheses after it) is often called the forstatement header (p. 254).
•  You can use a block to put multiple statements into the body of a forstatement.
•  The forstatement takes three expressions: an initialization, a condition and an expression.
•  Thethreeexpressionsinthe forstatementareoptional.Thetwosemicolonsinthe forstatement are required.
•  The initialization, loop-continuation condition and increment portions of a forstatement can contain arithmetic expressions.
•  The “increment” of a forstatement may be negative, in which case it’s called a decrement and the loop actually counts downward.
•  If the loop-continuation condition initially is false, the body of the forstatement is not per-formed. Instead, execution proceeds with the statement following the forstatement.

Section 8.4 Examples Using the forStatement
•  JavaScript does not include an exponentiation operator. Instead, we use the Mathobject’s pow method for this purpose. Math.pow(x,y)calculates the value of xraised to the yth power.
•  Floating-point numbers can cause trouble as a result of rounding errors.
•  Topreventimplicit conversions in comparisons,whichcan lead tounexpectedresults,JavaScript provides the strict equals (===) and strict does not equal (!==) operators.

Section 8.5 switchMultiple-Selection Statement
•  JavaScript provides the switchmultiple-selection statement (p. 263), in which a variable or ex-pression is tested separately for each of the values it may assume. Different actions are taken for each value.
•  The CSS property list-style-type(p. 263) allows you to set the numbering system for the list. Possible values include decimal(numbers—the default), lower-roman(lowercase roman numer-als), upper-roman (uppercase roman numerals), lower-alpha (lowercase letters), upper-alpha (uppercase letters), and more.
•  The switchstatement consists of a series of case labels and an optional default case (which is nor-mallyplacedlast,p. 263).Whentheflow ofcontrolreachestheswitchstatement,thescripteval-uates the controlling expression in the parentheses following keyword switch. The value of this expression is compared with the value in each of the caselabels, starting with the first caselabel (p. 263). If the comparison evaluates to true, the statements after the case label are executed in order until a breakstatement is reached.
•  The breakstatement is used as the last statement in each caseto exit the switch statement im-mediately.
Summary   273


•  Each casecan have multiple actions (statements). The switchstatement is different from other statements in that braces are not required around multiple actions in a caseof a switch.
•  The breakstatement is not required for the last casein the switchstatement, because program control automatically continues with the next statement after the switchstatement.
•  Having several caselabels listed together (e.g., case1:case2:with no statements between the cases) simply means that the same set of actions is to occur for each case.


Section 8.6 do…whileRepetition Statement
•  The do…whilestatement (p. 264) tests the loop-continuation condition after the loop body ex-ecutes—therefore, the loop body always executes at least once.


Section 8.7 breakand continueStatements
•  The breakstatement, when executed in a repetition statement, causes immediate exit from the statement. Execution continues with the first statement after the repetition statement.
•  The continuestatement, when executed in a repetition statement, skips the remaining statements in the loop body and proceeds with the next loop iteration. In whileand do…whilestatements, the loop-continuation test evaluates immediately after the continuestatement executes. In for statements, the increment expression executes, then the loop-continuation test evaluates.


Section 8.8 Logical Operators
•  JavaScript provides logical operators that can be used to form more complex conditions by com-bining simple conditions. The logical operators are &&(logical AND; p. 268), ||(logical OR; p. 268) and !(logical NOT, also called logical negation; p. 268).
•  The && operator is used to ensure that two conditions are both truebefore choosing a certain path of execution.
•  JavaScriptevaluatestofalseortrueallexpressionsthatincluderelationaloperators,equalityop-erators and/or logical operators.
•  The ||(logical OR) operator is used to ensure that either or both of two conditions are truebe-fore choosing choose a certain path of execution.
•  The &&operator has a higher precedence than the ||operator. Both operators associate from left to right.
•  An expression containing &&or ||operators is evaluated only until truth or falsity is known. This is called short-circuit evaluation (p. 270).
•  JavaScript provides the !(logical negation) operator to enable you to “reverse” the meaning of a condition (i.e., a truevalue becomes false, and a falsevalue becomes true).
•  The logical negation operator has only a single condition as an operand (i.e., it’s a unary opera-tor). The logical negation operator is placed before a condition to evaluate to trueif the original condition (without the logical negation operator) is false.
•  The logical negation operator has a higher precedence than the equality operator.
•  Most nonboolean values can be converted to a boolean trueor falsevalue. Nonzero numeric values are considered to be true. The numeric value zero is considered to be false. Any string that contains characters is considered to be true. The empty string (i.e., the string containing no characters) is considered to be false. The value nulland variables that have been declared but not initialized are considered to be false. All objects (e.g., the browser’s documentand window objects and JavaScript’s Mathobject) are considered to be true.
274	Chapter8 JavaScript:ControlStatementsII


Self-Review Exercises
8.1	 State whether each of the following is true or false. If false, explain why. a)  The defaultcase is required in the switchselection statement.
b)  The breakstatement is required in the last case of a switchselection statement.
c)   The expression (x > y && a < b)is true if either x > yis true or a < bis true.
d)  An expression containing the ||operator is true if either or both of its operands is true.
8.2       WriteaJavaScriptstatementorasetofstatementstoaccomplisheachofthefollowingtasks: a)  Sum the odd integers between 1 and 99. Use a forstatement. Assume that the variables
sumand counthave been declared.
b)  Calculate the value of 2.5raised to the power of 3. Use the powmethod.
c)   Printtheintegersfrom1 to20by usingawhileloop andthecountervariablex.Assume thatthe variable xhas been declared, butnotinitialized. Printonly fiveintegers perline. [Hint: Use the calculation x % 5. When the value of this expression is 0, start a new paragraph in the HTML5 document.]
d)  Repeat Exercise 8.2(c), but using a forstatement.
8.3	Find the error in each of the following code segments, and explain how to correct it: a)  x = 1;
while ( x <= 10 ); ++x;
}
b)  switch ( n ) {
case 1:
document.writeln( "The number is 1" ); case 2:
document.writeln( "The number is 2" ); break;
default:
document.writeln( "The number is not 1 or 2" ); break;
}
c)   The following code should print the values from 1 to 10: n = 1;
while ( n < 10 ) document.writeln( n++ );

Answers to Self-Review Exercises
8.1	a)  False. The defaultcase is optional. If no default action is needed, then there’s no need for a defaultcase. b) False. The breakstatement is used to exit the switchstatement. The break statement is not required for the last case in a switchstatement. c) False. Both of the relational ex-pressions must be true for the entire expression to be true when using the &&operator. d) True.
8.2	a)  sum = 0;
for ( count = 1; count <= 99; count += 2 )
sum += count; b)  Math.pow( 2.5, 3 ) c)   x = 1;
document.writeln( "<p>" ); while ( x <= 20 ) {
Exercises   275


document.write( x + " " ); if ( x % 5 == 0 )
document.write( "</p><p>" ); ++x;
}
d)  document.writeln( "<p>" ); for ( x = 1; x <= 20; x++ ) {
document.write( x + " " ); if ( x % 5 == 0 )
document.write( "</p><p>" ); }
document.writeln( "</p>" );
8.3	a)  Error: The semicolon after the whileheader causes an infinite loop, and there’s a miss-ing left brace.
Correction: Replace the semicolon by a {, or remove both the ;and the }. b)  Error: Missing breakstatement in the statements for the first case.
Correction: Add a breakstatement at the end of the statements for the first case. Note that this missing statement is not necessarily an error if you want the statement of case 2:to execute every time the case1:statement executes.
c)   Error: Improper relational operator used in the whilecontinuation condition. Correction: Use <=rather than <, or change 10to 11.

Exercises
8.4	Find the error in each of the following segments of code. [Note: There may be more than one error.]
a)  For ( x = 100, x >= 1, ++x )
document.writeln( x );
b)  The following code should print whether integer value is odd or even: switch ( value % 2 ) {
case 0:
document.writeln( "Even integer" ); case 1:
document.writeln( "Odd integer" );
}
c)   The following code should output the odd integers from 19 to 1: for ( x = 19; x >= 1; x += 2 )
document.writeln( x );
d)  The following code should output the even integers from 2 to 100: counter = 2;
do {
document.writeln( counter ); counter += 2;
} While ( counter < 100 );
8.5	What does the following script do?

1   <!DOCTYPE html> 2
3   <!-- Exercise 8.5: ex08_05.html --> 4   <html>
276	Chapter8 JavaScript:ControlStatementsII


5	<head>
6	<meta charset = "utf-8"> 7	<title>Mystery</title>
8	<script> 9
10	document.writeln( "<table>" ); 11
12	for ( var i = 1; i <= 7; i++ ) 13	{
14	document.writeln( "<tr>" ); 15
16	for ( var j = 1; j <= 5; j++ )
17	document.writeln( "<td>(" + i + ", " + j + ")</td>" ); 18
19	document.writeln( "</tr>" ); 20              } // end for
21
22	document.writeln( "</table>" ); 23
24	</script>
25	</head><body /> 26   </html>

8.6	Write a script that finds the smallest of several nonnegative integers. Assume that the first value read specifies the number of values to be input from the user.
8.7	Write a script that calculates the product of the odd integers from 1 to 15, then outputs HTML5 text that displays the results.
8.8       Modify the compound interest program in Fig. 8.6 to repeat its steps for interest rates of 5, 6, 7, 8, 9 and 10 percent. Use a forstatement to vary the interest rate. Use a separate table for each rate.
8.9	One interesting application of computers is drawing graphs and bar charts (sometimes called histograms). Write a script that reads five numbers between 1 and 30. For each number read, output HTML5 text that displays a line containing the same number of adjacent asterisks. For ex-ample, if your program reads the number 7, it should output HTML5 text that displays *******.
8.10	(“The Twelve Days of Christmas” Song) Write a script that uses repetition and a switch structures to print the song “The Twelve Days of Christmas.” You can find the words at the site
www.santas.net/twelvedaysofchristmas.htm
8.11	A mail-order house sells five different products whose retail prices are as follows: product 1, $2.98; product 2, $4.50; product 3, $9.98; product 4, $4.49; and product 5, $6.87. Write a script that reads a series of pairs of numbers as follows:
a)  Product number
b)  Quantity sold for one day
Your program should use a switchstatement to determine each product’s retail price and should calculate and output HTML5 that displays the total retail value of all the products sold last week. Use a promptdialog to obtain the product number and quantity from the user. Use a sentinel-con-trolled loop to determine when the program should stop looping and display the final results.
8.12	Assume that i=1, j=2, k=3and m=2. What does each of the given statements print? Are the parentheses necessary in each case?
a)  document.writeln( i == 1 ); b)  document.writeln( j == 3 );
c)   document.writeln( i >= 1 && j < 4 );
Exercises   277


d)  document.writeln( m <= 99 && k < m ); e)   document.writeln( j >= i || k == m );
f)   document.writeln( k + m < j || 3 - j >= k ); g)  document.writeln( !( k > m ) );
8.13	Given the following switchstatement:

1   switch ( k ) 2   {
3	case 1:
4	break; 5       case 2:
6       case 3: 7          ++k;
8	break; 9       case 4:
10	--k; 11	break; 12       default:
13	k *= 3; 14   } //end switch 15
16   x = k;

What values are assigned to xwhen khas values of 1, 2, 3, 4 and 10?
9 JavaScript:Functions
E pluribus unum.
(One composed of many.)
—Virgil

Call me Ishmael. —Herman Melville

When you call me that, smile. —Owen Wister

O! call back yesterday, bid time return.
—William Shakespeare



Objectives Inthischapteryouwill:
ÿ   Constructprograms modularlyfromsmallpieces
calledfunctions.
ÿ   Definenewfunctions.
ÿ   Passinformationbetween
functions.
ÿ   Usesimulationtechniques basedonrandomnumber
generation.
ÿ   UsethenewHTML5audio
andvideoelements
ÿ   Useadditionalglobal
methods.
ÿ   Seehowthevisibilityof identifiersislimitedto
specificregionsofprograms.
9.1 Introduction   279



9.1  Introduction
9.2  ProgramModulesinJavaScript 9.3  FunctionDefinitions
9.3.1 Programmer-DefinedFunctionsquare
9.3.2 Programmer-DefinedFunction maximum
9.4  NotesonProgrammer-Defined Functions
9.5  RandomNumberGeneration
9.5.1 ScalingandShiftingRandom
Numbers


9.5.2 DisplayingRandomImages
9.5.3 RollingDiceRepeatedlyand
DisplayingStatistics
9.6  Example:GameofChance; IntroducingtheHTML5audioand videoElements
9.7  ScopeRules
9.8  JavaScriptGlobalFunctions 9.9  Recursion
9.10  Recursionvs.Iteration


Summary | Self-Review Exercises | Answers to Self-Review Exercises | Exercises



9.1 Introduction
Most computer programs that solve real-world problems are much larger than those pre-sented in the first few chapters of this book. Experience has shown that the best way to develop and maintain a large program is to construct it from small, simple pieces, or modules. This technique is called divide and conquer. This chapter describes many key features of JavaScript that facilitate the design, implementation, operation and mainte-nance of large scripts.
You’ll start using JavaScript to interact programatically with elements in a web page so you can obtain values from elements (such as those in HTML5 forms) and place con-tent into web-page elements. We’ll also take a brief excursion into simulation techniques withrandomnumbergenerationanddevelopaversionofthecasinodicegamecalledcraps that uses most of the programming techniques you’ve used to this point in the book. In the game, we’ll also introduce HTML5’s new audioand videoelements that enable you to embed audio and video in your web pages. We’ll also programmatically interact with the audioelement to play the audio in response to a user interaction with the game.


9.2 Program Modules in JavaScript
Scripts that you write in JavaScript typically contain of one or more pieces called func-tions. You’ll combine new functions that you write with prepackaged functions and ob-jects available in JavaScript. The prepackaged functions that belong to JavaScript objects (such as Math.pow, introduced previously) are called methods.
JavaScript provides several objects that have a rich collection of methods for per-forming common mathematical calculations, string manipulations, date and time manip-ulations, and manipulations of collections of data called arrays. These objects (discussed in Chapters 10–11) make your job easier, because they provide many of the capabilities you’ll frequently need.
You can write functions to define tasks that may be used at many points in a script. These are referred to as programmer-defined functions. The actual statements defining the function are written only once and are hidden from other functions.
280	Chapter9 JavaScript:Functions


A function is invoked (that is, made to perform its designated task) by a function call. The function call specifies the function name and provides information (as arguments) that the called function needs to perform its task. A common analogy for this structure is thehierarchical form of management. Aboss (the calling function, or caller) asks a worker (the called function) to perform a task and return (i.e., report back) the results when the task is done. The boss function does not know how the worker function performs its designated tasks. The worker may call other worker functions—the boss will be unaware of this. We’ll soon see how this hiding of implementation details promotes good software engineering. Figure 9.1 shows the bossfunction communicating with several worker functions in a hierarchical manner. Note that worker1also acts as a “boss” function to worker4and worker5, and worker4and worker5report back to worker1.



boss



worker1	worker2	worker3



worker4	worker5


Fig. 9.1 | Hierarchicalboss-function/worker-functionrelationship.

Functions are invoked by writing the name of the function, followed by a left paren-thesis, followed by a comma-separated list of zero or more arguments, followed by a right parenthesis. For example, a programmer desiring to convert a string stored in variable inputValueto a floating-point number and add it to variable totalmight write

total += parseFloat( inputValue );
When this statement executes, the JavaScript function parseFloatconverts the string in the inputValuevariable to a floating-point value and adds that value to total. Variable inputValueis function parseFloat’s argument. Function parseFloattakes a string rep-resentation of a floating-point number as an argument and returns the corresponding floating-point numeric value. Function arguments may be constants, variables or expres-sions.
Methods are called in the same way but require the name of the object to which the method belongs and a dot preceding the method name. For example, we’ve already seen the syntax document.writeln("Hithere.");. This statement calls the documentobject’s writelnmethod to output the text.

9.3 Function Definitions
We now consider how you can write your own customized functions and call them in a script.
9.3 FunctionDefinitions   281


9.3.1 Programmer-Defined Function square
Consider a script (Fig. 9.2) that uses a function squareto calculate the squares of the in-tegers from 1 to 10. [Note: We continue to show many examples in which the bodyele-ment of the HTML5 document is empty and the document is created directly by JavaScript. In this chapter and later ones, we also show examples in which scripts interact with the elements in the bodyof a document.]

Invoking Function square
The forstatement in lines 17–19 outputs HTML5 that displays the results of squaring the integers from 1 to 10. Each iteration of the loop calculates the squareof the current value of control variable xand outputs the result by writing a line in the HTML5 document. Functionsquareisinvoked,orcalled,inline19withtheexpressionsquare(x).Whenpro-gram control reaches this expression, the program calls function square(defined in lines 23–26). The parentheses ()in line 19 represent the function-call operator, which has high precedence. At this point, the program makes a copy of the value of x(the argument) and program control transfers to the first line of the function square’s definition (line 23). Function squarereceives the copy of the value of xand stores it in the parameter y. Then


1  <!DOCTYPE html> 2
3  <!-- Fig. 9.2: SquareInt.html -->
4  <!-- Programmer-defined function square. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>A Programmer-Defined square Function</title> 9	<style type = "text/css">
10	p { margin: 0; } 11         </style>
12	<script> 13
14	document.writeln( "<h1>Square the numbers from 1 to 10</h1>" ); 15
16	// square the numbers from 1 to 10 17	for ( var x = 1; x <= 10; ++x )
18	document.writeln( "<p>The square of " + x + " is " + 19                  square( x ) + "</p>" );
20
21	// The following square function definition’s body is executed 22	// only when the function is called explicitly as in line 19 23	function square( y )
24	{
25	return y * y;
26	} // end function square 27
28	</script>
29	</head><body></body> <!-- empty body element -->
30  </html>

Fig. 9.2  | Programmer-definedfunctionsquare.(Part1of2.)
282	Chapter9 JavaScript:Functions



















Fig. 9.2  | Programmer-definedfunctionsquare.(Part2of2.)

squarecalculates y*y. The result is returned (passed back) to the point in line 19 where squarewas invoked. Lines 18–19 concatenate the string "<p>Thesquareof", the value of x, the string "is", the value returned by function squareand the string "</p>", and write that line of text into the HTML5 document to create a new paragraph in the page. This process is repeated 10 times.

squareFunction Definition
The definition of function square(lines 23–26) shows that squareexpects a single pa-rameter y. Function squareuses this name in its body to manipulate the value passed to squarefrom the function call in line 19. The return statement in squarepasses the result of the calculation y*yback to the calling function. JavaScript keyword varis not used to declare function parameters (line 25).

Flow of Control in a Script That Contains Functions
In this example, function squarefollows the rest of the script. When the forstatement terminates, program control does not flow sequentially into function square. A function must be called explicitly for the code in its body to execute. Thus, when the forstatement in this example terminates, the script terminates.

General Format of a Function Definition The general format of a function definition is

function function-name( parameter-list  ) {
declarations and statements }
The function-name is any valid identifier. The parameter-list is a comma-separated list con-taining the names of the parameters received by the function when it’s called (remember
9.3 FunctionDefinitions   283


that the arguments in the function call are assigned to the corresponding parameters in the function definition). There should be one argument in the function call for each parame-ter in the function definition. If a function does not receive any values, the parameter-list is empty (i.e., the function name is followed by an empty set of parentheses). The declara-tions and statements between the braces form the function body.

Common Programming Error 9.1 Forgettingtoreturnavaluefromafunctionthat’ssupposedtoreturnavalueisalogicerror.



Returning Program Control from a Function Definition
There are three ways to return control to the point at which a function was invoked. If the function does not return a result, control returns when the program reaches the function-ending right brace (}) or executes the statement

return;
If the function does return a result, the statement

return expression;
returns the value of expression to the caller. When a returnstatement executes, control re-turns immediately to the point at which the function was invoked.


9.3.2 Programmer-Defined Function maximum
The script in our next example (Fig. 9.3) uses a programmer-defined function called max-imumto determine and return the largest of three floating-point values.]


1  <!DOCTYPE html> 2
3  <!-- Fig. 9.3: maximum.html -->
4  <!-- Programmer-Defined maximum function. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Maximum of Three Values</title> 9	<style type = "text/css">
10	p { margin: 0; } 11         </style>
12	<script> 13
14	var input1 = window.prompt( "Enter first number", "0" ); 15	var input2 = window.prompt( "Enter second number", "0" ); 16	var input3 = window.prompt( "Enter third number", "0" ); 17
18            var value1 = parseFloat( input1 ); 19            var value2 = parseFloat( input2 );
20	var value3 = parseFloat( input3 );

Fig. 9.3 | Programmer-definedmaximumfunction.(Part1of2.)
284	Chapter9 JavaScript:Functions


21
22	var maxValue = maximum( value1, value2, value3 ); 23
24	document.writeln( "<p>First number: " + value1 + "</p>" + 25               "<p>Second number: " + value2 + "</p>" +
26	"<p>Third number: " + value3 + "</p>" + 27	"<p>Maximum is: " + maxValue + "</p>" ); 28
29	// maximum function definition (called from line 22) 30	function maximum( x, y, z )
31	{
32	return Math.max( x, Math.max( y, z ) ); 33           } // end function maximum
34
35	</script>
36	</head><body></body>
37  </html>































Fig. 9.3  | Programmer-definedmaximumfunction.(Part2of2.)
9.4 NotesonProgrammer-DefinedFunctions   285


The three floating-point values are input by the user via promptdialogs (lines 14–16). Lines 18–20 use function parseFloat to convert the strings entered by the user to floating-point values. The statement in line 22 passes the three floating-point values to function maximum(defined in lines 30–33). The function then determines the largest value and returns that value to line 22 by using the returnstatement (line 32). The returned value is assigned to variable maxValue. Lines 24–27 display the three floating-point values entered by the user and the calculated maxValue.
The first line of the function definition indicates that the function is named maximum andtakesparametersx,yandz.Also,thebodyofthefunctioncontainsthestatementwhich returns the largest of the three floating-point values, using two calls to the Mathobject’s max method.First,methodMath.maxisinvokedwiththevaluesofvariablesyandztodetermine the larger of the two values. Next, the value of variable xand the result of the first call to Math.maxare passed to method Math.max. Finally, the result of the second call to Math.max is returned to the point at which maximumwas invoked (line 22).


9.4 Notes on Programmer-Defined Functions
All variables declared with the keyword varin function definitions are local variables— this means that they can be accessed only in the function in which they’re defined. A func-tion’s parameters are also considered to be local variables.
There are several reasons for modularizing a program with functions. The divide-and-conquer approach makes program development more manageable. Another reason is soft-ware reusability (i.e., using existing functions as building blocks to create new programs). With good function naming and definition, significant portions of programs can be cre-atedfromstandardizedfunctionsratherthanbuiltbyusingcustomizedcode.Forexample, we did not have to define how to convert strings to integers and floating-point numbers— JavaScript already provides function parseIntto convert a string to an integer and func-tion parseFloatto convert a string to a floating-point number. A third reason is to avoid repeating code in a program.

Software Engineering Observation 9.1 Ifafunction’staskcannotbeexpressedconcisely,perhapsthefunctionisperformingtoomany different tasks. It’s usually best to break such a function into several smaller functions.

Common Programming Error 9.2
Redefining a function parameter as a local variable in the function is a logic error.


Good Programming Practice 9.1
Do not use the same name for an argument passed to a function and the corresponding parameter in the function definition. Using different names avoids ambiguity.

Software Engineering Observation 9.2
To promote software reusability, every function should be limited to performing a single, well-defined task, and the name of the function should describe that task effectively. Such functions make programs easier to write, debug, maintain and modify.
286	Chapter9 JavaScript:Functions

9.5 Random Number Generation
Wenowtakeabrief andhopefullyentertainingexcursionintoa popularprogramming ap-plication, namely simulation and game playing. In this section and the next, we develop a carefully structured game-playing program that includes multiple functions. The program uses most of the control statements we’ve studied.
There’s something in the air of a gambling casino that invigorates people, from the high rollers at the plush mahogany-and-felt craps tables to the quarter poppers at the one-armed bandits. It’s the element of chance, the possibility that luck will convert a pocketful of money into a mountain of wealth. The element of chance can be introduced through the Mathobject’s randommethod.
Consider the following statement:

var randomValue = Math.random();
Method randomgenerates a floating-point value from 0.0 up to, but not including, 1.0. If randomtrulyproducesvaluesatrandom,theneveryvalueinthatrangehasanequalchance (or probability) of being chosen each time randomis called.

9.5.1 Scaling and Shifting Random Numbers
The range of values produced directly by randomis often different than what is needed in a specific application. For example, a program that simulates coin tossing might require only 0 for heads and 1 for tails. A program that simulates rolling a six-sided die would re-quire random integers in the range 1–6. A program that randomly predicts the next type of spaceship, out of four possibilities, that willfly across the horizon in a videogamemight require random integers in the range 0–3 or 1–4.
To demonstrate method random, let’s develop a program that simulates 30 rolls of a six-sided die and displays the value of each roll (Fig. 9.4). We use the multiplication oper-ator (*) with randomas follows (line 21):

Math.floor( 1 + Math.random() * 6 )
The preceding expression multiplies the result of a call to Math.random()by 6 to produce a value from 0.0 up to, but not including, 6.0. This is called scaling the range of the random numbers. Next, we add 1 to the result to shift the range of numbers to produce a number in therange1.0upto,butnotincluding,7.0.Finally,weusemethodMath.floortodetermine the closest integer not greater than the argument’s value—for example, Math.floor(1.75)is 1andMath.floor(6.75)is6.Figure 9.4confirmsthattheresultsareintherange1to6.To add space between the values being displayed, we output each value as an lielement in an ordered list. The CSS style in line 11 places a margin of 10 pixels to the right of each liand indicates that they should display inline rather than vertically on the page.

1  <!DOCTYPE html> 2
3  <!-- Fig. 9.4: RandomInt.html -->
4  <!-- Random integers, shifting and scaling. --> 5  <html>
6	<head>

Fig. 9.4  | Randomintegers,shiftingandscaling.(Part1of2.)
9.5 RandomNumberGeneration	287


7	<meta charset = "utf-8">
8	<title>Shifted and Scaled Random Integers</title> 9	<style type = "text/css">
10	p, ol { margin: 0; }
11	li	{ display: inline; margin-right: 10px; } 12         </style>
13	<script> 14
15	var value; 16
17	document.writeln( "<p>Random Numbers</p><ol>" ); 18
19	for ( var i = 1; i <= 30; ++i ) 20	{
21	value = Math.floor( 1 + Math.random() * 6 ); 22	document.writeln( "<li>" + value + "</li>" ); 23            } // end for
24
25	document.writeln( "</ol>" ); 26
27	</script>
28	</head><body></body>
29  </html>








Fig. 9.4 | Randomintegers,shiftingandscaling.(Part2of2.)

9.5.2 Displaying Random Images
Web content that varies randomly can add dynamic, interesting effects to a page. In the next example, we build a random image generator—a script that displays four randomly selected die images every time the user clicks a Roll Dice button on the page. For the script inFig. 9.5tofunctionproperly,thedirectorycontainingthefileRollDice.htmlmustalso contain the six die images with the filenames die1.png, die2.png, die3.png, die4.png, die5.pngand die6.png—these are included with this chapter’s examples.

1  <!DOCTYPE html> 2
3  <!-- Fig. 9.5: RollDice.html -->
4  <!-- Random dice image generation using Math.random. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">

Fig. 9.5  | RandomdiceimagegenerationusingMath.random.(Part1of3.)
288	Chapter9 JavaScript:Functions


8	<title>Random Dice Images</title> 9	<style type = "text/css">
10	li { display: inline; margin-right: 10px; } 11	ul { margin: 0; }
12         </style> 13         <script>
14	// variables used to interact with the i mg elements 15	var die1Image;
16	var die2Image; 17	var die3Image; 18	var die4Image; 19
20	// register button listener and get the img elements 21	function start()
22	{
23	var button = document.getElementById( "rollButton" ); 24	button.addEventListener( "click", rollDice, false ); 25	die1Image = document.getElementById( "die1" );
26	die2Image = document.getElementById( "die2" ); 27	die3Image = document.getElementById( "die3" ); 28	die4Image = document.getElementById( "die4" ); 29            } // end function rollDice
30
31	// roll the dice 32	function rollDice() 33	{
34	setImage( die1Image ); 35	setImage( die2Image ); 36	setImage( die3Image ); 37	setImage( die4Image ); 38            } // end function rollDice 39
40	// set image source for a die 41	function setImage( dieImg ) 42	{
43	var dieValue = Math.floor( 1 + Math.random() * 6 );
44	dieImg.setAttribute( "src", "die" + dieValue + ".png" ); 45	dieImg.setAttribute( "alt",
46	"die image with " + dieValue + " spot(s)" ); 47            } // end function setImage
48
49	window.addEventListener( "load", start, false ); 50         </script>
51	</head> 52	<body>
53	<form action = "#">
54	<input id = "rollButton" type = "button" value = "Roll Dice"> 55         </form>
56	<ol>
57            <li><img id = "die1" src = "blank.png" alt = "die 1 image"></li> 58            <li><img id = "die2" src = "blank.png" alt = "die 2 image"></li>
59	<li><img id = "die3" src = "blank.png" alt = "die 3 image"></li>

Fig. 9.5  | RandomdiceimagegenerationusingMath.random.(Part2of3.)
9.5 RandomNumberGeneration	289


60	<li><img id = "die4" src = "blank.png" alt = "die 4 image"></li> 61         </ol>
62	</body>
63  </html>










Fig. 9.5  | RandomdiceimagegenerationusingMath.random.(Part3of3.)

User Interactions Via Event Handling
Until now, all user interactions with scripts have been through either a promptdialog (in which the user types an input value for the program) or an alertdialog (in which a mes-sage is displayed to the user, and the user can click OK to dismiss the dialog). Although these dialogs are valid ways to receive input from a user and to display messages, they’re fairlylimitedintheircapabilities.Apromptdialogcanobtainonlyonevalueatatimefrom the user, and a message dialog can display only one message.
Inputs are typically received from the user via an HTML5 form(such as one in which the user enters name and address information). Outputs are typically displayed to the user in the web page (e.g., the die images in this example). To begin our introduction to more elaborate user interfaces, this program uses an HTML5 form(discussed in Chapters 2–3) and a new graphical user interface concept—GUI event handling. This is our first example in which the JavaScript executes in response to the user’s interaction with an ele-ment in a form. This interaction causes an event. Scripts are often used to respond to user initiated events.

The bodyElement
Before we discuss the script code, consider the bodyelement (lines 52–62) of this docu-ment. The elements in the bodyare used extensively in the script.

The formElement
Line 53 begins the definition of an HTML5 formelement. The HTML5 standard requires thateveryformcontainanactionattribute,butbecausethisformdoesnotpostitsinforma-tion to a web server, the string "#"is used simply to allow this document to validate. The # symbol by itself represents the current page.

The buttoninputElement and Event-Driven Programming
Line54defines abuttoninputelementwiththeid"rollButton"andcontainingthe val-ue Roll Dice which is displayed on the button. As you’ll see, this example’s script will han-dle the button’s click event, which occurs when the user clicks the button. In this example, clicking the button will call function rollDice, which we’ll discuss shortly.
290	Chapter9 JavaScript:Functions


This style of programming is known as event-driven programming—the user inter-acts with an element in the web page, the script is notified of the event and the script pro-cesses the event. The user’s interaction with the GUI “drives” the program. The button click is known as the event. The function that’s called when an event occurs is known as an event handler. When a GUI event occurs in a form, the browser calls the specified event-handling function. Before any event can be processed, each element must know which event-handling function will be called when a particular event occurs. Most HTML5elementshaveseveraldifferenteventtypes.Theeventmodelisdiscussedindetail in Chapter 13.

The imgElements
The four imgelements (lines 57–60) will display the four randomly selected dice. Their id attributes (die1, die2, die3and die4, respectively) can be used to apply CSS styles and to enable script code to refer to these element in the HTML5 document. Because the idat-tribute, if specified, must have a unique value among all idattributes in the page, Java-Script can reliably refer to any single element via its idattribute. In a moment we’ll see how this is done. Each imgelement displays the image blank.png(an empty white image) when the page first renders.

Specifying a Function to Call When the Browser Finishes Loading a Document
From this point forward, many of our examples will execute a JavaScript function when the document finishes loading in the web browser window. This is accomplished by han-dling the windowobject’s loadevent. To specify the function to call when an event occurs, you registering an event handler for that event. We register the window’s loadevent han-dler at line 49. Method addEventListeneris available for every DOM node. The method takes three arguments:
•	the first is the name of the event for which we’re registering a handler •	the second is the function that will be called to handle the event
•	the last argument is typically false—the truevalue is beyond this book’s scope
Line 49 indicates that function start(lines 21–29) should execute as soon as the page fin-ishes loading.

Function start
When the window’s loadevent occurs, function start registers the Roll Dice button’s click event handler (lines 23–24), which instructs the browser to listen for events (click events in particular). If no event handler is specified for the Roll Dice button, the script will not respondwhentheuserpressesthebutton.Line23usesthedocumentobject’sgetElement-ByIdmethod, which, given an HTML5 element’s idas an argument, finds the element with the matching idattribute and returns a JavaScript object representing the element. This object allows the script to programmatically interact with the corresponding element in the web page. For example, line 24 uses the object representing the buttonto call func-tion addEventListener—in this case, to indicate that function rollDiceshould be called whenthebutton’sclickeventoccurs.Lines25–28gettheobjectsrepresentingthefourimg elements in lines 57–60 and assign them to the script variables in declared in lines 15–18.
9.5 RandomNumberGeneration	291


Function rollDice
The user clicks the Roll Dice button to roll the dice. This event invokes function rollDice (lines 32–38) in the script. Function rollDicetakes no arguments, so it has an empty pa-rameter list. Lines 34–37 call function setImage(lines 41–47) to randomly select and set the image for a specified imgelement.

Function setImage
Function setImage(lines 41–47) receives one parameter (dieImg) that represents the spe-cific imgelement in which to display a randomly selected image. Line 43 picks a random integer from 1 to 6. Line 44 demonstrates how to access an imgelement’s srcattribute programmatically in JavaScript. Each JavaScript object that represents an element of the HTML5 document has a setAttributemethod that allows you to change the values of most of the HTML5 element’s attributes. In this case, we change the srcattribute of the imgelement referred to by dieImg. The srcattribute specifies the location of the image to display. We set the srcto a concatenated string containing the word "die", a randomly generated integer from 1 to 6 and the file extension ".png"to complete the image file name. Thus, the script dynamically sets the imgelement’s srcattribute to the name of one of the image files in the current directory.

Continuing to Roll the Dice
The program then waits for the user to click the Roll Dice button again. Each time the user does so, the program calls rollDice, which repeatedly calls setImageto display new die images.

9.5.3 Rolling Dice Repeatedly and Displaying Statistics
To show that the random values representing the dice occur with approximately equal likelihood,let’sallowtheusertoroll12diceatatimeandkeepstatisticsshowingthenum-ber of times each face occurs and the percentage of the time each face is rolled (Fig. 9.6). This example is similar to the one in Fig. 9.5, so we’ll focus only on the new features.

Script Variables
Lines22–28declareandinitializecountervariablestokeeptrackofthenumberoftimeseach of the six die values appears and the total number of dice rolled. Because these variables are declared outside the script’s functions, they’re accessible to all the functions in the script.

1  <!DOCTYPE html> 2
3  <!-- Fig. 9.6: RollDice.html -->
4  <!-- Rolling 12 dice and displaying frequencies. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Die Rolling Frequencies</title> 9	<style type = "text/css">
10	img	{ margin-right: 10px; }

Fig. 9.6  | Rolling12diceanddisplayingfrequencies.(Part1of4.)
292	Chapter9 JavaScript:Functions


11	table	{ width: 200px;
12	border-collapse: collapse;
13	background-color: lightblue; } 14            table, td, th { border: 1px solid black;
15	padding: 4px;
16	margin-top: 20px; } 17            th            { text-align: left; 18	color: white;
19	background-color: darkblue; } 20         </style>
21	<script>
22	var frequency1 = 0; 23	var frequency2 = 0; 24	var frequency3 = 0; 25	var frequency4 = 0; 26	var frequency5 = 0; 27	var frequency6 = 0; 28	var totalDice = 0; 29
30	// register button event handler 31	function start()
32	{
33	var button = document.getElementById( "rollButton" ); 34	button.addEventListener( "click", rollDice, false ); 35            } // end function start
36
37	// roll the dice 38	function rollDice() 39	{
40	var face;  // face rolled 41
42	// loop to roll die 12 times 43	for ( var i = 1; i <= 12; ++i ) 44	{
45	face = Math.floor( 1 + Math.random() * 6 );
46	tallyRolls( face ); // increment a frequency counter 47	setImage( i, face ); // display appropriate die image 48	++totalDice; // increment total
49	} // end die rolling loop 50
51	updateFrequencyTable(); 52            } // end function rollDice 53
54	// increment appropriate frequency counter 55	function tallyRolls( face )
56	{
57	switch ( face ) 58	{
59	case 1:
60	++frequency1;
61	break;

Fig. 9.6  | Rolling12diceanddisplayingfrequencies.(Part2of4.)
9.5 RandomNumberGeneration	293


62	case 2:
63	++frequency2; 64	break;
65	case 3:
66	++frequency3; 67	break;
68	case 4:
69	++frequency4; 70	break;
71	case 5:
72	++frequency5; 73	break;
74	case 6:
75	++frequency6; 76	break;
77	} // end switch
78	} // end function tallyRolls 79
80	// set image source for a die
81	function setImage( dieNumber, face ) 82	{
83	var dieImg = document.getElementById( "die" + dieNumber ); 84	dieImg.setAttribute( "src", "die" + face + ".png" );
85	dieImg.setAttribute( "alt", "die with " + face + " spot(s)" ); 86            } // end function setImage
87
88	// update frequency table in the page 89	function updateFrequencyTable()
90	{
91	var tableDiv = document.getElementById( "frequencyTableDiv" ); 92
93	tableDiv.innerHTML = "<table>" +
94	"<caption>Die Rolling Frequencies</caption>" + 95	"<thead><th>Face</th><th>Frequency</th>" +
96	"<th>Percent</th></thead>" +
97	"<tbody><tr><td>1</td><td>" + frequency1 + "</td><td>" + 98	formatPercent(frequency1 / totalDice) + "</td></tr>" + 99	"<tr><td>2</td><td>" + frequency2 + "</td><td>" +
100	formatPercent(frequency2 / totalDice)+ "</td></tr>" + 101	"<tr><td>3</td><td>" + frequency3 + "</td><td>" +
102	formatPercent(frequency3 / totalDice) + "</td></tr>" + 103	"<tr><td>4</td><td>" + frequency4 + "</td><td>" +
104	formatPercent(frequency4 / totalDice) + "</td></tr>" + 105	"<tr><td>5</td><td>" + frequency5 + "</td><td>" +
106	formatPercent(frequency5 / totalDice) + "</td></tr>" + 107	"<tr><td>6</td><td>" + frequency6 + "</td><td>" +
108	formatPercent(frequency6 / totalDice) + "</td></tr>" + 109	"</tbody></table>";
110	} // end function updateFrequencyTable 111
112	// format percentage
113	function formatPercent( value )
114	{

Fig. 9.6 | Rolling12diceanddisplayingfrequencies.(Part3of4.)
294	Chapter9 JavaScript:Functions


115	value *= 100;
116	return value.toFixed(2);
117	} // end function formatPercent 118
119	window.addEventListener( "load", start, false ); 120        </script>
121	</head> 122	<body>
123	<p><img id = "die1" src = "blank.png" alt = "die 1 image"> 124           <img id = "die2" src = "blank.png" alt = "die 2 image"> 125           <img id = "die3" src = "blank.png" alt = "die 3 image"> 126           <img id = "die4" src = "blank.png" alt = "die 4 image"> 127           <img id = "die5" src = "blank.png" alt = "die 5 image">
128	<img id = "die6" src = "blank.png" alt = "die 6 image"></p> 129        <p><img id = "die7" src = "blank.png" alt = "die 7 image">
130	<img id = "die8" src = "blank.png" alt = "die 8 image"> 131	<img id = "die9" src = "blank.png" alt = "die 9 image"> 132	<img id = "die10" src = "blank.png" alt = "die 10 image"> 133	<img id = "die11" src = "blank.png" alt = "die 11 image">
134	<img id = "die12" src = "blank.png" alt = "die 12 image"></p> 135        <form action = "#">
136	<input id = "rollButton" type = "button" value = "Roll Dice"> 137        </form>
138	<div id = "frequencyTableDiv"></div> 139     </body>
140 </html>



















Fig. 9.6  | Rolling12diceanddisplayingfrequencies.(Part4of4.)

Function rollDice
As in Fig. 9.5, when the user presses the Roll Dice button, function rollDice(lines 38– 52)iscalled.ThisfunctioncallsfunctionstallyRollsandsetImageforeachofthetwelve
9.5 RandomNumberGeneration	295


img elements in the document (lines 123–134), then calls function updateFrequen-cyTableto display the number of times each die face appeared and the percentage of total dice rolled.

Function tallyRolls
Function tallyRolls(lines 55–78) contains a switchstatement that uses the randomly chosen facevalue as its controlling expression. Based on the value of face, the program increments one of the six counter variables during each iteration of the loop. No default case is provided in this switchstatement, because the statement in line 45 produces only the values 1, 2, 3, 4, 5 and 6. In this example, the defaultcase would never execute. After westudyarraysinChapter 10,wediscussanelegantwaytoreplacetheentireswitchstate-ment in this program with a single line of code.

Function setImage
Function setImage(lines 81–86) sets the image source and alttext for the specified img element.

Function updateFrequencyTable
Function updateFrequencyTable(lines 89–110) creates a table and places it in the div element at line 131 in the document’s body. Line 91 gets the object representing that div and assigns it to the local variable tableDiv. Lines 93–109 build a string representing the table and assign it to the tableDivobject’s innerHTMLproperty, which places HTML5 code into the element that tableDiv represents and allows the browser to render that HTML5 in the element. Each time we assign HTML markup to an element’s innerHTML property, the tableDiv’s content is completely replaced with the content of the string.

Function formatPercent
Function updateFrequencyTablecalls function formatPercent(lines 113–117) to for-mat values as percentages with two digits to the right of the decimal point. The function simply multiplies the value it receives by 100, then returns the value after calling its to-Fixedmethod with the argument 2, so that the number has two digits of precision to the right of the decimal point.

Generalized Scaling and Shifting of Random Values The values returned by randomare always in the range
0.0 £Math.random() < 1.0 Previously, we demonstrated the statement
face = Math.floor( 1 + Math.random() * 6 );
which simulates the rolling of a six-sided die. This statement always assigns an integer (at random) to variable face, in the range 1 £ face£6. Note that the width of this range (i.e., the number of consecutive integers in the range) is 6, and the starting number in the range is 1. Referring to the preceding statement, we see that the width of the range is determined by the number used to scale randomwith the multiplication operator (6 in the preceding statement) and that the starting number of the range is equal to the number (1 in the pre-ceding statement) added to Math.random()*6. We can generalize this result as
296	Chapter9 JavaScript:Functions


face = Math.floor( a + Math.random() * b );
where ais the shifting value (which is equal to the first number in the desired range of consecutive integers) and bis the scaling factor (which is equal to the width of the desired range of consecutive integers).

9.6 Example: Game of Chance; Introducing the HTML5
audioand videoElements
One of the most popular games of chance is a dice game known as craps, which is played incasinosandbackalleysthroughouttheworld.Therulesofthegamearestraightforward:
A player rolls two dice. Each die has six faces. These faces contain one, two, three, four, five and six spots, respectively. After the dice have come to rest, the sum of the spots on the two upward faces is calculated. If the sum is 7 or 11 on the first throw, the player wins. If the sum is 2, 3 or 12 on the first throw (called “craps”), the player loses (i.e., the “house” wins). If the sum is 4, 5, 6, 8, 9 or 10 on the first throw, that sum becomes the player’s “point.” To win, you must continue rolling the dice until you “make your point” (i.e., roll your point value). You lose by rolling a 7 before making the point.
The script in Fig. 9.7 simulates the game of craps. Note that the player must roll two dice on the first and all subsequent rolls. When you load this document, you can click the link at the top of the page to browse a separate document (Fig. 9.8) containing a video that explains the basic rules of the game. To start a game, click the Play button. A message be-low the button displays the game’s status after each roll. If you don’t win or lose on the first roll, click the Roll button to roll again. [Note: This example uses some features that, at the time of this writing, worked only in Chrome, Safari and Internet Explorer 9.]

The bodyElement
Before we discuss the script code, we discuss the bodyelement (lines 150–177) of this doc-ument. The elements in the bodyare used extensively in the script.

1  <!DOCTYPE html> 2
3  <!-- Fig. 9.7: Craps.html -->
4  <!-- Craps game simulation. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Craps Game Simulation</title> 9	<style type = "text/css">
10	p.red  { color: red }
11	img	{ width: 54px; height: 54px; } 12	div	{ border: 5px ridge royalblue; 13                     padding: 10px; width: 120px; 14                     margin-bottom: 10px; }
15	.point { margin: 0px; } 16         </style>
17	<script>

Fig. 9.7  | Crapsgamesimulation.(Part1of6.)
9.6 GameofChance;IntroducingtheHTML5audioandvideoElements   297


18	// variables used to refer to page elements
19	var pointDie1Img; // refers to first die point img 20	var pointDie2Img; // refers to second die point img 21	var rollDie1Img; // refers to first die roll img
22	var rollDie2Img; // refers to second die roll img 23	var messages; // refers to "messages" paragraph 24	var playButton; // refers to Play button
25	var rollButton; // refers to Roll button
26	var dicerolling; // refers to audio clip for dice 27
28	// other variables used in program
29	var myPoint; // point if no win/loss on first roll 30	var die1Value; // value of first die in current roll
31	var die2Value; // value of second die in current roll 32
33	// starts a new game 34	function startGame() 35	{
36	// get the page elements that we'll interact with
37	dicerolling = document.getElementById( "dicerolling" ); 38	pointDie1Img = document.getElementById( "pointDie1" ); 39	pointDie2Img = document.getElementById( "pointDie2" ); 40	rollDie1Img = document.getElementById( "rollDie1" ); 41	rollDie2Img = document.getElementById( "rollDie2" );
42	messages = document.getElementById( "messages" ); 43	playButton = document.getElementById( "play" ); 44	rollButton = document.getElementById( "roll" ); 45
46	// prepare the GUI
47	rollButton.disabled = true; // disable rollButton
48	setImage( pointDie1Img ); // reset image for new game 49	setImage( pointDie2Img ); // reset image for new game 50	setImage( rollDie1Img ); // reset image for new game 51	setImage( rollDie2Img ); // reset image for new game 52
53	myPoint = 0; // there is currently no point
54	firstRoll(); // roll the dice to start the game 55            } // end function startGame
56
57	// perform first roll of the game 58	function firstRoll()
59	{
60	var sumOfDice = rollDice(); // first roll of the dice 61
62	// determine if the user won, lost or must continue rolling 63	switch (sumOfDice)
64	{
65	case 7: case 11: // win on first roll 66                     messages.innerHTML =
67	"You Win!!! Click Play to play again.";
68	break;

Fig. 9.7  | Crapsgamesimulation.(Part2of6.)
298	Chapter9 JavaScript:Functions


69	case 2: case 3: case 12: // lose on first roll 70                     messages.innerHTML =
71	"Sorry. You Lose. Click Play to play again."; 72                     break;
73	default: // remember point 74                     myPoint = sumOfDice;
75	setImage( pointDie1Img, die1Value ); 76	setImage( pointDie2Img, die2Value ); 77	messages.innerHTML = "Roll Again!";
78	rollButton.disabled = false; // enable rollButton 79	playButton.disabled = true; // disable playButton 80	break;
81	} // end switch
82	} // end function firstRoll 83
84	// called for subsequent rolls of the dice 85	function rollAgain()
86	{
87	var sumOfDice = rollDice(); // subsequent roll of the dice 88
89	if (sumOfDice == myPoint) 90	{
91	messages.innerHTML =
92	"You Win!!! Click Play to play again.";
93	rollButton.disabled = true; // disable rollButton 94	playButton.disabled = false; // enable playButton 95               } // end if
96	else if (sumOfDice == 7) // craps 97	{
98	messages.innerHTML =
99	"Sorry. You Lose. Click Play to play again."; 100                 rollButton.disabled = true; // disable rollButton 101                 playButton.disabled = false; // enable playButton 102              } // end else if
103	} // end function rollAgain 104
105	// roll the dice 106	function rollDice() 107	{
108	dicerolling.play(); // play dice rolling sound 109
110	// clear old die images while rolling sound plays 111	die1Value = NaN;
112	die2Value = NaN; 113	showDice();
114
115	die1Value = Math.floor(1 + Math.random() * 6); 116	die2Value = Math.floor(1 + Math.random() * 6); 117	return die1Value + die2Value;
118	} // end function rollDice
119

Fig. 9.7 | Crapsgamesimulation.(Part3of6.)
9.6 GameofChance;IntroducingtheHTML5audioandvideoElements   299


120	// display rolled dice 121	function showDice() 122	{
123	setImage( rollDie1Img, die1Value ); 124	setImage( rollDie2Img, die2Value ); 125           } // end function showDice
126
127	// set image source for a die
128	function setImage( dieImg, dieValue ) 129	{
130	if ( isFinite( dieValue ) )
131	dieImg.src = "die" + dieValue + ".png"; 132              else
133	dieImg.src = "blank.png"; 134           } // end function setImage
135
136	// register event liseners 137	function start()
138	{
139	var playButton = document.getElementById( "play" );
140	playButton.addEventListener( "click", startGame, false ); 141	var rollButton = document.getElementById( "roll" );
142	rollButton.addEventListener( "click", rollAgain, false ); 143	var diceSound = document.getElementById( "dicerolling" ); 144	diceSound.addEventListener( "ended", showDice, false ); 145           } // end function start
146
147	window.addEventListener( "load", start, false ); 148        </script>
149	</head> 150	<body>
151	<audio id = "dicerolling" preload = "auto">
152	<source src = "http://test.deitel.com/dicerolling.mp3" 153              type = "audio/mpeg">
154	<source src = "http://test.deitel.com/dicerolling.ogg" 155              type = "audio/ogg">
156	Browser does not support audio tag</audio>
157	<p><a href = "CrapsRules.html">Click here for a short video 158           explaining the basic Craps rules</a></p>
159	<div id = "pointDiv">
160	<p class = "point">Point is:</p>
161	<img id = "pointDie1" src = "blank.png" 162              alt = "Die 1 of Point Value">
163	<img id = "pointDie2" src = "blank.png" 164              alt = "Die 2 of Point Value">
165	</div>
166	<div class = "rollDiv">
167	<img id = "rollDie1" src = "blank.png" 168              alt = "Die 1 of Roll Value">
169	<img id = "rollDie2" src = "blank.png" 170              alt = "Die 2 of Roll Value">
171	</div>

Fig. 9.7  | Crapsgamesimulation.(Part4of6.)
300	Chapter9 JavaScript:Functions


172	<form action = "#">
173	<input id = "play" type = "button" value = "Play"> 174	<input id = "roll" type = "button" value = "Roll"> 175        </form>
176	<p id = "messages" class = "red">Click Play to start the game</p> 177     </body>
178 </html>



a)Winonthefirstroll.Inthiscase,thepointDivdoes notshowanydiceandtheRoll buttonremainsdisabled.
















c)Firstrollisa5,sotheuser’spointis5.ThePlaybutton isdisabledandtheRoll buttonisenabled.

b)Lossonthefirstroll.Inthiscase,thepointDivdoes notshowanydiceandtheRoll buttonremainsdisabled.
















d)Userwononasubsequentroll.ThePlay buttonis enabledandtheRoll buttonisdisabled.

















Fig. 9.7  | Crapsgamesimulation.(Part5of6.)
9.6 GameofChance;IntroducingtheHTML5audioandvideoElements   301




e)Firstrollisa6,sotheuser’spointis6.ThePlaybutton isdisabledandtheRoll buttonisenabled.

f)Userlostonasubsequentroll.ThePlay buttonis enabledandtheRoll buttonisdisabled.

















Fig. 9.7 | Crapsgamesimulation.(Part6of6.)



The HTML5 audioElement
Line151–156defineanHTML5audioelement,whichisusedtoembedaudiointoaweb page. We specify an idfor the element, so that we can programmatically control when the audio clip plays, based on the user’s interactions with the game. Setting the preloadattri-bute to "auto"indicates tothebrowserthat itshouldconsiderdownloading theaudio clip sothat it’sready tobe playedwhen thegameneedsit. Undercertain conditionsthebrows-er can ignore this attribute—for example, if the user is on a low-bandwidth Internet con-nection.
Not all browsers support the same audio file formats, but most support MP3, OGG and/or WAV format. All of the browsers we tested in this book support MP3, OGG or both. For this reason, nested in the audioelement are two sourceelements specifying the locations of the audio clip in MP3 and OGG formats, respectively. Each sourceelement specifies a srcand a typeattribute. The srcattribute specifies the location of the audio clip.Thetypeattributespecifiestheclip’sMIMEtype—audio/mpegfortheMP3clipand audio/oggfor the OGG clip (WAV would be audio/x-wav; MIME types for these and other formats can be found online). When a web browser that supports the audioelement encounters the sourceelements, it will chose the first audio source that represents one of the browser’s supported formats. If the browser does not support the audioelement, the text in line 156 will be displayed.
We used the online audio-file converter at

media.io
to convert our audio clip to other formats. Many other online and downloadable file con-verters are available on the web.
302	Chapter9 JavaScript:Functions


The Link to the CrapsRules.htmlPage
Lines 157–158 display a link to a separate web page in which we use an HTML5 video element to display a short video that explains the basic rules for the game of Craps. We discuss this web page at the end of this section.

pointDivand rollDiv
The divelements at lines 159–171 contain the imgelements in which we display die im-ages representing the user’s point and the current roll of the dice, respectively. Each img element has an idattribute so that we can interact with it programmatically. Because the idattribute, if specified, must have a unique value, JavaScript can reliably refer to any sin-gle element via its idattribute.

The formElement
Lines 172–175 define an HTML5 formelement containing two buttoninputelements. Each button’s clickevent handler indicates the action to take when the user clicks the corresponding button. In this example, clicking the Play button causes a call to function startGameand clicking the Roll button causes a call to function rollAgain. Initially, the Roll button is disabled, which prevents the user from initiating an event with this button.

The pElement
Line 176 defines a pelement in which the game displays status messages to the user.

The Script Variables
Lines19–31createvariablesthatareusedthroughoutthescript.Recallthatbecausetheseare declaredoutsidethescript’sfunctions,they’reaccessibletoallthefunctionsinthescript.The variablesinlines19–26areusedtointeractwithvariouspageelementsinthescript.Variable myPoint(line29)storesthepointiftheplayerdoesnotwinorloseonthefirstroll.Variables die1Valueand die2Valuekeep track of the die values for the current roll.

Function startGame
The user clicks the Play button to start the game and perform the first roll of the dice. This event invokes function startGame(lines 34–55), which takes no arguments. Line 37–44 use the documentobject’s getElementByIdmethod to get the page elements that the script interacts with programmatically.
The Roll button should be enabled only if the user does not win or lose on the first roll. For this reason, line 47 disables the Roll button by setting its disabledproperty to true. Each inputelement has a disabledproperty.
Lines 48–51 call function setImage(defined in lines 128–134) to display the image blank.pngfor the imgelements in the pointDivand rollDiv. We’ll replace blank.png with die images throughout the game as necessary.
Finally, line 53 sets myPointto 0, because there can be a point value only after the first roll of the dice, and line 54 calls method firstRoll(defined in lines 58–82) to perform the first roll of the dice.

Function firstRoll
Function firstRoll(lines 58–82) calls function rollDice(defined in lines 106–118) to roll the dice and get their sum, which is stored in the local variable sumOfDice. Because
9.6 GameofChance;IntroducingtheHTML5audioandvideoElements   303


this variable is defined inside the firstRollfunction, it’s accessible only inside that func-tion. Next, the switchstatement (lines 63–81) determines whether the game is won or lost, or whether it should continue with another roll. If the user won or lost, lines 66–67 or 70–71 display an appropriate message in the messagesparagraph (p) element with the object’s innerHTMLproperty. After the first roll, if the game is not over, the value of local variable sumOfDiceis saved in myPoint(line 74), the images for the rolled die values are displayed (lines 75–76) in the pointDivand the message "RollAgain!"is displayed in the displayed in the messagesparagraph (p) element. Also, lines 78–79 enable the Roll button and disable the Play button, respectively. Function firstRolltakes no arguments, so it has an empty parameter list.

Software Engineering Observation 9.3
Variables declared inside the body of a function are known only in that function. If the same variable names are used elsewhere in the program, they’ll be entirely separate variables in memory.

Error-Prevention Tip 9.1
Initializing variables when they’re declared in functions helps avoid incorrect results and interpreter messages warning of uninitialized data.

Function rollAgain
The user clicks the Roll button to continue rolling if the game was not won or lost on the first roll. Clicking this button calls the rollAgainfunction (lines 85–103), which takes no arguments. Line 87 calls function rollDiceand stores the sum locally in sumOfDice, then lines 89–102 determine whether the user won or lost on the current roll, display an appro-priate message in the messagesparagraph (p) element, disable the Roll and enable the Play button. In either case, the user can now click Play to play another game. If the user did not win or lose, the program waits for the user to click the Roll button again. Each time the user clicks Roll, function rollAgainexecutes and, in turn, calls the rollDicefunction to produce a new value for sumOfDice.

Function rollDice
We define a function rollDice(lines 106–118), which takes no arguments, to roll the dice and compute their sum. Function rollDiceis defined once but is called from lines 60 and 87 in the program. The function returns the sum of the two dice (line 117). Line 108 plays the audio clip declared at lines 151–165 by calling its playmethod, which plays the clip once. As you’ll soon see, we use the audioelement’s endedevent, which occurs when the clip finishes playing, to indicate when to display the new die images. Lines 111– 112 set variables die1Valueand die2Valueto NaNso that the call to showDice(line 113) can display the blank.pngimage while the dice sound is playing. Lines 115–116 pick two random values in the range 1 to 6 and assign them to the script variables die1Valueand die2Value, respectively.

Function showDice
Function showDice(lines 121–125) is called when the dice rolling sound finishes playing. At this point, lines 123–124 display the die images representing the die values that were rolled in function rollDice.
304	Chapter9 JavaScript:Functions


Function setImage
Function setImage(lines 128–134) takes two arguments—the imgelement that will dis-play an image and the value of a die to specify which die image to display. You might have noticed that we called this function with one argument in lines 48–51 and with two argu-ments in lines 75–76 and 123–124. If you call setImagewith only one argument, the sec-ond parameter’s value will be undefined. In this case, we display the image blank.png(line 133). Line 130 uses global JavaScript function isFiniteto determine whether the param-eter dieValuecontains a number—if it does, we’ll display the die image that corresponds to that number (line 131). Function isFinitereturns trueonly if its argument is a valid number in the range supported by JavaScript. You can learn more about JavaScript’s valid numeric range in Section 8.5 of the JavaScript standard:

www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf

Function start
Function start(lines 137–145) is called when the window’s loadevent occurs to register clickevent handlers for this examples two buttons (lines 139–142) and for the ended event of the audioelement (lines 143–144).

Program-Control Mechanisms
Note the use of the various program-control mechanisms. The craps program uses five functions—startGame, firstRoll, rollAgain, rollDiceand setImage—and the switch and nested if…elsestatements. Also, note the use of multiple caselabels in the switch statement to execute the same statements (lines 65 and 69). In the exercises at the end of this chapter, we investigate additional characteristics of the game of craps.

CrapsRules.htmland the HMTL5 videoElement
When  the  user  clicks  the  hyperlink  in  Craps.html (Fig. 9.7,  lines  157–158),  the CrapsRules.html is displayed in the browser. This page consists of a link back to Craps.html(Fig. 9.8, line 11) and an HTML5 videoelement (lines 12–25) that displays a video explaining the basic rules for the game of Craps.

1  <!DOCTYPE html> 2
3  <!-- Fig. 9.8: CrapsRules.html -->
4  <!-- Web page with a video of the basic rules for the dice game Craps. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Craps Rules</title> 9     </head>
10	<body>
11	<p><a href = "Craps.html">Back to Craps Game</a></p> 12	<video controls>
13	<source src = "CrapsRules.mp4" type = "video/mp4"> 14	<source src = "CrapsRules.webm" type = "video/webm">
15	A player rolls two dice. Each die has six faces that contain
16	one, two, three, four, five and six spots, respectively. The

Fig. 9.8 | WebpagethatdisplaysavideoofthebasicrulesforthedicegameCraps.(Part1of2.)
9.6 GameofChance;IntroducingtheHTML5audioandvideoElements   305


17	sum of the spots on the two upward faces is calculated. If the 18	sum is 7 or 11 on the first throw, the player wins. If the sum 19	is 2, 3 or 12 on the first throw (called "craps"), the player 20	loses (i.e., the "house" wins). If the sum is 4, 5, 6, 8, 9 or 21	10 on the first throw, that sum becomes the player’s "point." 22	To win, you must continue rolling the dice until you "make your 23	point" (i.e., roll your point value). You lose by rolling a 7 24	before making the point.
25	</video> 26     </body>
27  </html>



























Fig. 9.8  | WebpagethatdisplaysavideoofthebasicrulesforthedicegameCraps.(Part2of2.)

Thevideoelement’scontrolsattributeindicatesthatwe’dlikethevideoplayerin the browser to display controls that allow the user to control video playback (e.g., play and pause). As with audio, not all browsers support the same video file formats, but most sup-port MP4, OGG and/or WebM formats. For this reason, nested in the videoelement are two source elements specifying the locations of this example’s video clip in MP4 and WebMformats.Thesrcattributeofeachspecifiesthelocationofthevideo.Thetypeattri-bute specifies the video’s MIME type—video/mp4for the MP4 video and video/webmfor the WebM video (MIME types for these and other formats can be found online). When a
306	Chapter9 JavaScript:Functions


web browser that supports the video element encounters the source elements, it will choose the first video source that represents one of the browser’s supported formats. If the browser does not support the videoelement, the text in lines 15–24 will be displayed.
We used the downloadable video converter at

www.mirovideoconverter.com
to convert our video from MP4 to WebM format. For more information on the HTML5 audioand videoelements, visit:

dev.opera.com/articles/view/everything-you-need-to-know-about-html5-video-and-audio/


9.7 Scope Rules
Chapters 6–8 used identifiers for variable names. The attributes of variables include name, value and data type (e.g., string, number or boolean). We also use identifiers as names for user-defined functions. Each identifier in a program also has a scope.
The scope of an identifier for a variable or function is the portion of the program in which the identifier can be referenced. Global variables or script-level variables that are declaredintheheadelementareaccessibleinanypartofascriptandaresaidtohaveglobal scope. Thus every function in the page’s script(s) can potentially use the variables.
Identifiers declared inside a function have function (or local) scope and can be used onlyinthatfunction.Functionscopebeginswiththeopeningleftbrace({)ofthefunction in which the identifier is declared and ends at the function’s terminating right brace (}). Local variables of a function and function parameters have function scope. If a local vari-able in a function has the same name as a global variable, the global variable is “hidden” from the body of the function.

Good Programming Practice 9.2
Avoid local-variable names that hide global-variable names. This can be accomplished by simply avoiding the use of duplicate identifiers in a script.

The script in Fig. 9.9 demonstrates the scope rules that resolve conflicts between globalvariablesandlocalvariablesofthesamename.Onceagain,weusethewindow’sload event (line 53), which calls the function startwhen the HTML5 document is completely loaded into the browser window. In this example, we build an outputstring (declared at line 14) that is displayed at the end of function start’s execution.


1  <!DOCTYPE html> 2
3  <!-- Fig. 9.9: scoping.html --> 4  <!-- Scoping example. -->
5  <html>
6	<head>
7	<meta charset = "utf-8">

Fig. 9.9  | Scopingexample.(Part1of3.)
9.7 ScopeRules   307


8	<title>Scoping Example</title> 9	<style type = "text/css">
10	p	{ margin: 0px; }
11	p.space { margin-top: 10px; } 12         </style>
13	<script>
14	var output; // stores the string to display 15	var x = 1; // global variable
16
17	function start() 18	{
19	var x = 5; // variable local to function start 20
21	output = "<p>local x in start is " + x + "</p>"; 22
23	functionA(); // functionA has local x
24	functionB(); // functionB uses global variable x 25	functionA(); // functionA reinitializes local x
26	functionB(); // global variable x retains its value 27
28	output += "<p class='space'>local x in start is " + x + 29                  "</p>";
30	document.getElementById( "results" ).innerHTML = output; 31            } // end function start
32
33	function functionA() 34	{
35	var x = 25; // initialized each time functionA is called 36
37	output += "<p class='space'>local x in functionA is " + x + 38                  " after entering functionA</p>";
39	++x;
40	output += "<p>local x in functionA is " + x + 41                  " before exiting functionA</p>";
42	} // end functionA 43
44	function functionB() 45	{
46	output += "<p class='space'>global variable x is " + x + 47                  " on entering functionB";
48	x *= 10;
49	output += "<p>global variable x is " + x + 50                  " on exiting functionB</p>";
51	} // end functionB 52
53	window.addEventListener( "load", start, false ); 54         </script>
55	</head> 56	<body>
57	<div id = "results"></div> 58     </body>
59  </html>

Fig. 9.9  | Scopingexample.(Part2of3.)
308	Chapter9 JavaScript:Functions

















Fig. 9.9 | Scopingexample.(Part3of3.)

Global variable x (line 15) is declared and initialized to 1. This global variable is hidden in any block (or function) that declares a variable named x. Function start(lines 17–31) declares a local variable x(line 19) and initializes it to 5. Line 21 creates a para-graph element containing x’s value as a string and assigns the string to the global variable output(which is displayed later). In the sample output, this shows that the global variable xis hidden in start.
The script defines two other functions—functionAand functionB—each taking no argumentsandreturningnothing.Eachfunctioniscalledtwicefromfunctionstart(lines 23–26). Function functionA defines local variable x (line 35) and initializes it to 25. When functionA is called, the variable’s value is placed in a paragraph element and appended to variable outputto show that the global variable xis hidden in functionA; then the variable is incremented and appended to outputagain before the function exits. Each time this function is called, local variable xis re-created and initialized to 25.
Function functionBdoes not declare any variables. Therefore, when it refers to vari-able x, the global variable xis used. When functionBis called, the global variable’s value is placed in a paragraph element and appended to variable output, then it’s multiplied by 10and appended to variable outputagain before the function exits. The next time func-tion functionBis called, the global variable has its modified value, 10, which again gets multiplied by 10, and 100is output. Finally, lines 28–29 append the value of local variable xin startto variable output, to show that none of the function calls modified the value of xin start, because the functions all referred to variables in other scopes. Line 30 uses the documentobject’s getElementByIdmethod to get the resultsdivelement (line 57), then assigns variable output’s value to the element’s innerHTMLproperty, which renders the HTML in variable outputon the page.

9.8 JavaScript Global Functions
JavaScript provides nine standard global functions. We’ve already used parseInt, parse-Floatand isFinite. Some of the global functions are summarized in Fig. 9.10.
9.9 Recursion   309



Globalfunction

isFinite



isNaN



parseFloat




parseInt

Description

Takes a numeric argument and returns trueif the value of the argument is not NaN, Number.POSITIVE_INFINITYor Number.NEGATIVE_INFINITY (values that are not numbers or numbers outside the range that JavaScript supports)—otherwise, the function returns false.
Takes a numeric argument and returns trueif the value of the argument is not a number; otherwise, it returns false. The function is commonly used with the return value of parseIntor parseFloatto determine whether the result is a proper numeric value.
Takes a string argument and attempts to convert the beginning of the string into a floating-point value. If the conversion is unsuccessful, the function returns NaN; otherwise, it returns the converted value (e.g., parseFloat("abc123.45")returns NaN, and parseFloat("123.45abc") returns the value 123.45).
Takes a string argument and attempts to convert the beginning of the string into an integer value. If the conversion is unsuccessful, the func-tion returns NaN; otherwise, it returns the converted value (for example, parseInt("abc123")returns NaN, and parseInt("123abc")returns the integer value 123). This function takes an optional second argument, from 2 to 36, specifying the radix (or base) of the number. Base 2 indi-cates that the first argument string is in binary format, base 8 that it’s in octal format and base 16 that it’s in hexadecimal format. See
Appendix E, for more information on binary, octal and hexadecimal numbers.


Fig. 9.10  | JavaScriptglobalfunctions.

The global functions in Fig. 9.10 are all part of JavaScript’s Global object. The Globalobject contains all the global variables in the script, all the user-defined functions in the script and all the functions listed in Fig. 9.10. Because global functions and user-defined functions are part of the Globalobject, some JavaScript programmers refer to these functionsas methods. You donot needtouse theGlobalobject directly—JavaScript references it for you. For information on JavaScript’s other global functions, see Section 15.1.2 of the ECMAScript Specification:

www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf


9.9 Recursion
The programs we’ve discussed thus far are generally structured as functions that call one another in a disciplined, hierarchical manner. A recursive function is a function that calls itself, either directly, or indirectly through another function. Recursion is an important computer science topic. In this section, we present a simple example of recursion.
We consider recursion conceptually first; then we examine several programs con-taining recursive functions. Recursive problem-solving approaches have a number of ele-ments in common. A recursive function is called to solve a problem. The function actually
310	Chapter9 JavaScript:Functions


knows how to solve only the simplest case(s), or base case(s). If the function is called with a base case, the function returns a result. If the function is called with a more complex problem, it divides the problem into two conceptual pieces—a piece that the function knows how to process (the base case) and a piece that the function does not know how to process. To make recursion feasible, the latter piece must resemble the original problem but be a simpler or smaller version of it. Because this new problem looks like the original problem, the function invokes (calls) a fresh copy of itself to go to work on the smaller problem; this invocation is referred to as a recursive call, or the recursion step. The recur-sion step also normally includes the keyword return, because its result will be combined with the portion of the problem the function knew how to solve to form a result that will be passed back to the original caller.
The recursion step executes while the original call to the function is still open (i.e., it has not finished executing). The recursion step can result in many more recursive calls as the function divides each new subproblem into two conceptual pieces. For the recursion eventually to terminate, each time the function calls itself with a simpler version of the original problem, the sequence of smaller and smaller problems must converge on the base case. At that point, the function recognizes the base case, returns a result to the previous copy of the function, and a sequence of returns ensues up the line until the original function call eventually returns the final result to the caller. This process sounds exotic when com-pared with the conventional problem solving we’ve performed to this point.
As an example of these concepts at work, let’s write a recursive program to perform a popular mathematical calculation. The factorialof a nonnegative integer n, written n! (and pronounced “n factorial”), is the product

n · (n – 1) · (n – 2) · … · 1

where 1! is equal to 1 and 0! is defined as 1. For example, 5! is the product 5 · 4 · 3 · 2 · 1, which is equal to 120.
The factorial of an integer (numberin the following example) greater than or equal to zero can be calculated iteratively (non-recursively) using a forstatement, as follows:

var factorial = 1;

for ( var counter = number; counter >= 1; --counter ) factorial *= counter;
A recursive definition of the factorial function is arrived at by observing the following relationship:

n! = n ·  (n – 1)!

For example, 5! is clearly equal to 5 * 4!, as is shown by the following equations:

5! = 5 · 4 · 3 · 2 · 1 5! = 5 · (4 · 3 · 2 · 1) 5! = 5 · (4!)

The evaluation of 5! would proceed as shown in Fig. 9.11. Figure 9.11(a) shows how the succession of recursive calls proceeds until 1! is evaluated to be 1, which terminates the recursion. Figure 9.11(b) shows the values returned from each recursive call to its caller until the final value is calculated and returned.
9.9 Recursion   311


Finalvalue=120 5!	5!
5!=5*24=120isreturned

5 * 4!	5 * 4!

4!=4*6=24isreturned

4 * 3!	4 * 3!

3!=3*2=6isreturned

3 * 2!	3 * 2!

2!=2*1=2isreturned

2 * 1!	2 * 1!

1isreturned

1	1

(a)Sequenceofrecursivecalls.	(b)Valuesreturnedfromeachrecursivecall.

Fig. 9.11  | Recursiveevaluationof5!.

Figure 9.12 uses recursion to calculate and print the factorials of the integers 0 to 10. The recursive function factorialfirst tests (line 27) whether a terminating condition is true, i.e., whether numberis less than or equal to 1. If so, factorialreturns 1, no further recursion is necessary and the function returns. If number is greater than 1, line 30 expresses the problem as the product of numberand the value returned by a recursive call to factorialevaluating the factorial of number-1. Note that factorial(number-1)is a simpler problem than the original calculation, factorial(number).


1  <!DOCTYPE html> 2
3  <!-- Fig. 9.12: FactorialTest.html -->
4  <!-- Factorial calculation with a recursive function. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Recursive Factorial Function</title> 9	<style type = "text/css">
10	p	{ margin: 0px; } 11         </style>
12	<script>
13	var output = ""; // stores the output 14
15	// calculates factorials of 0 - 10 16	function calculateFactorials()
17	{

Fig. 9.12  | Factorialcalculationwitharecursivefunction.(Part1of2.)
312	Chapter9 JavaScript:Functions


18	for ( var i = 0; i <= 10; ++i )
19	output += "<p>" + i + "! = " + factorial( i ) + "</p>"; 20
21	document.getElementById( "results" ).innerHTML = output; 22            } // end function calculateFactorials
23
24	// Recursive definition of function factorial 25	function factorial( number )
26	{
27	if ( number <= 1 ) // base case 28                  return 1;
29	else
30	return number * factorial( number - 1 ); 31            } // end function factorial
32
33	window.addEventListener( "load", calculateFactorials, false ); 34         </script>
35	</head> 36	<body>
37	<h1>Factorials of 0 to 10</h1> 38	<div id = "results"></div>
39	</body>
40  </html>
















Fig. 9.12  | Factorialcalculationwitharecursivefunction.(Part2of2.)

Function factorial(lines 25–31) receives as its argument the value for which to cal-culate the factorial. As can be seen in the screen capture in Fig. 9.12, factorial values become large quickly.

Common Programming Error 9.3
Omitting the base case and writing the recursion step incorrectly so that it does not con-verge on the base case are both errors that cause infinite recursion, eventually exhausting memory. This situation is analogous to the problem of an infinite loop in an iterative (non-recursive) solution.
9.10 Recursionvs.Iteration   313


Error-Prevention Tip 9.2
Internet Explorer displays an error message when a script seems to be going into infinite re-cursion.Firefoxsimplyterminatesthescriptafterdetectingtheproblem.Thisallowstheuser of the web page to recover from a script that contains an infinite loop or infinite recursion.

9.10 Recursion vs. Iteration
In the preceding section, we studied a function that can easily be implemented either re-cursively or iteratively. In this section, we compare the two approaches and discuss why you might choose one approach over the other in a particular situation.
Both iteration and recursion are based on a control statement: Iteration uses a repeti-tion statement (e.g., for, whileor do…while); recursion uses a selection statement (e.g., if, if…elseor switch).
Both iteration and recursion involve repetition: Iteration explicitly uses a repetition statement; recursion achieves repetition through repeated function calls.
Iteration and recursion each involve a termination test: Iteration terminates when the loop-continuation condition fails; recursion terminates when a base case is recognized.
Iteration  both  with  counter-controlled  repetition  and  with  recursion  gradually approaches termination: Iteration keeps modifying a counter until the counter assumes a value that makes the loop-continuation condition fail; recursion keeps producing simpler versions of the original problem until the base case is reached.
Both iteration and recursion can occur infinitely: An infinite loop occurs with itera-tion if the loop-continuation test never becomes false; infinite recursion occurs if the recursion step does not reduce the problem each time via a sequence that converges on the base case or if the base case is incorrect.
One negative aspect of recursion is that function calls require a certain amount of time and memory space not directly spent on executing program instructions. This is known as function-call overhead. Because recursion uses repeated function calls, this overhead greatly affects the performance of the operation. In many cases, using repetition statements in place of recursion is more efficient. However, some problems can be solved more elegantly (and more easily) with recursion.

Software Engineering Observation 9.4
Any problem that can be solved recursively can also be solved iteratively (non-recursively). A recursive approach is normally chosen in preference to an iterative approach when the recursive approach more naturally mirrors the problem and results in a program that’s easier to understand and debug. Another reason to choose a recursive solution is that an iterative solution may not be apparent.

Performance Tip 9.1
Avoid using recursion in performance-critical situations. Recursive calls take time and consume additional memory.

In addition to the factorial function example (Fig. 9.12), we also provide recursion exercises—raising an integer to an integer power (Exercise 9.29) and “What does the fol-lowing function do?” (Exercise 9.30). Also, Fig. 15.25 uses recursion to traverse an XML document tree.
314	Chapter9 JavaScript:Functions


Summary
Section 9.1 Introduction
•  Thebestwaytodevelopandmaintainalargeprogramistoconstructitfromsmall,simplepieces, or modules (p. 279). This technique is called divide and conquer (p. 279).

Section 9.2 Program Modules in JavaScript
•  JavaScript programs are written by combining new functions (p. 279) that the programmer writes with “prepackaged” functions and objects available in JavaScript.
•  The term method (p. 279) implies that the function belongs to a particular object. We refer to functions that belong to a particular JavaScript object as methods; all others are referred to as functions.
•  JavaScriptprovidesseveralobjectsthathavearichcollectionofmethodsforperformingcommon mathematical calculations, string manipulations, date and time manipulations, and manipula-tions of collections of data calledarrays.Theseobjects make yourjob easier,because they provide many of the capabilities programmers frequently need.
•  You can define functions that perform specific tasks and use them at many points in a script. These functions are referred to as programmer-defined functions (p. 279). The actual statements defining the function are written only once and are hidden from other functions.
•  Functions are invoked (p. 280) by writing the name of the function, followed by a left parenthesis, followed by a comma-separated list of zero or more arguments, followed by a right parenthesis.
•  Methods are called in the same way as functions (p. 280) but require the name of the object to which the method belongs and a dot preceding the method name.
•  Function arguments (p. 280) may be constants, variables or expressions.

Section 9.3 Function Definitions
•  The return statement passes information from inside a function back to the point in the program where it was called.
•  A function must be called explicitly for the code in its body to execute. •  The format of a function definition is
function function-name( parameter-list )
{
declarations and statements }
•  Each function should perform a single, well-defined task, and the name of the function should express that task effectively. This promotes software reusability (p. 285).
•  There are three ways to return control to the point at which a function was invoked. If the func-tiondoes notreturn aresult,controlreturnswhen theprogramreachesthefunction-endingright brace or when the statement return;is executed. If the function does return a result, the state-ment returnexpression; returns the value of expression to the caller.

Section 9.4 Notes on Programmer-Defined Functions
•  All variables declared with the keyword var in function definitions are local variables (p. 285)— this means that they can be accessed only in the function in which they’re defined.
•  A function’s parameters (p. 285) are considered to be local variables. When a function is called, the arguments in the call are assignedto thecorrespondingparameters in the function definition.
•  Codethat’s packagedas a function can beexecutedfrom several locations in a programby calling the function.
Summary   315


Section 9.5 Random Number Generation
•  Method randomgenerates a floating-point value from 0.0 up to, but not including, 1.0.
•  JavaScript can execute actions in response to the user’s interaction with an element in an HTML5 form. This is referred to as GUI event handling (p. 290).
•  An HTML5 element’s clickevent handler (p. 289) indicates the action to take when the user of the HTML5 document clicks on the element.
•  In event-driven programming (p. 290), the user interacts with an element, the script is notified of the event (p. 290) and the script processes the event. The user’s interaction with the GUI “drives” the program. The function that’s called when an event occurs is known as an event-han-dling function or event handler.
•  The getElementByIdmethod (p. 290), given an idas an argument, finds the HTML5 element with a matching idattribute and returns a JavaScript object representing the element.
•  The scaling factor (p. 296) determines the size of the range. The shifting value (p. 296) is added to the result to determine where the range begins.

Section 9.6 Example: Game of Chance; Introducing the HTML5 audioand video Elements
•  AnHTML5audioelement(p. 301)embeds audiointoa webpage.Settingthepreloadattribute (p. 301) to "auto"indicates to the browser that it should consider downloading the audio clip so that it’s ready to be played.
•  Not all browsers support the same audio file formats, but most support MP3, OGG and/or WAV format. For this reason, you can use sourceelements (p. 301) nested in the audioelement to specify the locations of an audio clip in different formats. Each sourceelement specifies a src and a typeattribute. The srcattribute specifies the location of the audio clip. The typeattribute specifies the clip’s MIME type.
•  When a web browser thatsupports the audioelement encounters the sourceelements, it chooses the first audio source that represents one of the browser’s supported formats.
•  When interacting with an audioelement from JavaScript, you can use the playmethod (p. 303) to play the clip once.
•  Global JavaScript function isFinite(p. 304) returns true only if its argument is a valid number in the range supported by JavaScript.
•  The HTML5 videoelement (p. 304) embeds a video in a web page.
•  The videoelement’s controlsattribute (p. 305) indicates that the video player in the browser should display controls that allow the user to control video playback.
•  As with audio, not all browsers support the same video file formats, but most support MP4, OGG and/or WebM formats. For this reason, you can use sourceelements nested in the video element to specify the locations of a video clip’s multiple formats.

Section 9.7 Scope Rules
•  Eachidentifierinaprogramhasascope(p. 306).Thescopeofanidentifierforavariableorfunc-tion is the portion of the program in which the identifier can be referenced.
•  Global variables or script-level variables (i.e., variables declared in the head element of the HTML5 document, p. 306) are accessible in any part of a script and are said to have global scope (p. 306). Thus every function in the script can potentially use the variables.
•  Identifiers declared insidea function have function (or local) scope (p. 306)and can be used only in that function. Function scope begins with the opening left brace ({) of the function in which
316	Chapter9 JavaScript:Functions


the identifier is declared and ends at the terminating right brace (}) of the function. Local vari-ables of a function and function parameters have function scope.
•  If a local variable in a function has the same name as a global variable, the global variable is “hid-den” from the body of the function.

Section 9.8 JavaScript Global Functions
•  JavaScript provides several global functions as part of a Globalobject (p. 309). This object con-tains all the global variables in the script, all the user-defined functions in the script and all the built-in global functions listed in Fig. 9.10.
•  You do not need to use the Globalobject directly; JavaScript uses it for you.

Section 9.9 Recursion
•  A recursive function (p. 309) calls itself, either directly, or indirectly through another function.
•  A recursive function knows how to solve only the simplest case, or base case. If the function is called with a base case, it returns a result. If the function is called with a more complex problem, it knows how to divide the probleminto two conceptual pieces—a piece that the function knows how to process (the base case, p. 310) and a simpler or smaller version of the original problem.
•  The function invokes (calls) a fresh copy of itself to go to work on the smaller problem; this in-vocation is referred to as a recursive call or the recursion step (p. 310).
•  The recursion step executes while the original call to the function is still open (i.e., it has not fin-ished executing).
•  For recursion eventually to terminate, each time the function calls itself with a simpler version of the original problem, the sequence of smaller and smaller problems must converge on the base case. At that point, the function recognizes the base case, returns a result to the previous copy of the function, and a sequence of returns ensues up the line until the original function call even-tually returns the final result to the caller.

Section 9.10 Recursion vs. Iteration
•  Both iteration and recursion involve repetition: Iteration explicitly uses a repetition statement; recursion achieves repetition through repeated function calls.
•  Iteration and recursion each involve a termination test: Iteration terminates when the loop-con-tinuation condition fails; recursion terminates when a base case is recognized.
•  Iteration both with counter-controlled repetition and with recursion gradually approaches ter-mination: Iteration keeps modifying a counter until the counter assumes a value that makes the loop-continuation condition fail; recursion keeps producing simpler versions of the original problem until the base case is reached.

Self-Review Exercises
9.1	Fill in the blanks in each of the following statements: a)  Program modules in JavaScript are called	. b)  A function is invoked using a(n)               .
c)   A variable known only inside the function in which it’s defined is called a(n)               . d)  The                statement in a called function can be used to pass the value of an expres-
sion back to the calling function.
e)   The keyword	indicates the beginning of a function definition.
9.2	For the program in Fig. 9.13, state the scope (either global scope or function scope) of each of the following elements:
Self-ReviewExercises   317


a)  The variable x. b)  The variable y.
c)   The function cube. d)  The function output.

1   <!DOCTYPE html> 2
3   <!-- Exercise 9.2: cube.html --> 4   <html>
5	<head>
6	<meta charset = "utf-8"> 7	<title>Scoping</title>
8	<script> 9              var x;
10
11	function output() 12	{
13	for ( x = 1; x <= 10; x++ )
14	document.writeln( "<p>" + cube( x ) + "</p>" ); 15              } // end function output
16
17	function cube( y ) 18	{
19	return y * y * y; 20              } // end function cube 21
22	window.addEventListener( "load", output, false ); 23       </script>
24	</head><body></body> 25   </html>

Fig. 9.13  | Scopeexercise.

9.3	Fill in the blanks in each of the following statements:
a)  Programmer-defined functions, global variables and JavaScript’s global functions are all part of the	object.
b)  Function	determines whether its argument is or is not a number.
c)   Function	takes a string argument and returns a string in which all spaces, punctuation,accentcharactersandanyothercharacterthat’snotintheASCIIcharacter set are encoded in a hexadecimal format.
d)  Function	takes a string argument representing JavaScript code to execute.
e)   Function	takes a string as its argument and returns a string in which all char-acters that were previously encoded with escapeare decoded.
9.4	Fill in the blanks in each of the following statements:
a)  An identifier’s	is the portion of the program in which it can be used.
b)  The three ways to return control from a called function to a caller are	, and	.
c)   The	function is used to produce random numbers.
d)  Variables declared in a block or in a function’s parameter list are of	scope.
9.5	Locate the error in each of the following program segments and explain how to correct it: a)  method g()
{
document.writeln( "Inside method g" ); }
318	Chapter9 JavaScript:Functions


b)  // This function should return the sum of its arguments function sum( x, y )
{
var result; result = x + y;
}
c)   function f( a ); {
document.writeln( a ); }
9.6	Write a complete JavaScript program to prompt the user for the radius of a sphere, then call function sphereVolumeto calculate and display the volume of the sphere. Use the statement
volume = ( 4.0 / 3.0 ) * Math.PI * Math.pow( radius, 3 );
to calculate the volume. The user should enter the radius in an HTML5 inputelement of type "number"in a form. Give the inputelement the idvalue "inputField". You can use this idwith the documentobject’s getElementByIdmethod to get the element for use in the script. To access the string in the inputField, use its valueproperty as in inputField.value, then convert the string to a number using parseFloat. Use an inputelement of type "button"in the formto allow the user to initiate the calculation. [Note: In HTML5, inputelements of type "number"have a property named valueAsNumberthat enables a script to get the floating-point number in the inputelement without having to convert it from a string to a number using parseFloat. At the time of this writ-ing, valueAsNumberwas not supported in all browsers.]

Answers to Self-Review Exercises
9.1	a) functions.  b) function call.  c) local variable.  d) return.  e) function.
9.2	a) global scope.  b) function scope.  c) global scope.  d) global scope. 9.3	a) Global.  b) isNaN.  c) escape.  d) eval.  e) unescape.
9.4	a) scope. b) return;or returnexpression;orencountering the closing right brace of a func-tion.  c) Math.random. d) local.
9.5	a)  Error: methodis not the keyword used to begin a function definition. Correction: Change methodto function.
b)  Error: The function is supposed to return a value, but does not. Correction: Either delete variable resultand place the statement
return x + y;
in the function or add the following statement at the end of the function body: return result;
c)   Error: The semicolon after the right parenthesis that encloses the parameter list. Correction: Delete the semicolon after the right parenthesis of the parameter list.
9.6	The solution below calculates the volume of a sphere using the radius entered by the user.

1   <!DOCTYPE html> 2
3   <!-- Exercise 9.6: volume.html --> 4   <html>
5	<head>
6	<meta charset = "utf-8">
7	<title>Calculating Sphere Volume</title> 8	<script>
Exercises   319


9	function start() 10	{
11	var button = document.getElementById( "calculateButton" ); 12	button.addEventListener( "click", displayVolume, false ); 13              } // end function start
14
15	function displayVolume() 16	{
17	var inputField = document.getElementById( "radiusField" ); 18	var radius = parseFloat( inputField.value );
19	var result = document.getElementById( "result" );
20	result.innerHTML = "Sphere volume is: " + sphereVolume( radius ); 21              } // end function displayVolume
22
23	function sphereVolume( radius ) 24	{
25	return ( 4.0 / 3.0 ) * Math.PI * Math.pow( radius, 3 ); 26              } // end function sphereVolume
27
28	window.addEventListener( "load", start, false ); 29          </script>
30	</head> 31	<body>
32	<form action = "#"> 33              <p><label>Radius:
34	<input id = "radiusField" type = "number"></label>
35	<input id = "calculateButton" type = "button" value = "Calculate"></p> 36          </form>
37	<p id = "result"></p> 38       </body>
39   </html>










Exercises
9.7	Write a script that uses a formto get the radius of a circle from the user, then calls the func-tion circleAreato calculate the area of the circle and display the result in a paragraph on the page. To get the number from the form, use the techniques shown in Self-Review Exercise 9.6.
9.8	A parking garage charges a $2.00 minimum fee to park for up to three hours. The garage charges an additional $0.50 per hourfor each hour or part thereof in excess of three hours. The max-imum charge for any given 24-hour period is $10.00. Assume that no car parks for longer than 24 hours at a time. Write a script that calculates and displays the parking charges for each customer who parked a car in this garage yesterday. You should use a formto input from the user the hours parked for each customer. The program should display the charge for the current customer and should calculate and display the running total of yesterday’s receipts. The program should use the function calculateChargesto determine thechargefor each customer. To getthenumber from the form, use the techniques shown in Self-Review Exercise 9.6.
320	Chapter9 JavaScript:Functions


9.9	Write function distancethat calculates the distance between two points (x1, y1) and (x2, y2). All numbers and return values should be floating-point values. Incorporate this function into a script that enables the user to enter the coordinates of the points through an HTML5 form. To get the numbers from the form, use the techniques shown in Self-Review Exercise 9.6.
9.10	Answer each of the following questions:
a)  What does it mean to choose numbers “at random”?
b)  Why is the Math.randomfunction useful for simulating games of chance?
c)   Why is it often necessary to scale and/or shift the values produced by Math.random? d)  Why is computerized simulation of real-world situations a useful technique?
9.11	Write statements that assign random integers to the variable n in the following ranges: a)  1 £n £2
b)  1 £n £100 c)   0 £n £9
d)  1000 £n £1112 e)   –1 £n £1
f)   –3 £n £11

9.12	For each of the following sets of integers, write a single statement that will print a number at random from the set:
a)  2, 4, 6, 8, 10. b)  3, 5, 7, 9, 11.
c)   6, 10, 14, 18, 22.
9.13	Write a function integerPower( base,exponent )that returns the value of baseexponent
For example, integerPower(3,4)=3*3*3*3. Assume that exponentand baseare integers. Function integerPowershould use a foror whilestatement to control the calculation. Incorporate this function into a script that reads integer values from an HTML5 form for baseand exponent and performs the calculation with the integerPowerfunction. The HTML5 form should consist of two text fields and a button to initiate the calculation. The user should interact with the pro-gram by typing numbers in both text fields, then clicking the button.
9.14	Write a function multiplethat determines, for a pair of integers, whether the second inte-ger is a multiple of the first. The function should take two integer arguments and return trueif the second is a multiple of the first, and falseotherwise. Incorporate this function into a script that inputs a series of pairs of integers (one pair at a time). The HTML5 form should consist of two text fields and a button to initiate the calculation. The user should interact with the program by typing numbers in both text fields, then clicking the button.
9.15	Write a script that inputs integers (one at a time) and passes them one at a time to function isEven, which uses the modulus operator to determine whether an integer is even. The function should take an integer argument and return trueif the integeris even andfalseotherwise. Use sen-tinel-controlled looping and a promptdialog.
9.16	Write program segments that accomplish each of the following tasks:
a)  Calculate the integer part of the quotient when integer ais divided by integer b. b)  Calculate the integer remainder when integer ais divided by integer b.
c)   Usetheprogrampiecesdevelopedinparts(a)and(b)towriteafunctiondisplayDigits that receives an integer between 1and 99999and prints it as a series of digits, each pair of which is separated by two spaces. For example, the integer 4562should be printed as
4  5 6  2
Exercises   321


d)  Incorporate the function developed in part (c) into a script that inputs an integer from a promptdialog and invokes displayDigitsby passing to the function the integer en-tered.
9.17	Implement the following functions:
a)  Function celsiusreturns the Celsius equivalent of a Fahrenheit temperature, using the calculation
C = 5.0 / 9.0 * ( F - 32 );
b)  Function fahrenheitreturns the Fahrenheit equivalent of a Celsius temperature, using the calculation
F = 9.0 / 5.0 * C + 32;
c)   Use these functions to write a script that enables the user to enter either a Fahrenheit or a Celsius temperature and displays the Celsius or Fahrenheit equivalent.
Your HTML5 document should contain two buttons—one to initiate the conversion from Fahren-heit to Celsius and one to initiate the conversion from Celsius to Fahrenheit.
9.18	Write a function minimum3that returns the smallest of three floating-point numbers. Use the Math.minfunction to implement minimum3. Incorporate the function into a script that reads three values from the user and determines the smallest value.
9.19	An integer is said to be prime if it’s greater than 1 and divisible only by 1 and itself. For example, 2, 3, 5 and 7 are prime, but 4, 6, 8 and 9 are not.
a)  Write a function that determines whether a number is prime.
b)  Use this function in a script that determines and prints all the prime numbers between 1 and 10,000. How many of these 10,000 numbers do you really have to test before being sure that you have found all the primes? Display the results in a <textarea>.
c)   Initially, you might think that n/2 is the upper limit for which you must test to see whether a number is prime, but you need go only as high as the square root of n. Why? Rewrite the program using the Math.sqrtmethod to calculate the square root, and run it both ways. Estimate the performance improvement.
9.20	Write a function qualityPointsthat inputs a student’s average and returns 4 if the stu-dent's average is 90–100, 3 if the average is 80–89, 2 if the average is 70–79, 1 if the average is 60– 69 and 0 if the average is lower than 60. Incorporate the function into a script that reads a value from the user.
9.21	Write a script that simulates coin tossing. Let the program toss the coin each time the user clicks the Toss button. Count the number of times each side of the coin appears. Display the results. The program should call a separate function flipthat takes no arguments and returns falsefor tails and truefor heads. [Note: If the program realistically simulates the coin tossing, each side of the coin should appear approximately half the time.]
9.22	Computers are playing an increasing role in education. Write a program that will help an elementary-school student learn multiplication. Use Math.randomto produce two positive one-digit integers. It should then display a question such as
How much is 6 times 7?
The student then types the answer into a text field. Your program checks the student’s answer. If it’s correct, display the string "Verygood!"and generate a new question. If the answer is wrong, dis-play the string "No.Pleasetryagain."and let the student try the same question again repeatedly until he or she finally gets it right. A separate function should be used to generate each new ques-tion. This function should be called once when the script begins execution and each time the user answers the question correctly.
322	Chapter9 JavaScript:Functions


9.23	The use of computers in education is referred to as computer-assisted instruction (CAI). Oneproblemthatdevelopsin CAIenvironmentsisstudentfatigue.Thisproblemcanbeeliminated by varying the computer's dialogue to hold the student's attention. Modify the program in Exercise 9.22 to print one of a variety of comments for each correct answer and each incorrect an-swer. The set of responses for correct answers is as follows:
Very good! Excellent! Nice work!
Keep up the good work!
The set of responses for incorrect answers is as follows:
No. Please try again. Wrong. Try once more. Don't give up!
No. Keep trying.
Use random number generation to choose a number from 1 to 4 that will be used to select an appropriate response to each answer. Use a switchstatement to issue the responses.
9.24	More sophisticated computer-assisted instruction systems monitor the student’s perfor-mance over a period of time. The decision to begin a new topic is often based on the student’s suc-cess with previous topics. Modify the program in Exercise 9.23 to count the number of correct and incorrect responses typed by the student. After the student answers 10 questions, your program should calculate the percentage of correct responses. If the percentage is lower than 75 percent, dis-play Pleaseaskyourinstructorforextrahelp, and reset the quiz so another student can try it.
9.25	Write a script that plays a “guess the number” game as follows: Your program chooses the number to be guessed by selecting a random integer in the range 1 to 1000. The script displays the prompt Guessanumberbetween1and1000next to a text field. The player types a first guess into the text field and clicks a button to submit the guess to the script. If the player's guess is incorrect, your program should display Toohigh.Tryagain.or Toolow.Tryagain.to help the player “zero in” on the correct answer and should clear the text field so the user can enter the next guess. When the user enters the correct answer, display Congratulations.Youguessedthenumber!and clear the text field so the user can play again. [Note: The guessing technique employed in this problem is sim-ilar to a binary search, which we discuss in Chapter 10, JavaScript: Arrays.]
9.26	Modify the program of Exercise 9.25 to count the number of guesses the player makes. If thenumberis10orfewer,display Eitheryouknowthesecretoryougotlucky!If theplayerguess-es the number in 10 tries, display Ahah!Youknowthesecret!If the player makes more than 10 guesses, display Youshouldbeabletodobetter!Why should it take no more than 10 guesses? Well, with each good guess, the player should be able to eliminate half of the numbers. Now show why any number 1 to 1000 can be guessed in 10 or fewer tries.
9.27	(Project) Exercises 9.22 through 9.24 developed a computer-assisted instruction program to teach an elementary-school student multiplication. This exercise suggests enhancements to that program.
a)  Modify the program to allow the user to enter a grade-level capability. A grade level of 1 means to use only single-digit numbers in the problems, a grade level of 2 means to use numbers as large as two digits, and so on.
b)  Modify the program to allow the user to pick the type of arithmetic problems he or she wishes to study. An option of 1 means addition problems only, 2 means subtraction problems only, 3 means multiplication problems only, 4 means division problems only and 5 means to intermix randomly problems of all these types.
Exercises   323


9.28	Modify the craps program in Fig. 9.7 to allow wagering. Initialize variable bankBalanceto 1000 dollars. Prompt the player to enter a wager. Check whether	the wageris less than or equal to bankBalanceand, if not, have the user reenter wageruntil a valid wageris entered. After a valid wagerisentered,runonegameofcraps.Iftheplayerwins,increase bankBalanceby wager,andprint the new bankBalance. If the player loses, decrease bankBalanceby wager, print the new bankBal-ance, check whether bankBalancehas become zero and, if so, print the message Sorry.Youbusted! As the game progresses, print various messages to create some chatter, such as Oh,you'regoingfor broke,huh?or Awc'mon,takeachance!or You'reupbig.Now'sthetimetocashinyourchips!. Implement the chatter as a separate function that randomly chooses the string to display.
9.29	Write a recursive function power(base,exponent )that, when invoked, returns base exponent
for example, power( 3, 4 ) = 3 * 3 * 3 * 3. Assume that exponent is an integer greater than or equal to 1. The recursion step would use the relationship
base exponent   = base  · baseexponent –1
and the terminating condition occurs when exponent is equal to 1, because base1   = base
Incorporate this function into a script that enables the user to enter the base and exponent. 9.30	What does the following function do?
// Parameter b must be a positive
// integer to prevent infinite recursion function mystery( a, b )
{
if ( b == 1 ) return a;
else
return a + mystery( a, b - 1 ); }
10 JavaScript:Arrays
Yea, from the table of my memory I’ll wipe away all trivial fond records.
—William Shakespeare

Praise invariably implies a reference to a higher standard.
—Aristotle

With sobs and tears he sorted out
Those of the largest size…
—Lewis Carroll

Attempt the end, and never stand to doubt;
Nothing’s so hard, but search will find it out.
—Robert Herrick



Objectives Inthischapteryou’ll:
ÿ   Declarearrays,initialize arraysandrefertoindividual
elementsofarrays.
ÿ   Storelistsandtablesof
valuesinarrays.
ÿ   Passarraystofunctions. ÿ   Searchandsortarrays.
ÿ   Declareandmanipulate
multidimensionalarrays.
10.1 Introduction   325



10.1  Introduction 10.2  Arrays
10.3  DeclaringandAllocatingArrays 10.4  ExamplesUsingArrays
10.4.1 Creating,InitializingandGrowing
Arrays
10.4.2 InitializingArrayswithInitializerLists
10.4.3 SummingtheElementsofanArraywith
forandfor…in
10.4.4 UsingtheElementsofanArrayas
Counters
10.5  RandomImageGeneratorUsingArrays

10.6  ReferencesandReference Parameters
10.7  PassingArraystoFunctions
10.8  SortingArrayswithArrayMethod sort
10.9  SearchingArrayswithArray MethodindexOf
10.10  MultidimensionalArrays


Summary | Self-Review Exercises |  Answers to Self-Review Exercises | Exercises


10.1 Introduction
Arrays are data structures consisting of related data items. JavaScript arrays are “dynamic” entities in that they can change size after they’re created. Many techniques demonstrated in this chapter are used frequently in Chapters 12–13 when we introduce the collections that allow you to dynamically manipulate all of an HTML5 document’s elements.

10.2 Arrays
An array is a group of memory locations that all have the same name and normally are of the same type (although this attribute is not required in JavaScript). To refer to a particular location orelement in thearray, we specify the nameof the array and the position number of the particular element in the array.
Figure 10.1 shows an array of integer values named c. This array contains 12 ele-ments. We may refer to any one of these elements by giving the array’s name followed by the position number of the element in square brackets ([]). The first element in every array is the zeroth element. Thus, the first element of array cis referred to as c[0], the second element as c[1], the seventh element as c[6]and, in general, the ith element of array cis referred to as c[i-1]. Array names follow the same conventions as other identifiers.
The position number in square brackets is called an index and must be an integer or an integer expression. If a program uses an expression as an index, then the expression is evaluated to determine the value of the index. For example, if the variable ais equal to 5 and bis equal to 6, then the statement

c[ a + b ] += 2;
adds 2to the value of array element c[11]. An indexed array name can be used on the left side of an assignment to place a new value into an array element. It can also be used on the right side of an assignment to assign its value to another variable.
Let’s examine array cin Fig. 10.1 more closely. The array’s name is c. The array’s length is 12 and can be found by using the array’s lengthproperty, as in:

c.length
326	Chapter10 JavaScript:Arrays





Positionnumberofthe elementwithinthearrayc



Nameofanindividual arrayelement

Nameofthearrayisc

c[ 0 ]	-45
c[ 1 ]	6
c[ 2 ]	0
c[ 3 ]	72
c[ 4 ]	1543
c[ 5 ]	-89
c[ 6 ]	0
c[ 7 ]	62
c[ 8 ]	-3
c[ 9 ]	1
c[ 10 ]	6453
c[ 11 ]	78







Valueofarray elementc[ 4 ]



Fig. 10.1  | Arraywith12elements.

The array’s 12 elements are referred to as c[0], c[1], c[2], …, c[11]. The value of c[0] is -45, the value of c[1]is 6, the value of c[2]is 0, the value of c[7]is 62and the value of c[11]is 78. The following statement calculates the sum of the values contained in the first three elements of array cand stores the result in variable sum:

sum = c[ 0 ] + c[ 1 ] + c[ 2 ];
The brackets that enclose an array index are a JavaScript operator. Brackets have the same level of precedence as parentheses. Figure 10.2 shows the precedence and associa-tivity of the operators introduced so far in the text. They’re shown from top to bottom in decreasing order of precedence.


Operators	Associativity	Type


()  []  .
++  --  !
*   /   %
+   -
<   <=  >   >=
==  !=
&&
||
?:
=   +=  -=  *=  /=  %=

left to right right to left left to right left to right left to right left to right left to right left to right right to left
right to left

highest unary
multiplicative additive relational equality logical AND logical OR conditional
assignment


Fig. 10.2  | Precedenceandassociativityoftheoperatorsdiscussedsofar.
10.3 DeclaringandAllocatingArrays   327

10.3 Declaring and Allocating Arrays
Arrays occupy space in memory. Actually, an array in JavaScript is an Arrayobject. You use the newoperator to create an array and to specify the number of elements in an array. The newoperator creates an object as the script executes by obtaining enough memory to store an object of the type specified to the right of new. To allocate 12 elements for integer array c, use a newexpression like:

var c = new Array( 12 );
The preceding statement can also be performed in two steps, as follows:

var c; // declares a variable that will hold the array c = new Array( 12 ); // allocates the array
When arrays are created, the elements are not initialized—they have the value undefined.

10.4 Examples Using Arrays
This section presents several examples of creating and manipulating arrays.

10.4.1 Creating, Initializing and Growing Arrays
Our next example (Figs. 10.3–10.4) uses operator newto allocate an array of five elements and an empty array. The script demonstrates initializing an array of existing elements and also shows that an array can grow dynamically to accommodate new elements. The array’s values are displayed in HTML5 tables.

HTML5 Document for Displaying Results
Figure 10.3 shows the HTML5 document in which we display the results. You’ll notice that we’ve placed the CSS styles and JavaScript code into separate files. Line 9 links the CSSfiletablestyle.csstothisdocumentasshowninChapter 4.(Therearenonewcon-ceptsin the CSSfile usedin this chapter, sowedon’t showthem inthetext.) Line10dem-onstrates how to link a script that’s stored in a separate file to this document. To do so, use the scriptelement’s srcattribute to specify the location of the JavaScript file (named with the .jsfilename extension). This document’s bodycontains two divs in which we’ll display the contents of two arrays. When the document finishes loading, the JavaScript function start(Fig. 10.4) is called.

Software Engineering Observation 10.1
It’s considered good practice to separate your JavaScript scripts into separate files so that they can be reused in multiple web pages.


1  <!DOCTYPE html> 2
3  <!-- Fig. 10.3: InitArray.html -->
4  <!-- Web page for showing the results of initializing arrays. --> 5  <html>
6	<head>

Fig. 10.3  | Webpageforshowingtheresultsofinitializingarrays.(Part1of2.)
328	Chapter10 JavaScript:Arrays


7	<meta charset = "utf-8">
8	<title>Initializing an Array</title>
9	<link rel = "stylesheet" type = "text/css" href = "tablestyle.css"> 10	<script src = "InitArray.js"></script>
11	</head> 12	<body>
13	<div id = "output1"></div> 14	<div id = "output2"></div> 15     </body>
16  </html>

























Fig. 10.3  | Webpageforshowingtheresultsofinitializingarrays.(Part2of2.)

Script that Creates, Initializes and Displays the Contents of Arrays
Figure 10.4 presents the script used by the document in Fig. 10.3. Function start(lines 3–24) is called when the window’s loadevent occurs.


1  // Fig. 10.4: InitArray.js
2  // Create two arrays, initialize their elements and display them 3  function start()
4  {

Fig. 10.4  | Createtwoarrays,initializetheirelementsanddisplaythem.(Part1of2.)
10.4 ExamplesUsingArrays   329


5	var n1 = new Array( 5 ); // allocate five-element array 6	var n2 = new Array(); // allocate empty array
7
8	// assign values to each element of array n1
9	var length = n1.length; // get array's length once before the loop 10
11	for ( var i = 0; i < length; ++i ) 12	{
13	n1[ i ] = i; 14     } // end for
15
16	// create and initialize five elements in array n2 17	for ( i = 0; i < 5; ++i )
18	{
19	n2[ i ] = i; 20     } // end for
21
22	outputArray( "Array n1:", n1, document.getElementById( "output1" ) ); 23	outputArray( "Array n2:", n2, document.getElementById( "output2" ) ); 24  } // end function start
25
26  // output the heading followed by a two-column table 27  // containing indices and elements of "theArray"
28  function outputArray( heading, theArray, output ) 29  {
30	var content = "<h2>" + heading + "</h2><table>" +
31	"<thead><th>Index</th><th>Value</th></thead><tbody>"; 32
33	// output the index and value of each array element
34	var length = theArray.length; // get array's length once before loop 35
36	for ( var i = 0; i < length; ++i ) 37	{
38	content += "<tr><td>" + i + "</td><td>" + theArray[ i ] + 39            "</td></tr>";
40	} // end for 41
42	content += "</tbody></table>";
43	output.innerHTML = content; // place the table in the output element 44  } // end function outputArray
45
46  window.addEventListener( "load", start, false );

Fig. 10.4  | Createtwoarrays,initializetheirelementsanddisplaythem.(Part2of2.)


Line 5 creates array n1with five elements. Line 6 creates array n2as an empty array. Lines 9–14 use a forstatement to initialize the elements of n1to their index values (0 to 4). Witharrays,weusezero-basedcounting sothat the loop can accesseveryarray element. Line 9 uses the expression n1.lengthto determine the array’s length. JavaScript’s arrays are dynamically resizable, so it’s important to get an array’s length once before a loop that processes the array—in case the script changes the array’s length. In this example, the array’s length is 5, so the loop continues executing as long as the value of control variable
330	Chapter10 JavaScript:Arrays


iis less than 5. This process is known as iterating through the array’s elements. For afive-element array, the index values are 0 through 4, so using the less-than operator, <, guaran-tees that the loop does not attempt to access an element beyond the end of the array. Zero-based counting is usually used to iterate through arrays.

Growing an Array Dynamically
Lines 17–20 use a forstatement to add five elements to the array n2and initialize each element to its index value (0 to 4). The array grows dynamically to accommodate each val-ue as it’s assigned to each element of the array.

Software Engineering Observation 10.2
JavaScript automatically reallocatesan arraywhen avalueisassignedto anelementthat’s outside the bounds of the array. Elements between the last element of the original array and the new element are undefined.

Lines 22–23 invoke function outputArray(defined in lines 28–44) to display the contents of each array in an HTML5 table in a corresponding div. Function outputArray receives three arguments—a string to be output as an h2element before the HTML5 table that displays the contents of the array, the array to output and the divin which to place the table. Lines 36–40 use a forstatement to define each row of the table.

Error-Prevention Tip 10.1
When accessing array elements, the index values should never go below 0 and should be less than the number of elements in the array (i.e., one less than the array’s size), unless it’s your explicit intent to grow the array by assigning a value to a nonexistent element.


Using an Initializer List
If an array’s element values are known in advance, the elements can be allocated and ini-tialized in the declaration of the array. There are two ways in which the initial values can be specified. The statement

var n = [ 10, 20, 30, 40, 50 ];
usesacomma-separatedinitializerlistenclosedinsquarebrackets([and])tocreateafive-element array with indices of 0, 1, 2, 3and 4. The array size is determined by the number of values in the initializer list. The preceding declaration does not require the newoperator to create the Arrayobject—this functionality is provided by the JavaScript interpreter when it encounters an array declaration that includes an initializer list. The statement

var n = new Array( 10, 20, 30, 40, 50 );
also creates a five-element array with indices of 0, 1, 2, 3and 4. In this case, the initial val-ues of the array elements are specified as arguments in the parentheses following newAr-ray. The size of the array is determined by the number of values in parentheses. It’s also possible to reserve a space in an array for a value to be specified later by using a comma as a place holder in the initializer list. For example, the statement

var n = [ 10, 20, , 40, 50 ];
creates a five-element array in which the third element (n[2]) has the value undefined.
10.4 ExamplesUsingArrays   331


10.4.2 Initializing Arrays with Initializer Lists
The example in Figs. 10.5–10.6 creates three Arrayobjects to demonstrate initializing ar-rayswithinitializerlists.Figure 10.5isnearlyidenticaltoFig. 10.3butprovidesthreedivs in its bodyelement for displaying this example’s arrays.

1  <!DOCTYPE html> 2
3  <!-- Fig. 10.5: InitArray2.html -->
4  <!-- Web page for showing the results of initializing arrays. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Initializing an Array</title>
9	<link rel = "stylesheet" type = "text/css" href = "tablestyle.css"> 10	<script src = "InitArray2.js"></script>
11	</head> 12	<body>
13	<div id = "output1"></div> 14	<div id = "output2"></div> 15	<div id = "output3"></div> 16     </body>
17  </html>

























Fig. 10.5  | Webpageforshowingtheresultsofinitializingarrays.
332	Chapter10 JavaScript:Arrays


ThestartfunctioninFig. 10.6demonstratesarrayinitializerlists(lines7–9)anddis-plays each array in an HTML5 table using the same function outputArrayas Fig. 10.4. Note that when array integers2is displayed in the web page, the elements with indices 1 and 2 (the second and third elements of the array) appear in the web page as undefined. These are the two elements for which we did not supply values in line 9.


1  // Fig. 10.6: InitArray2.js
2  // Initializing arrays with initializer lists. 3  function start()
4  {
5	// Initializer list specifies the number of elements and 6	// a value for each element.
7	var colors = new Array( "cyan", "magenta","yellow", "black" ); 8	var integers1 = [ 2, 4, 6, 8 ];
9	var integers2 = [ 2, , , 8 ]; 10
11	outputArray( "Array colors contains", colors, 12         document.getElementById( "output1" ) );
13	outputArray( "Array integers1 contains", integers1, 14         document.getElementById( "output2" ) );
15	outputArray( "Array integers2 contains", integers2, 16         document.getElementById( "output3" ) );
17  } // end function start 18
19  // output the heading followed by a two-column table 20  // containing indices and elements of "theArray"
21  function outputArray( heading, theArray, output ) 22  {
23	var content = "<h2>" + heading + "</h2><table>" +
24	"<thead><th>Index</th><th>Value</th></thead><tbody>"; 25
26	// output the index and value of each array element
27	var length = theArray.length; // get array's length once before loop 28
29	for ( var i = 0; i < length; ++i ) 30	{
31	content += "<tr><td>" + i + "</td><td>" + theArray[ i ] + 32            "</td></tr>";
33	} // end for 34
35	content += "</tbody></table>";
36	output.innerHTML = content; // place the table in the output element 37  } // end function outputArray
38
39  window.addEventListener( "load", start, false );

Fig. 10.6  | Initializingarrayswithinitializerlists.


10.4.3 Summing the Elements of an Array with forand for…in
The example in Figs. 10.7–10.8 sums an array’s elements and displays the results. The document in Fig. 10.7 shows the results of the script in Fig. 10.8.
10.4 ExamplesUsingArrays   333


1  <!DOCTYPE html> 2
3  <!-- Fig. 10.7: SumArray.html -->
4  <!-- HTML5 document that displays the sum of an array's elements. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Sum Array Elements</title>
9	<script src = "SumArray.js"></script> 10     </head>
11	<body>
12	<div id = "output"></div> 13     </body>
14  </html>

Fig. 10.7  | HTML5documentthatdisplaysthesumofanarray'selements.

Thescript inFig. 10.8sumsthevaluescontainedintheArray,the10-elementinteger array declared, allocated and initialized in line 5. The statement in line 14 in the body of the first forstatement does the totaling.

1  // Fig. 10.8: SumArray.js
2  // Summing the elements of an array with for and for...in 3  function start()
4  {
5	var theArray = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]; 6	var total1 = 0, total2 = 0;
7
8	// iterates through the elements of the array in order and adds 9	// each element's value to total1
10	var length = theArray.length; // get array's length once before loop 11
12	for ( var i = 0; i < length; ++i ) 13	{
14	total1 += theArray[ i ]; 15     } // end for
16
17	var results = "<p>Total using indices: " + total1 + "</p>"; 18
19	// iterates through the elements of the array using a for... in 20	// statement to add each element's value to total2
21	for ( var element in theArray ) 22	{
23	total2 += theArray[ element ]; 24     } // end for
25
26	results += "<p>Total using for...in: " + total2 + "</p>"; 27	document.getElementById( "output" ).innerHTML = results; 28  } // end function start
29
30  window.addEventListener( "load", start, false );

Fig. 10.8  | Summingtheelementsofanarraywithforandfor...in.(Part1of2.)
334	Chapter10 JavaScript:Arrays










Fig. 10.8  | Summingtheelementsofanarraywithforandfor...in.(Part2of2.)

The for…inRepetition Statement
In this example, we introduce JavaScript’s for…instatement, which enables a script to perform a task for each element in an array (or, as we’ll see in Chapters 12–13, for each element in a collection). Lines 21–24 show the syntax of a for…instatement. Inside the parentheses, we declare the elementvariable used to select each element in the object to the right of keyword in(theArrayin this case). When you use for…in, JavaScript auto-matically determines the number of elements in the array. As the JavaScript interpreter it-erates over theArray’s elements, variable elementis assigned a value that can be used as an index for theArray. In the case of an array, the value assigned is an index in the range from 0up to, but not including, theArray.length. Each value is added to total2to pro-duce the sum of the elements in the array.

Error-Prevention Tip 10.2
When iterating over all the elements of an array, use a for…instatement to ensure that you manipulate only the existing elements. The for…instatement skips any undefined elements in the array.

10.4.4 Using the Elements of an Array as Counters
In Section 9.5.3, we indicated that there’s a more elegant way to implement the dice-roll-ing example presented in that section. The example allowed the user to roll 12 dice at a time and kept statistics showing the number of times and the percentage of the time each face occurred. An array version of this example is shown in Figs. 10.9–10.10. We divided the example into three files—style.css contains the styles (not shown here), Roll-Dice.html (Fig. 10.9) contains the HTML5 document and RollDice.js (Fig. 10.10) contains the JavaScript.

1  <!DOCTYPE html> 2
3  <!-- Fig. 10.9: RollDice.html -->
4  <!-- HTML5 document for the dice-rolling example. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Roll a Six-Sided Die 6000000 Times</title>
9	<link rel = "stylesheet" type = "text/css" href = "style.css">

Fig. 10.9  | HTML5documentforthedice-rollingexample.(Part1of2.)
10.4 ExamplesUsingArrays   335


10	<script src = "RollDice.js"></script> 11     </head>
12	<body>
13	<p><img id = "die1" src = "blank.png" alt = "die 1 image"> 14            <img id = "die2" src = "blank.png" alt = "die 2 image"> 15            <img id = "die3" src = "blank.png" alt = "die 3 image"> 16            <img id = "die4" src = "blank.png" alt = "die 4 image"> 17            <img id = "die5" src = "blank.png" alt = "die 5 image">
18	<img id = "die6" src = "blank.png" alt = "die 6 image"></p> 19         <p><img id = "die7" src = "blank.png" alt = "die 7 image">
20	<img id = "die8" src = "blank.png" alt = "die 8 image"> 21	<img id = "die9" src = "blank.png" alt = "die 9 image"> 22	<img id = "die10" src = "blank.png" alt = "die 10 image"> 23	<img id = "die11" src = "blank.png" alt = "die 11 image">
24	<img id = "die12" src = "blank.png" alt = "die 12 image"></p> 25         <form action = "#">
26	<input id = "rollButton" type = "button" value = "Roll Dice"> 27         </form>
28	<div id = "frequencyTableDiv"></div> 29     </body>
30  </html>






















Fig. 10.9  | HTML5documentforthedice-rollingexample.(Part2of2.)

In Fig. 10.10, lines 3–5 declare the scripts global variables. The frequencyarray (line 3) contains seven elements representing the counters we use in this script. We ignore ele-ment 0 of the array and use only the elements that correspond to values on the sides of a die (the elements with indices 1–6). Variable totalDicetracks the total number of dice
336	Chapter10 JavaScript:Arrays


rolled. The dieImagesarray contains 12 elements that will refer to the 12 imgelements in the HTML document (Fig. 10.9).


1  // Fig. 10.10: RollDice.js
2  // Summarizing die-rolling frequencies with an array instead of a switch 3  var frequency = [ , 0, 0, 0, 0, 0, 0 ]; // frequency[0] uninitialized
4  var totalDice = 0;
5  var dieImages = new Array(12); // array to store img elements 6
7  // get die img elements 8  function start()
9  {
10	var button = document.getElementById( "rollButton" ); 11	button.addEventListener( "click", rollDice, false );
12	var length = dieImages.length; // get array's length once before loop 13
14	for ( var i = 0; i < length; ++i ) 15	{
16	dieImages[ i ] = document.getElementById( "die" + (i + 1) ); 17     } // end for
18  } // end function start 19
20  // roll the dice 21  function rollDice() 22  {
23	var face; // face rolled
24	var length = dieImages.length; 25
26	for ( var i = 0; i < length; ++i ) 27	{
28	face = Math.floor( 1 + Math.random() * 6 );
29	tallyRolls( face ); // increment a frequency counter 30	setImage( i, face ); // display appropriate die image 31	++totalDice; // increment total
32	} // end for 33
34	updateFrequencyTable(); 35  } // end function rollDice 36
37  // increment appropriate frequency counter 38  function tallyRolls( face )
39  {
40	++frequency[ face ]; // increment appropriate counte 41  } // end function tallyRolls
42
43  // set image source for a die 44  function setImage( dieImg ) 45  {
46	dieImages[ dieNumber ].setAttribute( "src", "die" + face + ".png" ); 47	dieImages[ dieNumber ].setAttribute( "alt",
48	"die with " + face + " spot(s)" );
49  } // end function setImage

Fig. 10.10 | Summarizingdie-rollingfrequencieswithanarrayinsteadofaswitch. (Part1of2.)
10.5 RandomImageGeneratorUsingArrays   337


50
51  // update frequency table in the page 52  function updateFrequencyTable()
53  {
54	var results = "<table><caption>Die Rolling Frequencies</caption>" + 55         "<thead><th>Face</th><th>Frequency</th>" +
56	"<th>Percent</th></thead><tbody>"; 57     var length = frequency.length;
58
59	// create table rows for frequencies 60	for ( var i = 1; i < length; ++i ) 61	{
62	results += "<tr><td>1</td><td>" + i + "</td><td>" +
63	formatPercent(frequency[ i ] / totalDice) + "</td></tr>"; 64     } // end for
65
66	results += "</tbody></table>";
67	document.getElementById( "frequencyTableDiv" ).innerHTML = results; 68  } // end function updateFrequencyTable
69
70  // format percentage
71  function formatPercent( value ) 72  {
73	value *= 100;
74	return value.toFixed(2);
75  } // end function formatPercent 76
77  window.addEventListener( "load", start, false );

Fig. 10.10 | Summarizingdie-rollingfrequencieswithanarrayinsteadofaswitch. (Part2of2.)

Whenthedocumentfinishesloading,thescript’sstartfunction(lines8–18) iscalled to register the button’s event handler and to get the imgelements and store them in the global array dieImagesfor use in the rest of the script. Each time the user clicks the Roll Dice button, function rollDice(lines 21–35) is called to roll 12 dice and update the results on the page.
The switchstatement in Fig. 9.6 is replaced by line 40 in function tallyRolls. This lineuses therandomfacevalue (calculatedatline28) astheindexforthearray frequency to determine which element to increment during each iteration of the loop. Because the random number calculation in line 28 produces numbers from 1 to 6 (the values for a six-sided die), the frequencyarray must have seven elements (index values 0 to 6). Also, lines 60–64 of this program generate the table rows that were written one line at a time in Fig. 9.6. We can loop through array frequencyto help produce the output, so we do not have to enumerate each HTML5 table row as we did in Fig. 9.6.

10.5 Random Image Generator Using Arrays
In Chapter 9, we created a random image generator that required image files to be named
with the word diefollowed by a number from 1 to 6 and the file extension .png(e.g, die1.png). In this example (Figs. 10.11–10.12), we create a more elegant random image generator that does not require the image filenames to contain integers in sequence. This
338	Chapter10 JavaScript:Arrays


version uses an array picturesto store the names of the image files as strings. Each time you click the image in the document (Fig. 10.11), the script generates a random integer and uses it as an index into the picturesarray. The script updates the imgelement’s src attribute with the image filename at the randomly selected position in the picturesarray. Inaddition,weupdatethealtattributewithanappropriatedescriptionoftheimagefrom the descriptionsarray.

1  <!DOCTYPE html> 2
3  <!-- Fig. 10.11: RandomPicture.html -->
4  <!-- HTML5 document that displays randomly selected images. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Random Image Generator</title>
9	<script src = "RandomPicture.js"></script> 10     </head>
11	<body>
12	<img id = "image" src = "CPE.png" alt = "Common Programming Error"> 13     </body>
14  </html>









Fig. 10.11 | HTML5documentthatdisplaysrandomlyselectedimages.

The script (Fig. 10.12) declares the array picturesin line 4 and initializes it with the names of seven image files—the files contain our bug icons that we associate with our pro-gramming tips. Lines 5–8 create a separate array descriptionsthat contains the alttext for the corresponding images in the picturesarray. When the user clicks the imgelement in the document, function pickImage(lines 12–17) is called to pick a random integer indexfrom 0 to 6 and display the associated image. Line 15 uses that indexto get a value from the picturesarray, appends ".png"to it, then sets the imgelement’s srcattribute to the new image file name. Similarly, line 16 uses the indexto get the corresponding text from the descriptionsarray and assigns that text to the imgelement’s altattribute.

1  // Fig. 10.12: RandomPicture2.js
2  // Random image selection using arrays 3  var iconImg;
4  var pictures = [ "CPE", "EPT", "GPP", "GUI", "PERF", "PORT", "SEO" ];

Fig. 10.12 | Randomimageselectionusingarrays. (Part1of2.)
10.6 ReferencesandReferenceParameters   339


5  var descriptions = [ "Common Programming Error",
6	"Error-Prevention Tip", "Good Programming Practice",
7	"Look-and-Feel Observation", "Performance Tip", "Portability Tip", 8	"Software Engineering Observation" ];
9
10  // pick a random image and corresponding description, then modify 11  // the img element in the document's body
12  function pickImage() 13  {
14	var index = Math.floor( Math.random() * 7 );
15	iconImg.setAttribute( "src", pictures[ index ] + ".png" ); 16	iconImg.setAttribute( "alt", descriptions[ index ] );
17  } // end function pickImage 18
19  // registers iconImg's click event handler 20  function start()
21  {
22	iconImg = document.getElementById( "iconImg" );
23	iconImg.addEventListener( "click", pickImage, false ); 24  } // end function start
25
26  window.addEventListener( "load", start, false );

Fig. 10.12 | Randomimageselectionusingarrays. (Part2of2.)

10.6 References and Reference Parameters
Two ways to pass arguments to functions (or methods) in many programming languages arepass-by-valueandpass-by-reference.Whenanargumentispassedtoafunctionbyval-ue, a copy of the argument’s value is made and is passed to the called function. In Java-Script, numbers, boolean values and strings are passed to functions by value.
With pass-by-reference, the caller gives the called function access to the caller’s data and allows the called function to modify the data if it so chooses. This procedure is accom-plished by passing to the called function the address in memory where the data resides. Pass-by-reference  can improve performance  because it can eliminate the  overhead of copying large amounts of data, but it can weaken security because the called function can accessthecaller’sdata.InJavaScript,allobjects(and thusallarrays)arepassedtofunctions by reference.

Error-Prevention Tip 10.3
With pass-by-value, changes to the copy of the value received by the called function do not affect the original variable’s value in the calling function. This prevents the accidental side effects that hinder the development of correct and reliable software systems.

Software Engineering Observation 10.3
When information is returned from a function via a returnstatement, numbers and boolean values are returned by value (i.e., a copy is returned), and objects are returned by reference (i.e., a reference to the object is returned). When an object is passed-by-reference, it’s not necessary to return the object, because the function operates on the original object in memory.
340	Chapter10 JavaScript:Arrays


The name of an array actually is a reference to an object that contains the array ele-ments and the lengthvariable. To pass a reference to an object into a function, simply specify the reference name in the function call. The reference name is the identifier that the program uses to manipulate the object. Mentioning the reference by its parameter name in the body of the called function actually refers to the original object in memory, and the original object is accessed directly by the called function.

10.7 Passing Arrays to Functions
To pass an array argument to a function, specify the array’s name (a reference to the array) without brackets. For example, if array hourlyTemperatureshas been declared as

var hourlyTemperatures = new Array( 24 );
then the function call

modifyArray( hourlyTemperatures );
passes array hourlyTemperaturesto function modifyArray. As stated in Section 10.2, ev-ery array object in JavaScript knows its own size (via the lengthattribute). Thus, when we pass an array object into a function, we do not pass the array’s size separately as an argu-ment. Figure 10.4 demonstrated this concept.
Although entire arrays are passed by reference, individual numeric and boolean array elements are passed by value exactly as simple numeric and boolean variables are passed. Such simple single pieces of data are called scalars, or scalar quantities. Objects referred to by individual array elements are still passed by reference. To pass an array element to a function, use the indexed name of the element as an argument in the function call.
Fora function to receive an array througha function call, thefunction’s parameter list must specify a parameter that will refer to the array in the body of the function. JavaScript does not provide a special syntax forthis purpose—it simply requires that the identifier for the array be specified in the parameter list. For example, the function header for function modifyArraymight be written as

function modifyArray( b )
indicating that modifyArrayexpects to receive a parameter named b. Arrays are passed by reference, and therefore when the called function uses the array name b, it refers to the ac-tual array in the caller (array hourlyTemperaturesin the preceding call). The script in Figures 10.13–10.14 demonstrates the difference between passing an entire array and passing an array element. The bodyof the document in Fig. 10.13 contains the pelements that the script in Fig. 10.14 uses to display the results.

1  <!DOCTYPE html> 2
3  <!-- Fig. 10.13: PassArray.html -->
4  <!-- HTML document that demonstrates passing arrays and --> 5  <!-- individual array elements to functions. -->
6  <html>

Fig. 10.13 | HTMLdocumentthatdemonstratespassingarraysandindividualarrayelementsto functions.(Part1of2.)
10.7 PassingArraystoFunctions   341


7	<head>
8	<meta charset = "utf-8">
9	<title>Arrays as Arguments</title>
10	<link rel = "stylesheet" type = "text/css" href = "style.css"> 11	<script src = "PassArray.js"></script>
12	</head> 13	<body>
14	<h2>Effects of passing entire array by reference</h2> 15	<p id = "originalArray"></p>
16	<p id = "modifiedArray"></p>
17	<h2>Effects of passing array element by value</h2> 18	<p id = "originalElement"></p>
19	<p id = "inModifyElement"></p> 20	<p id = "modifiedElement"></p> 21     </body>
22  </html>















Fig. 10.13 | HTMLdocumentthatdemonstratespassingarraysandindividualarrayelementsto functions.(Part2of2.)

Software Engineering Observation 10.4
JavaScript does not check the number of arguments or types of arguments that are passed to a function. It’s possible to pass any number of values to a function.

When the document of Fig. 10.13 loads, function start(Fig. 10.14, lines 3–20) is called.Lines8–9invokeoutputArraytodisplaythearraya’scontentsbeforeit’smodified. Function outputArray(lines 23–26) receives a string to display, the array to display and the element in which to place the content. Line 25 uses Arraymethod jointo create a string containing all the elements in theArray. Method jointakes as its argument a string containing the separator that should be used to separate the array elements in the string that’s returned. If the argument is not specified, the empty string is used as the separator.
Line 10 invokes modifyArray(lines 29–35) and passes it array a. The function mul-tiplies each element by 2. To illustrate that array a’s elements were modified, lines 11–12 invoke outputArray again to display the array a’s contents after it’s modified. As the screencaptureinFig. 10.13shows,theelementsofaareindeedmodifiedbymodifyArray.
342	Chapter10 JavaScript:Arrays


1  // Fig. 10.14: PassArray.js
2  // Passing arrays and individual array elements to functions. 3  function start()
4  {
5	var a = [ 1, 2, 3, 4, 5 ]; 6
7	// passing entire array
8	outputArray( "Original array: ", a,
9	document.getElementById( "originalArray" ) ); 10     modifyArray( a );  // array a passed by reference 11     outputArray( "Modified array: ", a,
12	document.getElementById( "modifiedArray" ) ); 13
14	// passing individual array element
15	document.getElementById( "originalElement" ).innerHTML = 16         "a[3] before modifyElement: " + a[ 3 ];
17	modifyElement( a[ 3 ] ); // array element a[3] passed by value 18	document.getElementById( "modifiedElement" ).innerHTML =
19	"a[3] after modifyElement: " + a[ 3 ]; 20  } // end function start()
21
22  // outputs heading followed by the contents of "theArray" 23  function outputArray( heading, theArray, output )
24  {
25	output.innerHTML = heading + theArray.join( " " ); 26  } // end function outputArray
27
28  // function that modifies the elements of an array 29  function modifyArray( theArray )
30  {
31	for ( var j in theArray ) 32	{
33	theArray[ j ] *= 2; 34     } // end for
35  } // end function modifyArray 36
37  // function that modifies the value passed 38  function modifyElement( e )
39  {
40	e *= 2; // scales element e only for the duration of the function 41	document.getElementById( "inModifyElement" ).innerHTML =
42	"Value in modifyElement: " + e; 43  } // end function modifyElement
44
45  window.addEventListener( "load", start, false );

Fig. 10.14 | Passingarraysandindividualarrayelementstofunctions.


Lines 15–16 display the value of a[3] before the call to modifyElement. Line 17 invokesmodifyElement(lines38–43),passinga[3]astheargument.Rememberthata[3] actually is one integer value in the array, and that numeric values and boolean values are always passed to functions by value. Therefore, a copy of a[3]is passed. Function modify-Elementmultiplies its argument by 2, stores the result in its parameter e, then displays e’s
10.8 SortingArrayswithArrayMethodsort   343


value. A parameter is a local variable in a function, so when the function terminates, the local variable is no longer accessible. Thus, when control is returned to start, the unmod-ified original value of a[3]is displayed by the statement in lines 18–19.


10.8 Sorting Arrays with ArrayMethod sort
Sorting data (putting data in a particular order, such as ascending or descending) is one of the most important computing functions. The Arrayobject in JavaScript has a built-in method sort for sorting arrays. The example in Figs. 10.15–10.16 demonstrates the Arrayobject’s sortmethod. The unsorted and sorted values are displayed in Figs. 10.15’s paragraph elements (lines 14–15).

1  <!DOCTYPE html> 2
3  <!-- Fig. 10.15: Sort.html -->
4  <!-- HTML5 document that displays the results of sorting an array. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Array Method sort</title>
9	<link rel = "stylesheet" type = "text/css" href = "style.css"> 10	<script src = "Sort.js"></script>
11	</head> 12	<body>
13	<h1>Sorting an Array</h1> 14	<p id = "originalArray"></p> 15	<p id = "sortedArray"></p> 16     </body>
17  </html>










Fig. 10.15 | HTML5documentthatdisplaystheresultsofsortinganarray.

By default, Arraymethod sort(with no arguments) uses string comparisons to deter-minethesortingorderofthearrayelements.ThestringsarecomparedbytheASCIIvalues of their characters. [Note: String comparison is discussed in more detail in Chapter 11.] In this script (Fig. 10.16), we’d like to sort an array of integers.
Method sort(line 9) takes as its argument the name of a comparator function that compares its two arguments and returns one of the following:
•	a negative value if the first argument is less than the second argument,
344	Chapter10 JavaScript:Arrays


1  // Fig. 10.16: Sort.js
2  // Sorting an array with sort. 3  function start()
4  {
5	var a = [ 10, 1, 9, 2, 8, 3, 7, 4, 6, 5 ]; 6
7	outputArray( "Data items in original order: ", a, 8         document.getElementById( "originalArray" ) ); 9	a.sort( compareIntegers ); // sort the array
10	outputArray( "Data items in ascending order: ", a, 11         document.getElementById( "sortedArray" ) );
12  } // end function start 13
14  // output the heading followed by the contents of theArray 15  function outputArray( heading, theArray, output )
16  {
17	output.innerHTML = heading + theArray.join( " " ); 18  } // end function outputArray
19
20  // comparison function for use with sort 21  function compareIntegers( value1, value2 ) 22  {
23	return parseInt( value1 ) - parseInt( value2 ); 24  } // end function compareIntegers
25
26  window.addEventListener( "load", start, false );

Fig. 10.16 | Sortinganarraywithsort.

•	zero if the arguments are equal, or
•	a positive value if the first argument is greater than the second argument.
This example uses the comparator function compareIntegers(defined in lines 21–24). It calculates the difference between the integer values of its two arguments (function parse-Intensures that the arguments are handled properly as integers).
Line 9 invokes Arrayobject a’s sortmethod and passes function compareIntegers as an argument. Method sortthen uses function compareIntegersto compare elements of the array ato determine their sorting order.

Software Engineering Observation 10.5
Functions in JavaScript are considered to be data. Therefore, functions can be assigned to variables, stored in arrays and passed to functions just like other data types.

10.9   Searching Arrays with ArrayMethod indexOf
When working with data stored in arrays, it’s often necessary to determine whether an ar-ray contains a value that matches a certain key value. The process of locating a particular element value in an array is called searching. The Arrayobject in JavaScript has built-in methods indexOfand lastIndexOffor searching arrays. Method indexOfsearches for the first occurrence of the specified key value, and method lastIndexOfsearches for the last occurrence of the specified key value. If the key value is found in the array, each method
10.9 SearchingArrayswithArrayMethodindexOf   345


returns the index of that value; otherwise, -1is returned. The example in Figs. 10.17– 10.18 demonstrates method indexOf. You enter the integer search key in the form’s num-berinput element (Fig. 10.17, line 14) then press the button(lines 15–16) to invoke the script’s buttonPressedfunction, which performs the search and displays the results in the paragraph at line 17.

1  <!DOCTYPE html> 2
3  <!-- Fig. 10.17: search.html -->
4  <!-- HTML5 document for searching an array with indexOf. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Search an Array</title>
9	<script src = "search.js"></script> 10     </head>
11	<body>
12	<form action  = "#">
13	<p><label>Enter integer search key:
14	<input id = "inputVal" type = "number"></label>
15	<input id = "searchButton" type = "button" value = "Search"> 16            </p>
17	<p id = "result"></p> 18         </form>
19	</body>
20  </html>














Fig. 10.17 | HTML5documentforsearchinganarraywithindexOf.

The script in Fig. 10.18 creates an array containing 100 elements (line 3), then ini-tializes the array’s elements with the even integers from 0 to 198 (lines 6–9). When the user presses the buttonin Fig. 10.17, function buttonPressed(lines 12–32) performs the search and displays the results. Line 15 gets the inputValnumberinputelement, which containsthekeyvaluespecifiedbytheuser,andline18 getstheparagraphwherethescript displays the results. Next, we get the integer value entered by the user (line 21). Every inputelement has a valueproperty that can be used to get or set the element’s value.
346	Chapter10 JavaScript:Arrays


Finally, line 22 performs the search by calling method indexOfon the array a, and lines 24–31 display the results.

1  // Fig. 10.18: search.js
2  // Search an array with indexOf.
3  var a = new Array( 100 );  // create an array 4
5  // fill array with even integer values from 0 to 198 6  for ( var i = 0; i < a.length; ++i )
7  {
8	a[ i ] = 2 * i; 9  } // end for
10
11  // function called when "Search" button is pressed 12  function buttonPressed()
13  {
14	// get the input text field
15	var inputVal = document.getElementById( "inputVal" ); 16
17	// get the result paragraph
18	var result = document.getElementById( "result" ); 19
20	// get the search key from the input text field then perform the search 21	var searchKey = parseInt( inputVal.value );
22	var element = a.indexOf( searchKey ); 23
24	if ( element != -1 ) 25	{
26	result.innerHTML = "Found value in element " + element; 27     } // end if
28	else 29	{
30	result.innerHTML = "Value not found"; 31     } // end else
32  } // end function buttonPressed 33
34  // register searchButton's click event handler 35  function start()
36  {
37	var searchButton = document.getElementById( "searchButton" ); 38	searchButton.addEventListener( "click", buttonPressed, false ); 39  } // end function start
40
41  window.addEventListener( "load", start, false );

Fig. 10.18 | SearchanarraywithindexOf.

Optional Second Argument to indexOfand lastIndexOf
You can pass an optional second argument to methods indexOfand lastIndexOfthat represents the index from which to start the search. By default, this argument’s value is 0 and the methods search the entire array. If the argument is greater than or equal to the array’s length, the methods simply return -1. If the argument’s value is negative, it’s used as an offset from the end of the array. For example, the 100-element array in Fig. 10.18
10.10 MultidimensionalArrays   347


has indices from 0 to 99. If we pass -10as the second argument, the search will begin from index 89. If a negative second argument results in an index value less than 0 as the start point, the entire array will be searched.

10.10  Multidimensional Arrays
Multidimensional arrays with two indices are often used to represent tables of values con-sisting of information arranged in rows and columns. To identify a particular table ele-ment, wemustspecifythetwoindices;by convention,thefirstidentifiestheelement’srow and the second the element’s column. Arrays that require two indices to identify a partic-ular element are called two-dimensional arrays.
Multidimensionalarrayscanhavemorethantwodimensions.JavaScriptdoesnotsup-port multidimensional arrays directly, but it does allow you to specify arrays whose ele-ments are also arrays, thus achieving the same effect. When an array contains one-dimensional arrays as its elements, we can imagine these one-dimensional arrays as rows of a table, and the positions in these arrays as columns. Figure 10.19 illustrates a two-dimensionalarraynamedathatcontainsthreerowsandfourcolumns(i.e.,athree-by-four array—three one-dimensional arrays, each with four elements). In general, an array with m rows and n columns is called an m-by-n array.
Every element in array ais identified in Fig. 10.19 by an element name of the form a[row][column]—ais the name of the array, and rowand columnare the indices that uniquely identify the row and column, respectively, of each element in a. The element names in row 0 all have a first index of 0; the element names in column 3 all have a second index of 3.



Column0

Row0 a[ 0 ][ 0 ]

Row1  a[ 1 ][ 0 ]

Row2  a[ 2 ][ 0 ]

Column1

a[ 0 ][ 1 ]

a[ 1 ][ 1 ]

a[ 2 ][ 1 ]

Column2

a[ 0 ][ 2 ]

a[ 1 ][ 2 ]

a[ 2 ][ 2 ]

Column3

a[ 0 ][ 3 ]

a[ 1 ][ 3 ]

a[ 2 ][ 3 ]



Columnsubscript Rowsubscript Arrayname

Fig. 10.19 | Two-dimensionalarraywiththreerowsandfourcolumns.

Arrays of One-Dimensional Arrays Multidimensionalarrayscanbeinitializedindeclarationslikeaone-dimensionalarray.Array bwith two rows and two columns could be declared and initialized with the statement

var b = [ [ 1, 2 ], [ 3, 4 ] ];
The values are grouped by row in square brackets. The array [1,2]initializes element b[0], and the array [3,4]initializes element b[1]. So 1and 2initialize b[0][0]and b[0][1], respectively. Similarly, 3and 4initialize b[1][0]and b[1][1], respectively. The
348	Chapter10 JavaScript:Arrays


interpreterdeterminesthenumberofrowsbycountingthenumberofsubinitializerlists— arrays nested within the outermost array. The interpreter determines the number of col-umnsineachrowbycountingthenumberofvaluesinthesubarraythatinitializestherow.

Two-Dimensional Arrays with Rows of Different Lengths
The rows of a two-dimensional array can vary in length. The declaration

var b = [ [ 1, 2 ], [ 3, 4, 5 ] ];
creates array bwith row 0containing two elements (1and 2) and row 1containing three elements (3, 4and 5).

Creating Two-Dimensional Arrays with new
A multidimensional array in which each row has a different number of columns can be al-located dynamically, as follows:

var b;
b = new Array( 2 );	// allocate two rows
b[ 0 ] = new Array( 5 ); // allocate columns for row 0 b[ 1 ] = new Array( 3 ); // allocate columns for row 1
The preceding code creates a two-dimensional array with two rows. Row 0has five col-umns, and row 1has three columns.

Two-Dimensional Array Example: Displaying Element Values
The example in Figs. 10.20–10.21 initializes two-dimensional arrays in declarations and uses nested for…inloops to traverse the arrays (i.e., manipulate every element of the ar-ray). When the document in Fig. 10.20 loads, the script’s startfunction displays the re-sults of initializing the arrays.
The script’s startfunction declares and initializes two arrays (Fig. 10.21, lines 5–9). Thedeclarationofarray1(lines5–6)providessixinitializersintwosublists.Thefirstsublist


1  <!DOCTYPE html> 2
3  <!-- Fig. 10.20: InitArray3.html -->
4  <!-- HTML5 document showing multidimensional array initialization. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Multidimensional Arrays</title>
9	<link rel = "stylesheet" type = "text/css" href = "style.css"> 10	<script src = "InitArray3.js"></script>
11	</head> 12	<body>
13	<h2>Values in array1 by row</h2> 14	<div id = "output1"></div>
15	<h2>Values in array2 by row</h2> 16	<div id = "output2"></div>
17	</body>
18  </html>

Fig. 10.20 | HTML5documentshowingmultidimensionalarrayinitialization.(Part1of2.)
10.10 MultidimensionalArrays   349
















Fig. 10.20 | HTML5documentshowingmultidimensionalarrayinitialization.(Part2of2.)

initializes row 0 of the array to the values 1, 2 and 3; the second sublist initializes row 1 of the array to the values 4, 5 and 6. The declaration of array2(lines 7–9) provides six initial-izersinthreesublists.Thesublistforrow0explicitlyinitializestherowtohavetwoelements, with values 1 and 2, respectively. The sublist for row 1 initializes the row to have one ele-ment, with value 3. The sublist for row 2 initializes the third row to the values 4, 5 and 6.

1  // Fig. 10.21: InitArray3.js
2  // Initializing multidimensional arrays. 3  function start()
4  {
5	var array1 = [ [ 1, 2, 3 ], // row 0
6	[ 4, 5, 6 ] ]; // row 1 7     var array2 = [ [ 1, 2 ], // row 0
8	[ 3 ], // row 1
9	[ 4, 5, 6 ] ]; // row 2 10
11	outputArray( "Values in array1 by row", array1, 12         document.getElementById( "output1" ) );
13	outputArray( "Values in array2 by row", array2, 14         document.getElementById( "output2" ) );
15  } // end function start 16
17  // display array contents
18  function outputArray( heading, theArray, output ) 19  {
20	var results = ""; 21
22	// iterates through the set of one-dimensional arrays 23	for ( var row in theArray )
24	{
25	results += "<ol>"; // start ordered list
26

Fig. 10.21 | Initializingmultidimensionalarrays.(Part1of2.)
350	Chapter10 JavaScript:Arrays


27	// iterates through the elements of each one-dimensional array 28	for ( var column in theArray[ row ] )
29	{
30	results += "<li>" + theArray[ row ][ column ] + "</li>"; 31         } // end inner for
32
33	results += "</ol>"; // end ordered list 34     } // end outer for
35
36	output.innerHTML = results; 37  } // end function outputArray 38
39  window.addEventListener( "load", start, false );

Fig. 10.21 | Initializingmultidimensionalarrays.(Part2of2.)

Function startcalls functionoutputArraytwice(lines11–14) todisplayeacharray’s elements in the web page. Function outputArray(lines 18–37) receives a string heading to output before the array, the array to output (called theArray) and the element in which todisplaythearray. The function usesa nestedfor…instatement(lines 23–34) tooutput each row of a two-dimensional array as an ordered list. Using CSS, we set each list item’s displayproperty to inlineso that the list items appear unnumbered from left to right on the page, rather than numbered and listed vertically (the default). The outer for…in statement iterates over the rows of the array. The inner for…instatement iterates over the columns of the current row being processed. The nested for…instatement in this example could have been written with forstatements, as follows:

var numberOfRows = theArray.length;

for ( var row = 0; row < numberOfRows; ++row ) {
results += "<ol>"; // start ordered list
var numberOfcolumns = theArray[ row ].length;

for ( var column = 0; j < numberOfcolumns; ++j ) {
results += "<li>" + theArray[ row ][ column ] + "</li>"; } // end inner for

results += "</ol>"; // end ordered list } // end outer for
Justbeforetheouterforstatement,theexpressiontheArray.lengthdeterminesthenum-ber of rows in the array. Just before the inner for statement, the expression theAr-ray[row].lengthdetermines the number of columns in the current row of the array. This enables the loop to determine, for each row, the exact number of columns.

Common Multidimensional-Array Manipulations with forand for…inStatements Many common array manipulations use foror for…inrepetition statements. For exam-ple, the following forstatement sets all the elements in row 2 of array ain Fig. 10.19 to zero:
10.10 MultidimensionalArrays   351


var columns = a[ 2 ].length;

for ( var col = 0; col < columns; ++col ) {
a[ 2 ][ col ] = 0; }
We specified row 2; therefore, we know that the first index is always 2. The forloop varies only the second index (i.e., the column index). The preceding forstatement is equivalent to the assignment statements

a[ 2 ][ 0 ] = 0; a[ 2 ][ 1 ] = 0; a[ 2 ][ 2 ] = 0; a[ 2 ][ 3 ] = 0;

The following for…instatement is also equivalent to the preceding forstatement:

for ( var col in a[ 2 ] ) {
a[ 2 ][ col ] = 0; }

The following nested forstatement determines the total of all the elements in array a:

var total = 0;
var rows = a.length;

for ( var row = 0; row < rows; ++row ) {
var columns = a[ row ].length;

for ( var col = 0; col < columns; ++col ) {
total += a[ row ][ col ]; }
}

The forstatement totals the elements of the array, one row at a time. The outer forstate-ment begins by setting the rowindex to 0, so that the elements of row 0 may be totaled by the inner forstatement. The outer forstatement then increments rowto 1, so that the elements of row 1 can be totaled. Then the outer forstatement increments rowto 2, so that the elements of row 2 can be totaled. The result can be displayed when the nested for statement terminates. The preceding forstatement is equivalent to the following for…in statement:

var total = 0;

for ( var row in a ) {
for ( var col in a[ row ] ) {
total += a[ row ][ col ]; }
}
352	Chapter10 JavaScript:Arrays


Summary
Section 10.1 Introduction
•  Arrays (p. 325) are data structures consisting of related data items (sometimes called collections of data items.
•  JavaScript arrays are “dynamic” entities in that they can change size after they’re created.

Section 10.2 Arrays
•  An array is a group of memory locations that all have the same name and normally are of the same type (although this attribute is not required in JavaScript).
•  Each individual location is called an element (p. 325). Any one of these elements may be referred to by giving the name of the array followed by the position number (an integer normally referred to as the index, p. 325) of the element in square brackets ([]).
•  Thefirstelementin every array isthe zerothelement(p. 325).Ingeneral,theithelementofarray cis referred to as c[i-1]. Array names (p. 325) follow the same conventions as other identifiers.
•  Anindexedarray name canbe usedon theleftsideof anassignmentto place anew value(p. 326) into an array element. It can also be used on the right side of an assignment operation to assign its value to another variable.
•  Every array in JavaScript knows its own length (p. 325), which it stores in its lengthattribute.

Section 10.3 Declaring and Allocating Arrays
•  JavaScript arrays are represented by Arrayobjects (p. 327).
•  Arrays are created with operator new(p. 327).

Section 10.4 Examples Using Arrays
•  To link a JavaScript file to an HTML document, use the scriptelement’s srcattribute (p. 327) to specify the location of the JavaScript file.
•  Zero-based counting is usually used to iterate through arrays.
•  JavaScript automatically reallocates an array when a value is assigned to an element that’s outside the bounds of the original array. Elements between the last element of the original array and the new element have undefined values.
•  Arrayscanbecreatedusingacomma-separatedinitializerlist(p. 330)enclosedinsquarebrackets ([and ]). The array’s size is determined by the number of values in the initializer list.
•  The initial values of an array can also be specified as arguments in the parentheses following new Array. The size of the array is determined by the number of values in parentheses.
•  JavaScript’s for…instatement (p. 334) enables a script to perform a task for each element in an array. This process is known as iterating over the elements of an array.

Section 10.5 Random Image Generator Using Arrays
•  We create a more elegant random image generator than the one in Chapter 9 that does not re-quiretheimagefilenamestobeintegersby usingapicturesarraytostorethenamesoftheimage files as strings and accessing the array using a randomized index.

Section 10.6 References and Reference Parameters
•  Two ways to pass arguments to functions (or methods) in many programming languages are pass-by-value and pass-by-reference (p. 339).
Summary   353


•  When an argument is passed to a function by value, a copy of the argument’s value is made and is passed to the called function.
•  In JavaScript, numbers, boolean values and strings are passed to functions by value.
•  With pass-by-reference, the caller gives the called function access to the caller’s data and allows it to modify the data if it so chooses. Pass-by-reference can improve performance because it can eliminate the overhead of copying large amounts of data, but it can weaken security because the called function can access the caller’s data.
•  In JavaScript, all objects (and thus all arrays) are passed to functions by reference.
•  The name of an array is actually a reference to an object that contains the array elements and the lengthvariable, which indicates the number of elements in the array.

Section 10.7 Passing Arrays to Functions
•  To pass an array argument to a function, specify the name of the array (a reference to the array) without brackets.
•  Although entire arrays are passed by reference, individual numeric and boolean array elements arepassedby valueexactlyassimplenumeric andbooleanvariablesarepassed.Suchsimplesingle pieces of data are called scalars, or scalar quantities (p. 340). To pass an array element to a func-tion, use the indexed name of the element as an argument in the function call.
•  Methodjoin(p. 341) takesas its argumentastringcontainingtheseparator(p. 341)thatshould be used to separate the elements of the array in the string that’s returned. If the argument is not specified, the empty string is used as the separator.

Section 10.8 Sorting Arrays with ArrayMethod sort
•  Sorting data (putting data in a particular order, such as ascending or descending, p. 343) is one of the most important computing functions.
•  The Arrayobject in JavaScript has a built-in method sort(p. 343) for sorting arrays.
•  By default, Arraymethod sort(with no arguments) uses string comparisons to determine the sorting order of the array elements.
•  Method sorttakes as its optional argument the name of a function (called the comparator func-tion, p. 343) that compares its two arguments and returns a negative value, zero, or a positive value, if the first argument is less than, equal to, or greater than the second, respectively.
•  Functions in JavaScript are considered to be data. Therefore, functions can be assigned to vari-ables, stored in arrays and passed to functions just like other data types.

Section 10.9 Searching Arrays with ArrayMethod indexOf
•  ArraymethodindexOf(p.344)searchesforthefirstoccurrenceofavalueand,iffound,returnsthe value’s array index; otherwise, it returns -1. Method lastIndexOfsearches for the last occurrence.

Section 10.10 Multidimensional Arrays
•  To identify a particular two-dimensional multidimensional array element, we must specify the two indices; by convention, the first identifies the element’s row (p. 347) and the second the el-ement’s column (p. 347).
•  In general, an array with m rows and n columns is called an m-by-n array (p. 347).
•  Every elementin a two-dimensional array (p. 347) is accessed usingan elementname of theform a[row][column]; ais the name of the array, and rowand columnare the indices that uniquely identify the row and column, respectively, of each element in a.
•  Multidimensional arrays are maintained as arrays of arrays.
354	Chapter10 JavaScript:Arrays


Self-Review Exercises

10.1	Fill in the blanks in each of the following statements: a)  Lists and tables of values can be stored in	.
b)  The number used to refer to a particular element of an array is called its c)   The process of putting the elements of an array in order is called
d)  Determining whether an array contains a certain key value is called
e)   An array that uses two indices is referred to as a(n)	array.



. the array.
the array.

10.2	 State whether each of the following is true or false. If false, explain why. a)  An array can store many different types of values.
b)  An array index should normally be a floating-point value.
c)   An individual array element that’s passed to a function and modified in it will contain the modified value when the called function completes execution.
10.3	Write JavaScript statements (regarding array fractions) to accomplish each of the follow-ing tasks:
a)  Declare an array with 10 elements, and initialize the elements of the array to 0. b)  Refer to element 3 of the array.
c)   Refer to array element 4.
d)  Assign the value 1.667to array element 9.
e)   Assign the value 3.333to the lowest-numbered element of the array.
f)   Sumall the elements of the array, usinga for…instatement. Definevariable xas a con-trol variable for the loop.
10.4	Write JavaScript statements (regarding array table) to accomplish each of the following tasks:
a)  Declare and create the array with three rows and three columns. b)  Store the total number of elements in variable totalElements.
c)   Use a for…instatement to initialize each element of the array to the sum of its row and column indices. Assume that the variables xand yare declared as control variables.
10.5	Find the error(s) in each of the following program segments, and correct them. a)  var b = new Array( 10 );
var length = b.length;

for ( var i = 0; i <= length; ++i ) {
b[ i ] = 1;
}
b)  var a = [ [ 1, 2 ], [ 3, 4 ] ]; a[ 1, 1 ] = 5;

Answers to Self-Review Exercises
10.1	a)  arrays.  b) index. c) sorting.  d) searching.  e) two-dimensional.
10.2	a)  True. b). False. An array index must be an integer or an integer expression. c) False. In-dividual primitive-data-type elements are passed by value. If a reference to an array is passed, then modifications to the elements of the array are reflected in the original element of the array. Also, an individual element of an object type passed to a function is passed by reference, and changes to the object will be reflected in the original array element.
10.3	 a)  var fractions = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]; b)  fractions[ 3 ]
Exercises   355


c)   fractions[ 4 ]
d)  fractions[ 9 ] = 1.667; e)   fractions[ 6 ] = 3.333; f)   var total = 0;
for ( var x in fractions ) {
total += fractions[ x ]; }
10.4	a)  var table = new Array( new Array( 3 ), new Array( 3 ), new Array( 3 ) );
b)  var totalElements = table.length * table[ 0 ].length; c)   for ( var x in table )
{
for ( var y in table[ x ] ) {
table[ x ][ y ] = x + y; }
}
10.5	a)  Error:Referencinganarrayelementoutsidetheboundsofthearray(b[10]).[Note:This is actually a logic error, not a syntax error.] Correction: Change the <=operator to <. b ) Error: The array indexing is done incorrectly. Correction: Change the statement to a[1][1] = 5;.

Exercises

10.6	Fill in the blanks in each of the following statements: a)  JavaScript stores lists of values in	.
b)  The names of the four elements of array p are	,	, .
c)   In a two-dimensional array, by convention the first index identifies the element, and the second index identifies the	of an element.
d)  An m-by-n array contains	rows,	columns and
e)   The name the element in row 3 and column 5 of array dis	.



and

of an

elements.

10.7	State whether each of the following is true or false. If false, explain why.
a)  To refer to a particular location or element in an array, we specify the name of the array and the value of the element.
b)  A variable declaration reserves space for an array.
c)   To indicate that 100 locations should be reserved for integer array p, the programmer should write the declaration
p[ 100 ];
d)  A JavaScript program that initializes the elements of a 15-element array to zero must contain at least one forstatement.
e)   A JavaScript program that totals the elements of a two-dimensional array must contain nested forstatements.
10.8	Write JavaScript statements to accomplish each of the following tasks: a)  Display the value of the seventh element of array f.
b)  Initialize each of the five elements of one-dimensional array gto 8. c)   Total the elements of array c, which contains 100 numeric elements.
d)  Copy 11-element array ainto the first portion of array b, which contains 34 elements. e)   Determine and print the smallest and largest values contained in 99-element floating-
point array w.
356	Chapter10 JavaScript:Arrays


10.9	 Consider a two-by-three array tthat will store integers. a)  Write a statement that declares and creates array t. b)  How many rows does thave?
c)   How many columns does thave? d)  How many elements does thave?
e)   Write the names of all the elements in row 1 of t.
f)   Write the names of all the elements in the third column of t.
g)  Write a single statement that sets the element of tin row 1 and column 2 to zero.
h)  Write a series of statements that initializes each element of tto zero. Do not use a rep-etition statement.
i)   Write a nested forstatement that initializes each element of tto zero.
j)   Write a series of statements that determines and prints the smallest value in array t. k)  Write a nonrepetition statement that displays the elements of the first row of t.
l)   Write a series of statements that prints the array tin neat, tabular format. List the col-umn indices as headings across the top, and list the row indices at the left of each row.

10.10   Useaone-dimensionalarray tosolvethefollowingproblem:Acompanypaysitssalespeople on a commission basis. The salespeople receive $200 per week plus 9 percent of their gross sales for that week. For example, a salesperson who grosses $5000 in sales in a week receives $200 plus 9 per-cent of $5000, or a total of $650. Write a script (using an array of counters) that obtains the gross sales for each employee through an HTML5 form and determines how many of the salespeople earned salaries in each of the following ranges (assume that each salesperson’s salary is truncated to an integer amount):
a)  $200–299 b)  $300–399 c)   $400–499 d)  $500–599 e)   $600–699 f)   $700–799 g)  $800–899 h)  $900–999
i)   $1000 and over

10.11   Write statements that perform the following operations for a one-dimensional array: a)  Set the 10 elements of array countsto zeros.
b)  Add 1 to each of the 15 elements of array bonus.
c)   Display the five values of array bestScores, separated by spaces.

10.12   Use a one-dimensional array to solve the following problem: Read in 10 numbers, each of whichisbetween10and100.Aseachnumberisread,printitonlyifit’snotaduplicateofanumber that has already been read. Provide for the “worst case,” in which all 10 numbers are different. Use the smallest possible array to solve this problem.

10.13   Label the elements of three-by-five two-dimensional array salesto indicate the order in which they’re set to zero by the following program segment:
for ( var row in sales ) {
for ( var col in sales[ row ] ) {
sales[ row ][ col ] = 0; }
}
Exercises   357


10.14   Write a script to simulate the rolling of two dice. The script should use Math.randomto roll the first die and again to roll the second die. The sum of the two values should then be calculated. [Note: Since each die can show an integer value from 1 to 6, the sum of the values will vary from 2 to 12, with 7 being the most frequent sum, and 2 and 12 the least frequent sums. Figure 10.22 shows the 36 possible combinations of the two dice. Your program should roll the dice 36,000 times. Use a one-dimensional array to tally the number of times each possible sum appears. Display the results in an HTML5 table. Also determine whether the totals are reasonable (e.g., there are six ways to roll a 7, so approximately 1/6 of all the rolls should be 7).]

0  1  2  3  4  5  6  7
0
1	2	1
2	3	0 3                K
4	4	7 5             5     6
6 7

Fig. 10.22 | The36possiblecombinationsofthetwodice.

10.15   (Turtle Graphics) The Logo language, which is popular among young computer users, made the concept of turtle graphics famous. Imagine a mechanical turtle that walks around the room under the control of a JavaScript program. The turtle holds a pen in one of two positions, up or down. When the pen is down, the turtle traces out shapes as it moves; when the pen is up, the turtle moves about freely without writing anything. In this problem, you’ll simulate the operation of the turtle and create a computerized sketchpad as well.
Use a 20-by-20 array floorthat’s initialized to zeros. Read commands from an array that con-tains them. Keep track of the current position of the turtle at all times and of whether the pen is currently up or down. Assume that the turtle always starts at position (0, 0) of the floor, with its pen up. The set of turtle commands your script must process are as in Fig. 10.23.
Suppose that the turtle is somewhere near the center of the floor. The following “program” would draw and print a 12-by-12 square, then leave the pen in the up position:



Command

1
2
3
4 5,10 6
9

Meaning

Pen up Pen down Turn right Turn left
Move forward 10 spaces (or a number other than 10) Print the 20-by-20 array
End of data (sentinel)


Fig. 10.23 | Turtle-graphicscommands.
358	Chapter10 JavaScript:Arrays


2 5,12 3 5,12 3 5,12 3 5,12 1
6 9
As the turtle moves with the pen down, set the appropriate elements of array floorto 1s. When the 6command (print) is given, display an asterisk or some other character of your choosing wherever there’s a 1in the array. Wherever there’s a zero, display a blank. Write a script to implement the tur-tle-graphics capabilities discussed here. Write several turtle-graphics programs to draw interesting shapes. Add other commands to increase the power of your turtle-graphics language.
10.16   (The Sieve of Eratosthenes) A prime integer is an integer greater than 1 that’s evenly divis-ible only by itself and 1. The Sieve of Eratosthenes is an algorithm for finding prime numbers. It operates as follows:
a)  Create an array with all elements initialized to 1 (true). Array elements with prime in-dices will remain as 1. All other array elements will eventually be set to zero.
b)  Set the first two elements to zero, since 0 and 1 are not prime. Starting with array index 2, every time an array element is found whose value is 1, loop through the remainder of the array and set to zero every element whose index is a multiple of the index for the element with value 1. For array index 2, all elements beyond 2 in the array that are mul-tiples of 2 will be set to zero (indices 4, 6, 8, 10, etc.); for array index 3, all elements beyond 3 in the array that are multiples of 3 will be set to zero (indices 6, 9, 12, 15, etc.); and so on.
When this process is complete, the array elements that are still set to 1 indicate that the index is a prime number. These indices can then be printed. Write a script that uses an array of 1000 ele-ments to determine and print the prime numbers between 1 and 999. Ignore element 0 of the array.
10.17   ((Simulation: The Tortoise and the Hare) In this problem, you’ll re-create one of the truly great moments in history, namely the classic race of the tortoise and the hare. You’ll use random number generation to develop a simulation of this memorable event.
Our contenders begin the race at square 1 of 70 squares. Each square represents a possible position along the race course. The finish line is at square 70. The first contender to reach or pass square 70 is rewarded with a pail of fresh carrots and lettuce. The course weaves its way up the side of a slippery mountain, so occasionally the contenders lose ground.
There’s a clock that ticks once per second. With each tick of the clock, your script should adjust the position of the animals according to the rules in Fig. 10.24.



Animal

Tortoise

Movetype

Fast plod Slip
Slow plod

Percentageofthetime

50% 20%
30%

Actualmove

3 squares to the right 6 squares to the left
1 square to the right


Fig. 10.24 | Rulesforadjustingthepositionofthetortoiseandthehare.(Part1of2.)
Exercises   359



Animal	Movetype

Hare	Sleep Big hop Big slip
Small hop
Small slip

Percentageofthetime

20% 20% 10% 30%
20%

Actualmove

No move at all
9 squares to the right 12 squares to the left 1 square to the right
2 squares to the left


Fig. 10.24 | Rulesforadjustingthepositionofthetortoiseandthehare.(Part2of2.)

Use variables to keep track of the positions of the animals (i.e., position numbers are 1–70). Start each animal at position 1 (i.e., the “starting gate”). If an animal slips left before square 1, move the animal back to square 1.
Generate  the  percentages  in  Fig. 10.24  by  producing  a  random  integer  i  in  the  range 1 £i £10. For the tortoise, perform a “fast plod” when 1 £i £5, a “slip” when 6 £i £7 and a “slow plod” when 8 £i £10. Use a similar technique to move the hare.
Begin the race by printing

BANG !!!!!
AND THEY'RE OFF !!!!!
Then, for each tick of the clock (i.e., each repetition of a loop), print a 70-position line show-ing the letter Tin the position of the tortoise and the letter Hin the position of the hare. Occa-sionally, the contenders will land on the same square. In this case, the tortoise bites the hare, and your script should print OUCH!!!beginning at that position. All print positions other than the T the Hor the OUCH!!!(in case of a tie) should be blank.
,
After each line is printed, test whether either animal has reached or passed square 70. If so, print the winner, and terminate the simulation. If the tortoise wins, print TORTOISEWINS!!!YAY!!! If the hare wins, print Harewins.Yuck!If both animals win on the same tick of the clock, you may want to favor the turtle (the “underdog”), or you may want to print It'satie. If neither animal wins, perform the loop again to simulate the next tick of the clock. When you’re ready to run your script, assemble a group of fans to watch the race. You’ll be amazed at how involved your audience gets!
Later in the book, we introduce a number of Dynamic HTML capabilities, such as graphics, images, animation and sound. As you study those features, you might enjoy enhancing your tor-toise-and-hare contest simulation.
11 JavaScript:Objects
My object all sublime I shall achieve in time.
—W. S. Gilbert

Is it a world to hide virtues in? —William Shakespeare


Objectives Inthischapteryou’ll:
ÿ   Learnobject-based programmingterminology
andconcepts.
ÿ   Learntheconceptsof encapsulationanddata
hiding.
ÿ   Learnthevalueofobject
orientation.
ÿ   Usethemethodsofthe JavaScriptobjectsMath, String,Date,Boolean
.
andNumber
ÿ   UseHTML5webstorageto createawebapplicationthat
storesuserdatalocally.
ÿ   Representobjectssimply
usingJSON.
11.1 Introduction   361



11.1  Introduction 11.2  MathObject 11.3  StringObject
11.3.1FundamentalsofCharactersand
Strings 11.3.2MethodsoftheStringObject 11.3.3Character-ProcessingMethods 11.3.4SearchingMethods
11.3.5SplittingStringsandObtaining
Substrings

11.4  DateObject
11.5  BooleanandNumberObjects 11.6  document Object
11.7  FavoriteTwitterSearches:HTML5 WebStorage
11.8  UsingJSONtoRepresentObjects


Summary | Self-Review Exercise | Answers to Self-Review Exercise | Exercises Special Section: Challenging String-Manipulation Projects


11.1 Introduction
This chapterpresents a more formal treatment of objects. We presented abrief introduction toobject-orientedprogrammingconceptsinChapter 1.Thischapteroverviews—andserves asareferencefor—severalofJavaScript’sbuilt-inobjectsanddemonstratesmanyoftheirca-pabilities. We use HTML5’s new web storage capabilities to create a web application that stores a user’s favorite Twitter searches on the computer for easy access at a later time. We alsoprovideabriefintroductiontoJSON,ameansforcreatingJavaScriptobjects—typically for transferring data over the Internet between client-side and server-side programs (a tech-nique we discuss in Chapter 16). In subsequent chapters on the Document Object Model and JavaScript Events, you’ll work with many objects provided by the browser that enable scripts to manipulate the elements of an HTML5 document.

11.2 MathObject
The Mathobject’s methods enable you to conveniently perform many common mathe-matical calculations. As shown previously, an object’s methods are called by writing the name of the object followed by a dot (.) and the name of the method. In parentheses fol-lowing the method name are arguments to the method. For example, to calculate the square root of 900you might write

var result = Math.sqrt( 900 );
which first calls method Math.sqrtto calculate the square root of the number contained in the parentheses (900), then assigns the result to a variable. The number 900is the argu-ment of the Math.sqrtmethod. The above statement would return 30. Some Math-object methods are summarized in Fig. 11.1.

Software Engineering Observation 11.1
The difference between invoking a stand-alone function and invoking a method of an object is that an object name and a dot are not required to call a stand-alone function.

The Mathobject defines several properties that represent commonly used mathemat-ical constants. These are summarized in Fig. 11.2. [Note: By convention, the names of constants are written in all uppercase letters so that they stand out in a program.]
362	Chapter11 JavaScript:Objects



Method

abs( x )


ceil( x )

cos( x )

exp( x )


floor( x )

log( x )

max( x, y )

min( x, y )

pow( x, y )

round( x )

sin( x )

sqrt( x )

tan( x )

Description

Absolute value of x.


Rounds xto the smallest integer not less than x.
Trigonometric cosine of x (xin radians). Exponential method ex.

Rounds xto the largest integer not greater than x.
Natural logarithm of x (base e).
Larger value of xand y
.

Smaller value of xand y
.

xraised to power y(xy).

Rounds xto the closest integer.
Trigonometric sine of x (xin radians).
Square root of x.

Trigonometric tangent of x(xin radians).

Examples

abs( 7.2)is 7.2 abs( 0 )is 0 abs( -5.6 )is 5.6
ceil( 9.2 )is 10 ceil( -9.8 )is -9.0
cos( 0 )is 1

exp( 1 )is 2.71828 exp( 2 )is 7.38906
floor( 9.2 )is 9 floor( -9.8 )is -10.0
log( 2.718282 )is 1 log( 7.389056 )is 2
max( 2.3, 12.7 )is 12.7 max( -2.3, -12.7 )is -2.3
min( 2.3, 12.7 )is 2.3 min( -2.3, -12.7 )is -12.7
pow( 2, 7 )is 128 pow( 9, .5 )is 3.0
round( 9.75 )is 10 round( 9.25 )is 9
sin( 0 )is 0

sqrt( 900 )is 30 sqrt( 9 ) is 3
tan( 0 )is 0


Fig. 11.1  | Mathobjectmethods.


Constant

Math.E
Math.LN2
Math.LN10
Math.LOG2E
Math.LOG10E
Math.PI

Math.SQRT1_2
Math.SQRT2

Description

Base of a natural logarithm (e). Natural logarithm of 2. Natural logarithm of 10.
Base 2 logarithm of e. Base 10 logarithm of e.
p—the ratio of a circle’s circumference to its diameter.
Square root of 0.5.
Square root of 2.0.

Value

Approximately 2.718 Approximately 0.693 Approximately 2.302 Approximately 1.442 Approximately 0.434
Approximately 3.141592653589793
Approximately 0.707
Approximately 1.414


Fig. 11.2 | PropertiesoftheMathobject.
11.3 StringObject   363

11.3 StringObject
In this section, weintroduce JavaScript’s string- andcharacter-processing capabilities. The techniquesdiscussedhereareappropriateforprocessingnames,addresses,telephonenum-bers and other text-based data.

11.3.1 Fundamentals of Characters and Strings
Characters are the building blocks of JavaScript programs. Every program is composed of asequenceof charactersgroupedtogethermeaningfullythat’sinterpretedbythecomputer as a series of instructions used to accomplish a task.
A string is a series of characters treated as a single unit. A string may include letters, digits and various special characters, such as +, -, *, /, and $. JavaScript supports the set of characters called Unicode®, which represents a large portion of the world’s languages. (We discuss Unicode in detail in Appendix F.) A string is an object of type String. String literals or string constants are written as a sequence of characters in double or single quo-tation marks, as follows:


"John Q. Doe" '9999 Main Street'
"Waltham, Massachusetts" '(201) 555-1212'

(a name)
(a street address) (a city and state)
(a telephone number)

A Stringmay be assigned to a variable in a declaration. The declaration

var color = "blue";
initializes variablecolorwith the Stringobject containingthestring"blue". Strings can be compared via the relational (<, <=, >and >=) and equality operators (==, ===, !=and !==). The comparisons are based on the Unicode values of the corresponding characters. For example, the expression "h"<"H"evaluates to false because lowercase letters have higher Unicode values.

11.3.2 Methods of the StringObject
The Stringobject encapsulates the attributes and behaviors of a string of characters. It pro-vides many methods (behaviors) that accomplish useful tasks such as selecting characters from a string, combining strings (called concatenation), obtaining substrings (portions) of a string,searchingforsubstringswithinastring,tokenizingstrings(i.e.,splittingstringsintoin-dividual words) and converting strings to all uppercase or lowercase letters. The Stringob-jectalsoprovidesseveralmethodsthatgenerateHTML5tags.Figure 11.3summarizesmany Stringmethods. Figures 11.4–11.9 demonstrate some of these methods.



Method

charAt( index )

Description

Returns a string containing the character at the specified index. If there’s no character at the index, charAtreturns an empty string. The first character is located at index 0.


Fig. 11.3   | SomeString-objectmethods.(Part1of2.)
364	Chapter11 JavaScript:Objects



Method

charCodeAt( index )

concat( string )




fromCharCode(
value1, value2, …)
indexOf(
substring, index )



lastIndexOf( substring, index )




replace(searchString, replaceString )

slice( start, end )






split( string )


substr(
start, length )


substring( start, end )
toLowerCase()

toUpperCase()

Description

Returns the Unicode value of the character at the specified index, or NaN(not a number) if there’s no character at that index.
Concatenates its argument to the end of the string on which the method is invoked. The original string is not modified; instead a new Stringis returned. This method is the same as adding two strings with the string-concatenation operator +(e.g., s1.con-cat(s2)is the same as s1+s2).
Converts a list of Unicode values into a string containing the cor-responding characters.
Searches for the first occurrence of substring starting from posi-tion index in the string that invokes the method. The method returns the starting index of substring in the source string or –1 if substring is not found. If the index argument is not provided, the method begins searching from index 0 in the source string.
Searches for the last occurrence of substring starting from posi-tion index and searching toward the beginning of the string that invokes the method. The method returns the starting index of substring in the source string or –1 if substring is not found. If the index argument is not provided, the method begins searching from the end of the source string.
Searches for the substring searchString, replaces the first occur-rence with replaceString and returns the modified string, or returns the original string if no replacement was made.
Returns a string containing the portion of the string from index start through index end. If the end index is not specified, the method returns a string from the start index to the end of the source string. A negative end index specifies an offset from the end of the string, starting from a position one past the end of the last character (so –1 indicates the last character position in the string).
Splits the source string into an array of strings (tokens), where its string argument specifies the delimiter (i.e., the characters that indicate the end of each token in the source string).
Returns a string containing length characters starting from index start in the source string. If length is not specified, a string con-taining characters from start to the end of the source string is returned.
Returns a string containing the characters from index start up to but not including index end in the source string.
Returns a string in which all uppercase letters are converted to lowercase letters. Non-letter characters are not changed.
Returns a string in which all lowercase letters are converted to uppercase letters. Non-letter characters are not changed.


Fig. 11.3   | SomeString-objectmethods.(Part2of2.)
11.3 StringObject   365


11.3.3 Character-Processing Methods
The example in Figs. 11.4–11.5 demonstrates some of the Stringobject’s character-pro-cessing methods, including:
•	charAt—returns the character at a specific position
•	charCodeAt—returns the Unicode value of the character at a specific position •	fromCharCode—returns a string created from a series of Unicode values
•     toLowerCase—returns the lowercase version of a string •     toUpperCase—returns the uppercase version of a string
The HTML document (Fig. 11.4) calls the script’s startfunction to display the results in the results div. [Note: Throughout this chapter, we show the CSS style sheets only if there are new features to discuss. You can view each example’s style-sheet contents by opening the style sheet in a text editor.]


1  <!DOCTYPE html> 2
3  <!-- Fig. 11.4: CharacterProcessing.html -->
4  <!-- HTML5 document to demonstrate String methods charAt, charCodeAt, 5	fromCharCode, toLowercase and toUpperCase. -->
6  <html>
7	<head>
8	<meta charset = "utf-8">
9	<title>Character Processing</title>
10	<link rel = "stylesheet" type = "text/css" href = "style.css"> 11	<script src = "CharacterProcessing.js"></script>
12	</head> 13	<body>
14	<div id = "results"></div> 15     </body>
16  </html>










Fig. 11.4  | HTML5documenttodemonstratemethodscharAt,charCodeAt,fromCharCode, toLowercaseandtoUpperCase.

In the script (Fig. 11.5), lines 10–11 get the first character in Strings("ZEBRA") using Stringmethod charAtand append it to the resultstring. Method charAtreturns a string containing the character at the specified index (0in this example). Indices for the characters in a string start at 0 (the first character) and go up to (but do not include) the
366	Chapter11 JavaScript:Objects


string’s length(e.g., if the string contains five characters, the indices are 0 through 4). If the index is outside the bounds of the string, the method returns an empty string.

1  // Fig. 11.5: CharacterProcessing.js
2  // String methods charAt, charCodeAt, fromCharCode, 3  // toLowercase and toUpperCase.
4  function start() 5  {
6	var s = "ZEBRA";
7	var s2 = "AbCdEfG"; 8	var result = "";
9
10	result = "<p>Character at index 0 in '" + s + "' is " + 11         s.charAt( 0 ) + "</p>";
12	result += "<p>Character code at index 0 in '" + s + "' is " + 13         s.charCodeAt( 0 ) + "</p>";
14
15	result += "<p>'" + String.fromCharCode( 87, 79, 82, 68 ) + 16         "' contains character codes 87, 79, 82 and 68</p>";
17
18	result += "<p>'" + s2 + "' in lowercase is '" + 19         s2.toLowerCase() + "'</p>";
20	result += "<p>'" + s2 + "' in uppercase is '" + 21         s2.toUpperCase() + "'</p>";
22
23	document.getElementById( "results" ).innerHTML = result; 24  } // end function start
25
26  window.addEventListener( "load", start, false );

Fig. 11.5  | StringmethodscharAt,charCodeAt,fromCharCode,toLowercaseand toUpperCase.

Lines 12–13 get the character code for the first character in Strings("ZEBRA") by calling Stringmethod charCodeAt. MethodcharCodeAtreturns theUnicode valueof the character at the specified index (0in this example). If the index is outside the bounds of the string, the method returns NaN.
StringmethodfromCharCodereceivesasitsargumentacomma-separatedlistofUni-code values and builds a string containing the character representations of those Unicode values. Lines 15–16 create the string "WORD", which consists of the character codes 87, 79, 82 and 68. Note that we use the Stringobject to call method fromCharCode, rather than a specific Stringvariable. Appendix D, ASCII Character Set, contains the character codes for the ASCII character set—a subset of the Unicode character set (Appendix F) that con-tains only Western characters.
Lines 18–21 use Stringmethods toLowerCaseand toUpperCaseto get versions of Strings2("AbCdEfG") in all lowercase letters and all uppercase letters, respectively.

11.3.4 Searching Methods
The example in Figs. 11.6–11.7 demonstrates the String-object methods indexOfand lastIndexOfthat search for a specified substring in a string. All the searches in this exam-
11.3 StringObject   367


ple are performed on a global string named lettersin the script (Fig. 11.7, line 3). The user types a substring in the HTML5 form searchForm’s inputField and presses the Search button to search for the substring in letters. Clicking the Search button calls function buttonPressed (lines 5–18) to respond to the click event and perform the searches. The results of each search are displayed in the divnamed results.
In the script (Fig. 11.7), lines 10–11 use Stringmethod indexOfto determine the location of the first occurrence in string lettersof the string inputField.value(i.e., the string the user typed in the inputFieldtext field). If the substring is found, the index at which the first occurrence of the substring begins is returned; otherwise, –1 is returned.


1  <!DOCTYPE html> 2
3  <!-- Fig. 11.6: SearchingStrings.html -->
4  <!-- HTML document to demonstrate methods indexOf and lastIndexOf. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Searching Strings</title>
9	<link rel = "stylesheet" type = "text/css" href = "style.css"> 10     <script src = "SearchingStrings.js"></script>
11	</head> 12	<body>
13	<form id = "searchForm" action = "#"> 14            <h1>The string to search is:
15	abcdefghijklmnopqrstuvwxyzabcdefghijklm</h1> 16            <p>Enter the substring to search for
17	<input id = "inputField" type = "search">
18	<input id = "searchButton" type = "button" value = "Search"></p> 19	<div id = "results"></div>
20	</form> 21     </body>
22  </html>
















Fig. 11.6  | HTMLdocumenttodemonstratemethodsindexOfandlastIndexOf.(Part1of2.)
368	Chapter11 JavaScript:Objects
















Fig. 11.6  | HTMLdocumenttodemonstratemethodsindexOfandlastIndexOf.(Part2of2.)

Lines 12–13 use Stringmethod lastIndexOfto determine the location of the last occurrence in lettersof the string in inputField. If the substring is found, the index at which the last occurrence of the substring begins is returned; otherwise, –1 is returned.
Lines 14–15 use Stringmethod indexOfto determine the location of the first occur-rence in string lettersof the string in the inputFieldtext field, starting from index 12 in letters. If the substring is found, the index at which the first occurrence of the sub-string (starting from index 12) begins is returned; otherwise, –1 is returned.
Lines 16–17 use Stringmethod lastIndexOfto determine the location of the last occurrence in lettersof the string in the inputFieldtext field, starting from index 12in lettersand moving toward the beginning of the input. If the substring is found, the index at which the first occurrence of the substring (if one appears before index 12) begins is returned; otherwise, –1 is returned.

1  // Fig. 11.7: SearchingStrings.js
2  // Searching strings with indexOf and lastIndexOf.
3  var letters = "abcdefghijklmnopqrstuvwxyzabcdefghijklm"; 4
5  function buttonPressed() 6  {
7	var inputField = document.getElementById( "inputField" ); 8
9	document.getElementById( "results" ).innerHTML = 10         "<p>First occurrence is located at index " +
11	letters.indexOf( inputField.value ) + "</p>" + 12         "<p>Last occurrence is located at index " +
13	letters.lastIndexOf( inputField.value ) + "</p>" +
14	"<p>First occurrence from index 12 is located at index " + 15            letters.indexOf( inputField.value, 12 ) + "</p>" +
16	"<p>Last occurrence from index 12 is located at index " + 17            letters.lastIndexOf( inputField.value, 12 ) + "</p>";
18  } // end function buttonPressed

Fig. 11.7  | SearchingstringswithindexOfandlastIndexOf.(Part1of2.)
11.3 StringObject   369


19
20  // register click event handler for searchButton 21  function start()
22  {
23	var searchButton = document.getElementById( "searchButton" ); 24	searchButton.addEventListener( "click", buttonPressed, false ); 25  } // end function start
26
27  window.addEventListener( "load", start, false );

Fig. 11.7  | SearchingstringswithindexOfandlastIndexOf.(Part2of2.)

11.3.5 Splitting Strings and Obtaining Substrings
When you read a sentence, your mind breaks it into individual words, or tokens, each of which conveys meaning to you. The process of breaking a string into tokens is called to-kenization.Interpretersalsoperformtokenization.Theybreakupstatementsintosuchin-dividual pieces as keywords, identifiers, operators and other elements of a programming language. The example in Figs. 11.8–11.9 demonstrates String method split, which breaks a string into its component tokens. Tokens are separated from one another by de-limiters, typically white-space characters such as blanks, tabs, newlines and carriage re-turns. Other characters may also be used as delimiters to separate tokens. The HTML5 document displays a form containing a text field where the user types a sentence to token-ize. The results of the tokenization process are displayed in a div. The script also demon-strates Stringmethod substring, which returns a portion of a string.
The user types a sentence into the text field with idinputFieldand presses the Split button to tokenize the string. Function splitButtonPressed (Fig. 11.9) is called in respons to the button’s clickevent.

1  <!DOCTYPE html> 2
3  <!-- Fig. 11.8: SplitAndSubString.html -->
4  <!-- HTML document demonstrating String methods split and substring. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>split and substring</title>
9	<link rel = "stylesheet" type = "text/css" href = "style.css"> 10	<script src = "SplitAndSubString.js"></script>
11	</head> 12	<body>
13	<form action = "#">
14	<p>Enter a sentence to split into words:</p> 15	<p><input id = "inputField" type = "text">
16	<input id = "splitButton" type = "button" value = "Split"></p> 17            <div id = "results"></p>
18	</form> 19     </body>
20  </html>

Fig. 11.8  | HTMLdocumentdemonstratingStringmethodssplitandsubstring.(Part1of2.)
370	Chapter11 JavaScript:Objects





















Fig. 11.8  | HTMLdocumentdemonstratingStringmethodssplitandsubstring.(Part2of2.)

In the script (Fig. 11.9), line 5 gets the value of the input field and stores it in variable inputString. Line 6 calls Stringmethod splitto tokenize inputString. The argument to method splitis the delimiter string—the string that determines the end of each token in the original string. In this example, the space character delimits the tokens. The delim-iter string can contain multiple characters to be used as delimiters. Method splitreturns an array of strings containing the tokens. Line 11 uses Arraymethod jointo combine the tokens in array tokensand separate each token with </p><pclass='indent'>to end one paragraph element and start a new one. Line 13 uses Stringmethod substringto obtain a string containing the first 10 characters of the string the user entered (still stored in inputString). The method returns the substring from the starting index (0in this example) up to but not including the ending index (10in this example). If the ending index is greater than the length of the string, the substring returned includes the characters from the starting index to the end of the original string. The result of the string concate-nations in lines 9–13 is displayed in the document’s resultsdiv.


1  // Fig. 11.9: SplitAndSubString.js
2  // String object methods split and substring. 3  function splitButtonPressed()
4  {
5	var inputString = document.getElementById( "inputField" ).value; 6	var tokens = inputString.split( " " );
7
8	var results = document.getElementById( "results" );

Fig. 11.9  | String-objectmethodssplitandsubstring.(Part1of2.)
11.4 DateObject   371


9	results.innerHTML = "<p>The sentence split into words is: </p>" + 10         "<p class = 'indent'>" +
11	tokens.join( "</p><p class = 'indent'>" ) + "</p>" +
12	"<p>The first 10 characters of the input string are: </p>" +
13	"<p class = 'indent'>'" + inputString.substring( 0, 10 ) + "'</p>"; 14  } // end function splitButtonPressed
15
16  // register click event handler for searchButton 17  function start()
18  {
19	var splitButton = document.getElementById( "splitButton" );
20	splitButton.addEventListener( "click", splitButtonPressed, false ); 21  } // end function start
22
23  window.addEventListener( "load", start, false );

Fig. 11.9  | String-objectmethodssplitandsubstring.(Part2of2.)

11.4 DateObject
JavaScript’s Dateobject provides methods for date and time manipulations. These can be performed based on the computer’s local time zone or based on World Time Standard’s Coordinated Universal Time (abbreviated UTC)—formerly called Greenwich Mean Time (GMT). Most methods of the Dateobject have a local time zone and a UTC ver-sion. Date-object methods are summarized in Fig. 11.10.



Method

getDate() getUTCDate()
getDay() getUTCDay()
getFullYear() getUTCFullYear()
getHours() getUTCHours()
getMilliseconds() getUTCMilliSeconds()

getMinutes() getUTCMinutes()
getMonth() getUTCMonth()
getSeconds()
getUTCSeconds()

Description

Returns a number from 1 to 31 representing the day of the month in local time or UTC.
Returns a number from 0 (Sunday) to 6 (Saturday) represent-ing the day of the week in local time or UTC.
Returns the year as a four-digit number in local time or UTC.

Returns a number from 0 to 23 representing hours since mid-night in local time or UTC.
Returns a number from 0 to 999 representing the number of milliseconds in local time or UTC, respectively. The time is stored in hours, minutes, seconds and milliseconds.
Returns a number from 0 to 59 representing the minutes for the time in local time or UTC.
Returns a number from 0 (January) to 11 (December) repre-senting the month in local time or UTC.
Returns a number from 0 to 59 representing the seconds for the time in local time or UTC.


Fig. 11.10 | Date-objectmethods.(Part1of2.)
372	Chapter11 JavaScript:Objects



Method

getTime()


getTimezoneOffset()

setDate(val ) setUTCDate(val )
setFullYear(y,m,d ) setUTCFullYear(y,m,d )


setHours(h,m,s,ms ) setUTCHours(h,m,s,ms )


setMilliSeconds(ms ) setUTCMilliseconds(ms )
setMinutes(m,s,ms ) setUTCMinutes(m,s,ms )


setMonth(m,d ) setUTCMonth(m,d )

setSeconds(s,ms ) setUTCSeconds(s,ms )


setTime(ms )

toLocaleString()



toUTCString()


toString()


valueOf()

Description

Returns the number of milliseconds between January 1, 1970, and the time in the Dateobject.
Returns the difference in minutes between the current time on the local computer and UTC (Coordinated Universal Time).
Sets the day of the month (1 to 31) in local time or UTC.

Sets the year in local time or UTC. The second and third argu-ments representing the month and the date are optional. If an optional argument is not specified, the current value in the Dateobject is used.
Sets the hour in local time or UTC. The second, third and fourth arguments, representing the minutes, seconds and milli-seconds, are optional. If an optional argument is not specified, the current value in the Dateobject is used.
Sets the number of milliseconds in local time or UTC.

Sets the minute in local time or UTC. The second and third arguments, representing the seconds and milliseconds, are optional. If an optional argument is not specified, the current value in the Dateobject is used.
Sets the month in local time or UTC. The second argument, representing the date, is optional. If the optional argument is not specified, the current date value in the Dateobject is used.
Sets the seconds in local time or UTC. The second argument, representing the milliseconds, is optional. If this argument is not specified, the current milliseconds value in the Dateobject is used.
Sets the time based on its argument—the number of elapsed milliseconds since January 1, 1970.
Returns a string representation of the date and time in a form specific to the computer’s locale. For example, September 13, 2007, at 3:42:22 PM is represented as 09/13/07 15:47:22 in the United States and 13/09/07 15:47:22 in Europe.
Returns a string representation of the date and time in the form: 15 Sep 2007 15:47:22 UTC.
Returns a string representation of the date and time in a form specific to the locale of the computer (Mon Sep 17 15:47:22 EDT 2007 in the United States).
Thetime in numberof milliseconds since midnight,January 1, 1970. (Same as getTime.)


Fig. 11.10 | Date-objectmethods.(Part2of2.)
11.4 DateObject   373


The  example  in  Figs. 11.11–11.12  demonstrates  many  of  the  local-time-zone methods in Fig. 11.10. The HTML document (Fig. 11.11) provides several sections in which the results are displayed.


Date-Object Constructor with No Arguments
In the script (Fig. 11.12), line 5 creates a new Dateobject. The newoperator creates the Dateobject. The empty parentheses indicate a call to the Dateobject’s constructor with no arguments. A constructor is an initializer method for an object. Constructors are called automaticallywhenanobjectisallocated with new.TheDateconstructorwithnoarguments initializes the Dateobject with the local computer’s current date and time.


Methods toString, toLocaleString, toUTCStringand valueOf
Lines 9–12 demonstrate the methods toString, toLocaleString, toUTCStringand val-ueOf. Method valueOfreturns a large integer value representing the total number of mil-liseconds between midnight, January 1, 1970, and the date and time stored in Dateobject current.


Date-Object get Methods
Lines 16–25 demonstrate the Dateobject’s get methods for the local time zone. The meth-odgetFullYearreturnstheyearasa four-digit number. ThemethodgetTimeZoneOffset returns the difference in minutes between the local time zone and UTC time (i.e., a dif-ference of four hours in our time zone when this example was executed).


1  <!DOCTYPE html> 2
3  <!-- Fig. 11.11: DateTime.html -->
4  <!-- HTML document to demonstrate Date-object methods. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Date and Time Methods</title>
9	<link rel = "stylesheet" type = "text/css" href = "style.css"> 10	<script src = "DateTime.js"></script>
11	</head> 12	<body>
13	<h1>String representations and valueOf</h1> 14	<section id = "strings"></section>
15	<h1>Get methods for local time zone</h1> 16	<section id = "getMethods"></section>
17	<h1>Specifying arguments for a new Date</h1> 18	<section id = "newArguments"></section>
19	<h1>Set methods for local time zone</h1> 20	<section id = "setMethods"></section>
21	</body>
22  </html>

Fig. 11.11 | HTMLdocumenttodemonstrateDate-objectmethods.(Part1of2.)
374	Chapter11 JavaScript:Objects




























Fig. 11.11 | HTMLdocumenttodemonstrateDate-objectmethods.(Part2of2.)

1  // Fig. 11.12: DateTime.js
2  // Date and time methods of the Date object. 3  function start()
4  {
5	var current = new Date(); 6
7	// string-formatting methods and valueOf
8	document.getElementById( "strings" ).innerHTML = 9         "<p>toString: " + current.toString() + "</p>" +
10	"<p>toLocaleString: " + current.toLocaleString() + "</p>" + 11	"<p>toUTCString: " + current.toUTCString() + "</p>" +
12	"<p>valueOf: " + current.valueOf() + "</p>"; 13
14	// get methods
15	document.getElementById( "getMethods" ).innerHTML = 16         "<p>getDate: " + current.getDate() + "</p>" +
17	"<p>getDay: " + current.getDay() + "</p>" +
18	"<p>getMonth: " + current.getMonth() + "</p>" +
19	"<p>getFullYear: " + current.getFullYear() + "</p>" +

Fig. 11.12 | DateandtimemethodsoftheDateobject.(Part1of2.)
11.4 DateObject   375


20	"<p>getTime: " + current.getTime() + "</p>" + 21	"<p>getHours: " + current.getHours() + "</p>" +
22         "<p>getMinutes: " + current.getMinutes() + "</p>" + 23         "<p>getSeconds: " + current.getSeconds() + "</p>" +
24	"<p>getMilliseconds: " + current.getMilliseconds() + "</p>" +
25	"<p>getTimezoneOffset: " + current.getTimezoneOffset() + "</p>"; 26
27	// creating a Date
28	var anotherDate = new Date( 2011, 2, 18, 1, 5, 0, 0 ); 29	document.getElementById( "newArguments" ).innerHTML = 30         "<p>Date: " + anotherDate + "</p>";
31
32	// set methods
33	anotherDate.setDate( 31 ); 34	anotherDate.setMonth( 11 );
35	anotherDate.setFullYear( 2011 ); 36	anotherDate.setHours( 23 );
37     anotherDate.setMinutes( 59 ); 38     anotherDate.setSeconds( 59 );
39	document.getElementById( "setMethods" ).innerHTML = 40         "<p>Modified date: " + anotherDate + "</p>";
41  } // end function start 42
43  window.addEventListener( "load", start, false );

Fig. 11.12 | DateandtimemethodsoftheDateobject.(Part2of2.)

Date-Object Constructor with Arguments
Line 28 creates a new Dateobject and supplies arguments to the Dateconstructor for year, month, date, hours, minutes, seconds and milliseconds. The hours, minutes, seconds and milli-seconds arguments are alloptional. If an argument is not specified, 0is suppliedin itsplace. For hours, minutes and seconds, if the argument to the right of any of these is specified, it too must be specified (e.g., if the minutes argument is specified, the hours argument must be specified; if the milliseconds argument is specified, all the arguments must be specified).

Date-Object set Methods
Lines 33–38 demonstrate the Date-object set methods for thelocal time zone. Dateobjects represent the month internally as an integer from 0 to11. These values are off by one from what you might expect (i.e., 1 for January, 2 for February, …, and 12 for December). When creating a Dateobject, you must specify 0 to indicate January, 1 to indicate Febru-ary, …, and 11 to indicate December.

Common Programming Error 11.1
Assuming that months are represented as numbers from 1 to 12 leads to off-by-one errors when you’re processing Dates.

Date-Object parseand UTCMethods
The Dateobject provides methods Date.parseand Date.UTCthat can be called without creating a new Dateobject. Date.parsereceives as its argument a string representing a date andtime,andreturnsthenumberofmillisecondsbetweenmidnight,January1,1970,and
376	Chapter11 JavaScript:Objects


the specified date and time. This value can be converted to a Dateobject with the state-ment

var theDate = new Date( numberOfMilliseconds  ); Method parseconverts the string using the following rules:
•	 Short dates can be specified in the form MM-DD-YY, MM-DD-YYYY, MM/DD/YYor MM/ DD/YYYY. The month and day are not required to be two digits.
•	Long datesthat specify thecomplete month name(e.g., “January”), dateandyear can specify the month, date and year in any order.
•	Text in parentheses within the string is treated as a comment and ignored. Com-mas and white-space characters are treated as delimiters.
•	All month and day names must have at least two characters. The names are not required to be unique. If the names are identical, the name is resolved as the last match (e.g., “Ju” represents “July” rather than “June”).
•	If the name of the day of the week is supplied, it’s ignored.
•     All standard time zones (e.g., EST for Eastern Standard Time), Coordinated Universal Time (UTC) and Greenwich Mean Time (GMT) are recognized.
•	When specifying hours, minutes and seconds, separate them with colons.
•	In 24-hour-clock format, “PM” should not be used for times after 12 noon.
Datemethod UTCreturns the number of milliseconds between midnight, January 1, 1970, and the date and time specified as its arguments. The arguments to the UTCmethod includetherequiredyear, monthanddate, andtheoptionalhours, minutes,seconds andmil-liseconds. If any of the hours, minutes, seconds or milliseconds arguments is not specified, a zero is supplied in its place. For the hours, minutes and seconds arguments, if the argument to the right of any of these arguments in the argument list is specified, that argument must also be specified (e.g., if the minutes argument is specified, the hours argument must be specified; if the milliseconds argument is specified, all the arguments must be specified). As with the result of Date.parse, the result of Date.UTCcan be converted to a Dateobject by creating a new Dateobject with the result of Date.UTCas its argument.

11.5 Booleanand NumberObjects
JavaScript provides the Booleanand Numberobjects as object wrappers for boolean true/ falsevalues and numbers, respectively. These wrappers define methods and properties useful in manipulating boolean values and numbers.
When a JavaScript program requires a boolean value, JavaScript automatically creates a Booleanobject to store the value. JavaScript programmers can create Booleanobjects explicitly with the statement

var b = new Boolean( booleanValue  );
The booleanValue specifies whether the Booleanobject should contain trueor false. If booleanValue is false, 0, null, Number.NaNor an empty string (""), or if no argument is supplied,thenewBooleanobjectcontainsfalse.Otherwise,thenewBooleanobjectcon-tains true. Figure 11.13 summarizes the methods of the Booleanobject.
11.6 documentObject   377



Method

toString()

valueOf()

Description

Returns the string "true"if the value of the Booleanobject is true; otherwise, returns the string "false".
Returns the value trueif the Booleanobject is true; otherwise, returns false.


Fig. 11.13 | Boolean-objectmethods.

JavaScript automatically creates Numberobjects to store numeric values in a script. You can create a Numberobject with the statement

var n = new Number( numericValue  );
The constructor argument numericValue is the number to store in the object. Although you can explicitly create Numberobjects, normally the JavaScript interpreter creates them as needed. Figure 11.14 summarizes the methods and properties of the Numberobject.


Methodorproperty

toString(radix )






valueOf()
Number.MAX_VALUE
Number.MIN_VALUE
Number.NaN





Number.NEGATIVE_INFINITY
Number.POSITIVE_INFINITY

Description

Returns the string representation of the number. The optional radix argument (a number from 2 to 36) specifies the number’s base. Radix 2 results in the binary representa-tion, 8 in the octal representation, 10 in the decimal represen-tation and 16 in the hexadecimal representation. See Appendix E, Number Systems, for an explanation of the binary, octal, decimal and hexadecimal number systems.
Returns the numeric value.
The largest value that can be stored in a JavaScript program. The smallest value that can be stored in a JavaScript program.
Not a number—a value returned from an arithmetic expres-sion that doesn’t result in a number (e.g., parseInt("hello") cannot convert the string "hello"to a number, so parseInt would return Number.NaN.) To determine whether a value is NaN, test the result with function isNaN,which returns true if the value is NaN; otherwise, it returns false.
A value less than -Number.MAX_VALUE.
A value greater than Number.MAX_VALUE.


Fig. 11.14  | Number-objectmethodsandproperties.

11.6 documentObject
The documentobject, which we’ve used extensively, is provided by the browser and allows JavaScript code to manipulate the current document in the browser. The documentobject has several properties and methods, such as method document.getElementByID, which has been used in many examples. Figure 11.15 shows the methods of the documentobject that are used in this chapter. We’ll cover several more in Chapter 12.
378	Chapter11 JavaScript:Objects



Method

getElementById( id )

getElementByTagName( tagName )

Description

Returns the HTML5 element whose idattribute matches id.
Returns an array of the HTML5 elements with the specified tagName.


Fig. 11.15 | document-objectmethods.

11.7 Favorite Twitter Searches: HTML5 Web Storage
Before HTML5, websites could store only small amounts of text-based information on a user’s computer using cookies. A cookie is a key/value pair in which each key has a corre-sponding value. The key and value are both strings. Cookies are stored by the browser on the user’s computer to maintain client-specific information during and between browser sessions. A website might use a cookie to record user preferences or other information that it can retrieve during the client’s subsequent visits. For example, a website can retrieve the user’s name from a cookie and use it to display a personalized greeting. Similarly, many websites used cookies during a browsing session to track user-specific information, such as the contents of an online shopping cart.
When a user visits a website, the browser locates any cookies written by that website and sends them to the server. Cookies may be accessed only by the web server and scripts of the website from which the cookies originated (i.e., a cookie set by a script on amazon.comcan be read only by amazon.comservers and scripts). The browser sends these cookies with every request to the server.

Problems with Cookies
There are several problems with cookies. One is that they’re extremely limited in size. To-day’s web apps often allow users to manipulate large amounts of data, such as documents or thousands of emails. Some web applications allow so-called offline access—for example, a word-processing web application might allow a user to access documents locally, even when the computer is not connected to the Internet. Cookies cannot store entire docu-ments.
Another problem is that a user often opens many tabs in the same browser window. If the user browses the same site from multiple tabs, all of the site’s cookies are shared by the pages in each tab. This could be problematic in web applications that allow the user to purchase items. For example, if the user is purchasing different items in each tab, with cookies it’s possible that the user could accidentally purchase the same item twice.

Introducing localStorageand sessionStorage
As of HTML5, there are two new mechanisms for storing key/value pairs that help elim-inate some of the problems with cookies. Web applications can use the windowobject’s localStorageproperty to store up to several megabytes of key/value-pair string data on the user’s computer and can access that data across browsing sessions and browser tabs. Unlike cookies, data in the localStorageobject is not sent to the web server with each request. Each website domain (such as deitel.comor google.com) has a separate local-
11.7 FavoriteTwitterSearches:HTML5WebStorage   379


Storageobject—all the pages from a given domain share one localStorageobject. Typ-ically, 5MB are reserved for each localStorageobject, but a web browser can ask the user if more space should be allocated when the space is full.
Web applications that need access to data for only a browsing session and that must keep that data separate among multiple tabs can use the windowobject’s sessionStorage property. There’s a separate sessionStorageobject for every browsing session, including separate tabs that are accessing the same website.

Favorite Twitter Searches App Using localStorageand sessionStorage
To demonstratethese new HTML5 storage capabilities, we’ll implement a Favorite Twitter Searches app. Twitter’s search feature is a great way to follow trends and see what people are saying about specific topics. The app we present here allows users to save their favorite (possibly lengthy) Twitter search strings with easy-to-remember, user-chosen, short tag names. Users can then conveniently follow the tweets on their favorite topics by visiting this web page and clicking the link for a saved search. Twitter search queries can be finely tuned using Twitter’s search operators (dev.twitter.com/docs/using-search)—but more complex queries are lengthy, time consuming and error prone to type. The user’s fa-vorite searches are saved using localStorage, so they’re immediately available each time the user browses the app’s web page.
Figure 11.16(a) shows the app when it’s loaded for the first time. The app uses ses-sionStorageto determine whether the user has visited the page previously during the cur-rent browsing session. If not, the app displays a welcome message. The user can save many searches and view them in alphabetical order. Search queries and their corresponding tags are entered in the textinputs at the top of the page. Clicking the Save buttonadds the new search to the favorites list. Clicking a the link for a saved search requests the search page from Twitter’s website, passing the user’s saved search as an argument, and displays the search results in the web browser.


a)Favorite Twitter Searches appwhenit’sloadedforthefirsttimeinthisbrowsing sessionandtherearenotaggedsearches


Welcomemessage appearsonlyon thefirstvisittothe pageduringthis browsingsession

EnterTwitter searchqueryhere

Tagyoursearch




Fig. 11.16 | SampleoutputsfromtheFavorite Twitter Searches webapplication.(Part1of2.)
380	Chapter11 JavaScript:Objects



b)Appwithseveralsavedsearchesandtheusersavinganewsearch










Savedsearches



c)Appafternewsearchissaved—theuserisabouttoclicktheDeitelsearch















d)ResultsoftouchingtheDeitel link












Fig. 11.16 | SampleoutputsfromtheFavorite Twitter Searches webapplication.(Part2of2.)
11.7 FavoriteTwitterSearches:HTML5WebStorage   381


Figure 11.16(b) shows the app with several previously saved searches. Figure 11.16(c) shows the user entering a new search. Figure 11.16(d) shows the result of touching the Deitel link, which searches for tweets from Deitel—specified in Fig. 11.16(c) with the Twitter search from:Deitel. You can edit the searches using the Edit buttons to the right of each search link. This enables you to tweak your searches for better results after you save them as favorites. Touching the Clear All Saved Searches buttonremoves all the searches from the favorites list. Some browsers support localStorageand sessionStorageonly for web pages that are downloaded from a web server, not for web pages that are loaded directly from the local file system. So, we’ve posted the app online for testing at:

http://test.deitel.com/iw3htp5/ch11/fig11_20-22/ FavoriteTwitterSearches.html


Favorite Twitter Searches HTML5 Document
The Favorite Twitter Searches application contains three files—FavoriteTwitterSearch-es.html (Fig. 11.17),  styles.css (Fig. 11.18)  and  FavoriteTwitterSearches.js (Fig. 11.18). The HTML5 document provides a form(lines 14–24) that allows the user toenternew searches. Previously tagged searches are displayedin the divnamed searches (line 26).


1  <!DOCTYPE html> 2
3  <!-- Fig. 11.17: FavoriteTwitterSearchs.html -->
4  <!-- Favorite Twitter Searches web application. --> 5  <html>
6  <head>
7	<title>Twitter Searches</title>
8	<link rel = "stylesheet" type = "text/css" href = "style.css"> 9	<script src = "FavoriteTwitterSearches.js"></script>
10  </head> 11  <body>
12	<h1>Favorite Twitter Searches</h1> 13	<p id = "welcomeMessage"></p>
14	<form action = "#">
15	<p><input id = "query" type = "text"
16	placeholder = "Entery Twitter search query">
17	<a href = "https://dev.twitter.com/docs/using-search"> 18               Twitter search operators</a></p>
19	<p><input id = "tag" type = "text" placeholder = "Tag your query"> 20            <input type = "button" value = "Save"
21	id = "saveButton">
22	<input type = "button" value = "Clear All Saved Searches" 23               id = "clearButton"></p>
24	</form>
25	<h1>Previously Tagged Searches</h1> 26	<div id = "searches"></div>
27  </body>
28  </html>

Fig. 11.17 | FavoriteTwitterSearcheswebapplication.
382	Chapter11 JavaScript:Objects


CSS for Favorite Twitter Searches
Figure 11.18 contains the CSS styles for this app. Line 3 uses a CSS3 attribute selector to select all inputelements that have the type"text"and sets their width to 250px. Each link that represents a saved search is displayed in a spanthat has a fixed width (line 6). To specify the width, we set the displayproperty of the spans to inline-block. Line 8 spec-ifies a :first-childselector that’s used to select the first list item in the unordered list of saved searches that’s displayed at the bottom of the web page. Lines 9–10 and 11–12 use :nth-childselectors to specify the styles of the odd (first, third, fifth, etc.) and even (sec-ond,fourth,sixth,etc.)listitems,respectively.Weusetheseselectorsoralternatetheback-ground colors of the saved searches.

1  p { margin: 0px; }
2  #welcomeMessage { margin-bottom: 10px; font-weight: bold; } 3  input[type = "text"] { width: 250px; }
4
5  /* list item styles */
6  span { margin-left: 10px; display: inline-block; width: 100px; } 7  li { list-style-type: none; width: 220px;}
8  li:first-child { border-top: 1px solid grey; }
9  li:nth-child(even) { background-color: lightyellow; 10	border-bottom: 1px solid grey; }
11  li:nth-child(odd) { background-color: lightblue;
12	border-bottom: 1px solid grey; }

Fig. 11.18 | StylesusedintheFavorite Twitter Searches app.

Script for Favorite Twitter Searches
Figure 11.19 presents the JavaScript for the Favorite Twitter Searches app. When the HTML5 document in Fig. 11.17 loads, function start(lines 80–87) is called to register eventhandlersandcallfunctionloadSearches(lines7–44).Line9usesthesessionStor-ageobject to determine whether the user has already visited the page during this browsing session. The getItemmethod receives a name of a key as an argument. If the key exists, the method returns the corresponding string value; otherwise, it returns null. If this is the user’s first visit to the page during this browsing session, line 11 uses the setItemmethod to set the key "herePreviously"to the string "true", then lines 12–13 display a welcome message in the welcomeMessageparagraph element. Next, line 16 gets the localStorage object’s length, which represents the number of key/value pairs stored. Line 17 creates an array and assigns it to the script variable tags, then lines 20–23 get the keys from the lo-calStorageobject and store them in the tagsarray. Method key(line 22) receives an in-dex as an argument and returns the corresponding key. Line 25 sorts the tagsarray, so that we can display the searches in alphabetical order by tag name (i.e., key). Lines 27–42 build the unordered list of links representing the saved searches. Line 33 calls the local-Storageobject’s getItemmethod to obtain the search string for a given tag and appends the search string to the Twitter search URL (line 28). Notice that, for simplicity, lines 37 and 38 use the onclickattributes of the dynamically generated Edit and Delete buttons to set the buttons’ event handlers—this is an older mechanism for registering event handlers. To register these with the elements’ addEventListenermethod, we’d have to dynamically locate the buttons in the page after we’ve created them, then register the event handlers,
11.7 FavoriteTwitterSearches:HTML5WebStorage   383


whichwouldrequiresignificantadditionalcode.Separately,noticethateacheventhandler is receiving the buttoninputelement’s idas an argument—this enables the event handler to use the idvalue when handling the event. [Note: The localStorageand sessionStor-ageproperties and methods we discuss throughout this section apply to both objects.]


1  // Fig. 11.19: FavoriteTwitterSearchs.js
2  // Storing and retrieving key/value pairs using 3  // HTML5 localStorage and sessionStorage
4  var tags; // array of tags for queries 5
6  // loads previously saved searches and displays them in the page 7  function loadSearches()
8  {
9	if ( !sessionStorage.getItem( "herePreviously" ) ) 10	{
11	sessionStorage.setItem( "herePreviously", "true" );
12	document.getElementById( "welcomeMessage" ).innerHTML = 13            "Welcome to the Favorite Twitter Searches App";
14	} // end if 15
16	var length = localStorage.length; // number of key/value pairs 17	tags = []; // create empty array
18
19	// load all keys
20	for (var i = 0; i < length; ++i) 21	{
22	tags[i] = localStorage.key(i); 23     } // end for
24
25	tags.sort(); // sort the keys 26
27	var markup = "<ul>"; // used to store search link markup 28	var url = "http://search.twitter.com/search?q=";
29
30	// build list of links 31	for (var tag in tags) 32	{
33	var query = url + localStorage.getItem(tags[tag]);
34	markup += "<li><span><a href = '" + query + "'>" + tags[tag] + 35            "</a></span>" +
36	"<input id = '" + tags[tag] + "' type = 'button' " + 37               "value = 'Edit' onclick = 'editTag(id)'>" +
38	"<input id = '" + tags[tag] + "' type = 'button' " + 39               "value = 'Delete' onclick = 'deleteTag(id)'>";
40	} // end for 41
42	markup += "</ul>";
43	document.getElementById("searches").innerHTML = markup; 44  } // end function loadSearches
45

Fig. 11.19 | Storingandretrievingkey/valuepairsusingHTML5localStorageand sessionStorage.(Part1of2.)
384	Chapter11 JavaScript:Objects


46  // deletes all key/value pairs from localStorage 47  function clearAllSearches()
48  {
49	localStorage.clear();
50	loadSearches(); // reload searches 51  } // end function clearAllSearches 52
53  // saves a newly tagged search into localStorage 54  function saveSearch()
55  {
56	var query = document.getElementById("query"); 57	var tag = document.getElementById("tag");
58	localStorage.setItem(tag.value, query.value); 59	tag.value = ""; // clear tag input
60	query.value = ""; // clear query input 61	loadSearches(); // reload searches
62  } // end function saveSearch 63
64  // deletes a specific key/value pair from localStorage 65  function deleteTag( tag )
66  {
67	localStorage.removeItem( tag ); 68	loadSearches(); // reload searches 69  } // end function deleteTag
70
71  // display existing tagged query for editing 72  function editTag( tag )
73  {
74	document.getElementById("query").value = localStorage[ tag ]; 75	document.getElementById("tag").value = tag;
76	loadSearches(); // reload searches 77  } // end function editTag
78
79  // register event handlers then load searches 80  function start()
81  {
82	var saveButton = document.getElementById( "saveButton" ); 83	saveButton.addEventListener( "click", saveSearch, false ); 84	var clearButton = document.getElementById( "clearButton" );
85	clearButton.addEventListener( "click", clearAllSearches, false ); 86	loadSearches(); // load the previously saved searches
87  } // end function start 88
89  window.addEventListener( "load", start, false );

Fig. 11.19 | Storingandretrievingkey/valuepairsusingHTML5localStorageand sessionStorage.(Part2of2.)

Function clearAllSearches(lines 47–51) is called when the user clicks the Clear All Saved Searches button. The clearmethod of the localStorageobject (line 49) removes all key/value pairs from the object. We then call loadSearchesto refresh the list of saved searches in the web page.
11.8 UsingJSONtoRepresentObjects   385


Function saveSearch (lines 54–62) is called when the user clicks Save to save a search. Line 58 uses the setItemmethod to store a key/value pair in the localStorage object. If the key already exits, setItemreplaces the corresponding value; otherwise, it cre-ates a new key/value pair. We then call loadSearchesto refresh the list of saved searches in the web page.
Function deleteTag(lines 65–69) is called when the user clicks the Delete button next to a particular search. The function receives the tag representing the key/value pair to delete, which we set in line 38 as the button’s id. Line 67 uses the removeItemmethod to remove a key/value pair from the localStorageobject. We then call loadSearchesto refresh the list of saved searches in the web page.
Function editTag(lines 72–77) is called when the user clicks the Edit button next to a particular search. The function receives the tag representing the key/value pair to edit, which we set in line 36 as the button’s id. In this case, we display the corresponding key/ value pair’s contents in the inputelements with the ids "tag"and "query", respectively, so the user can edit them. Line 74 uses the []operator to access the value for a specified key (tag)—this performs the same task as calling getItemon the localStorageobject. We then call loadSearchesto refresh the list of saved searches in the web page.


11.8 Using JSON to Represent Objects
In 1999, JSON (JavaScript Object Notation)—a simple way to represent JavaScript ob-jects as strings—was introduced as an alternative to XML as a data-exchange technique. JSON has gained acclaim due to its simple format, making objects easy to read, create and parse. Each JSON object is represented as a list of property names and values contained in curly braces, in the following format:

{ propertyName1  : value1, propertyName2 : value2  }

Arrays are represented in JSON with square brackets in the following format:

[ value0, value1, value2  ]

Each value can be a string, a number, a JSON object, true,falseor null. To appreciate the simplicity of JSON data, examine this representation of an array of address-book en-tries that we’ll use in Chapter 16:

[ { first: 'Cheryl', last: 'Black' }, { first: 'James', last: 'Blue' }, { first: 'Mike', last: 'Brown' },
{ first: 'Meg', last: 'Gold' } ]

JSON provides a straightforward way to manipulate objects in JavaScript, and many other programming languages now support this format. In addition to simplifying object creation, JSON allows programs to easily extract data and efficiently transmit it across the Internet. JSON integrates especially well with Ajax applications, discussed in Chapter 16. See Section 16.6 for a more detailed discussion of JSON, as well as an Ajax-specific example.  For  more  information  on  JSON,  visit  our  JSON  Resource  Center  at www.deitel.com/json.
386	Chapter11 JavaScript:Objects


Summary
Section 11.2 MathObject
•  Math-object methods (p. 361) enable you to perform many common mathematical calculations.
•  An object’s methods are called by writing the name of the object followed by a dot (.) and the name of the method. In parentheses following the method name are arguments to the method.

Section 11.3 StringObject
•  Characters are the building blocks of JavaScript programs. Every program is composed of a se-quenceof characters groupedtogethermeaningfullythat’sinterpreted by thecomputeras aseries of instructions used to accomplish a task.
•  A string is a series of characters treated as a single unit.
•  A string may include letters, digits and various special characters, such as +, -, *, /, and $.
•  JavaScript supports Unicode (p. 363), which represents a large portion of the world’s languages.
•  String literals or string constants (p. 363) are written as a sequence of characters in double or sin-gle quotation marks.
•  Combining strings is called concatenation (p. 363).
•  String method charAt(p. 365) returns the character at a specific index in a string. Indices for the characters in a string start at 0 (the first character) and go up to (but do not include) the string’s length(i.e., if the string contains five characters, the indices are 0 through 4). If the index is out-side the bounds of the string, the method returns an empty string.
•  StringmethodcharCodeAt(p. 365)returnstheUnicodevalueofthecharacterataspecificindex in a string. If the index is outside the bounds of the string, the method returns NaN. Stringmeth-od fromCharCode(p. 365) creates a string from a list of Unicode values.
•  Stringmethod toLowerCase(p. 365) returns the lowercase version of a string. Stringmethod toUpperCase(p. 365) returns the uppercase version of a string.
•  Stringmethod indexOf(p. 366) determines the location of the first occurrence of its argument in the string used to call the method. If the substring is found, the index at which the first occur-rence of the substring begins is returned; otherwise, -1is returned. This method receives an op-tional second argument specifying the index from which to begin the search.
•  Stringmethod lastIndexOf(p. 366) determines the location of the last occurrence of its argu-ment in the string used to call the method. If the substring is found, the index at which the last occurrence of the substring begins is returned; otherwise, -1is returned. This method receives an optional second argument specifying the index from which to begin the search.
•  The process of breaking a string into tokens (p. 369) is called tokenization (p. 369). Tokens are separated from one another by delimiters, typically white-space characters such as blank, tab, newline and carriage return. Other characters may also be used as delimiters to separate tokens.
•  Stringmethodsplit(p. 369)breaksastringintoitscomponenttokens.Theargumenttometh-od splitis the delimiter string (p. 370)—the string that determines the end of each token in the original string. Method splitreturns an array of strings containing the tokens.
•  String method substring returns the substring from the starting index (its first argument, p. 370) up to but not including the ending index (its second argument, p. 370). If the ending index is greater than the length of the string, the substring returned includes the characters from the starting index to the end of the original string.

Section 11.4 DateObject
•  JavaScript’s Dateobject (p. 371) provides methods for date and time manipulations.
Summary   387


•  Date and time processing can be performed based either on the computer’s local time zone (p. 371)  or  on  World  Time  Standard’s  Coordinated  Universal  Time  (abbreviated  UTC, p. 371)—formerly called Greenwich Mean Time (GMT, p. 371).
•  Most methods of the Dateobject have a local time zone and a UTC version.
•  Datemethod parsereceives as its argument a string representing a date and time and returns the number of milliseconds between midnight, January 1, 1970, and the specified date and time.
•  Datemethod UTC(p. 375) returns the number of milliseconds between midnight, January 1, 1970,andthedateandtimespecifiedasitsarguments.TheargumentstotheUTCmethodinclude the required year, month and date, and the optional hours, minutes, seconds and milliseconds. Ifanyofthehours,minutes,secondsormillisecondsargumentsisnotspecified,azeroissupplied in its place. For the hours, minutes and seconds arguments, if the argument to the right of any of these arguments is specified, that argument must also be specified (e.g., if the minutes argu-mentisspecified,thehoursargumentmustbespecified;ifthemillisecondsargumentisspecified, all the arguments must be specified).

Section 11.5 Booleanand NumberObjects
•  JavaScriptprovidesthe Boolean(p. 376)andNumber(p. 376)objectsas objectwrappers forbool-ean true/falsevalues and numbers, respectively.
•  When a boolean value is required in a JavaScript program, JavaScript automatically creates a Booleanobject to store the value.
•  JavaScript programmers can create Booleanobjects explicitly with the statement var b = new Boolean( booleanValue );
The argument booleanValue specifies the value of the Booleanobject (trueor false). If boolean-Value is false, 0, null, Number.NaNor the empty string (""), or if no argument is supplied, the new Booleanobject contains false. Otherwise, the new Booleanobject contains true.
•  JavaScript automatically creates Numberobjects to store numeric values in a JavaScript program. •  JavaScript programmers can create a Numberobject with the statement
var n = new Number( numericValue );
TheargumentnumericValueisthenumbertostoreintheobject.Althoughyoucanexplicitly cre-ate Numberobjects, normally they’re created when needed by the JavaScript interpreter.

Section 11.6 documentObject
•  JavaScript provides the documentobject (p. 377) for manipulating the document that’s currently visible in the browser window.

Section 11.7 Favorite Twitter Searches: HTML5 Web Storage
•  Before HTML5, websites could store only small amounts of text-based information on a user’s computerusingcookies.Acookie(p. 378)isakey/valuepairinwhicheachkeyhasacorrespond-ing value. The key and value are both strings.
•  Cookies are stored by the browser on the user’s computer to maintain client-specific information during and between browser sessions.
•  When a user visits a website, the browser locates any cookies written by that website and sends them to the server. Cookies may be accessed only by the web server and scripts of the website from which the cookies originated.
•  Web applications can use the windowobject’s localStorageproperty (p. 378) to store up to sev-eralmegabytesofkey/value-pairstringdataontheuser’scomputerandcanaccessthatdataacross browsing sessions and browser tabs.
388	Chapter11 JavaScript:Objects


•  Unlike cookies, data in the localStorageobject is not sent to the web server with each request.
•  Each website domain has a separate localStorageobject—all the pages from a given domain share it. Typically, 5MB are reserved for each localStorageobject, but a web browser can ask the user whether more space should be allocated when the space is full.
•  Web applications that need access to key/value pair data for only a browsing session and that must keep that data separate among multiple tabs can use the window object’s sessionStorage property (p. 379). There’s a separate sessionStorageobject for every browsing session, includ-ing separate tabs that are accessing the same website.
•  A CSS3 :first-childselector (p. 382) selects the first child of an element.
•  A CSS3 :nth-childselector (p. 382) with the argument "odd"selects the odd child elements, and one with the argument "even"selects the even child elements.
•  The localStorageand sessionStoragemethod getItem(p. 382) receives a name of a key as an argument. If the key exists, the method returns the corresponding string value; otherwise, it re-turns null. Method setItem(p. 382) sets a key/value pair. If the key already exits, setItemre-places the value for the specified key; otherwise, it creates a new key/value pair.
•  The localStorageand sessionStoragelengthproperty (p. 382) returns the number of key/val-ue pairs stored in the corresponding object.
•  The localStorageand sessionStoragemethod key(p. 382) receives an index as an argument and returns the corresponding key.
•  The localStorageand sessionStoragemethod clear(p. 384) removes all key/value pairs from the corresponding object.
•  The localStorageand sessionStoragemethod removeItem(p. 385) removes a key/value pair from the corresponding object.
•  In addition to getItem, you can use the []operator to access the value for a specified key in a localStorageor sessionStorageobject.

Section 11.8 Using JSON to Represent Objects
•  JSON (JavaScript Object Notation, p. 385) is a simple way to represent JavaScript objects as strings.
•  JSON was introduced in 1999 as an alternative to XML for data exchange.
•  Each JSON object is represented as a list of property names and values contained in curly braces, in the following format:
{ propertyName1 : value1, propertyName2 : value2 }
•  Arrays are represented in JSON with square brackets in the following format: [ value0, value1, value2 ]
•  Values in JSON can be strings, numbers, JSON objects, true, falseor null.

Self-Review Exercise
11.1	Fill in the blanks in each of the following statements:
a)  Because JavaScript uses objects to perform many tasks, JavaScript is commonly referred to as a(n)	.
b)  All objects have	and exhibit	.
c)   Themethodsofthe	objectallowyoutoperformmanycommonmathematical calculations.
d)  Invoking (or calling) a method of an object is referred to as	.
AnswerstoSelf-ReviewExercise   389


e)   String literals or string constants are written as a sequence of characters in	or .
f)   Indices for the characters in a string start at	.
g)  Stringmethods	and	search for the first and last occurrences of a substring in a String, respectively.
h)  The process of breaking a string into tokens is called	.
i)   Date and time processing can be performed based on the	or on World Time Standard’s	.
j)   Datemethod	receivesasitsargumentastringrepresentingadateandtimeand returns the number of milliseconds between midnight, January 1, 1970, and the speci-fied date and time.
k)  Web applications can use the windowobject’s	property to store up to several megabytes of key/value-pair string data on the user’s computer and can access that data across browsing sessions and browser tabs.
l)   Web applications thatneedaccess to key/value pair data for only a browsing session and that must keep that data separate among multiple tabs can use the window object’s
property.
m) A CSS3	selector selects the first child of an element.
n)  A CSS3	selector with the argument "odd"selects the odd child elements, and one with the argument "even"selects the even child elements.

Answers to Self-Review Exercise
11.1	a)object-basedprogramminglanguage. b)attributes,behaviors. c)Math. d)sendingames-sage to the object.  e) double quotation marks, single quotation marks.  f) 0.  g) indexOf, lastIn-dexOf.   h) tokenization.   i) computer’s local time zone, Coordinated Universal Time (UTC). j) parse. k) localStorage. l) sessionStorage. m) :first-child. n) :nth-child.

Exercises
11.2	Create a web page that contains four buttons. Each button, when clicked, should cause an alert dialog to display a different time or date in relation to the current time. Create a Nowbutton that alerts the current time and date and a Yesterdaybutton that alerts the time and date 24 hours ago. The other two buttons should alert the time and date ten years ago and one week from today.
11.3	Write a script that tests as many of the Mathlibrary functions in Fig. 11.1 as you can. Exer-cise each of these functions by having your program display tables of return values for several argu-ment values in an HTML5 textarea.
11.4	Mathmethod floormay be used to round a number to a specific decimal place. For exam-ple, the statement
y = Math.floor( x * 10 + .5 ) / 10;
rounds x to the tenths position (the first position to the right of the decimal point). The statement
y = Math.floor( x * 100 + .5 ) / 100;
rounds xto the hundredths position (i.e., the second position to the right of the decimal point). Write a script that defines four functions to round a number xin various ways:
a)  roundToInteger( number ) b)  roundToTenths( number )
c)   roundToHundredths( number ) d)  roundToThousandths( number )
390	Chapter11 JavaScript:Objects


For each value read, your program should display the original value, the number rounded to the nearest integer, the number rounded to the nearest tenth, the number rounded to the nearest hundredth and the number rounded to the nearest thousandth.
11.5	Modify the solution to Exercise 11.4 to use Mathmethod roundinstead of method floor.
11.6	Write a script that uses relational and equality operators to compare two Strings input by the user through an HTML5 form. Display whether the first string is less than, equal to or greater than the second.
11.7	Write a script that uses random number generation to create sentences. Use four arrays of strings called article, noun, verband preposition. Create a sentence by selecting a word at random from each array in the following order: article, noun, verb, preposition, articleand noun. As each word is picked, concatenate it to the previous words in the sentence. The words should be separated byspaces.Whenthefinalsentenceisoutput,itshouldstartwithacapitalletterandendwithaperiod.
The arrays should be filled as follows: the articlearray should contain the articles "the", "a", "one", "some"and "any"; the nounarray should contain the nouns "boy", "girl", "dog", "town"and "car"; the verbarray should contain the verbs "drove", "jumped", "ran", "walked"and "skipped"; the prepositionarray should contain the prepositions "to", "from", "over", "under"and "on".
The program should generate 20 sentences to form a short story and output the result to an HTML5 textarea. The story should begin with a line reading "Onceuponatime..."and end with a line reading "THEEND".
11.8	(Limericks) A limerick is a humorous five-line verse in which the first and second lines rhyme with the fifth, and the third line rhymes with the fourth. Using techniques similar to those developed in Exercise 11.7, write a script that produces random limericks. Polishing this program to produce good limericks is a challenging problem, but the result will be worth the effort!
11.9	(Pig Latin) Write a script that encodes English-language phrases in pig Latin. Pig Latin is a form of coded language often used for amusement. Many variations exist in the methods used to form pig Latin phrases. For simplicity, use the following algorithm:
To form a pig Latin phrase from an English-language phrase, tokenize the phrase into an array of words using Stringmethod split. To translate each English word into a pig Latin word, place the first letter of the English word at the end of the word and add the letters “a .” Thus the word “jump” becomes “umpja ,” the word “the” becomes “hetay” and the word “computer” becomes “omputerca .” Blanks between words remain as blanks. Assume the following: The English phrase consists of words separated by blanks, there are no punctuation marks and all words have two or more letters. Function printLatinWordshould display each word. Each token (i.e., word in the sentence) is passed to method printLatinWord to print the pig Latin word. Enable the user to input the sentence through an HTML5 form. Keep a running display of all the converted sen-tences in an HTML5 textarea.
y
y
y
11.10   Write a script that inputs a telephone number as a string in the form (555)555-5555. The script should use Stringmethod splitto extract the area code as a token, the first three digits of the phone number as a token and the last four digits of the phone number as a token. Display the area code in one text field and the seven-digit phone number in another text field.
11.11   Write a script that inputs a line of text, tokenizes it with Stringmethod splitand outputs the tokens in reverse order.

11.12   Write a script that inputs text from an HTML5 form and outputs it in uppercase and low-ercase letters.
11.13   Writea scriptthatinputsseveral linesof textandasearchcharacterandusesStringmethod indexOfto determine the number of occurrences of the character in the text.
SpecialSection:ChallengingString-ManipulationProjects   391


11.14   Write a script based on the program in Exercise 11.13 that inputs several lines of text and uses Stringmethod indexOfto determine the total number of occurrences of each letter of the alphabet in the text. Uppercase andlowercase letters should be counted together. Store the totals for eachletterin an array, and print thevalues in tabular format in an HTML5 textareaafterthe totals have been determined.
11.15   Write a script that reads a series of strings and outputs in an HTML5 textareaonly those strings beginning with the character “b.”

11.16   Write a script that reads a series of strings and outputs in an HTML5 textareaonly those strings ending with the characters “ed.”
11.17   Write a script that inputs an integer code for a character and displays the corresponding character.
11.18   Modify your solution to Exercise 11.17 so that it generates all possible three-digit codes in the range 000 to 255 and attempts to display the corresponding characters. Display the results in an HTML5 textarea.
11.19   Write your own version of the Stringmethod indexOfand use it in a script. 11.20   Write your own version of the Stringmethod lastIndexOfand use it in a script.
11.21   Write a program that reads a five-letter word from the user and produces all possible three-letter words that can be derived from the letters of the five-letter word. For example, the three-letter wordsproducedfromtheword“bathe”includethecommonlyusedwords“ate,”“bat,”“bet,”“tab,” “hat,” “the” and “tea.” Output the results in an HTML5 textarea.
11.22   (Printing Dates in Various Formats) Dates are printed in several common formats. Write a script that reads a date from an HTML5 form and creates a Dateobject in which to store it. Then use the various methods of the Dateobject that convert Dates into strings to display the date in sev-eral formats.


Special Section: Challenging String-Manipulation Projects
The preceding exercises are keyed to the text and designed to test the reader's understanding of fundamental string-manipulation concepts. This section includes a collection of intermediate and advanced string-manipulation exercises. The reader should find these problems challenging, yet entertaining. The problems vary considerably in difficulty. Some require an hour or two of pro-gram writing and implementation. Others are useful for lab assignments that might require two or three weeks of study and implementation. Some are challenging term projects.
11.23   (Text Analysis) The availability of computers with string-manipulation capabilities has re-sulted in some rather interesting approaches to analyzing the writings of great authors. Much atten-tion has been focused on whether William Shakespeare really wrote the works attributed to him. Some scholars believe there’s substantial evidence indicating that Christopher Marlowe actually penned these masterpieces. Researchers have used computers to find similarities in the writings of these two authors. This exercise examines three methods for analyzing texts with a computer.
a)  Write a script that reads several lines of text from the keyboard and prints a table indi-cating the number of occurrences of each letter of the alphabet in the text. For example, the phrase
To be, or not to be: that is the question:
contains one “a,” two “b’s,” no “c’s,” etc.
392	Chapter11 JavaScript:Objects


b)  Write a script that reads several lines of text and prints a table indicating the number of one-letterwords,two-letterwords,three-letterwords,etc.,appearinginthetext.Forex-ample, the phrase
Whether 'tis nobler in the mind to suffer
contains



Wordlength

1 2 3 4 5 6
7

Occurrences

0 2 1
2 (including ’tis) 0
2
1



c)   Write a script that reads several lines of text and prints a table indicating the number of occurrences of each different word in the text. The first version of your program should include the words in the table in the same order in which they appear in the text. For example, the lines
To be, or not to be: that is the question: Whether 'tis nobler in the mind to suffer
contain the word “to” three times, the word “be” twice, and the word “or” once. A more interesting (and useful) printout should then be attempted in which the words are sorted alphabetically.

11.24   (Check Protection) Computers are frequently employed in check-writing systems such as payroll and accounts payable applications. Many strange stories circulate regarding weekly pay-checks being printed (by mistake) for amounts in excess of $1 million. Incorrect amounts are print-ed by computerized check-writing systems because of human error and/or machine failure. Systems designers build controls into their systems to prevent erroneous checks from being issued.
Another serious problem is the intentional alteration of a check amount by someone who intends to cash a check fraudulently. To prevent a dollar amount from being altered, most computerized check-writing systems employ a technique called check protection.
Checks designed for imprinting by computer contain a fixed number of spaces in which the computer may print an amount. Suppose a paycheck contains eight blank spaces in which the computer is supposed to print the amount of a weekly paycheck. If the amount is large, then all eight of those spaces will be filled, for example:
1,230.60 (check amount)
--------
12345678 (position numbers)
On the other hand, if the amount is less than $1000, then several of the spaces will ordinarily be left blank. For example,
99.87 --------12345678
SpecialSection:ChallengingString-ManipulationProjects   393


contains three blank spaces. If a check is printed with blank spaces, it’s easier for someone to alter the amount of the check. To prevent a check from being altered, many check-writing systems insert leading asterisks to protect the amount as follows:
***99.87 --------12345678
Write a script that inputs a dollar amount to be printed on a check, then prints the amount in check-protected format with leading asterisks if necessary. Assume that nine spaces are available for printing the amount.
11.25   (Writing the Word Equivalent of a Check Amount) Continuing the discussion in the pre-cedingexercise,wereiteratethe importance ofdesigning check-writingsystemsto preventalteration of check amounts. One common security method requires that the check amount be both written in numbers and spelled out in words. Even if someone is able to alter the numerical amount of the check, it’s extremely difficult to change the amount in words.
Many computerized check-writing systems do not print the amount of the check in words. Perhaps the main reason for this omission is that most high-level languages used in commercial applications do not contain adequate string-manipulation features. Another reason is that the logic for writing word equivalents of check amounts is somewhat involved.
Write a script that inputs a numeric check amount and writes the word equivalent of the amount. For example, the amount 112.43 should be written as
ONE HUNDRED TWELVE and 43/100
11.26   (Metric Conversion Program) Write a script that will assist the user with metric conver-sions. Your program should allow the user to specify the names of the units as strings (e.g., centi-meters, liters, grams, for the metric system and inches, quarts, pounds, for the English system) and should respond to simple questions such as
"How many inches are in 2 meters?" "How many liters are in 10 quarts?"
Your program should recognize invalid conversions. For example, the question
"How many feet are in 5 kilograms?"
is not a meaningful question because "feet"is a unit of length whereas "kilograms"is a unit of mass.
11.27   (Project: A Spell Checker) Many popular word-processing software packages have built-in spell checkers.
In this project, you’re asked to develop your own spell-checker utility. We make suggestions to help get you started. You should then consider adding more capabilities. Use a computerized dic-tionary (if you have access to one) as a source of words.
Why do we type so many words with incorrect spellings? In some cases, it’s because we simply do not know the correct spelling, so we make a best guess. In some cases, it’s because we transpose two letters (e.g., “defualt” instead of “default”). Sometimes we double-type a letter accidentally (e.g., “hanndy” instead of “handy”). Sometimes we type a nearby key instead of the one we intended (e.g., “biryhday” instead of “birthday”). And so on.
Design and implement a spell-checker application in JavaScript. Your program should main-tain an array wordListof strings. Enable the user to enter these strings.
Your program should ask a user to enter a word. The program should then look up the word in the wordList array. If the word is present in the array, your program should print “Word is spelledcorrectly”
.
If the word is not present in the array, your program should print “wordisnotspelled cor-rectl .” Then your program should try to locate other words in wordListthat might be the word
y
394	Chapter11 JavaScript:Objects


the user intended to type. For example, you can try all possible single transpositions of adjacent let-ters to discover that the word “default” is a direct match to a word in wordList. Of course, this implies that your program will check all other single transpositions, such as “edfault,” “dfeault,” “deafult,” “defalut” and “defautl.” When you find a new word that matches one in wordList, print that word in a message, such as “Didyoumean"default?"”
Implement any other tests you can develop, such as replacing each double letter with a single letter, to improve the value of your spell checker.
11.28   (Project: Crossword Puzzle Generator) Most people have worked a crossword puzzle, but few haveeverattemptedtogenerateone.Generatinga crosswordpuzzleissuggestedhereas astring-manipulation project requiring substantial sophistication and effort.
You must resolve many issues to get even the simplest crossword puzzle generator program working. For example, how does one represent the grid of a crossword puzzle in the computer? Should one use a series of strings, or use double-subscripted arrays?
You need a source of words (i.e., a computerized dictionary) that can be directly referenced by the program. In what form should these words be stored to facilitate the complex manipulations required by the program?
The really ambitious reader will want to generate the clues portion of the puzzle, in which the brief hints for each across word and each down word are printed for the puzzle worker. Merely printing a version of the blank puzzle itself is not a simple problem.

DocumentObjectModel (DOM):Objectsand Collections

12
Though leaves are many, the root is one.
—William Butler Yeats

Most of us become parents long before we have stopped being children.
—Mignon McLaughlin

Sibling rivalry is inevitable. The only sure way to avoid it is to have one child.
—Nancy Samalin




Objectives Inthischapteryouwill:
ÿ   UseJavaScriptandtheW3C DocumentObjectModelto
createdynamicwebpages.
ÿ   LearntheconceptofDOM
nodesandDOMtrees.
ÿ   Traverse,editandmodify elementsinanHTML5
document.
ÿ   ChangeCSSstyles
dynamically.
ÿ   CreateJavaScriptanimations.
396	Chapter12 DocumentObjectModel(DOM):ObjectsandCollections



12.1  Introduction
12.2  ModelingaDocument:DOMNodes andTrees
12.3  TraversingandModifyingaDOM Tree
12.4  DOMCollections

12.5  DynamicStyles
12.6  UsingaTimerandDynamicStylesto CreateAnimatedEffects


Summary | Self-Review Exercises | Answers to Self-Review Exercises | Exercises



12.1 Introduction
In this chapter we introduce the Document Object Model (DOM). The DOM gives you scripting access to all the elements on a web page. Inside the browser, the whole web page—paragraphs,  forms, tables,  etc.—is  represented  in  an object  hierarchy.  Using JavaScript, you can dynamically create, modify and remove elements in the page.
We introduce the concepts of DOM nodes and DOM trees. We discuss properties and methods of DOM nodes and cover additional methods of the documentobject. We show how to dynamically change style properties, which enables you to create effects, such as user-defined background colors and animations.

Software Engineering Observation 12.1
With the DOM, HTML5 elements can be treated as objects, and many attributes of HTML5 elementscan be treated aspropertiesof thoseobjects.Then objectscan be scripted with JavaScript to achieve dynamic effects.



12.2 Modeling a Document: DOM Nodes and Trees
As we saw in previous chapters, the document’s getElementByIdmethod is the simplest way to access a specific element in a page. The method returns objects called DOM nodes. Every piece of an HTML5 page (elements, attributes, text, etc.) is modeled in the web browser by a DOM node. All the nodes in a document make up the page’s DOM tree, whichdescribestherelationshipsamongelements.Nodesarerelatedtoeachotherthrough child-parent relationships. An HTML5 element inside another element is said to be its child—the containing element is known as the parent. A node can have multiple children but only one parent. Nodes with the same parent node are referred to as siblings.
Today’s desktop browsers provide developer tools that can display a visual representa-tion of a document’s DOM tree. Figure 12.1 shows how to access the developer tools for each of the desktop browsers we use for testing web apps in this book. For the most part, the developer tools are similar across the browsers. [Note: For Firefox, you must first install the DOM Inspector add-on from https://addons.mozilla.org/en-US/firefox/addon/ dom-inspector-6622/. Other developer tools are available in the Firefox menu’s Web Developer menu item, andmoreFirefox web-developeradd-onsareavailablefromhttps:/ /addons.mozilla.org/en-US/firefox/collections/mozilla/webdeveloper/.]
12.2 ModelingaDocument:DOMNodesandTrees   397



Browser

Chrome

Firefox

Internet Explorer Opera

Safari

Commandtodisplaydevelopertools

Windows/Linux: Control + Shift + i Mac OS X: Command + Option + i
Windows/Linux: Control + Shift + i Mac OS X: Command + Shift + i
F12
Windows/Linux: Control + Shift + i Mac OS X: Command + Option + i
Windows/Linux: Control + Shift + i Mac OS X: Command + Option + i


Fig. 12.1  | Commandsfordisplayingdevelopertoolsin desktopbrowsers.

Viewing a Document’s DOM
Figure 12.2 shows an HTML5 document in the Chrome web browser. At the bottom of the window, the document’s DOM tree is displayed in the Elements tab of the Chrome developer tools. The HTML5 document contains a few simple elements. A node can be expanded and collapsed using the	and	arrows next to a given node. Figure 12.2 shows all the nodes in the document fully expanded. The html node at the top of the tree is called the root node, because it has no parent. Below the html node, the head node is indentedtosignifythat the head nodeisachildofthehtml node.Thehtml noderepresents the htmlelement (lines 5–21).


1  <!DOCTYPE html> 2
3  <!-- Fig. 12.2: domtree.html -->
4  <!-- Demonstration of a document's DOM tree. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>DOM Tree Demonstration</title> 9     </head>
10	<body>
11	<h1>An HTML5 Page</h1>
12	<p>This page contains some basic HTML5 elements. The DOM tree 13            for the document contains a DOM node for every element</p> 14	<p>Here's an unordered list:</p>
15	<ul>
16	<li>One</li> 17	<li>Two</li> 18	<li>Three</li> 19         </ul>
20	</body>
21  </html>

Fig. 12.2  | Demonstrationofadocument’sDOMtree.(Part1of2.)
398	Chapter12 DocumentObjectModel(DOM):ObjectsandCollections


































Fig. 12.2  | Demonstrationofadocument’sDOMtree.(Part2of2.)

The head and body nodes are siblings, since they’re both children of the html node. The head contains the meta and title nodes. The body node contains nodes representing each of the elements in the document’s bodyelement. The li nodes are children of the ul node, since they’re nested inside it.
When you select a node in the left side of the developer tools Elements tab, the node’s details are displayed in the right side. In Fig. 12.2, we selected the p node just before the unordered list. In the Properties section, you can see values for that node’s many proper-ties, including the innerHTMLproperty that we’ve used in many examples.
In addition to viewing a document’s DOM structure, the developer tools in each browser typically enable you to view and modify styles, view and debug JavaScripts used in the document, view the resources (such as images) used by the document, and more. See each browser’s developer tools documentation online for more detailed information.
12.3 TraversingandModifyingaDOMTree   399

12.3 Traversing and Modifying a DOM Tree
The DOM enables you to programmatically access a document’s elements, allowing you to modify its contents dynamically using JavaScript. This section introduces some of the DOM-node properties and methods for traversing the DOM tree, modifying nodes and creating or deleting content dynamically.
The example in Figs. 12.3–12.5 demonstrates several DOM node features and two additional document-object methods. It allows you to highlight, modify, insert and remove elements.

CSS
Figure 12.3 contains the CSS for the example. The CSS class highlighted (line 14) is ap-plied dynamically to elements in the document as we add, remove and select elements us-ing the formin Fig. 12.4.

1  /* Fig. 12.3: style.css */ 2  /* CSS for dom.html. */
3  h1, h3	{ text-align: center;
4	font-family: tahoma, geneva, sans-serif; } 5  p            { margin-left: 5%;
6	margin-right: 5%;
7	font-family: arial, helvetica, sans-serif; } 8  ul           { margin-left: 10%; }
9  a	{ text-decoration: none; }
10  a:hover	{ text-decoration: underline; } 11  .nav	{ width: 100%;
12	border-top: 3px dashed blue; 13	padding-top: 10px; }
14  .highlighted { background-color: yellow; } 15  input	{ width: 150px; }
16  form > p	{ margin: 0px; }

Fig. 12.3  | CSSforbasicDOMfunctionalityexample.

HTML5 Document
Figure 12.4 contains the HTML5 document that we’ll manipulate dynamically by modi-fying its DOM. Each element in this example has an idattribute, which we also display at the beginning of the element in square brackets. For example, the idof the h1element in lines 13–14 is set to bigheading, and the heading text begins with [bigheading]. This allows you tosee the idof each element in the page. The bodyalso contains an h3heading, several pelements, and an unordered list. A divelement (lines 29–48) contains the re-mainder of the document. Line 30 begins a form. Lines 32–46 contain the controls for modifying and manipulating the elements on the page. The clickevent handlers (regis-tered in Fig. 12.5) for the six buttons call corresponding functions to perform the actions described by the buttons’ values.

JavaScript
The JavaScript code (Fig. 12.5) begins by declaring two variables. Variable currentNode (line 3) keeps track of the currently highlighted node—the functionality of each button
400	Chapter12 DocumentObjectModel(DOM):ObjectsandCollections


1  <!DOCTYPE html> 2
3  <!-- Fig. 12.4: dom.html -->
4  <!-- Basic DOM functionality. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Basic DOM Functionality</title>
9	<link rel = "stylesheet" type = "text/css" href = "style.css"> 10	<script src = "dom.js"></script>
11	</head> 12	<body>
13	<h1 id = "bigheading" class = "highlighted"> 14            [bigheading] DHTML Object Model</h1>
15	<h3 id = "smallheading">[smallheading] Element Functionality</h3> 16	<p id = "para1">[para1] The Document Object Model (DOM) allows for 17            quick, dynamic access to all elements in an HTML5 document for 18            manipulation with JavaScript.</p>
19	<p id = "para2">[para2] For more information, check out the 20            "JavaScript and the DOM" section of Deitel's
21	<a id = "link" href = "http://www.deitel.com/javascript"> 22               [link] JavaScript Resource Center.</a></p>
23	<p id = "para3">[para3] The buttons below demonstrate:(list)</p> 24	<ul id = "list">
25	<li id = "item1">[item1] getElementById and parentNode</li> 26	<li id = "item2">[item2] insertBefore and appendChild</li> 27	<li id = "item3">[item3] replaceChild and removeChild</li> 28         </ul>
29	<div id = "nav" class = "nav">
30	<form onsubmit = "return false" action = "#">
31	<p><input type = "text" id = "gbi" value = "bigheading"> 32                  <input type = "button" value = "Get By id"
33	id = "byIdButton"></p>
34	<p><input type = "text" id = "ins">
35	<input type = "button" value = "Insert Before" 36                     id = "insertButton"></p>
37	<p><input type = "text" id = "append">
38	<input type = "button" value = "Append Child" 39                     id = "appendButton"></p>
40	<p><input type = "text" id = "replace">
41	<input type = "button" value = "Replace Current" 42                     id = "replaceButton()"></p>
43	<p><input type = "button" value = "Remove Current" 44                     id = "removeButton"></p>
45	<p><input type = "button" value = "Get Parent" 46                     id = "parentButton"></p>
47	</form> 48         </div>
49	</body>
50  </html>

Fig. 12.4  | HTML5documentthat’susedtodemonstrateDOMfunctionalityfordynamically adding,removingandselectingelements.(Part1of2.)
12.3 TraversingandModifyingaDOMTree   401



Thedocumentwhenitfirstloads.Itbeginswiththelargeheadinghighlighted.
























Fig. 12.4  | HTML5documentthat’susedtodemonstrateDOMfunctionalityfordynamically adding,removingandselectingelements.(Part2of2.)

depends on which node is currently selected. Function start(lines 7–24) registers the ev-vent handlers for the document’s buttons, then initializes currentNodeto the h1element with idbigheading. This function is set up to be called when the window’s loadevent (line 27) occurs. Variable idcount(line 4) is used to assign a unique idto any new ele-ments that are created. The remainder of the JavaScript code contains event-handling functions for the buttons and two helper functions that are called by the event handlers. We now discuss each buttonand its corresponding event handler in detail.

1  // Fig. 12.5: dom.js
2  // Script to demonstrate basic DOM functionality.
3  var currentNode; // stores the currently highlighted node
4  var idcount = 0; // used to assign a unique id to new elements 5
6  // register event handlers and initialize currentNode 7  function start()
8  {

Fig. 12.5  | ScripttodemonstratebasicDOMfunctionality.(Part1of3.)
402	Chapter12 DocumentObjectModel(DOM):ObjectsandCollections


9	document.getElementById( "byIdButton" ).addEventListener( 10         "click", byId, false );
11	document.getElementById( "insertButton" ).addEventListener( 12         "click", insert, false );
13	document.getElementById( "appendButton" ).addEventListener( 14         "click", appendNode, false );
15	document.getElementById( "replaceButton" ).addEventListener( 16         "click", replaceCurrent, false );
17	document.getElementById( "removeButton" ).addEventListener( 18         "click", remove, false );
19	document.getElementById( "parentButton" ).addEventListener( 20         "click", parent, false );
21
22	// initialize currentNode
23	currentNode = document.getElementById( "bigheading" ); 24  } // end function start
25
26  // call start after the window loads
27  window.addEventListener( "load", start, false ); 28
29  // get and highlight an element by its id attribute 30  function byId()
31  {
32	var id = document.getElementById( "gbi" ).value; 33	var target = document.getElementById( id );
34
35	if ( target )
36	switchTo( target ); 37  } // end function byId
38
39  // insert a paragraph element before the current element 40  // using the insertBefore method
41  function insert() 42  {
43	var newNode = createNewNode(
44	document.getElementById( "ins" ).value );
45	currentNode.parentNode.insertBefore( newNode, currentNode ); 46	switchTo( newNode );
47  } // end function insert 48
49  // append a paragraph node as the child of the current node 50  function appendNode()
51  {
52	var newNode = createNewNode(
53	document.getElementById( "append" ).value ); 54     currentNode.appendChild( newNode );
55	switchTo( newNode );
56  } // end function appendNode 57
58  // replace the currently selected node with a paragraph node 59  function replaceCurrent()
60  {

Fig. 12.5  | ScripttodemonstratebasicDOMfunctionality.(Part2of3.)
12.3 TraversingandModifyingaDOMTree   403


61	var newNode = createNewNode(
62	document.getElementById( "replace" ).value );
63	currentNode.parentNode.replaceChild( newNode, currentNode ); 64	switchTo( newNode );
65  } // end function replaceCurrent 66
67  // remove the current node 68  function remove()
69  {
70	if ( currentNode.parentNode == document.body ) 71         alert( "Can't remove a top-level element." ); 72	else
73	{
74	var oldNode = currentNode;
75	switchTo( oldNode.parentNode );
76	currentNode.removeChild( oldNode ); 77     }
78  } // end function remove 79
80  // get and highlight the parent of the current node 81  function parent()
82  {
83	var target = currentNode.parentNode; 84
85	if ( target != document.body ) 86         switchTo( target );
87	else
88	alert( "No parent." ); 89  } // end function parent
90
91  // helper function that returns a new paragraph node containing 92  // a unique id and the given text
93  function createNewNode( text ) 94  {
95	var newNode = document.createElement( "p" ); 96	nodeId = "new" + idcount;
97	++idcount;
98	newNode.setAttribute( "id", nodeId ); // set newNode's id 99	text = "[" + nodeId + "] " + text;
100	newNode.appendChild( document.createTextNode( text ) ); 101	return newNode;
102 } // end function createNewNode 103
104 // helper function that switches to a new currentNode 105 function switchTo( newNode )
106 {
107	currentNode.setAttribute( "class", "" ); // remove old highlighting 108	currentNode = newNode;
109	currentNode.setAttribute( "class", "highlighted" ); // highlight 110	document.getElementById( "gbi" ).value =
111	currentNode.getAttribute( "id" );
112 } // end function switchTo

Fig. 12.5  | ScripttodemonstratebasicDOMfunctionality.(Part3of3.)
404	Chapter12 DocumentObjectModel(DOM):ObjectsandCollections


Finding and Highlighting an Element Using getElementById, setAttributeand getAttribute
Thefirstrowoftheform(Fig. 12.4,lines31–33)allowstheusertoentertheidofanelement into the text field and click the Get By Id button to find and highlight the element, as shown in Fig. 12.6. The button’s clickevent calls function byId.






















Fig. 12.6 | ThedocumentofFigure12.4afterusingtheGet By id buttontoselectitem1.

The byIdfunction (Fig. 12.5, lines 30–37) uses getElementByIdto assign the contents of the text field to variable id. Line 33 uses getElementByIdto find the element whose id attributematchesvariableidandassignittovariabletarget.Ifanelementisfoundwiththe given id, an object is returned; otherwise, nullis returned. Line 35 checks whether target is an object—any object used as a boolean expression is true, while nullis false. If target evaluates to true, line 36 calls the switchTofunction with targetas its argument.
The switchTofunction (lines 105–112) is used throughout the script to highlight an element in thepage. The current element is given a yellowbackgroundusingthe styleclass highlighted, defined in the CSS styles. This function introduces the DOM element methods setAttributeand getAttribute, which allow you to modify an attribute value and get an attribute value, respectively. Line 107 uses setAttributeto set the current node’s classattribute to the empty string. This clears the classattribute to remove the highlightedclass from the currentNodebefore we highlight the new one.
Line 108 assigns the newNodeobject (passed into the function as a parameter) to vari-able currentNode. Line 109 uses setAttributeto set the new node’s class attribute to the CSS class highlighted.
Finally, lines 110–111 use getAttributeto get the currentNode’s idand assign it to the input field’s valueproperty. While this isn’t necessary when switchTois called by byId,
12.3 TraversingandModifyingaDOMTree   405


we’ll see shortly that other functions call switchTo. This line ensures that the text field’s valuecontains the currently selected node’s id. Notice that we did not use setAttribute to change the valueof the input field. Methods setAttributeand getAttributedo not work for user-modifiable content, such as the value displayed in an input field.

Creating and Inserting Elements Using insertBeforeand appendChild
The second and third rows in the form (Fig. 12.4, lines 34–39) allow the user to create a new element and insert it before or as a child of the current node, respectively. If the user enters text in the second text field and clicks Insert Before, the text is placed in a new para-graph element, which is inserted into the document before the currently selected element, as in Fig. 12.7. The button’s clickevent calls function insert(Fig. 12.5, lines 41–47).
Lines 43–44 call the function createNewNode, passing it the value of the "ins"input fieldasan argument.FunctioncreateNewNode,definedinlines93–102,createsaparagraph nodecontainingthetextpassedtoit.Line95createsapelementusingthedocumentobject’s createElementmethod, which creates a new DOM node, taking the tag name as an argu-ment. Though createElementcreates an element, it does not insert theelement on the page. Line 96 creates a unique idforthe new element by concatenating "new"and the value
of idcountbefore incrementing idcount. Line 98 uses setAttributeto set the idof the new element. Line 99 concatenates the element’s idin square brackets to the beginning of text(the parameter containing the paragraph’s text).
Line100introducestwonewmethods.The document’screateTextNodemethodcre-ates a node that contains only text. Given a string argument, createTextNodeinserts the






















Fig. 12.7  | ThedocumentofFigure12.4afterselectingpara3withtheGet By id button,then usingtheInsert Before buttontoinsertanewparagraphbeforepara3.
406	Chapter12 DocumentObjectModel(DOM):ObjectsandCollections


string into the text node. We create a new text node containing the contents of variable text. This new node is then used as the argument to the appendChildmethod, which is called on the new paragraph’s node. Method appendChildinserts a child node (passed as an argument) after any existing children of the node on which it’s called.
After the p element is created, line 101 returns the node to the calling function insert, where it’s assigned to newNode(line 43). Line 45 inserts the new node before the currently selected one. Property parentNodecontains the node’s parent. In line 45, we use this property to get currentNode’s parent. Then we call the insertBeforemethod (line 45) on the parent with newNodeand currentNodeas its arguments. This inserts newNode as a child of the parent directly before currentNode. Line 46 uses our switchTofunction to update the currentNodeto the newly inserted node and highlight it in the document.
Theinputfieldand buttoninthethirdtablerowallowtheusertoappendanewpara-graphnodeasachildof thecurrentelement(Fig. 12.8).Thisfeatureuses aproceduresim-ilar to the insertfunction. Lines 52–53 in function appendNodecreate a new node, line 54 inserts it as a child of the current node, and line 55 uses switchToto update current-Nodeand highlight the new node.
























Fig. 12.8 | ThedocumentofFigure12.4afterusingtheAppend Child buttontoappenda childtothenewparagraphinFigure12.7.

Replacing and Removing Elements Using replaceChildand removeChild
The next two table rows (Fig. 12.4, lines 40–44) allow the user to replace the current ele-ment with a new pelement or simply remove the current element. When the user clicks Replace Current (Fig. 12.9), function replaceCurrent(Fig. 12.5, lines 59–65) is called.
12.3 TraversingandModifyingaDOMTree   407























Fig. 12.9 | ThedocumentofFigure12.4afterusingtheReplace Current buttontoreplacethe paragraphcreatedinFigure12.8.

In function replaceCurrent, lines 61–62 call createNewNode, in the same way as in insertand appendNode, getting the text from the correct input field. Line 63 gets the parent  of  currentNode,  then  calls  the  replaceChild method  on  the  parent.  The replaceChild method receives as its first argument the new node to insert and as its second argument the node to replace.
Clicking  the  Remove  Current  button (Fig. 12.10)  calls  the  remove function (Fig. 12.5, lines 68–77) to remove the current element entirely and highlights the parent. If the node’s parent is the bodyelement, line 71 displays an error message—the program does not allow the entire bodyelement to be selected. Otherwise, lines 74–76 remove the current element. Line 74 stores the old currentNodein variable oldNode. We do this to maintain a reference to the node to be removed after we’ve changed the value of current-Node. Line 75 calls switchToto highlight the parent node. Line 76 uses the removeChild method to remove the oldNode(a child of the new currentNode) from its place in the HTML5 document. In general,

parent.removeChild( child  );
looks in parent’s list of children for child and removes it.
The form’s Get Parent buttonselects and highlights the parent element of the cur-rently highlighted element (Fig. 12.11) by calling the parentfunction (Fig. 12.5, lines 81–89). The function simply gets the parent node (line 83), makes sure it’s not the body element and calls switchToto highlight the parent; otherwise, we display an error if the parent node is the bodyelement.
408	Chapter12 DocumentObjectModel(DOM):ObjectsandCollections






















Fig. 12.10 | ThedocumentofFigure12.4afterusingtheRemove Current buttontoremove theparagraphhighlightedinFigure12.9.






















Fig. 12.11 | ThedocumentofFigure12.4afterusingtheGet By id buttontoitem2,then usingtheGet Parent buttontoselectitem2’sparent—theunorderedlist.
12.4 DOMCollections   409

12.4 DOM Collections
TheDocument Object Modelcontainsseveral collections, whicharegroupsofrelatedob-jects on a page. DOM collections are accessed as properties of DOM objects such as the documentobject or a DOM node. The documentobject has properties containing the
•	imagescollection •	linkscollection •	formscollection
•	anchorscollection
These collections contain all the elements of the corresponding type on the page. The example of Figs. 12.12–12.14 uses the linkscollection to extract all the links on a page and display them at the bottom of the page.

CSS
Figure 12.12 contains the CSS for the example.

1  /* Fig. 12.12: style.css */
2  /* CSS for collections.html. */
3  body	{ font-family: arial, helvetica, sans-serif } 4  h1	{ font-family: tahoma, geneva, sans-serif;
5	text-align: center } 6  p a            { color: DarkRed }
7  ul	{ font-size: .9em; } 8  li	{ display: inline;
9	list-style-type: none;
10	border-right: 1px solid gray;
11	padding-left: 5px; padding-right: 5px; } 12  li:first-child { padding-left: 0px; }
13  li:last-child { border-right: none; }
14  a	{ text-decoration: none; }
15  a:hover	{ text-decoration: underline; }

Fig. 12.12 | CSSforcollections.html.

HTML5 Document
Figure 12.13 presents the example’s HTML5 document. The bodycontains two para-graphs (lines 14–28) with links at various places in the text and an empty div(line 29) with the id"links".


1  <!DOCTYPE html> 2
3  <!-- Fig. 12.13: collections.html --> 4  <!-- Using the links collection. --> 5  <html>
6	<head>

Fig. 12.13 | Usingthelinkscollection.(Part1of2.)
410	Chapter12 DocumentObjectModel(DOM):ObjectsandCollections


7	<meta charset="utf-8">
8	<title>Using Links Collection</title>
9	<link rel = "stylesheet" type = "text/css" href = "style.css"> 10	<script src = "collections.js"></script>
11	</head> 12	<body>
13	<h1>Deitel Resource Centers</h1>
14	<p><a href = "http://www.deitel.com/">Deitel's website</a> 15            contains a growing
16	<a href = "http://www.deitel.com/ResourceCenters.html">list 17	of Resource Centers</a> on a wide range of topics. Many
18	Resource centers related to topics covered in this book, 19	<a href = "http://www.deitel.com/books/iw3htp5">Internet & 20	World Wide Web How to Program, 5th Edition</a>. We have 21	Resource Centers on
22	<a href = "http://www.deitel.com/Web2.0">Web 2.0</a>,
23	<a href = "http://www.deitel.com/Firefox">Firefox</a> and
24	<a href = "http://www.deitel.com/IE9">Internet Explorer 9</a>, 25	<a href = "http://www.deitel.com/HTML5">HTML5</a>, and
26	<a href = "http://www.deitel.com/JavaScript">JavaScript</a>. 27	Watch for related new Resource Centers.</p>
28	<p>Links in this page:</p> 29	<div id = "links"></div> 30     </body>
31  </html>














Fig. 12.13 | Usingthelinkscollection.(Part2of2.)

JavaScript
Function processlinks(Fig. 12.14) is calledwhen the window’sloadevent occurs (as spec-ified in line 20). The function declares variable linksList(line 5) to store the document’s linkscollection, which is accessed with the linksproperty of the documentobject. Line 6 creates the string (contents) that will contain all the document’s links as an unordered list, to be inserted into the "links"divlater. Lines 9–14 iterate through the linkscollection. The collection’s lengthproperty specifies the number of items in the collection.
Line 11 stores the current link. You access the elements of the collection using indices in square brackets, just as we did with arrays. DOM collection objects have one property
12.5 DynamicStyles   411


1  // Fig. 12.14: collections.js
2  // Script to demonstrate using the links collection. 3  function processLinks()
4  {
5	var linksList = document.links; // get the document's links 6	var contents = "<ul>";
7
8	// concatenate each link to contents
9	for ( var i = 0; i < linksList.length; ++i ) 10	{
11	var currentLink = linksList[ i ];
12	contents += "<li><a href='" + currentLink.href + "'>" + 13            currentLink.innerHTML + "</li>";
14	} // end for 15
16	contents += "</ul>";
17	document.getElementById( "links" ).innerHTML = contents; 18  } // end function processLinks
19
20  window.addEventListener( "load", processLinks, false );

Fig. 12.14 | Scripttodemonstrateusingthelinkscollection.

and two methods—the lengthproperty, the itemmethod and the namedItemmethod. The itemmethod—an alternative to the square bracketed indices—receives an an integer argument and returns the corresponding item in the collection. The namedItemmethod receives an element idas an argument and finds the element with that idin the collection. Lines 12–13 add to the contentsstring an lielement containing the current link. VariablecurrentLink(aDOMnoderepresentinganaelement)hasanhrefpropertyrep-resenting the link’s hrefattribute. Line 17 inserts the contents into the empty divwith
id"links"to show all the links on the page in one location.
Collections allow easy access to all elements of a single type in a page. This is useful for gathering elements into one place and for applying changes to those elements across an entirepage.Forexample,theformscollectioncouldbeusedtodisableallforminputsafter asubmitbutton hasbeenpressedtoavoid multiple submissionswhilethenext pageloads.

12.5 Dynamic Styles
An element’s style can be changed dynamically. Often such a change is made in response to user events, which we discuss in Chapter 13. Style changes can create mouse-hover ef-fects, interactive menus and animations. The example in Figs. 12.15–12.16 changes the document body’s background-colorstyle property in response to user input. The docu-ment (Fig. 12.15) contains just a paragraph of text.

1  <!DOCTYPE html> 2
3  <!-- Fig. 12.15: dynamicstyle.html -->
4  <!-- Dynamic styles. -->

Fig. 12.15 | Dynamicstyles.(Part1of2.)
412	Chapter12 DocumentObjectModel(DOM):ObjectsandCollections


5  <html>
6	<head>
7	<meta charset="utf-8">
8	<title>Dynamic Styles</title>
9	<script src = "dynamicstyle.js"></script> 10     </head>
11	<body>
12	<p>Welcome to our website!</p> 13     </body>
14  </html>














Fig. 12.15 | Dynamicstyles.(Part2of2.)

Functionstart(Fig. 12.16)iscalledwhenthewindow’sloadeventoccurs(asspecified inline11).Thefunctionpromptstheusertoenteracolorname,thensetsthebodyelement’s backgroundcolortothatvalue.[Note:Anerroroccursifthevalueenteredisnotavalidcolor. SeeAppendix B,HTMLColors,foralistofcolornames.]Thedocumentobject’sbodyprop-ertyreferstothebodyelement.WethenusethesetAttributemethodtosetthestyleattri-bute with the user-specified color for the background-colorCSS property. If you have predefined CSS style classes defined for your document, you can also use the setAttribute methodtoset theclassattribute.So, ifyou hadaclassnamed.redyou couldset theclass attribute’s value to "red"to apply the style class.

1  // Fig. 12.16: dynamicstyle.js
2  // Script to demonstrate dynamic styles. 3  function start()
4  {
5	var inputColor = prompt( "Enter a color name for the " + 6         "background of this page", "" );
7	document.body.setAttribute( "style",
8	"background-color: " + inputColor ); 9  } // end function start
10
11  window.addEventListener( "load", start, false );

Fig. 12.16 | Scripttodemonstratedynamicstyles.
12.6 UsingaTimerandDynamicStylestoCreateAnimatedEffects   413

12.6 Using a Timer and Dynamic Styles to Create
Animated Effects
The example of Figs. 12.17–12.19 introduces the window object’s setInterval and clearIntervalmethods, combining them with dynamic styles to create animated effects. This example is a basic image viewer that allows you to select a book cover and view it in a larger size. When the user clicks a thumbnail image, the larger version grows from the top-left corner of the main image area.


CSS
Figure 12.17 contains the CSS styles used in the example.


1  /* Fig. 12.17: style.css */
2  /* CSS for coverviewer.html. */ 3  #thumbs   { width: 192px;
4	height: 370px; 5	padding: 5px; 6	float: left } 7  #mainimg  { width: 289px; 8	padding: 5px; 9	float: left }
10  #imgCover { height: 373px }
11  img	{ border: 1px solid black }

Fig. 12.17 | CSSforcoverviewer.html.


HTML5 Document
The HTML5 document (Fig. 12.18) contains two divelements, both floated leftusing styles defined in Fig. 12.17 to present them side by side. The left divcontains the full-size imagejhtp.jpg,whichappearswhenthepageloads.Therightdivcontainssixthumbnail images. Each responds to its click event by calling the displayfunction (as registered in Fig. 12.19) and passing it the filename of the corresponding full-size image.


1  <!DOCTYPE html> 2
3  <!-- Fig. 12.18: coverviewer.html -->
4  <!-- Dynamic styles used for animation. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Deitel Book Cover Viewer</title>
9	<link rel = "stylesheet" type = "text/css" href = "style.css"> 10	<script src = "coverviewer.js"></script>
11	</head>

Fig. 12.18 | Dynamicstylesusedforanimation.(Part1of4.)
414	Chapter12 DocumentObjectModel(DOM):ObjectsandCollections


12	<body>
13	<div id = "mainimg">
14	<img id = "imgCover" src = "fullsize/jhtp.jpg" 15               alt = "Full cover image">
16	</div>
17	<div id = "thumbs" >
18	<img src = "thumbs/jhtp.jpg" id = "jhtp" 19               alt = "Java How to Program cover">
20	<img src = "thumbs/iw3htp.jpg" id = "iw3htp"
21	alt = "Internet & World Wide Web How to Program cover"> 22            <img src = "thumbs/cpphtp.jpg" id = "cpphtp"
23	alt = "C++ How to Program cover">
24	<img src = "thumbs/jhtplov.jpg" id = "jhtplov" 25               alt = "Java How to Program LOV cover">
26	<img src = "thumbs/cpphtplov.jpg" id = "cpphtplov" 27               alt = "C++ How to Program LOV cover">
28	<img src = "thumbs/vcsharphtp.jpg" id = "vcsharphtp" 29               alt = "Visual C# How to Program cover">
30	</div> 31     </body>
32  </html>



a)ThecoverviewerpageloadswiththecoverofJava How to Program, 9/e























Fig. 12.18 | Dynamicstylesusedforanimation.(Part2of4.)
12.6 UsingaTimerandDynamicStylestoCreateAnimatedEffects   415


b)WhentheuserclicksthethumbnailofInternet & World Wide Web How to Program, 5/e,thefull-sizeimage beginsgrowingfromthetop-leftcornerofthewindow





















c)Thecovercontinuestogrow





















Fig. 12.18 | Dynamicstylesusedforanimation.(Part3of4.)
416	Chapter12 DocumentObjectModel(DOM):ObjectsandCollections


d)Theanimationfinisheswhenthecoverreachesitsfullsize





















Fig. 12.18 | Dynamicstylesusedforanimation.(Part4of4.)

JavaScript
Figure 12.19 contains the JavaScript code that creates the animation effect. The same ef-fectscanbeachievedbydeclaringanimationsandtransitionsin CSS3,aswedemonstrated in Sections 5.12–5.13.

1  // Fig. 12.19: coverviewer.js
2  // Script to demonstrate dynamic styles used for animation. 3  var interval = null; // keeps track of the interval
4  var speed = 6; // determines the speed of the animation 5  var count = 0; // size of the image during the animation 6
7  // called repeatedly to animate the book cover 8  function run()
9  {
10	count += speed; 11
12	// stop the animation when the image is large enough 13	if ( count >= 375 )
14	{
15	window.clearInterval( interval ); 16	interval = null;
17	} // end if

Fig. 12.19 | Scripttodemonstratedynamicstylesusedforanimation.(Part1of2.)
12.6 UsingaTimerandDynamicStylestoCreateAnimatedEffects   417


18
19	var bigImage = document.getElementById( "imgCover" );
20	bigImage.setAttribute( "style", "width: " + (0.7656 * count + "px;") + 21         "height: " + (count + "px;") );
22  } // end function run 23
24  // inserts the proper image into the main image area and 25  // begins the animation
26  function display( imgfile ) 27  {
28	if ( interval ) 29         return;
30
31	var bigImage = document.getElementById( "imgCover" );
32	bigImage.setAttribute( "style", "width: 0px; height: 0px;" ); 33	bigImage.setAttribute( "src", "fullsize/" + imgfile );
34	bigImage.setAttribute( "alt", "Large version of " + imgfile ); 35	count = 0; // start the image at size 0
36	interval = window.setInterval( "run()", 10 ); // animate 37  } // end function display
38
39  // register event handlers 40  function start()
41  {
42	document.getElementById( "jhtp" ).addEventListener(
43	"click", function() { display( "jhtp.jpg" ); }, false ); 44     document.getElementById( "iw3htp" ).addEventListener(
45	"click", function() { display( "iw3htp.jpg" ); }, false ); 46     document.getElementById( "cpphtp" ).addEventListener(
47	"click", function() { display( "cpphtp.jpg" ); }, false ); 48     document.getElementById( "jhtplov" ).addEventListener(
49	"click", function() { display( "jhtplov.jpg" ); }, false ); 50     document.getElementById( "cpphtplov" ).addEventListener(
51	"click", function() { display( "cpphtplov.jpg" ); }, false ); 52     document.getElementById( "vcsharphtp" ).addEventListener(
53	"click", function() { display( "vcsharphtp.jpg" ); }, false ); 54  } // end function start
55
56  window.addEventListener( "load", start, false );

Fig. 12.19 | Scripttodemonstratedynamicstylesusedforanimation.(Part2of2.)


The displayfunction (lines 26–36) dynamically updates the image in the left divto the one the user clicked. Lines 28–29 prevent the rest of the function from executing if intervalis defined (i.e., an animation is in progress.) Line 31 gets the left divby its id, imgCover. Line 32 sets the image’s styleattribute, using 0pxfor the widthand height— the initial size of the image before the animation begins. Next, line 33 sets the image’s src attribute to the specified image file in the fullsizedirectory, and line 34 sets its required altattribute. Line 35 sets count, the variable that controls the animation, to 0.
Line 36 introduces the windowobject’s setIntervalmethod, which creates a timer that controls our animation. This method takes two parameters—a statement to execute repeatedly, and an integer specifying how often to execute it, in milliseconds. We use
418	Chapter12 DocumentObjectModel(DOM):ObjectsandCollections


setIntervalto call function run(lines 8–22) every 10milliseconds. The setInterval method returns a unique identifier to keep track of that particular interval timer—we assign this identifier to the variable interval. This identifier can be used later to stop the timer (and thus, the animation) when the image has finished growing.
The runfunction increases the height of the image by the value of speedand updates its width accordingly to keep the aspect ratio consistent. The runfunction is called every 10 milliseconds, so the image grows dynamically. Line 10 adds the value of speed (declared and initialized to 6in line 4) to count, which keeps track of the animation’s progress and determines the current size of the image. If the image has grown to its full height(375), line 15 uses the window’s clearIntervalmethod to terminate the timer, which prevents function runfrom being called again until the user clicks another thumb-nail image. We pass to clearIntervalthe interval-timer identifier (stored in interval) that setIntervalcreated in line 36. Since each interval timer has its own unique identi-fier, scripts can keep track of multiple interval timers and choose which one to stop when calling clearInterval.
Line 19 gets the imgCoverelement, and lines 20–21 set its widthand heightCSS properties. Note that line 20 multiplies countby a scaling factor of 0.7656—this is the aspect ratio of the width to the height for the images used in this example. Run the code example and click on a thumbnail image to see the full animation effect.

Function start—Using Anonymous functions
Function start(lines 40–54) registers the clickevent handlers for the imgelements in the HTML5 document. In each case, we define an anonymous function to handle the event. An anonymous function is defined with no name—it’s created in nearly the same way as any other function, but with no identifier after the keyword function. This nota-tion is useful when creating a function for the sole purpose of assigning it to an event han-dler. It’s also useful when you must provide arguments to the function, since you cannot provide a function call as the second argument to addEventListener—if you did, the JavaScript interpreter would call the function, then pass the result of the function call to addEventListener. In line 43, the code

function() { display( "jhtp.jpg" ); }
defines an anonymous function that calls function displaywith the name of the image file to display.



Summary
Section 12.1 Introduction
•  The Document Object Model (p. 396) gives you access to all the elements on a web page. Using JavaScript, you can dynamically create, modify and remove elements in the page.

Section 12.2 Modeling a Document: DOM Nodes and Trees
•  The getElementByIdmethod returns objects called DOM nodes (p. 396). Every element in an HTML5 page is modeled in the web browser by a DOM node.
•  All the nodes in a document make up the page’s DOM tree (p. 396), which describes the rela-tionships among elements.
Summary   419


•  Nodes are related to each other through child-parent relationships. An HTML5 element inside another element is said to be its child (p. 396)—the containing element is known as the parent (p. 396). A node can have multiple children but only one parent. Nodes with the same parent node are referred to as siblings (p. 396).
•  The document node in a DOM tree is called the root node (p. 397), because it has no parent.

Section 12.3 Traversing and Modifying a DOM Tree
•  DOM element methods setAttributeand getAttribute(p. 404) allow you to modify an attri-bute value and get an attribute value of an element, respectively.
•  The documentobject’s createElementmethod (p. 405) creates a new DOM node, taking the tag name as an argument. Note that while createElementcreates an element, it does not insert the element on the page.
•  The document’s createTextNodemethod (p. 405) creates a DOM node that can contain only text. Given a string argument, createTextNodeinserts the string into the text node.
•  Method appendChild(p. 406) is called on a parent node to insert a child node (passed as an ar-gument) after any existing children.
•  The parentNodeproperty (p. 406) of any DOM node contains the node’s parent.
•  The insertBeforemethod (p. 406) is called on a parent having a new child and an existing child as arguments. The new child is inserted as a child of the parent directly before the existing child.
•  The replaceChildmethod (p. 407) is called on a parent, taking a new child and an existing child asarguments.Themethodinsertsthenewchildintoitslistofchildreninplaceoftheexistingchild.
•  TheremoveChildmethod(p. 407)is calledon aparentwitha childtoberemovedas an argument.

Section 12.4 DOM Collections
•  The DOM contains several collections (p. 409), which are groups of related objects on a page. DOMcollectionsareaccessedaspropertiesofDOMobjectssuchasthedocumentobject(p. 409) or a DOM node.
•  The documentobject has properties containing the imagescollection (p. 409), linkscollection (p. 409), formscollection and anchorscollection (p. 409). These collections contain all the ele-ments of the corresponding type on the page.
•  To find the number of elements in the collection, use the collection’s lengthproperty (p. 410).
•  To access items in a collection, use square brackets just as you would with an array, or use the itemmethod. The itemmethod (p. 411) of a DOM collection is used to access specific elements in a collection, taking an index as an argument. The namedItemmethod (p. 411) takes a name as a parameter and finds the element in the collection, if any, whose idattribute or nameattribute matches it.
•  The hrefproperty of a DOM link node refers to the link’s hrefattribute (p. 411).

Section 12.5 Dynamic Styles
•  An element’s style can be changed dynamically. Often such a change is made in response to user events. Such style changes can create many effects, including mouse-hover effects, interactive menus, and animations.
•  A documentobject’s bodyproperty refers to the bodyelement (p. 412) in the HTML5 page.
•  The setIntervalmethod (p. 417) of the windowobject repeatedly executes a statement on a cer-tain interval. It takes two parameters—a statement to execute repeatedly, and an integer specify-inghow often to execute it, in milliseconds.ThesetIntervalmethod returns a uniqueidentifier to keep track of that particular interval.
420	Chapter12 DocumentObjectModel(DOM):ObjectsandCollections


•  The windowobject’s clearIntervalmethod (p. 418) stops the repetitive calls of object’s set-Intervalmethod. We pass to clearIntervalthe interval identifier that setIntervalreturned.

Self-Review Exercises
12.1	 State whether each of the following is true or false. If false, explain why. a)  Every HTML5 element in a page is represented by a DOM tree. b)  A text node cannot have child nodes.
c)   The documentnode in a DOM tree cannot have child nodes.
d)  You can change an element’s style class dynamically by setting the styleattribute. e)   The createElementmethod creates a new node and inserts it into the document. f)   The setIntervalmethod calls a function repeatedly at a set time interval.
g)  The insertBeforemethod is called on the document object, taking a new node and an existing one to insert the new one before.
h)  The most recently started interval is stopped when the clearIntervalmethod is called. i)   The collection linkscontains all the links in a document with specified idattribute.
12.2	Fill in the blanks for each of the following statements.
a)  The	property refers to the text inside an element, including HTML5 tags. b)  A document’s DOM	represents all the nodes in a document, as well as their
relationships to each other.
c)   The	property contains the number of elements in a collection.
d)  The	method allows access to an individual element in a collection. e)   The	collection contains all the imgelements on a page.

Answers to Self-Review Exercises
12.1	a) False. Every element is represented by a DOM node. Each node is a member of the doc-ument’s DOM tree. b) True. c) False. The documentis the root node, therefore has no parent node. d)False.Thestyleclassischangedby settingthe classattribute.e)False.The createElementmeth-od creates a node but does not insert it into the DOM tree. f) True. g) False. insertBeforeis called on the parent. h) False. clearIntervaltakes an interval identifier as an argument to determine which interval to end. i) False. The linkscollection contains all links in a document.
12.2	a) innerHTML. b) tree. c) length. d) item. e) images.

Exercises
12.3	Modify Fig. 12.13 to use a background color to highlight all the links in the page instead of displaying them in a box at the bottom.
12.4	Use a browser’s developer tools to view the DOM tree of the document in Fig. 12.4. Look at the document tree of your favorite website. Explore the information these tools give you in the right panel(s) about an element when you click it.
12.5	Write a script that contains a button and a counter in a div. The button’s event handler should increment the counter each time it’s clicked.
12.6	Create a web page in which the user is allowed to select the page’s background color and whether the page uses serif or sans serif fonts. Then change the bodyelement’s styleattribute ac-cordingly.
12.7	(15 Puzzle) Write a web page that enables the user to play the game of 15. There’s a 4-by-4 board (implemented as an HTML5 table) for a total of 16 slots. One of the slots is empty. The other slots are occupied by 15 tiles, randomly numbered from 1 through 15. Any tile next to the
Exercises   421


currently empty slot can be moved into the currently empty slot by clicking on the tile. Your pro-gram should create the board with the tiles out of order. The user’s goal is to arrange the tiles in sequential order row by row. Using the DOM and the clickevent, write a script that allows the user to swap the positions of the open position and an adjacent tile. [Hint: The clickevent should be specified for each table cell.]
12.8	Modify your solution to Exercise 12.7 to determine when the game is over, then prompt the user to determine whether to play again. If so, scramble the numbers using the Math.random method.
12.9	Modify your solution to Exercise 12.8 to use an image that’s split into 16 pieces of equal size. Discard one of the pieces and randomly place the other 15 pieces in the HTML5 table.
13
Thewisestprophetsmakesureof the event first.
—Horace Walpole

DoyouthinkIcanlistenallday to such stuff?
—Lewis Carroll

Theusershouldfeelincontrolof the computer; not the other way around. This is achieved in applications that embody three qualities: responsiveness, permissiveness, and consistency.
—Inside Macintosh, Volume 1 Apple Computer, Inc., 1985

We are responsible for actions performed in response to circumstances for which we are not responsible.
—Allan Massie





JavaScriptEventHandling: ADeeperLook




Objectives Inthischapteryou’ll:
ÿ   Learntheconceptsofevents, eventhandlersandevent
bubbling.
ÿ   Createandregisterevent handlersthatrespondto
mouseandkeyboardevents.
ÿ   Usetheeventobjecttoget
informationaboutanevent.
ÿ   Recognizeandrespondto
manycommonevents.
13.1 Introduction   423



13.1  Introduction
13.2  ReviewingtheloadEvent
13.3  EventmousemoveandtheeventObject 13.4  Rolloverswithmouseoverandmouseout 13.5  FormProcessingwithfocusandblur

13.6  MoreFormProcessingwith submitandreset
13.7  EventBubbling 13.8  MoreEvents 13.9  WebResource


Summary | Self-Review Exercises | Answers to Self-Review Exercises | Exercises



13.1 Introduction
We’ve seen that HTML5pages can becontrolledvia scripting, andwe’ve already used sev-eral events—load, submitand click—to trigger calls to JavaScript functions. This chap-ter takes a deeper look into JavaScript events, which allow scripts to respond to user interactions and modify the page accordingly. Events allow scripts to respond to a user who is moving the mouse, entering form data, pressing keys and much more. Events and event handling help make web applications more dynamic and interactive. We give exam-ples of event handling several common events and list other useful events.


13.2 Reviewing the loadEvent
In several earlier examples, we used the window object’s loadevent to begin executing scripts. This event fires when the windowfinishes loading successfully (i.e., all its children are loaded and all external files referenced by the page are loaded). Actually, every DOM element has a loadevent, but it’s most commonly used on the window object. The exam-ple of Figs. 13.1–13.2 reviews the loadevent. The loadevent’s handler creates an interval timer that updates a spanwith the number of seconds that have elapsed since the docu-ment was loaded. The document’s (Fig. 13.1) paragraph contains the span (line 14).

1  <!DOCTYPE html> 2
3  <!-- Fig. 13.1: onload.html -->
4  <!-- Demonstrating the load event. --> 5  <html>
6	<head>
7	<meta charset = "utf-8"> 8	<title>load Event</title>
9	<link rel = "stylesheet" type = "text/css" href = "style.css"> 10	<script src = "load.js"></script>
11	</head> 12	<body>
13	<p>Seconds you have spent viewing this page so far: 14	<span id = "soFar">0</span></p>
15	</body>
16  </html>

Fig. 13.1  | Demonstratingthewindow’sloadevent.(Part1of2.)
424	Chapter13 JavaScriptEventHandling:ADeeperLook









Fig. 13.1  | Demonstratingthewindow’sloadevent.(Part2of2.)

Registering an Event Handler
An event handler is a function that responds to an event. Assigning an event handler to an event for a DOM node is called registering an event handler. The script (Fig. 13.2) reg-isters the window’s loadevent handler at line 18. Method addEventListeneris available for every DOM node. The method takes three arguments:
•	The first is the name of the event for which we’re registering a handler. •	The second is the function that will be called to handle the event.
•	The last argument is typically false—the truevalue isbeyondthis book’s scope.
Line 19 indicates that when the load event occurs, function startTimer (lines 6–9) should execute. This function uses method window.setIntervalto specify that function updateTime(lines12–16)shouldbecalledevery1000milliseconds.TheupdateTimefunc-tion increments variable secondsand updates the counter in the spannamed "soFar".

1  // Fig. 13.2: load.js
2  // Script to demonstrate the load event. 3  var seconds = 0;
4
5  // called when the page loads to begin the timer 6  function startTimer()
7  {
8	window.setInterval( "updateTime()", 1000 ); 9  } // end function startTimer
10
11  // called every 1000 ms to update the timer 12  function updateTime()
13  {
14	++seconds;
15	document.getElementById( "soFar" ).innerHTML = seconds; 16  } // end function updateTime
17
18  window.addEventListener( "load", startTimer, false );

Fig. 13.2  | Scriptthatregisterswindow’sloadeventhandlerandhandlestheevent.

Note that the loadevent enables us to access the elements in the HTML5 page after they’re fully loaded. If a script loaded in the document’s headsection contains statements that appear outside any script functions, those statements execute when the script loads— that is, before the bodyhas loaded. If such a statement attempted to use getElementById
13.3 EventmousemoveandtheeventObject   425


to get a DOM node for an HTML5 element in the body, getElementByIdwould return null. Another solution to this problem is to place the script as the last item in the docu-ment’s bodyelement—in that case, before the script executes, the body’s nested elements will have already been created.

Registering Multiple Event Handlers
Method addEventListenercan be called multiple times on a DOM node to register more than one event-handling method for an event. For example, if you wanted to perform a visual effect when the mouse is over a button and perform a task when that button is pressed, you could register mouseoverand clickevent handlers.

Removing Event Listeners
It’s also possible to remove an event listener by calling removeEventListenerwith the same arguments that you passed to addEventListenerto register the event handler.

A Note About Older Event-Registration Models
We use the W3C standard event-registration model, which is supported by all of the browsers we use in this book. In legacy HTML and JavaScript code, you’ll frequently en-countertwootherevent-registrationmodels—theinlinemodelandthetraditionalmodel.
The inline model places calls to JavaScript functions directly in HTML code. For example, the following code indicates that JavaScript function start should be called when the bodyelement loads:

<body onload = "start()">
The onloadattribute corresponds to the bodyelement’s loadevent. By current web devel-opment  standards,  it’s  generally  considered  poor  practice  to  intermix  HTML  and JavaScript code in this manner.
The traditional model uses a property of an object to specify an event handler. For example, the following JavaScript code indicates that function start should be called when documentloads:

document.onload = "start()";
The onloadproperty corresponds to the documentobject’s loadevent. Though this prop-erty is specified in JavaScript and not in the HTML5 document, there are various prob-lems  with  using  it.  In  particular,  if  another  statement  assigns  a  different  value  to document.onload, the original value is replaced, which may not be the intended result.
For more information about these older event-registration models, visit these sites:

www.onlinetools.org/articles/unobtrusivejavascript/chapter4.html www.quirksmode.org/js/introevents.html


13.3 Event mousemoveand the eventObject
This section introduces the mousemoveevent, which occurs whenever the user moves the mouse over the web page. We also discuss the eventobject, which contains information about the event that occurred. The example in Figs. 13.3–13.5 creates a simple drawing program that allows the user to draw inside a tableelement in red or blue by holding down the Shift key or Ctrl key and moving the mouse over the box. (In the next chapter,
426	Chapter13 JavaScriptEventHandling:ADeeperLook


we’llintroduce HTML5’s new canvaselement forcreatinggraphics.) Wedonot show the example’s style.cssfile, because the styles it contains have all been demonstrated previ-ously.

HTML5 Document
The document’s body(Fig. 13.3, lines 12–18) has a tablewith a captionthat provides in-structions on how to use the program and an empty tbody. The document’s loadevent will call a function named createCanvas(Fig. 13.4) to fill the tablewith rows and columns.


1  <!DOCTYPE html> 2
3  <!-- Fig. 13.3: draw.html -->
4  <!-- A simple drawing program. --> 5  <html>
6	<head>
7	<meta charset="utf-8">
8	<title>Simple Drawing Program</title>
9	<link rel = "stylesheet" type = "text/css" href = "style.css"> 10	<script src = "draw.js"></script>
11	</head> 12	<body>
13	<table id = "canvas">
14	<caption>Hold <em>Ctrl</em> (or <em>Control</em>) to draw blue. 15               Hold <em>Shift</em> to draw red.</caption>
16	<tbody id = "tablebody"></tbody> 17         </table>
18	</body>
19  </html>

a)Userholdsthe Shift keyandmoves themousetodraw inred.















Fig. 13.3  | Simpledrawingprogram.(Part1of2.)
13.3 EventmousemoveandtheeventObject   427


b)Userholdsthe Ctrl keyandmoves themousetodraw inblue.















Fig. 13.3  | Simpledrawingprogram.(Part2of2.)

Function createCanvasin draw.js
The createCanvasfunction (Fig. 13.4, lines 4–25) fills in the table with a grid of cells. The style.cssfile used in this example contains a CSS rule that sets the widthand heightof every tdelement to 4px. Another CSS rule in the file sets the tableto 400pxwide and uses the border-collapseCSS property to eliminate space between the table cells.

1  // Fig. 13.4: draw.js
2  // A simple drawing program.
3  // initialization function to insert cells into the table 4  function createCanvas()
5  {
6	var side = 100;
7	var tbody = document.getElementById( "tablebody" ); 8
9	for ( var i = 0; i < side; ++i ) 10	{
11	var row = document.createElement( "tr" ); 12
13	for ( var j = 0; j < side; ++j ) 14	{
15	var cell = document.createElement( "td" ); 16	row.appendChild( cell );
17	} // end for 18
19	tbody.appendChild( row );
20	} // end for

Fig. 13.4  | JavaScriptcodeforthesimpledrawingprogram.(Part1of2.)
428	Chapter13 JavaScriptEventHandling:ADeeperLook


21
22	// register mousemove listener for the table
23	document.getElementById( "canvas" ).addEventListener( 24         "mousemove", processMouseMove, false );
25  } // end function createCanvas 26
27  // processes the onmousemove event 28  function processMouseMove( e )
29  {
30	if ( e.target.tagName.toLowerCase() == "td" ) 31	{
32	// turn the cell blue if the Ctrl key is pressed 33	if ( e.ctrlKey )
34	{
35	e.target.setAttribute( "class", "blue" ); 36         } // end if
37
38	// turn the cell red if the Shift key is pressed 39	if ( e.shiftKey )
40	{
41	e.target.setAttribute( "class", "red" ); 42         } // end if
43	} // end if
44  } // end function processMouseMove 45
46  window.addEventListener( "load", createCanvas, false );

Fig. 13.4  | JavaScriptcodeforthesimpledrawingprogram.(Part2of2.)


Line 6 defines variable sideand sets it to 100—we use this as the number of rows and the number of columns in each row for a total of 10,000 tablecells. Line 7 stores the tbodyelementsothatwecanappendrowstoitasthey’regenerated.Theouterloopcreates each table row and the inner loop creates each cell. The inner loop uses DOM method createElementto create a tdelemen and appends the cell as a child of the row.
Lines 23–24 set function processMouseMoveas the table’s mousemoveevent handler, which effectively specifies that function as the mousmoveevent handler for the table and all of its nested elements. An element’s mousemoveevent fires whenever the user moves the mouse over that element.

Function processMouseMovein draw.js
At this point, the table is set up and function processMouseMove(lines 28–44) is called wheneverthemousemovesoverthetable.Whenthebrowsercallsanevent-handlingfunc-tion, it passes an eventobject to the function. That object contains information about the event that caused the event-handling function to be called. Figure 13.5 shows several properties of the eventobject.
If an event-handling function is defined with a parameter (as in line 28), the function can use the eventobject. The function parameter is commonly named e. Function pro-cessMouseMovecolors the cell the mouse moves over, depending on the key that’s pressed when the event occurs. When the mouse moves over the table, the tdelement that the mouse moved over receives the event first. If that element does not have an event handler
13.4 Rolloverswithmouseoverandmouseout   429



Property

altKey
cancelBubble


clientXand clientY


ctrlKey
keyCode

screenXand screenY

shiftKey
target
type

Description

This value is trueif the Alt key was pressed when the event fired.
Set to trueto prevent the event from bubbling. Defaults to false. (See Section 13.7, Event Bubbling.)

The coordinates of the mouse cursor inside the client area (i.e., the active area where the web page is displayed, excluding scrollbars, navigation buttons, etc.).
This value is trueif the Ctrl key was pressed when the event fired.
The ASCII code of the key pressed in a keyboard event. See Appendix D for more information on the ASCII character set.
The coordinates of the mouse cursor on the screen coordinate sys-tem.
This value is trueif the Shift key was pressed when the event fired. The DOM object that received the event.
The name of the event that fired.


Fig. 13.5  | Someevent-objectproperties.

for the mouseoverevent, the event is sent to the tdelement’s parent element, and so on— this is known as event bubbling (which we discuss in more detail in Section 13.7). This process continues until a mouseoverevent handler is found—in this case, the one for the tableelement. The eventobject, however, always contains the specific element that orig-inal received the event. This is stored in the object’s targetproperty. Line 30 uses this property to get the element’s tag name. If the tag name is "td", then lines 33–42 do the actual drawing. The event object’s ctrlKeyproperty (line 33) contains a boolean which reflects whether the Ctrl key was pressed during the event. If ctrlKey is true, line 35 changes the color of the target table cell by setting its classattribute to the CSS class blue (definedin style.css). Similarly, if the shiftKeyproperty of the eventobject is true, the Shift key is pressed and line 41 changes the colorof the cell to red by setting its classattri-bute to the CSS class blue. This simple function allows the user to draw inside the table on the page in red and blue. You’ll add more functionality to this example in the exercises at the end of this chapter.

13.4 Rollovers with mouseoverand mouseout
Two more events fired by mouse movements are mouseoverand mouseout. When the mouse cursor moves into an element, a mouseoverevent occurs for that element. When the cursor leaves the element, a mouseoutevent occurs. The example in Figs. 13.6–13.7 uses these events to achieve a rollover effect that updates text when the mouse cursor moves over it. We also introduce a technique for creating rollover images—though you’ve already seen that image rollover effects can be accomplished with CSS3 as well. We do not show the example’s style.cssfile, because the styles it contains have all been demonstrat-ed previously.
430	Chapter13 JavaScriptEventHandling:ADeeperLook


HTML5 Document
The HTML5 document (Fig. 13.6) contains an h1with a nested img, a paragraph and a divwith a nested unordered list. The unordered list contains the hexadecimal color codes for 16 basic HTML colors. Each list item’s idis set to the color name for the hexadecimal colorvaluethat’sdisplayed. The style.cssfileprovides CSS rulesthatset the div’swidth and borderand that display the unordered list’s elements in inline-blockformat. The div’s widthallows only four list items per line.



1  <!DOCTYPE html> 2
3  <!-- Fig 13.6: mouseoverout.html -->
4  <!-- Events mouseover and mouseout. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Events mouseover and mouseout</title>
9	<link rel = "stylesheet" type = "text/css" href = "style.css"> 10	<script src = "mouseoverout.js"></script>
11	</head> 12	<body>
13	<h1><img src = "heading1.png" id = "heading" 14            alt = "Heading Image"></h1>
15	<p>Can you tell a color from its hexadecimal RGB code 16	value? Look at the hex code, guess its color. To see 17	what color it corresponds to, move the mouse over the 18	hex code. Moving the mouse out of the hex code's table 19	cell will display the color name.</p>
20	<div> 21            <ul>
22	<li id = "Black">#000000</li> 23	<li id = "Blue">#0000FF</li>
24	<li id = "Magenta">#FF00FF</li> 25	<li id = "Gray">#808080</li>
26	<li id = "Green">#008000</li> 27	<li id = "Lime">#00FF00</li> 28	<li id = "Maroon">#800000</li> 29	<li id = "Navy">#000080</li> 30	<li id = "Olive">#808000</li> 31	<li id = "Purple">#800080</li> 32	<li id = "Red">#FF0000</li>
33	<li id = "Silver">#C0C0C0</li> 34	<li id = "Cyan">#00FFFF</li> 35	<li id = "Teal">#008080</li> 36	<li id = "Yellow">#FFFF00</li> 37	<li id = "White">#FFFFFF</li> 38            </ul>
39	</div> 40     </body>
41  </html>

Fig. 13.6  | HTML5documenttodemonstratemouseoverandmouseout.(Part1of3.)
13.4 Rolloverswithmouseoverandmouseout   431


a)Thepageloadswiththeblueheadingimageandallthehexcodesinblack.




Blueimage









b)Theheadingimageswitchestoanimagewithgreentextwhenthemouserollsoverit.




Greenimage









c)Whenmouserollsoverahexcode,thetextcolorchangestothecolorrepresentedbythehex code.Noticethattheheadingimagehasbecomeblueagainbecausethemouseisnolongeroverit.








Textnow displayedin blue




Fig. 13.6  | HTML5documenttodemonstratemouseoverandmouseout.(Part2of3.)
432	Chapter13 JavaScriptEventHandling:ADeeperLook


d)Whenthemouseleavesthehexcode’stablecell,thetextchangestothenameofthecolor.














Fig. 13.6  | HTML5documenttodemonstratemouseoverandmouseout.(Part3of3.)

Script-Level Variables in mouseoverout.js
Figure 13.7 presents the JavaScript code for this example. To create a rollover effect for the image in the heading, lines 3–6 create two new JavaScript Imageobjects—image1and image2. Image image2displays when the mouse hovers over the image. Image image1dis-plays when the mouse is outside the image. The script sets the srcproperties of each Image in lines 4 and 6, respectively. Creating Imageobjects preloads the images, so the browser does not need to download the rollover image the first time the script displays the image. If the image is large orthe connection is slow, downloadingwouldcause a noticeable delay in the image update.

Performance Tip 13.1 Preloadingimagesusedinrollovereffectspreventsadelaythefirsttimeanimageisdisplayed.


1  // Fig 13.7: mouseoverout.js
2  // Events mouseover and mouseout. 3  image1 = new Image();
4  image1.src = "heading1.png"; 5  image2 = new Image();
6  image2.src = "heading2.png"; 7
8  function mouseOver( e ) 9  {
10	// swap the image when the mouse moves over it 11	if ( e.target.getAttribute( "id" ) == "heading" ) 12	{
13	e.target.setAttribute( "src", image2.getAttribute( "src" ) ); 14     } // end if
15

Fig. 13.7  | Processingthemouseoverandmouseoutevents.(Part1of2.)
13.5 FormProcessingwithfocusandblur   433


16	// if the element is an li, assign its id to its color
17	// to change the hex code's text to the corresponding color 18	if ( e.target.tagName.toLowerCase() == "li"  )
19	{
20	e.target.setAttribute( "style",
21	"color: " + e.target.getAttribute( "id" ) ); 22     } // end if
23  } // end function mouseOver 24
25  function mouseOut( e ) 26  {
27	// put the original image back when the mouse moves away 28	if ( e.target.getAttribute( "id" ) == "heading" )
29	{
30	e.target.setAttribute( "src", image1.getAttribute( "src" ) ); 31     } // end if
32
33	// if the element is an li, assign its id to innerHTML 34	// to display the color name
35	if ( e.target.tagName.toLowerCase() == "li"  ) 36	{
37	e.target.innerHTML = e.target.getAttribute( "id" ); 38     } // end if
39  } // end function mouseOut 40
41  document.addEventListener( "mouseover", mouseOver, false );
42  document.addEventListener( "mouseout", mouseOut, false );

Fig. 13.7  | Processingthemouseoverandmouseoutevents.(Part2of2.)

Function mouseOverand mouseOut
Lines 41–42 register functions mouseOverand mouseOutto handle the mouseoverand mouseoutevents, respectively.
Lines 11–14 in the mouseOverfunction handle the mouseoverevent for the heading image. We use the eventobject’s targetproperty (line 11) to get the idof the DOM object that received the event. If the event target’s idattribute is the string "heading", line 13 sets the imgelement’s srcattribute to the srcattribute of the appropriate Imageobject (image2). The same task occurs with image1in the mouseOutfunction (lines 28–31).
The script handles the mouseoverevent for the list items in lines 18–22. This code tests whether the event’s targetis an lielement. If so, the code sets the element’s style attribute, using the color name stored in the idas the value of the style’s colorproperty. Lines 35–38 handle the mouseoutevent by changing the innerHTMLin the list item (i.e., the target) to the color name specified in the target’s id.

13.5 Form Processing with focusand blur
The focusand blurevents can be useful when dealing with formelements that allow user input. The focusevent fires when an element gains the focus (i.e., when the user clicks a form field or uses the Tab key to move between form elements), and blurfires when an element loses the focus, which occurs when another control gains the focus. The example in Figs. 13.8–13.9 demonstrates these events.
434	Chapter13 JavaScriptEventHandling:ADeeperLook


HTML5 Document
The HTML5 document in Fig. 13.8 contains a formfollowed by a paragraph in which we’ll display help text for the inputelement that currently has the focus.

1  <!DOCTYPE html> 2
3  <!-- Fig. 13.8: focusblur.html -->
4  <!-- Demonstrating the focus and blur events. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>A Form Using focus and blur</title>
9	<link rel = "stylesheet" type = "text/css" href = "style.css"> 10	<script src = "focusblur.js"></script>
11	</head> 12	<body>
13	<form id = "myForm" action = "">
14	<p><label class = "fixed" for = "name">Name:</label> 15               <input type = "text" id =  "name"
16	placeholder = "Enter name"></p>
17	<p><label class = "fixed" for = "email">E-mail:</label> 18               <input type = "email" id = "email"
19	placeholder = "Enter e-mail address"></p> 20            <p><label>Click here if you like this site
21	<input type = "checkbox" id =  "like"></label></p> 22            <p><label for = "comments">Any comments?</p>
23	<textarea id =  "comments"
24	placeholder = "Enter comments here"></textarea> 25            <p><input id = "submit" type = "submit">
26	<input id = "reset" type = "reset"></p> 27         </form>
28	<p id = "helpText"></p> 29     </body>
30  </html>

a)Thebluemessage atthebottomofthe pageinstructsthe usertoenteraname whentheName: fieldhasthefocus.








helptextinblue


Fig. 13.8  | Demonstratingthefocusandblurevents.(Part1of2.)
13.5 FormProcessingwithfocusandblur   435


b)Themessage changesdepending onwhichfieldhas focus—thiswindow showsthehelptext forthecomments textarea.










Fig. 13.8  | Demonstratingthefocusandblurevents.(Part2of2.)

JavaScript for the focusand blurEvents
The script in Fig. 13.9 registers the event handlers for the window’s loadevent (line 35) and for the formelements’ focusand blurevents.

1  // Fig. 13.9: focusblur.js
2  // Demonstrating the focus and blur events.
3  var helpArray = [ "Enter your name in this input box.", 4	"Enter your e-mail address in the format user@domain.", 5	"Check this box if you liked our site.",
6	"Enter any comments here that you'd like us to read.",
7	"This button submits the form to the server-side script.", 8	"This button clears the form.", "" ];
9  var helpText; 10
11  // initialize helpTextDiv and register event handlers 12  function init()
13  {
14	helpText = document.getElementById( "helpText" ); 15
16	// register listeners
17	registerListeners( document.getElementById( "name" ), 0 ); 18	registerListeners( document.getElementById( "email" ), 1 ); 19	registerListeners( document.getElementById( "like" ), 2 );
20	registerListeners( document.getElementById( "comments" ), 3 ); 21	registerListeners( document.getElementById( "submit" ), 4 ); 22	registerListeners( document.getElementById( "reset" ), 5 ); 23  } // end function init
24
25  // utility function to help register events
26  function registerListeners( object, messageNumber )
27  {

Fig. 13.9  | Demonstratingthefocusandblurevents.(Part1of2.)
436	Chapter13 JavaScriptEventHandling:ADeeperLook


28	object.addEventListener( "focus",
29	function() { helpText.innerHTML = helpArray[ messageNumber ]; }, 30	false );
31	object.addEventListener( "blur",
32	function() { helpText.innerHTML = helpArray[ 6 ]; }, false ); 33  } // end function registerListener
34
35  window.addEventListener( "load", init, false );

Fig. 13.9  | Demonstratingthefocusandblurevents.(Part2of2.)

Script-Level Variables
The helpArray(lines 3–8) contains the messages that are displayed when each input ele-ment receives the focus. Variable helpText(line 9) will refertothe paragraphin which the help text will be displayed.

Function init
When the window’s loadevent occurs, function init(lines 12–23) executes. Line 14 gets the helpTextparagraph element from the document. Then, lines 17–22 call the function registerListeners(lines 26–33) once for each element in the form. The first argument in each call is the element for which we’ll register the focusand blurevents, and the sec-ondargumentahelpArrayindexthatindicateswhichmessagetodisplay fortheelement.

Function registerListeners—Using Anonymous functions
Function registerListenersregisters the focusand blurevents for the objectit re-ceives as its first argument. In each case, we define an anonymous function to handle the event. An anonymous function is defined with no name—it’s created in nearly the same way as any other function, but with no identifier after the keyword function. This nota-tion is useful when creating a function for the sole purpose of assigning it to an event han-dler. Wenever callthe function ourselves, sowe don’t needtogiveit a name, andit’s more concise to create the function and register it as an event handler at the same time. For ex-ample, line 29

function() { helpText.innerHTML = helpArray[ messageNumber ]; }
defines an anonymous function that sets the helpTextparagraph’s innerHTMLproperty to the string in helpArrayat index messageNumber. For the blurevent handler, line 32 de-fines an anonymous function that sets the helpTextparagraph’s innerHTMLproperty to the empty string in helpArray[6].

13.6 More Form Processing with submitand reset
Two more events for processing forms are submit(which you’ve seen in earlier chapters) and reset. These events fire when a formis submitted or reset, respectively (Fig. 13.10). This example enhances the one in Fig. 13.8. The HTML5 document is identical, so we don’t show it here. The new JavaScript code for this example is in lines 24–36, which reg-ister event handlers for the form’s submitand resetevents.
Line 24 gets the formelement ("myForm"), then lines 25–30 register an anonymous function for its submitevent. The anonymous function executes in response to the user’s
13.6 MoreFormProcessingwithsubmitandreset   437


submitting the form by clicking the Submit button or pressing the Enter key. Line 28 introduces the windowobject’s confirmmethod. As with alertand prompt, we do not need to prefix the call with windowand a dot (.). The confirmdialog asks the users a ques-tion, presenting them with an OK button and a Cancel button. If the user clicks OK, con-firmreturns true; otherwise, confirmreturns false.



1  // Fig. 13.8: focusblur.js
2  // Demonstrating the focus and blur events.
3  var helpArray = [ "Enter your name in this input box.", 4	"Enter your e-mail address in the format user@domain.", 5	"Check this box if you liked our site.",
6	"Enter any comments here that you'd like us to read.",
7	"This button submits the form to the server-side script.", 8	"This button clears the form.", "" ];
9  var helpText; 10
11  // initialize helpTextDiv and register event handlers 12  function init()
13  {
14	helpText = document.getElementById( "helpText" ); 15
16	// register listeners
17	registerListeners( document.getElementById( "name" ), 0 ); 18	registerListeners( document.getElementById( "email" ), 1 ); 19	registerListeners( document.getElementById( "like" ), 2 );
20	registerListeners( document.getElementById( "comments" ), 3 ); 21	registerListeners( document.getElementById( "submit" ), 4 ); 22	registerListeners( document.getElementById( "reset" ), 5 ); 23
24	var myForm = document.getElementById( "myForm" ); 25	myForm.addEventListener( "submit",
26	function() 27	{
28	return confirm( "Are you sure you want to submit?" ); 29         }, // end anonymous function
30	false );
31	myForm.addEventListener( "reset", 32         function()
33	{
34	return confirm( "Are you sure you want to reset?" ); 35         }, // end anonymous function
36	false );
37  } // end function init 38
39  // utility function to help register events
40  function registerListeners( object, messageNumber ) 41  {
42	object.addEventListener( "focus",
43	function() { helpText.innerHTML = helpArray[ messageNumber ]; },
44	false );

Fig. 13.10 | Demonstratingthefocusandblurevents.(Part1of2.)
438	Chapter13 JavaScriptEventHandling:ADeeperLook


45	object.addEventListener( "blur",
46	function() { helpText.innerHTML = helpArray[ 6 ]; }, false ); 47  } // end function registerListener
48
49  window.addEventListener( "load", init, false );
















Fig. 13.10 | Demonstratingthefocusandblurevents.(Part2of2.)

Our event handlers for the form’s submitand resetevents simply return the value of the confirmdialog, which asks the users if they’re sure they want to submit or reset (lines 28 and 34, respectively). By returning either trueor false, the event handlers dictate whether the default action for the event—in this case submitting or resetting the form—is taken. Other default actions, such as following a hyperlink, can be prevented by returning falsefrom a clickevent handler on the link. If an event handler returns trueor does not return a value, the default action is taken once the event handler finishes executing.

13.7 Event Bubbling
Event bubbling is the process by which events fired on child elements “bubble” up to their parent elements. When an event is fired on an element, it’s first delivered to the element’s event handler(if any), then totheparentelement’s event handler(ifany). This might result in event handling that was not intended. If you intend to handle an event in a child element alone, you should cancel the bubbling of the event in the child element’s event-handling code by using the cancelBubbleproperty of the eventobject, as shown in Figs. 13.11–13.12.

1  <!DOCTYPE html> 2
3  <!-- Fig. 13.11: bubbling.html --> 4  <!-- Canceling event bubbling. -->
5  <html>

Fig. 13.11 | Cancelingeventbubbling.(Part1of2.)
13.7 EventBubbling   439


6	<head>
7	<meta charset="utf-8">
8	<title>Event Bubbling</title> 9	<script src = "bubbling.js">
10	</head> 11	<body>
12	<p id = "bubble">Bubbling enabled.</p> 13	<p id = "noBubble">Bubbling disabled.</p> 14     </body>
15  </html>

a)Userclicksthefirst paragraph,forwhich bubblingisenabled.





b)Paragraph’sevent handlercausesan alert.



c)Document’sevent handlercauses anotheralert, becausetheevent bubblesuptothe document.


d)Userclicksthe secondparagraph, forwhichbubblingis disabled.




e)Paragraph’sevent handlercausesan alert.The document’sevent handlerisnotcalled.


Fig. 13.11 | Cancelingeventbubbling.(Part2of2.)

Clicking the first pelement triggers a call to bubble(Fig. 13.12, lines 8–12). Then, because line 22 registers the document’s clickevent, documentClickis also called. This
440	Chapter13 JavaScriptEventHandling:ADeeperLook


occursbecausetheclickeventbubblesuptothedocument.Thisisprobablynotthedesired result.ClickingthesecondpelementcallsnoBubble(lines14–18),whichdisablestheevent bubbling for this event by setting the cancelBubbleproperty of the eventobject to true. The default value of cancelBubbleis false, so the statement in line 11 is unnecessary.

Common Programming Error 13.1
Forgetting to cancel event bubbling when necessary may cause unexpected results in your scripts.


1  // Fig. 13.12: bubbling.js
2  // Canceling event bubbling. 3  function documentClick()
4  {
5	alert( "You clicked in the document." ); 6  } // end function documentClick
7
8  function bubble( e ) 9  {
10	alert( "This will bubble." ); 11	e.cancelBubble = false;
12  } // end function bubble 13
14  function noBubble( e ) 15  {
16	alert( "This will not bubble." ); 17	e.cancelBubble = true;
18  } // end function noBubble 19
20  function registerEvents() 21  {
22	document.addEventListener( "click", documentClick, false ); 23	document.getElementById( "bubble" ).addEventListener(
24	"click", bubble, false );
25	document.getElementById( "noBubble" ).addEventListener( 26         "click", noBubble, false );
27  } // end function registerEvents 28
29  window.addEventListener( "load", registerEvents, false );

Fig. 13.12 | Cancelingeventbubbling.

13.8 More Events
The events we covered in this chapter are among the most commonly used. Figure 13.13 lists some common events and their descriptions. The actual DOM event names begin with "on", but we show the names you use with addEventListenerhere.

13.9 Web Resource www.quirksmode.org/js/introevents.html
An introduction and reference site for JavaScript events. Includes comprehensive information on history of events, the different event models, and making events work across multiple browsers.
13.9 WebResource	441



Event

abort
change

click
dblclick
focus
keydown
keypress
keyup
load
mousedown
mousemove
mouseout
mouseover
mouseup
reset
resize

select

submit
unload

Description

Fires when image transfer has been interrupted by user.
Fires when a new choice is made in a selectelement, or when a text input is changed and the element loses focus.
Fires when the user clicks the mouse.
Fires when the user double clicks the mouse. Fires when a form element gets the focus. Fires when the user pushes down a key.
Fires when the user presses then releases a key. Fires when the user releases a key.
Fires when an element and all its children have loaded. Fires when a mouse button is pressed.
Fires when the mouse moves.
Fires when the mouse leaves an element. Fires when the mouse enters an element. Fires when a mouse button is released.
Fires when a form resets (i.e., the user clicks a reset button).
Fires when the size of an object changes (i.e., the user resizes a window or frame).
Fires when a text selection begins (applies to inputor textarea).
Fires when a form is submitted.
Fires when a page is about to unload.


Fig. 13.13 | Commonevents.




Summary
Section 13.1 Introduction
•  JavaScript events (p. 423) allow scripts to respond to user interactions and modify the page ac-cordingly.
•  Events and event handling help make web applications more responsive, dynamic and interactive.

Section 13.2 Reviewing the loadEvent
•  Functions that handle events are called event handlers (p. 424). Assigning an event handler to an event on a DOM node is called registering an event handler (p. 424).
•  The loadevent fires whenever an element finishes loading successfully.
•  If a script in the headattempts to get a DOM node for an HTML5 element in the body, getEle-mentByIdreturns nullbecause the bodyhas not yet loaded.
•  Method addEventListenercan be called multiple times on a DOM node to register more than one event-handling method for an event.
442	Chapter13 JavaScriptEventHandling:ADeeperLook


•  You can remove an event listener by calling removeEventListener(p. 425) with the same argu-ments that you passed to addEventListenerto register the event handler.
•  The inline model of event registration places calls to JavaScript functions directly in HTML code. •  Thetraditionalmodelofeventregistration uses apropertyofanobjecttospecify aneventhandler.

Section 13.3 Event mousemoveand the eventObject
•  The mousemoveevent (p. 425) fires whenever the user moves the mouse.
•  Theeventobject(p.428)storesinformationabouttheeventthatcalledtheevent-handlingfunc-tion.
•  The eventobject’s ctrlKeyproperty (p. 429) contains a boolean which reflects whether the Ctrl key was pressed during the event.
•  The eventobject’s shiftKeyproperty (p. 429) reflects whether the Shift key was pressed during the event.
•  In an event-handling function, thisrefers to the DOM object on which the event occurred. •  The eventobject stores in its targetproperty the node on which the action occurred.

Section 13.4 Rollovers with mouseoverand mouseout
•  When the mouse cursor enters an element, a mouseoverevent (p. 429) occurs for that element. When the mouse cursor leaves the element, a mouseoutevent (p. 429) occurs for that element.
•  Creating an Imageobject and setting its srcproperty preloads the image.

Section 13.5 Form Processing with focusand blur
•  The focusevent (p. 433) fires when an element gains focus (i.e., when the user clicks a form field or uses the Tab key to move between form elements).
•  blur(p.433)fireswhenanelementlosesfocus,whichoccurswhenanothercontrolgainsthefocus.

Section 13.6 More Form Processing with submitand reset
•  The submitand resetevents (p. 436) fire when a form is submitted or reset, respectively.
•  Ananonymousfunction(p.436)isafunctionthat’sdefinedwithnoname—it’screatedinnearly the same way as any other function, but with no identifier after the keyword function.
•  Anonymous functions are useful when creating a function for the sole purpose of assigning it to an event handler.
•  The confirmmethod (p. 437) asks the users a question, presenting them with an OK button and a Cancel button. If the user clicks OK, confirmreturns true; otherwise, confirmreturns false.
•  By returning either trueor false, event handlers dictate whether the default action for the event is taken.
•  If an event handler returns trueor does not return a value, the default action is taken once the event handler finishes executing.

Section 13.7 Event Bubbling
•  Event bubbling (p. 438) is the process whereby events fired in child elements “bubble” up to their parent elements. When an event is fired on an element, it’s first delivered to the element’s event handler (if any), then to the parent element’s event handler (if any).
•  If you intend to handle an event in a child element alone, you should cancel the bubbling of the event in the child element’s event-handling code by using the cancelBubbleproperty (p. 438) of the eventobject.
Self-ReviewExercises   443


Self-Review Exercises
13.1	Fill in the blanks in each of the following statements:
a)  The state of three keys can be retrieved by using the event object. These keys are ,	and	.
b)  If a child element does not handle an event,	lets the event rise through the object hierarchy.
c)   The	of an event-handling function specifies whether to perform the default action for the event.
d)  In an event handler, the event object’s	property specifies the element on which the event occurred.
e)   Three events that fire when the user clicks the mouse are	,	and .
13.2	 State whether each of the following is true or false. If the statement is false, explain why. a)  The loadevent fires whenever an element starts loading.
b)  The clickevent fires when the user clicks the mouse on an element. c)   The focusevent fires when an element loses focus.
d)  When using the rollover effect with images, it’s a good practice to create Imageobjects that preload the desired images.
e)   Returningtrueinaneventhandleronana(anchor)elementprevents thebrowserfrom following the link when the event handler finishes.

Answers to Self-Review Exercises
13.1	a) Ctrl, Alt and Shift. b) event bubbling. c) return value. d) target. e) click, mousedown, mouseup.
13.2	a) False. The loadevent fires when an element finishes loading. b) True. c) False. It fires when an element gains focus. d) True. e) False. Returning falseprevents the default action.

Exercises
13.3	Add an erase feature to the drawing program in Fig. 13.3. Try setting the background color of the table cell over which the mouse moved to whitewhen the Alt key is pressed.
13.4	Add a button to your program from Exercise 13.3 to erase the entire drawing window.
13.5     You have a server-side script that cannot handle any ampersands (&) in the form data. Write a function that converts all ampersands in a form field to " and "when the field loses focus (blur).
13.6	Write a function that responds to a click anywhere on the page by displaying an alertdi-alog.DisplaytheeventnameiftheuserheldShiftduringthemouseclick.Displaytheelementname that triggered the event if the user held Ctrl during the mouse click.
13.7	Use CSS absolute positioning, mousedown, mousemove, mouseupand the clientX/clientY properties of the eventobject to create a program that allows you to drag and drop an image. When the user clicks the image, it should follow the cursor until the mouse button is released.
13.8	ModifyExercise 13.7toallowmultipleimagestobedraggedanddroppedinthesamepage.
14
With every experience, you alone are painting your own canvas, thought by thought, choice by choice.
—Oprah Winfrey

Observe Everything. Communicate Well. Draw, Draw, Draw.
—Frank Thomas

Do not go where the path may lead, go instead where there is no path and leave a trail.
— Ralph Waldo Emerson





HTML5:Introductionto canvas




Objectives Inthischapteryou’ll:
ÿ   Drawlines,rectangles,arcs,
circles,ellipsesandtext.
ÿ   Drawgradientsandshadows.
ÿ   Drawimages,createpatterns andconvertacolorimageto
blackandwhite.
ÿ   DrawBezierandquadratic
curves.
ÿ   Rotate,scaleandtransform.
ÿ   Dynamicallyresizeacanvas
tofillthewindow.
ÿ   Usealphatransparencyand
compositingtechniques.
ÿ   CreateanHTML5canvas-basedgameappwithsound andcollisiondetectionthat’s
easytocodeandfuntoplay.
14.1 Introduction   445



14.1  Introduction
14.2  canvasCoordinateSystem 14.3  Rectangles
14.4  UsingPathstoDrawLines 14.5  DrawingArcsandCircles 14.6  Shadows
14.7  QuadraticCurves 14.8  BezierCurves 14.9  LinearGradients
14.10  RadialGradients 14.11  Images
14.12  ImageManipulation:Processingthe IndividualPixelsofacanvas
14.13  Patterns
14.14  Transformations
14.14.1 scaleandtranslateMethods:
DrawingEllipses
14.14.2 rotateMethod:Creatingan
Animation
14.14.3 transformMethod:Drawing
SkewedRectangles

14.15  Text
14.16  ResizingthecanvastoFillthe BrowserWindow
14.17  AlphaTransparency 14.18  Compositing
14.19  Cannon Game
14.19.1 HTML5Document
14.19.2 InstanceVariablesandConstants 14.19.3 FunctionsetupGame
14.19.4 FunctionsstartTimerand stopTimer
14.19.5 FunctionresetElements 14.19.6 FunctionnewGame
14.19.7 FunctionupdatePositions: ManualFrame-by-FrameAnimation
andSimpleCollisionDetection 14.19.8 FunctionfireCannonball 14.19.9 FunctionalignCannon
14.19.10 Functiondraw
14.19.11 FunctionshowGameOverDialog 14.20  saveandrestoreMethods
14.21  ANoteonSVG 14.22  ANoteoncanvas3D


Summary  | Self-Review Exercises | Answers to Self-Review Exercises | Exercises

14.1 Introduction1
It’s taken us a while to get here, working hard to present many of the great new features ofHTML5andCSS3,andscriptinginJavaScript.Nowit’stimetoexerciseyourcreativity and have some fun.
Most people enjoy drawing. The canvaselement, which you’ll learn to use in this chapter, provides a JavaScript application programming interface (API) with methods for drawing two-dimensional bitmapped graphics and animations, manipulating fonts and images, and inserting images and videos.
The canvaselement is supported by all of the browsers we’ve used to test the book’s examples. To get a sense of the wide range of its capabilities, review the chapter objectives andoutline.Akeybenefitofcanvasisthatit’sbuiltintothebrowser,eliminatingtheneed for plug-ins like Flash and Silverlight, thereby improving performance and convenience and reducing costs. At the end of the chapter we’ll build a fun Cannon Game, which in previous editions of this book was built in Flash.

14.2 canvasCoordinate System
To begin drawing, we first must understand canvas’s coordinate system (Fig. 14.1), a scheme for identifying every point on a canvas. By default, the upper-left corner of a can-

1.    Dueto thelargenumber ofexamples inthischapter,mostof theexamples useembeddedJavaScripts.
446	Chapter14 HTML5:Introductiontocanvas


vashasthecoordinates(0,0).Acoordinatepairhasbothanx-coordinate (thehorizontal coordinate) and a y-coordinate (the vertical coordinate). The x-coordinate is the horizon-tal distance to the right from the left border of a canvas. The y-coordinate is the vertical distance downward from the top border of a canvas. The x-axis defines every horizontal coordinate, and the y-axis defines every vertical coordinate. You position text and shapes on a canvasby specifying their x and y-coordinates. Coordinate space units are measured in pixels (“picture elements”), which are the smallest units of resolution on a screen.

Portability Tip 14.1
Different screens vary in resolution and thus in density of pixels so graphics may vary in appearance on different screens.


(0,0)	+x	x-axis


+y	(x,y)




y-axis

Fig. 14.1  | canvascoordinatesystem.Unitsaremeasuredinpixels.

14.3 Rectangles
Now we’re ready to create a canvasand start drawing. Figure 14.2 demonstrates how to draw a rectangle with a border on a canvas.

1  <!DOCTYPE html> 2
3  <!-- Fig. 14.2: drawrectangle.html -->
4  <!-- Drawing a rectangle on a canvas. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Drawing a Rectangle</title> 9     </head>
10	<body>
11	<canvas id = "drawRectangle" width = "300" height = "100" 12            style = "border: 1px solid black;">
13	Your browser does not support Canvas. 14         </canvas>
15	<script type>
16	var canvas = document.getElementById("drawRectangle");
17	var context = canvas.getContext("2d")

Fig. 14.2  | Drawingarectanglewithaborderonacanvas.(Part1of2.)
14.3 Rectangles   447


18	context.fillStyle = "yellow";
19	context.fillRect(5, 10, 200, 75); 20	context.strokeStyle = "royalblue"; 21	context.lineWidth = 6;
22	context.strokeRect(4, 9, 201, 76); 23         </script>
24	</body>
25  </html>





yellowrectangle

royalbluestroke
canvasborder

Fig. 14.2  | Drawingarectanglewithaborderonacanvas.(Part2of2.)

Creating a Canvas
The canvaselement has two attributes—widthand height. The default width is 300and the default height 150. In lines 11–12, we create a canvasstarting with a canvasID—in thiscase,"drawRectangle".Manypeopleuse"myCanvas"orsomethingsimilar.Assigning a unique ID to a canvasallows you to access it like any other element, and to use more than one canvason a page. Next, we specify the canvas’s width(300) and height(100), and a borderof 1pxsolidblack. You do not need to include a visible border. In line 13 we include the fallback text Yourbrowserdoesnotsupportcanvas. This will appear if the user runs the application in a browser that does not support canvas. To save space, we have not included it in the subsequent examples.

Graphics Contexts and Graphics Objects
Now we’re ready to write our JavaScript (lines 15–23). First, we use the getElementById method to get the canvaselement using the ID (line 16). Next we get the context object. A context represents a 2D rendering surface that provides methods for drawing on a can-vas. The contextcontains attributes and methods for drawing, font manipulation, color manipulation and other graphics-related actions.

Drawing the Rectangle
To draw the rectangle, we specify its color by setting the fillStyleattribute to yellow (line 18). The fillRectmethod then draws the rectangle using the arguments x, y, width and height, where x and y are the coordinates for the top-left corner of the rectangle (line 19). In this example, we used the values 5, 10, 200and 75, respectively.
Next,weaddaborder,orstroke,totherectangle.ThestrokeStyleattribute(line20) specifies the stroke color or style (in this case, royalblue). The lineWidthattribute spec-ifies the stroke width in coordinate space units (line 21). Finally, the strokeRectmethod specifies the coordinates of the stroke using the arguments x, y, width and height. We used values that are one coordinate off in each direction from the outer edges of the rectangle—
448	Chapter14 HTML5:Introductiontocanvas


4, 9, 201and 76. If the width and height are 0, no stroke will appear. If only one of the width or height values is 0, the result will be a line, not a rectangle.

14.4 Using Paths to Draw Lines
To draw lines and complex shapes in canvas, we use paths. A path can have zero or more subpaths, each having one or more points connected by lines or curves. If a subpath has fewer than two points, no path is drawn.
Figure 14.3 uses paths to draw lines on a canvas. The beginPathmethod starts the line’s path (line 19). The moveTomethod sets the x- and y-coordinates of the path’s origin (line 20). From the point of origin, we use the lineTomethod to specify the destinations for the path (lines 21–23). The lineWidthattribute is used to change the thickness of the line (line 24). The default lineWidthis 1pixel. We then use the lineJoinattribute to specify the style of the corners where two lines meet—in this case, bevel(line 25). The lineJoinattribute has three possible values—bevel, round, and miter. The value bevel gives the path sloping corners. We’ll discuss the other two lineJoinvalues shortly.

1  <!DOCTYPE html> 2
3  <!-- Fig. 14.3: lines.html -->
4  <!-- Drawing lines on a canvas. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Drawing Lines</title> 9     </head>
10	<body>
11	<canvas id = "drawLines" width = "400" height = "200" 12            style = "border: 1px solid black;">
13	</canvas> 14	<script>
15	var canvas = document.getElementById("drawLines"); 16	var context = canvas.getContext("2d")
17
18	// red lines without a closed path
19	context.beginPath(); // begin a new path 20	context.moveTo(10, 10); // path origin 21	context.lineTo(390, 10);
22	context.lineTo(390, 30); 23	context.lineTo(10, 30);
24	context.lineWidth = 10; // line width
25	context.lineJoin = "bevel" // line join style 26	context.lineCap = "butt"; // line cap style 27	context.strokeStyle = "red" // line color
28	context.stroke(); //draw path 29
30	// orange lines without a closed path 31	context.beginPath(); //begin a new path 32	context.moveTo(40, 75); // path origin
33	context.lineTo(40, 55);

Fig. 14.3  | Drawinglinesonacanvas.(Part1of2.)
14.4 UsingPathstoDrawLines   449


34            context.lineTo(360, 55); 35            context.lineTo(360, 75);
36	context.lineWidth = 20; // line width
37	context.lineJoin = "round" // line join style 38	context.lineCap = "round"; // line cap style 39	context.strokeStyle = "orange" //line color 40	context.stroke(); // draw path
41
42	// green lines with a closed path
43	context.beginPath(); // begin a new path 44	context.moveTo(10, 100); // path origin 45	context.lineTo(390, 100);
46	context.lineTo(390, 130);
47	context.closePath() // close path
48	context.lineWidth = 10; // line width
49	context.lineJoin = "miter" // line join style 50	context.strokeStyle = "green" // line color 51	context.stroke(); // draw path
52
53	// blue lines without a closed path
54	context.beginPath(); // begin a new path 55	context.moveTo(40, 140); // path origin 56	context.lineTo(360, 190);
57	context.lineTo(360, 140); 58	context.lineTo(40, 190);
59	context.lineWidth = 5; // line width
60	context.lineCap = "butt"; // line cap style 61	context.strokeStyle = "blue" // line color 62	context.stroke(); // draw path
63	</script> 64     </body>
65  </html>





buttlinecap


roundlinecap


square
linecap

redlinewithbevel lineJoin
orangelinewith roundlineJoin
greenlinewith miterlineJoin
bluelinewithmiter lineJoin




Fig. 14.3  | Drawinglinesonacanvas.(Part2of2.)

The lineCapattribute specifies the style of the end of the lines. There are three pos-sible values—butt, round, and square. A buttlineCap(line 26) specifies that the line ends have edges perpendicular to the direction of the line and no additional cap. We’ll demonstrate the other lineCapstyles shortly.
450	Chapter14 HTML5:Introductiontocanvas


Next, the strokeStyleattribute specifies the line color—in this case, red(line 27). Finally, the stroke method draws the line on the canvas(line 28). The default stroke color is black.
To demonstrate the different lineJoinand lineCapstyles, we draw additional lines. First we draw orange lines (lines 31–40) with a lineWidthof 20(line 36). The round lineJoincreates rounded corners (line 37). Then, the roundlineCapadds a semicircular cap to the ends of the path (line 38)—the cap’s diameter is equal to the width of the line.
Next, we draw green lines (lines 43–51) with a lineWidthof 10(line 48). After we specify the destinations of the path, we use the closePathmethod (line 47) which closes the path by drawing a straight line from the last specified destination (line 46) back to the point of the path’s origin (line 44). The miterlineJoin(line 49) bevels the lines at an angle where they meet. For example, the lines that meet at a 90-degree angle have edges beveled at 45-degree angles where they meet. Since the path is closed, we do not specify a lineCapstyle forthe green line. If we did not closethe path (line 47), the previous lineCap style that we specified for the orange line above in line 36 would be applied to the green line. Such settings are said to be sticky—they continue to apply until they’re changed.
Finally, we draw blue lines (lines 54–62) with a lineWidthof 5. The buttlineCap adds a rectangular cap to the line ends (line 60). The length of the cap is equal to the line width, and the width of the cap is equal to half the line width. The edge of the square lineCapis perpendicular to the direction of the line.


14.5 Drawing Arcs and Circles
Arcs are portions of the circumference of a circle. To draw an arc, you specify the arc’s starting angle and ending angle measured in radians—the ratio of the arc’s length to its radius. The arc is said to sweep from its starting angle to its ending angle. Figure 14.4 de-picts two arcs. The arc at the left of the figure sweeps counterclockwise from zero radians to p/2radians,resultinginanarcthatsweepsthreequartersofthecircumferenceacircle.The arc at the right of the figure sweeps clockwise from zero radians to p/2 radians.




Counterclockwiseargumentistrue 3π/2 radians

Counterclockwiseargumentisfalseoromitted 3π/2 radians



π radians	0radians	π radians	0radians


π/2 radians	π/2 radians

Fig. 14.4  | Positiveandnegativearcangles.

Figure 14.5 shows how to draw arcs and circles using the arcmethod. We start by drawing a filled mediumslatebluecircle (lines 18–21). The beginPathmethod starts the path (line 18). Next, the arcmethod draws the circle using five arguments (line 20). The
14.5 DrawingArcsandCircles   451


first two arguments represent the x- and y-coordinates of the center of the circle—in this case, 35,50. Thethirdargument isthe radius of thecircle. The fourthandfifth arguments are the arc’s starting and ending angles in radians. In this case, the ending angle is Math.PI*2. The constant Math.PIis the JavaScript representation of the mathematical constant p,theratioofacircle’scircumferencetoitsdiameter.2pradiansrepresentsa360-degree arc, pradians is 180 degrees and p/2 radians is 90 degrees. There’s an optional sixth argument of the arcmethod which we’ll discuss shortly. To draw the circle to the canvas, we specify a fillStyleof mediumslateblue(line 20), then draw the circle using the fill method.

1  <!DOCTYPE html> 2
3  <!-- Fig. 14.5: drawingarcs.html -->
4  <!-- Drawing arcs and a circle on a canvas. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Arcs and Circles</title> 9     </head>
10	<body>
11	<canvas id = "drawArcs" width = "225" height = "100"> 12	</canvas>
13	<script>
14	var canvas = document.getElementById("drawArcs"); 15	var context = canvas.getContext("2d")
16
17	// draw a circle
18	context.beginPath();
19	context.arc(35, 50, 30, 0, Math.PI * 2); 20	context.fillStyle = "mediumslateblue"; 21	context.fill();
22
23	// draw an arc counterclockwise 24	context.beginPath();
25	context.arc(110, 50, 30, 0, Math.PI, false); 26	context.stroke();
27
28	// draw a half-circle clockwise 29	context.beginPath();
30	context.arc(185, 50, 30, 0, Math.PI, true); 31	context.fillStyle = "red";
32	context.fill(); 33
34	// draw an arc counterclockwise 35	context.beginPath();
36	context.arc(260, 50, 30, 0, 3 * Math.PI / 2); 37	context.strokeStyle = "darkorange";
38	context.stroke(); 39         </script>
40	</body>
41  </html>

Fig. 14.5  | Drawingarcsandcirclesonacanvas.(Part1of2.)
452	Chapter14 HTML5:Introductiontocanvas






mediumslateblue circle



blackarcdrawn clockwise

redsemicircledrawn counterclockwise

darkorangearc drawnclockwise


Fig. 14.5  | Drawingarcsandcirclesonacanvas.(Part2of2.)

In lines 24–26 we draw a blackarc that sweeps clockwise. Using the arcmethod, we draw an arc with a center at 110,50, a radius of 30, a starting angle of 0and an ending angle of Math.PI(180 degrees). The sixth argument is optional and specifies the direction in which the arc’s path is drawn. By default, the sixth argument is false, indicating that the arc is drawn clockwise. If the argument is true, the arc is drawn counterclockwise (or anticlockwise). We draw the arc using the strokemethod (line 26).
Next, we draw a filled redsemicircle counterclockwise so that it sweeps upward (lines 29–32). In this case, arguments of the arcmethod include a center of 185,50, a radius of 30, a starting angle of 0and an ending angle of Math.PI(180 degrees). To draw the arc counterclockwise, we use the sixth argument, true. We specify a fillStyleof red(line 31), then draw the semicircle using the fillmethod (line 32).
Finally, we draw a darkorange270-degree clockwise arc (lines 35–38). Using the arc method (line 36), we draw an arc with a center at 260,50, a radius of 30, a starting angle of 0and an ending angle of 3*Math.PI/2(270 degrees). Since we do not include the optional sixth argument, it defaults to false, drawing the arc clockwise. Then we specify a stroke-Styleof darkorange(line 37) and draw the arc using the strokemethod (line 38).

14.6 Shadows
Inthenextexample,weaddshadowstotwofilledrectangles(Fig. 14.6).Wecreateashadow that drops below and to the right of the first rectangle (lines 19–22). We start by specifying the shadowBlurattribute, setting its value to 10(line 19). By default, the blur is 0(no blur). The higher the value, the more blurred the edges of the shadow will appear. Next, we set the shadowOffsetXattribute to 15, which moves the shadow to the right of the rectangle (line 20). We then set the shadowOffsetYattribute to 15, which moves the shadow down from the rectangle (line 21). Finally, we specify the shadowColorattribute as blue(line 22).

1  <!DOCTYPE html> 2
3  <!-- Fig. 14.6: shadows.html -->
4  <!-- Creating shadows on a canvas. -->
5  <html>

Fig. 14.6  | Creatingshadowsonacanvas.(Part1of2.)
14.6 Shadows   453


6	<head>
7	<meta charset = "utf-8"> 8	<title>Shadows</title> 9     </head>
10	<body>
11	<canvas id = "shadow" width = "525" height = "250" 12            style = "border: 1px solid black;">
13	</canvas> 14	<script> 15
16	// shadow effect with positive offsets
17	var canvas = document.getElementById("shadow"); 18	var context = canvas.getContext("2d")
19	context.shadowBlur = 10;
20	context.shadowOffsetX = 15; 21	context.shadowOffsetY = 15; 22	context.shadowColor = "blue"; 23	context.fillStyle = "cyan";
24	context.fillRect(25, 25, 200, 200); 25
26	// shadow effect with negative offsets 27	context.shadowBlur = 20;
28	context.shadowOffsetX = -20; 29	context.shadowOffsetY = -20; 30	context.shadowColor = "gray"; 31	context.fillStyle = "magenta";
32	context.fillRect(300, 25, 200, 200); 33         </script>
34	</body>
35  </html>







cyan rectangle withsharp blueshadow downandto theright


magenta rectangle withamore blurrygray shadowup andtothe left





Fig. 14.6  | Creatingshadowsonacanvas.(Part2of2.)

For the second rectangle, we create a shadow that shifts above and to the left of the rectangle (lines 28–29). Notice that the shadowBluris 20(line 27). The effect is a shadow on which the edges appear more blurred than on the shadow of the first rectangle. Next,
454	Chapter14 HTML5:Introductiontocanvas


we specify the shadowOffsetX, setting its value to -20. Using a negative shadowOffsetX movestheshadowtotheleftoftherectangle(line28).Wethen specifytheshadowOffsetY attribute, setting its value to -20(line 29). Using a negative shadowOffsetYmoves the shadow up from the rectangle. Finally, we specify the shadowColoras gray(line 30). The default values for the shadowOffsetXand shadowOffsetYare 0(no shadow).

14.7 Quadratic Curves
Figure 14.7 demonstrates howtodraw a roundedrectangleusing linestodraw thestraight sides and quadratic curves to draw the rounded corners. Quadratic curves have a starting point, an ending point and a single point of inflection.
The quadraticCurveTomethod uses four arguments. The first two, cpx and cpy, are the coordinates of the control point—the point of the curve’s inflection. The third and fourth arguments, x and y, are the coordinates of the ending point. The starting point is the last subpath destination, specified using the moveToor lineTomethods. For example, if we write

context.moveTo(5, 100); context.quadraticCurveTo(25, 5, 95, 50);
the curve starts at (5,100), curves at (25, 5)and ends at (95,50).
Unlike in CSS3, rounded rectangles are not built into canvas. To create a rounded rectangle, we use the lineTomethod to draw the straight sides of the rectangle and the quadraticCurveToto draw the rounded corners.

1  <!DOCTYPE html> 2
3  <!-- Fig. 14.7: roundedrectangle.html -->
4  <!-- Drawing a rounded rectangle on a canvas. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Quadratic Curves</title> 9     </head>
10	<body>
11	<canvas id = "drawRoundedRect" width = "130" height = "130" 12            style = "border: 1px solid black;">
13	</canvas> 14	<script>
15	var canvas = document.getElementById("drawRoundedRect"); 16	var context = canvas.getContext("2d")
17	context.beginPath(); 18	context.moveTo(15, 5); 19	context.lineTo(95, 5);
20	context.quadraticCurveTo(105, 5, 105, 15); 21	context.lineTo(105, 95);
22	context.quadraticCurveTo(105, 105, 95, 105); 23	context.lineTo(15, 105);
24	context.quadraticCurveTo(5, 105, 5, 95);
25	context.lineTo(5, 15);

Fig. 14.7  | Drawingaroundedrectangleonacanvas.(Part1of2.)
14.7 QuadraticCurves   455


26	context.quadraticCurveTo(5, 5, 15, 5); 27	context.closePath();
28	context.fillStyle = "yellow";
29	context.fill(); //fill with the fillStyle color 30	context.strokeStyle = "royalblue";
31	context.lineWidth = 6;
32	context.stroke(); //draw 6-pixel royalblue border 33         </script>
34	</body>
35  </html>




Eachcornerisa quadraticcurvewith aradiusof10





Fig. 14.7  | Drawingaroundedrectangleonacanvas.(Part2of2.)

The rounded rectangle in this example has a widthof 100, a heightof 100and a radiusof 10with which we calculate the points in the quadratic curves used to draw the rounded corners. The x- and y-coordinates for the rounded rectangle are both 5. We’ll use these values to calculate the coordinates for each of the points in the path of our drawing. As in the previous example, we start the path with the beginPathmethod (line 17).
We start the drawing in the top left, then move clockwise using the moveTomethod (line 18). We use the formula x + radius to calculate the first argument (15) and use our original y-coordinate (5) as the second argument.
We then use the lineTomethod to draw a line from the starting point to the top-right side of the drawing (line 19). For the first argument, we use the formula x + width – radius to calculate the x-coordinate (in this case, 95). The second argument is simply the original y-coordinate (5).
To draw the top-right rounded corner, we use the quadraticCurveTomethod with the arguments cpx, cpy, x, y (line 20). We calculate the value of the first argument, cpx, using the formula x + width, which is 105. The second argument, cpy, is the same as our original y-coordinate(5).Wecalculatethevalueofthethirdargumentusingtheformula x+width, which is 105. To calculate the value of the fourth argument, we use the formula y + radius, which is 15.
We use the lineTomethod to draw the right side of the rounded rectangle (line 21). The first argument is equal to x + width, in this case, 105. To calculate the second argu-ment, we use the formula y + height - radius, which is 95.
Next, we draw the bottom-right corner using the quadraticCurveTomethod (line 22). We use the formula x + width to calculate the first argument (105), and the formula y + height to calculate the second argument (105). We use the formula x + width – radius to
456	Chapter14 HTML5:Introductiontocanvas


determine the third argument (95). Then we use the formula y + height to determine the fourth argument (105).
We then draw the bottom edge of the rectangle with the lineTomethod (line 23). The formula x + radius is used to calculate the first argument (15) and the formula y + height to calculate the second argument (105).
Next, we draw the bottom-left corner using the quadraticCurveTomethod (line 24). The first argument is simply our original x-coordinate (5). We use the formula y + height to calculate the second argument (105). The third argument is the same as our original x-coordinate (5). The formula y + height – radius is then used to calculate the fourth argu-ment (95).
We draw the left side of the rounded rectangle using the lineTomethod (line 25). Again, the first argument is the original x-coordinate (5). The formula y + radius is then used to calculate the second argument (15).
We draw the top-left corner of the rounded rectangle using the quadraticCurveTo method (line 26). The first and second arguments are the original x- and y-coordinates (both 5). To calculate the third argument (15), we use the formula x + radius. The fourth argument is simply the original y-coordinate (5). Finally, the closePathmethod closes the path for the rounded rectangle by drawing a line back to the path’s origin (line 27).
We specify a fillStyleof yellow, then use the fillmethod to draw the rounded rectangle to the canvas(lines 28–29). Finally, we place a border around the rounded rect-angle by specifying a strokeStyleof royalblue(line 30) and a lineWidthof 6(line 31), and then use the strokemethod to draw the border (line 32).

14.8 Bezier Curves
Bezier curves have a starting point, an ending point and two control points through which the curve passes. These can be used to draw curves with one or two points of inflection, depending on the coordinates of the four points. For example, you might use a Bezier curve to draw complex shapes with s-shaped curves. The bezierCurveTomethod uses six arguments. The first two arguments, cp1x and cp1y, are the coordinates of the first control point. The third and fourth arguments, cp2x and cp2y, are the coordinates for the second control point. Finally, the fifth and sixth arguments, x and y, are the coordinates of the ending point. The starting point is the last subpath destination, specified using either the moveTo or lineTo method. Figure 14.8 demonstrates how to draw an s-shaped Bezier curve using the bezierCurveTomethod.

1  <!DOCTYPE html> 2
3  <!-- Fig. 14.8: beziercurves.html -->
4  <!-- Drawing a Bezier curve on a canvas. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Bezier Curves</title> 9     </head>
10	<body>

Fig. 14.8  | DrawingaBeziercurveonacanvas.(Part1of2.)
14.9 LinearGradients   457


11	<canvas id = "drawBezier" width = "150" height = "150" 12            style = "border: 1px solid black;">
13	</canvas> 14	<script>
15	var canvas = document.getElementById("drawBezier"); 16	var context = canvas.getContext("2d")
17	context.beginPath();
18	context.moveTo(115, 20);
19	context.bezierCurveTo(12, 37, 176, 77, 32, 133); 20	context.lineWidth = 10;
21	context.strokeStyle = "red"; 22	context.stroke();
23	</script> 24     </body>
25  </html>












Fig. 14.8  | DrawingaBeziercurveonacanvas.(Part2of2.)

The beginPathmethod starts the path of the Bezier curve (line 17), then the moveTo method specifies the path’s starting point (line 18). Next, the bezierCurveTomethod specifies the three points in the Bezier curve (line 19). The first and second arguments (12 and 37) are the first control point. The third and fourth arguments (176and 77) are the second control point. The fifth and sixth arguments (32and 133) are the ending point.
ThelineWidthattributespecifiesthethicknessoftheline(line20).ThestrokeStyle attributespecifiesastrokecolorofred.Finally,thestrokemethoddrawstheBeziercurve.

14.9 Linear Gradients
Figure 14.9 fills three separate canvases with linear gradients—vertical, horizontal and di-agonal. On the first canvas(lines 13–25), we draw a vertical gradient. In line 19, we use thecreateLinearGradientmethod—thefirst twoarguments arethex-andy-coordinates of the gradient’s start, and the last two are the x- and y-coordinates of the end. In this ex-ample, we use (0,0)for the start of the gradient and (0,200)for the end. The start and end have the same x-coordinates but different y-coordinates, so the start of the gradient is a point at the top of the canvasdirectly above the point at the end of the gradient at the bottom. This creates a vertical linear gradient that starts at the top and changes as the gra-dient moves to the bottom of the canvas. We’ll show how to create horizontal and diag-onal gradients by altering these values.
458	Chapter14 HTML5:Introductiontocanvas


1  <!DOCTYPE html> 2
3  <!-- Fig. 14.9: lineargradient.html -->
4  <!-- Drawing linear gradients on a canvas. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Linear Gradients</title> 9     </head>
10	<body> 11
12	<!-- vertical linear gradient -->
13	<canvas id = "linearGradient" width = "200" height = "200" 14            style = "border: 1px solid black;">
15	</canvas> 16	<script>
17	var canvas = document.getElementById("linearGradient"); 18	var context = canvas.getContext("2d");
19	var gradient = context.createLinearGradient(0, 0, 0, 200); 20	gradient.addColorStop(0, "white");
21	gradient.addColorStop(0.5, "lightsteelblue"); 22	gradient.addColorStop(1, "navy");
23	context.fillStyle = gradient;
24	context.fillRect(0, 0, 200, 200); 25         </script>
26
27	<!-- horizontal linear gradient -->
28	<canvas id = "linearGradient2" width = "200" height = "200" 29            style = "border: 2px solid orange;">
30	</canvas> 31	<script>
32	var canvas = document.getElementById("linearGradient2"); 33	var context = canvas.getContext("2d");
34	var gradient = context.createLinearGradient(0, 0, 200, 0); 35	gradient.addColorStop(0, "white");
36	gradient.addColorStop(0.5, "yellow"); 37	gradient.addColorStop(1, "orange"); 38	context.fillStyle = gradient;
39	context.fillRect(0, 0, 200, 200); 40         </script>
41
42	<!-- diagonal linear gradient -->
43	<canvas id = "linearGradient3" width = "200" height = "200" 44            style = "border: 2px solid purple;">
45	</canvas> 46	<script>
47	var canvas = document.getElementById("linearGradient3"); 48	var context = canvas.getContext("2d");
49	var gradient = context.createLinearGradient(0, 0, 45, 200); 50	gradient.addColorStop(0, "white");
51            gradient.addColorStop(0.5, "plum"); 52            gradient.addColorStop(1, "purple");
53	context.fillStyle = gradient;

Fig. 14.9  | Drawinglineargradientsonacanvas.(Part1of2.)
14.10 RadialGradients   459


54	context.fillRect(0, 0, 200, 200); 55         </script>
56	</body>
57  </html>















Gradientchangesvertically fromwhitetolightsteelblue tonavy

Gradientchanges horizontallyfromwhiteto yellowtoorange

Gradientchangesdiagonally fromwhitetoplumtopurple


Fig. 14.9  | Drawinglineargradientsonacanvas.(Part2of2.)

Next, we use the addColorStopmethod to add three color stops (lines 20–22). (For a definition of color stops, see Section 5.6.) Each color stop has a positive value between 0 (the start of the gradient) and 1(the end of the gradient). For each color stop, we specify a color (white, lightsteelblueand navy). The fillStylemethod specifies a gradient (line 23) and then the fillRectmethod draws the gradient on the canvas(line 24).
On the second canvas(lines 28–40), we draw a horizontal gradient. In line 34, we use the createLinearGradientmethod where the first two arguments are (0,0)for the start of the gradient and (200,0)for the end. Note that in this case, the start and end have different x-coordinates but the same y-coordinates, horizontally aligning the start and end. This creates a horizontal linear gradient that starts at the left and changes as the gradient moves to the right edge of the canvas.
On the third canvas(lines 43–55), we draw a diagonal gradient. In line 49, we use the createLinearGradientmethod again. The first two arguments are (0,0)—the coor-dinates of the starting position of the gradient in the top left of the canvas. The last two arguments are (135,200)—the ending position of the gradient. This creates a diagonal linear gradient that starts at the top left and changes at an angle as the gradient moves to the right edge of the canvas.

14.10  Radial Gradients
Next, we show how to create two different radial gradients on a canvas(Fig. 14.10). A radial gradient is comprised of two circles—an inner circle where the gradient starts and an outer circle where it ends. In lines 18–19, we use the createRadialGradient method
460	Chapter14 HTML5:Introductiontocanvas


whose first three arguments are the x- and y-coordinates and the radius of the gradient’s start circle, respectively, and whose last three arguments are the x- and y-coordinates and the radius of the end circle. In this example, we use (100,100,10)for the start circle and (100,100,125)for the end circle. Note that these are concentric circles—they have the same x- and y-coordinates but each has a different radius. This creates a radial gradient that starts in a common center and changes as it moves outward to the end circle.
Next, the gradient.addColorStopmethod is used to add four color stops (lines 20– 23). Each color stop has a positive value between 0(the start circle of the gradient) and 1 (the end circle of the gradient). For each color stop, we specify a color (in this case, white, yellow, orangeand red). Then, the fillStyleattribute is used to specify a gradient (line 24). The fillRectmethod draws the gradient on the canvas(line 25).
On the second canvas(lines 29–43), the start and end circles have different x- and y-coordinates, altering the effect. In lines 35–36, the createRadialGradientmethod uses the arguments (20,150,10)for the start circle and (100,100,125)for the end circle. These are not concentric circles. The start circle of the gradient is near the bottom left of the canvasand the end circle is centered on the canvas. This creates a radial gradient that starts near the bottom left of the canvasand changes as it moves to the right.


1  <!DOCTYPE html> 2
3  <!-- Fig. 14.10: radialgradient.html -->
4  <!-- Drawing radial gradients on a canvas. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Radial Gradients</title> 9     </head>
10	<body>
11	<!-- radial gradient with concentric circles -->
12	<canvas id = "radialGradient" width = "200" height = "200" 13            style = "border: 1px solid black;">
14	</canvas> 15	<script>
16	var canvas = document.getElementById("radialGradient"); 17	var context = canvas.getContext("2d")
18	var gradient = context.createRadialGradient( 19               100, 100, 10, 100, 100, 125);
20	gradient.addColorStop(0, "white");
21	gradient.addColorStop(0.5, "yellow"); 22	gradient.addColorStop(0.75, "orange"); 23	gradient.addColorStop(1, "red");
24	context.fillStyle = gradient;
25	context.fillRect(0, 0, 200, 200); 26         </script>
27
28	<!-- radial gradient with nonconcentric circles -->
29	<canvas id = "radialGradient2" width = "200" height = "200" 30            style = "border: 1px solid black;">
31	</canvas>

Fig. 14.10 | Drawingradialgradientsonacanvas.(Part1of2.)
14.11 Images   461


32	<script>
33	var canvas = document.getElementById("radialGradient2"); 34	var context = canvas.getContext("2d")
35	var gradient = context.createRadialGradient( 36               20, 150, 10, 100, 100, 125);
37	gradient.addColorStop(0, "red");
38	gradient.addColorStop(0.5, "orange"); 39	gradient.addColorStop(0.75, "yellow"); 40	gradient.addColorStop(1, "white");
41	context.fillStyle = gradient;
42	context.fillRect(0, 0, 200, 200); 43         </script>
44	</body>
45  </html>







Radialgradientthat changesin concentriccircles fromwhiteto yellow,toorangeto red


Radialgradient thatchangesin non-concentric circlesfromredto orange,toyellow towhite




Fig. 14.10 | Drawingradialgradientsonacanvas.(Part2of2.)

14.11  Images
Figure 14.11 uses the drawImagemethod to draw an image to a canvas. In line 10, we create a new Imageobject and store it in the variable image. Line 11 locates the image source, "yellowflowers.png". Our function draw(lines 13–18) is called to draw the im-age after the document and all of its resources load. The drawImagemethod (line 17) draws the image to the canvasusing five arguments. The first argument can be an image, canvasor videoelement. The second and third arguments are the destination x- and des-tination y-coordinates—these indicate the position of the top-left corner of the image on the canvas. The fourth and fifth arguments are the destination width and destination height. If the values do not match the size of the image, it will be stretched to fit.

1  <!DOCTYPE html> 2
3  <!-- Fig. 14.11: image.html -->
4  <!-- Drawing an image to a canvas. -->
5  <html>

Fig. 14.11 | Drawinganimagetoacanvas.(Part1of2.)
462	Chapter14 HTML5:Introductiontocanvas


6	<head>
7	<meta charset = "utf-8"> 8	<title>Images</title>
9	<script>
10	var image = new Image();
11	image.src = "yellowflowers.png"; 12
13	function draw() 14	{
15	var canvas = document.getElementById("myimage"); 16	var context = canvas.getContext("2d")
17	context.drawImage(image, 0, 0, 175, 175); 18            } // end function draw
19
20	window.addEventListener( "load", draw, false ); 21         </script>
22	</head> 23	<body>
24	<canvas id = "myimage" width = "200" height = "200" 25            style = "border: 1px solid Black;">
26	</canvas> 27     </body>
28  </html>














Fig. 14.11 | Drawinganimagetoacanvas.(Part2of2.)

Note that you can call drawImagein three ways. In its simplest form, you can use

context.drawImage(image, dx, dy)
where dx and dy represent the position of the top-left corner of the image on the destina-tion canvas. The default width and height are the source image’s width and height. Or, as we did in this example, you can use

context.drawImage(image, dx, dy, dw, dh)
where dw is the specified width of the image on the destination canvasand dh is the spec-ified height of the image on the destination canvas. Finally, you can use

context.drawImage(image, sx, sy, sw, sh, dx, dy, dw, dh)
14.12 ImageManipulation:ProcessingtheIndividualPixelsofacanvas   463


where sx and sy are the coordinates of the top-left corner of the source image, sw is the source image’s width and sh its height.


14.12  Image Manipulation: Processing the Individual
Pixels of a canvas
Figure 14.12 shows how to obtain a canvas’s pixels and manipulate their red, green, blue and alpha (RGBA) values. For security reasons, some browsers allow a script to get an im-age’s pixels only if the document is requested from a web server, not if the file is loaded from the local computer’s file system. For this reason, you can test this example at

http://test.deitel.com/iw3htp5/ch14/fig14_12/imagemanipulation.html
The HTML5 document’s body(lines 123–135) defines a 750-by-250 pixel canvas element on which we’ll draw an original image, a version of the image showing any changes you make to the RGBA values, and a version of the image converted to grayscale. You can change the RGBA values with the input elements of type rangedefined in the body. You can adjust the amount of red, green or blue from 0 to 500% of its original value—onapixel-by-pixelbasis,wecalculatethenewamountofred,greenorblueaccord-ingly. For the alpha, you can adjust the value from 0 (completely transparent) to 255 (completely opaque). The script begins when the window’s loadevent (registered in line 120) calls function start.

1  <!DOCTYPE html> 2
3  <!-- Fig. 14.12: imagemanipulation.html -->
4  <!-- Manipulating an image’s pixels to change colors and transparency. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Manipulating an Image</title> 9	<style>
10	label { display: inline-block; width: 3em; } 11	canvas { border: 1px solid black; }
12	input[type="range"] { width: 600px; } 13         </style>
14	<script>
15	var context; // context for drawing on canvas 16	var redRange; // % of original red pixel value
17	var greenRange; // % of original green pixel value 18	var blueRange; // % of original blue pixel value 19	var alphaRange; // alpha amount value
20
21	var image = new Image(); // image object to store loaded image 22	image.src = "redflowers.png"; // set the image source
23
24	function start() 25	{
26	var canvas = document.getElementById( "thecanvas" );

Fig. 14.12 | Manipulatinganimage’spixelstochangecolorsandtransparency.(Part1of4.)
464	Chapter14 HTML5:Introductiontocanvas


27	context = canvas.getContext("2d")
28	context.drawImage(image, 0, 0); // original image
29	context.drawImage(image, 250, 0); // image for user change 30	processGrayscale(); // display grayscale of original image 31
32	// configure GUI events
33	redRange = document.getElementById( "redRange" ); 34	redRange.addEventListener( "change",
35	function() { processImage( this.value, greenRange.value, 36                     blueRange.value ); }, false );
37	greenRange = document.getElementById( "greenRange" ); 38	greenRange.addEventListener( "change",
39	function() { processImage( redRange.value, this.value, 40                     blueRange.value ); }, false )
41	blueRange = document.getElementById( "blueRange" ); 42	blueRange.addEventListener( "change",
43	function() { processImage( redRange.value, 44                     greenRange.value, this.value ); }, false )
45	alphaRange = document.getElementById( "alphaRange" ); 46	alphaRange.addEventListener( "change",
47	function() { processAlpha( this.value ); }, false )
48	document.getElementById( "resetButton" ).addEventListener( 49                  "click", resetImage, false );
50	} // end function start 51
52	// sets the alpha value for every pixel 53	function processAlpha( newValue )
54	{
55	// get the ImageData object representing canvas's content 56	var imageData = context.getImageData(0, 0, 250, 250);
57	var pixels = imageData.data; // pixel info from ImageData 58
59	// convert every pixel to grayscale
60	for ( var i = 3; i < pixels.length; i += 4 ) 61	{
62	pixels[ i ] = newValue; 63               } // end for
64
65	context.putImageData( imageData, 250, 0 ); // show grayscale 66            } // end function processImage
67
68	// sets the RGB values for every pixel
69	function processImage( redPercent, greenPercent, bluePercent ) 70	{
71	// get the ImageData object representing canvas's content 72	context.drawImage(image, 250, 0);
73	var imageData = context.getImageData(0, 0, 250, 250);
74	var pixels = imageData.data; // pixel info from ImageData 75
76	//set percentages of red, green and blue in each pixel 77	for ( var i = 0; i < pixels.length; i += 4 )
78	{
79	pixels[ i ] *= redPercent / 100;

Fig. 14.12 | Manipulatinganimage’spixelstochangecolorsandtransparency.(Part2of4.)
14.12 ImageManipulation:ProcessingtheIndividualPixelsofacanvas   465


80	pixels[ i + 1 ] *= greenPercent / 100; 81	pixels[ i + 2 ] *= bluePercent / 100; 82               } // end for
83
84	context.putImageData( imageData, 250, 0 ); // show grayscale 85            } // end function processImage
86
87	// creates grayscale version of original image 88	function processGrayscale()
89	{
90	// get the ImageData object representing canvas's content 91	context.drawImage(image, 500, 0);
92	var imageData = context.getImageData(0, 0, 250, 250);
93	var pixels = imageData.data; // pixel info from ImageData 94
95	// convert every pixel to grayscale
96	for ( var i = 0; i < pixels.length; i += 4 ) 97	{
98	var average =
99	(pixels[ i ] * 0.30 + pixels[ i + 1 ] * 0.59 + 100	pixels[ i + 2 ] * 0.11).toFixed(0);
101
102	pixels[ i ] = average;
103	pixels[ i + 1 ] = average; 104	pixels[ i + 2 ] = average; 105              } // end for
106
107	context.putImageData( imageData, 500, 0 ); // show grayscale 108           } // end function processGrayscale
109
110	// resets the user manipulated image and the sliders 111	function resetImage()
112	{
113	context.drawImage(image, 250, 0); 114	redRange.value = 100;
115	greenRange.value = 100; 116	blueRange.value = 100; 117	alphaRange.value = 255; 118           } // end function resetImage 119
120	window.addEventListener( "load", start, false ); 121        </script>
122	</head> 123	<body>
124	<canvas id = "thecanvas" width = "750" height = "250" ></canvas> 125	<p><label>Red:</label> 0 <input id = "redRange"
126	type = "range" max = "500" value = "100"> 500%</p> 127        <p><label>Green:</label> 0 <input id = "greenRange" 128	type = "range" max = "500" value = "100"> 500%</p> 129        <p><label>Blue:</label> 0 <input id = "blueRange"
130	type = "range" max = "500" value = "100"> 500%</p> 131        <p><label>Alpha:</label> 0 <input id = "alphaRange"
132	type = "range" max = "255" value = "255"> 255</p>

Fig. 14.12 | Manipulatinganimage’spixelstochangecolorsandtransparency.(Part3of4.)
466	Chapter14 HTML5:Introductiontocanvas


133	<p><input id = "resetButton" type = "button" 134           value = "Reset Image">
135	</body>
136 </html>





















Fig. 14.12 | Manipulatinganimage’spixelstochangecolorsandtransparency.(Part4of4.)

Script-Level Variables and Loading the Original Image
Lines15–21declarethescript-levelvariables.VariablesredRange,greenRange,blueRange and alphaRangewill refer to the four rangeinputs so that we can easily access their values in the script’s other functions. Variable imagerepresents the original image to draw. Line 21 creates an Imageobject and line 22 uses it to load the image redflower.png, which is provided with the example.

Function start
Lines 28–29 draw the original image twice—once in the upper-left corner of the canvas and once 250 pixels to the right. Line 30 calls function processGrayscaleto create the grayscale version of the image which will appear at x-coordinate 500. Lines 33–49 get the rangeinputelements and register their event handlers. For the redRange, greenRange and blueRangeelements, we register for the changeevent and call processImagewith the values of these three rangeinputs. For the alphRangeelements we register for the change event and call processAlphawith the value of that rangeinput.

Function processAlpha
Function processAlpha(lines 53–66) applies the new alpha value to every pixelin theim-age. Line 56 calls canvasmethod getImageDatato obtain an object that contains the pix-els we wish to manipulate. The method receives a bounding rectangle representing the
14.13 Patterns   467


portion of the canvasto get—in this case, a 250-pixel square from the upper-left corner. The returned object contains an array named data(line 57) which stores every pixel in the selected rectangular area as four elements in the array. Each pixel’s data is stored in the or-der red value, green value, blue value, alpha value. So, the first four elements in the array represent the RGBA values of the pixel in row 0 and column 0, the next four elements rep-resent the pixel in row 0 and column 1, etc.
Lines 60–63 iterate through the array processing every fourth element, which repre-sents the alpha value in each pixel, and assigning it the new alpha value. Line 65 uses canvas method putImageDatato place the updated pixels on the canvaswith the upper-left corner of the processed image at location 250, 0.

Function processImage
Function processImage(lines 69–85) is similar to function processAlphaexcept that its loop (lines 77–82) processes the first three of every four elements—that is, the ones that represent a pixel’s RGB values.

Function processGrayscale
Function processGrayscale(lines 88–108) is similar to function processImageexcept that its loop (lines 96–105) performs a weighted-average calculation to determine the new value assigned to the red, green and blue components of a given pixel. We used the for-mula for converting from RGB to grayscale provided at http://en.wikipedia.org/ wiki/Grayscale.

Function resetImage
Function resetImage(lines 111–118) resets the on-screen images and the rangeinput elements to their original values.

14.13  Patterns
Figure 14.13 demonstrates how to draw a pattern on a canvas. Lines 10–11 create and load the image we’ll use for our pattern. Function start(lines 13–21) is called in response to the window’s loadevent. Line 17 uses the createPatternmethod to create the pattern. Thismethodtakestwoarguments.Thefirstistheimagewe’reusingforthepattern,which can be an imageelement, a canvaselement or a videoelement. The second specifies how the image will repeat to create the pattern and can be one of four values—repeat(repeats horizontally and vertically), repeat-x(repeats horizontally), repeat-y(repeats vertically) or no-repeat. In line 18, we specify the coordinates for the pattern on the canvas. The firstimageinthepatternisdrawn sothat itstopleftisattheoriginofthecoordinatespace. We then specify the fillStyleattribute (pattern) and use the fillmethod to draw the pattern to the canvas.

1  <!DOCTYPE html> 2
3  <!-- Fig. 14.13: pattern.html -->
4  <!-- Creating a pattern using an image on a canvas. -->
5  <html>

Fig. 14.13 | Creatingapatternusinganimageonacanvas.(Part1of2.)
468	Chapter14 HTML5:Introductiontocanvas


6	<head>
7	<meta charset = "utf-8"> 8	<title>Patterns</title> 9	<script>
10	var image = new Image();
11	image.src = "yellowflowers.png"; 12
13	function start() 14	{
15	var canvas = document.getElementById("pattern"); 16	var context = canvas.getContext("2d");
17	var pattern = context.createPattern(image, "repeat"); 18	context.rect(5, 5, 385, 200);
19	context.fillStyle = pattern; 20	context.fill();
21	} // end function start 22
23	window.addEventListener( "load", start, false ); 24         </script>
25	</head> 26	<body>
27	<canvas id = "pattern" width = "400" height = "200" 28            style = "border: 1px solid black;">
29	</canvas> 30     </body>
31  </html>














Fig. 14.13 | Creatingapatternusinganimageonacanvas.(Part2of2.)

14.14  Transformations
The nextseveralexamples show youhow tousecanvastransformation methodsincluding translate, scale, rotateand transform.

14.14.1 scaleand translateMethods: Drawing Ellipses
Figure 14.14 demonstrates how to draw ellipses. In line 18, we change the transformation matrix (the coordinates) on the canvasusing the translatemethod so that the center of
14.14 Transformations   469


the canvasbecomes the origin (0,0). To do this, we use half the canvaswidth as the x-coordinate and half the canvasheight as the y-coordinate (line 18). This will enable us to center the ellipse on the canvas. We then use the scalemethod to stretch a circle to create an ellipse (line 19). The x value represents the horizontal scale factor; the y value represents the vertical scale factor—in this case, our scale factor indicates that the ratio of the width to the height is 1:3, which will create a tall, thin ellipse. Next, we draw the circle that we want to stretch using the beginPathmethod to start the path, then the arcmethod to draw the circle (lines 20–21). Notice that the x- and y-coordinates for the center of the circle are (0,0), which is now the center of the canvas(not the top-left corner). We then specify a fillStyleof orange(line 22) and draw the ellipse to the canvasusing the fill method (line 23).
Next, we create a horizontal purpleellipse on a separate canvas(lines 26–39). We use a scale of 3, 2(line 34), indicating that the ratio of the width to the height is 3:2. This results in an ellipse that is shorter and wider.

1  <!DOCTYPE html> 2
3  <!-- Fig. 14.14: ellipse.html -->
4  <!-- Drawing an ellipse on a canvas. --> 5  <html>
6	<head>
7	<meta charset = "utf-8"> 8	<title>Ellipse</title> 9     </head>
10	<body>
11	<!-- vertical ellipse -->
12	<canvas id = "drawEllipse" width = "200" height = "200" 13            style = "border: 1px solid black;">
14	</canvas> 15	<script>
16	var canvas = document.getElementById("drawEllipse"); 17	var context = canvas.getContext("2d")
18	context.translate(canvas.width / 2, canvas.height / 2); 19	context.scale(1, 3);
20	context.beginPath();
21	context.arc(0, 0, 30, 0, 2 * Math.PI, true); 22	context.fillStyle = "orange";
23	context.fill(); 24         </script>
25
26	<!-- horizontal ellipse -->
27	<canvas id = "drawEllipse2" width = "200" height = "200" 28            style = "border: 1px solid black;">
29	</canvas> 30	<script>
31	var canvas = document.getElementById("drawEllipse2"); 32	var context = canvas.getContext("2d")
33	context.translate(canvas.width / 2, canvas.height / 2); 34	context.scale(3, 2);
35	context.beginPath();

Fig. 14.14 | Drawinganellipseonacanvas.(Part1of2.)
470	Chapter14 HTML5:Introductiontocanvas


36	context.arc(0, 0, 30, 0, 2 * Math.PI, true); 37	context.fillStyle = "indigo";
38	context.fill(); 39         </script>
40	</body>
41  </html>








Orangeellipse wherethescale ofthewidthtothe heightis1,3

Indigoellipsewhere thescaleofthe widthtotheheight is3,2





Fig. 14.14 | Drawinganellipseonacanvas.(Part2of2.)

14.14.2 rotateMethod: Creating an Animation
Figure 14.15 uses the rotatemethod to create an animation of a rotating rectangle on a canvas. First, we create the JavaScript function startRotating(lines 18–22). Just as we did in theprevious example, we changethe transformation matrix on the canvasusing the translatemethod, making the center of the canvasthe origin with the x, y values (0,0) (line 20). This allows us to rotate the rectangle (which is centered on the canvas) around its center.

1  <!DOCTYPE html> 2
3  <!-- Fig. 14.15: rotate.html -->
4  <!-- Using the rotate method to rotate a rectangle on a canvas. --> 5  <html>
6	<head>
7	<meta charset = "utf-8"> 8	<title>Rotate</title>
9	</head> 10	<body>
11	<canvas id = "rotateRectangle" width = "200" height = "200" 12            style = "border: 1px solid black;">
13	</canvas> 14	<script>
15	var canvas = document.getElementById("rotateRectangle"); 16	var context = canvas.getContext("2d")
17

Fig. 14.15 | Usingtherotatemethodtorotatearectangleonacanvas.(Part1of2.)
14.14 Transformations   471


18	function startRotating() 19	{
20	context.translate(canvas.width / 2, canvas.height / 2); 21	setInterval(rotate, 10);
22	} 23
24	function rotate() 25	{
26	context.clearRect(-100, -100, 200, 200); 27	context.rotate(Math.PI / 360);
28	context.fillStyle = "lime";
29	context.fillRect(-50, -50, 100, 100); 30            }
31
32	window.addEventListener( "load", startRotating, false ); 33         </script>
34	</body>
35  </html>















Fig. 14.15 | Usingtherotatemethodtorotatearectangleonacanvas.(Part2of2.)

In line 21, we use the setIntervalmethod of the windowobject. The first argument is the name of the function to call (rotate) and the second is the number of milliseconds between calls.
Next, we create the JavaScript function rotate(lines 24–30). We use the clearRect method to clear the rectangle’s pixels from the canvas, converting them back to trans-parent as the rectangle rotates (line 26). This method takes four arguments—x, y, width and height. Since the center of the canvashas the x- and y-coordinates (0,0), the top-left corner of the canvasis now (-100,-100). The width and height of the canvasremain the same (200, 200). If you were to remove the clearRect method, the pixels would remain on the canvas, and after one full rotation of the rectangle, you would see a circle.
Next, the rotatemethod takes one argument—the angle of the clockwise rotation, expressed in radians (line 27). We then specify the rectangle’s fillStyle(lime) and draw the rectangle using the fillRectmethod. Notice that its x- and y-coordinates are the translated coordinates, (-50,-50)(line 29).
472	Chapter14 HTML5:Introductiontocanvas


14.14.3 transformMethod: Drawing Skewed Rectangles
The transformmethod allows you to skew, scale, rotate and translate elements without usingtheseparatetransformationmethodsdiscussedearlierinthissection.Thetransform method takes six arguments in the format (a, b, c, d, e, f ). The first argument, a, is the x-scale—the factor by which to scale the element horizontally. For example, a value of 2 would double the element’s width. The second argument, b, is the y-skew. The third ar-gument, c, is the x-skew. The greater the value of the x- and y-skew, the more the element will be skewed horizontally and vertically, respectively. The fourth argument, d, is the y-scale—the factor by which to scale the element vertically. The fifth argument, e, is the x-translation and the sixth argument, f, is the y-translation. The default x- and y-scale values are 1. The default values of the x- and y-skew and the x- and y-translation are 0, meaning there is no skew or translation.
Figure 14.16 uses the transformmethod to skew, scale and translate two rectangles. On the first canvas(lines 12–32), we declare the variable rectangleWidthand assign it the value 120, and declare the variable rectangleHeightand assign it the value 60(lines 18–19).

1  <!DOCTYPE html> 2
3  <!-- Fig. 14.16: skew.html -->
4  <!-- Using the translate and transform methods to skew rectangles. --> 5  <html>
6	<head>
7	<meta charset = "utf-8"> 8	<title>Skew</title>
9	</head> 10	<body>
11	<!-- skew left -->
12	<canvas id = "transform" width = "320" height = "150" 13            style = "border: 1px solid Black;">
14	</canvas> 15	<script>
16	var canvas = document.getElementById("transform"); 17	var context = canvas.getContext("2d");
18	var rectangleWidth = 120; 19	var rectangleHeight = 60; 20	var scaleX = 2;
21	var skewY = 0; 22	var skewX = 1; 23	var scaleY = 1;
24	var translationX = -10; 25	var translationY = 30;
26	context.translate(canvas.width / 2, canvas.height / 2); 27	context.transform(scaleX, skewY, skewX, scaleY,
28	translationX, translationY); 29            context.fillStyle = "red";
30	context.fillRect(-rectangleWidth / 2, -rectangleHeight / 2, 31               rectangleWidth, rectangleHeight);
32	</script>

Fig. 14.16 | Usingthetranslateandtransformmethodstoskewrectangles.(Part1of2.)
14.14 Transformations   473


33
34	<!-- skew right -->
35	<canvas id = "transform2" width = "220" height = "150" 36            style = "border: 1px solid Black;">
37	<script>
38	var canvas = document.getElementById("transform2"); 39	var context = canvas.getContext("2d");
40	var rectangleWidth = 120; 41	var rectangleHeight = 60; 42	var scaleX = 1;
43	var skewY = 0;
44	var skewX = -1.5; 45	var scaleY = 2;
46            var translationX = 0; 47            var translationY = 0;
48	context.translate(canvas.width / 2, canvas.height / 2); 49	context.transform(scaleX, skewY, skewX, scaleY,
50	translationX, translationY); 51            context.fillStyle = "blue";
52	context.fillRect(-rectangleWidth / 2, -rectangleHeight / 2, 53               rectangleWidth, rectangleHeight);
54	</script> 55     </body>
56  </html>












Redrectangleskewedleft,scaled horizontallyandtranslatedtotheleftand downfromthecanvas’spointoforigin

Bluerectangleskewedright andscaledvertically


Fig. 14.16 | Usingthetranslateandtransformmethodstoskewrectangles.(Part2of2.)


In lines 20–25, we declare variables for each of the arguments that will be used in the transformmethod and assign each a value. scaleXis assigned the value 2to double the widthoftherectangle.skewYisassignedthevalue0(thedefaultvalue)sothere’snovertical skew. skewXis assigned the value 1to skew the rectangle horizontally tothe left. Increasing this value would increase the angle of the skew. scaleYis assigned the value 1(the default value) so the rectangle is not scaled vertically (line 20). translationXis assigned the value -10to shift the position of the rectangle left of the point of origin. Finally, translationY is assigned the value 30to shift the rectangle down from the point of origin.
474	Chapter14 HTML5:Introductiontocanvas


In line 26, the translatemethod centers the point of origin (0, 0) on the canvas. Next, the transformmethod scales and skews the rectangle horizontally, then shifts its center left and down from the point of origin.
In lines 35–54 we create a second canvasto demonstrate how different values can be used to transform a rectangle. In this case, the value of scaleXis 1(the default), so there is no horizontal scale. The value of skewYis 0. In line 44, skewXis assigned -1.5. The neg-ative value causes the rectangle to skew right. Next, the variable scaleYis assigned 2to double the height of the rectangle. Finally, the variables translationXand translationY are each assigned 0(the default) so that the rectangle remains centered on the canvas’s point of origin.


14.15  Text
Figure 14.17 shows you how to draw text on a canvas. We draw two lines of text. For the first line, we color the text using a fillStyleof red (line 19). We use the fontattribute to specify the style, size and font of the text—in this case, italic 24px serif(line 20).


1  <!DOCTYPE html> 2
3  <!-- Fig. 14.17: text.html -->
4  <!-- Drawing text on a canvas. --> 5  <html>
6	<head>
7	<meta charset = "utf-8"> 8	<title>Text</title>
9	</head> 10	<body>
11	<canvas id = "text" width = "230" height = "100" 12            style = "border: 1px solid black;">
13	</canvas> 14	<script>
15	var canvas = document.getElementById("text"); 16	var context = canvas.getContext("2d")
17
18	// draw the first line of text 19	context.fillStyle = "red";
20	context.font = "italic 24px serif"; 21	context.textBaseline = "top";
22	context.fillText ("HTML5 Canvas", 0, 0); 23
24	// draw the second line of text
25	context.font = "bold 30px sans-serif"; 26	context.textAlign = "center";
27	context.lineWidth = 2;
28	context.strokeStyle = "navy";
29	context.strokeText("HTML5 Canvas", 115, 50); 30         </script>
31	</body>
32  </html>

Fig. 14.17 | Drawingtextonacanvas.(Part1of2.)
14.15 Text   475





Italic,serif,redtextwith atextBaseline attributeoftop

Bold,seriftextwitha textAlignattributeof center


Fig. 14.17 | Drawingtextonacanvas.(Part2of2.)

Next, we use textBaselineattribute to specify the alignment points of the text (line 21). There are six different textBaselineattribute values (Fig. 14.18). To see how each value aligns the font, see the graphic in the HTML5 canvasspecification at

http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#text-0



Value

top
hanging
middle
alphabetic
ideographic
bottom

Description

Top of the em square Hanging baseline Middle of the em square
Alphabetic baseline (the default value) Ideographic baseline
Bottom of the em square


Fig. 14.18 | textBaselinevalues.

Now we use the fillTextmethod to draw the text to the canvas(line 22). This methodtakes three arguments. The first is the text being drawn to the canvas. The second and third arguments are the x- and y-coordinates. You may include the optional fourth argument, maxWidth, to limit the width of the text.
Lines 25–29 draw the second line of text to the canvas. In this case, the fontattribute specifies a bold, 30px, sans-seriffont (line 25). We center the text on the canvasusing the textAlignattribute which specifies the horizontal alignment of the text relative to the x-coordinateofthetext(line26).Figure 14.19describesthefivetextAlignattributevalues.


Value	Description

left	Text is left aligned. right	Text is right aligned.

Fig. 14.19 | textAlignattributevalues.(Part1of2.)
476	Chapter14 HTML5:Introductiontocanvas



Value

center
start(the default value)


end

Description

Text is centered.
Text is left aligned if the start of the line is left-to-right; text is right aligned if the start of the text is right-to-left.
Text is right aligned if the end of the line is left-to-right; text is left aligned if the end of the text is right-to-left.

Fig. 14.19 | textAlignattributevalues.(Part2of2.)

We use the lineWidthattribute to specify the thickness of the stroke used to draw the text—in this case, 2(line 27). Next, we specify the strokeStyleto specify the color of the text (line 28). Finally, we use strokeTextto specify the text being drawn to the canvas and its x- and y-coordinates (line 29). By using strokeTextinstead of fillText, we draw outlined text instead of filled text. Keep in mind that once text is on a canvasit’s just bits—it can no longer be manipulated as text.

14.16  Resizing the canvasto Fill the Browser Window
Figure 14.20 demonstrates how to dynamically resize a canvasto fill the window. To do this, we draw a yellow rectangle so you can see how it fills the canvas.

1  <!DOCTYPE html> 2
3  <!-- Fig. 14.20: fillingwindow.html -->
4  <!-- Resizing a canvas to fill the window. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Filling the Window</title> 9	<style type = "text/css">
10	canvas { position: absolute; left: 0px; top: 0px; 11               width: 100%; height: 100%; }
12	</style> 13     </head>
14	<body>
15	<canvas id = "resize"></canvas> 16	<script>
17	function draw() 18	{
19	var canvas = document.getElementById( "resize" ); 20	var context = canvas.getContext( "2d" );
21	context.fillStyle = "yellow"; 22	context.fillRect(
23	0, 0, context.canvas.width, context.canvas.height );
24	} // end function draw

Fig. 14.20 | Dynamicallyresizingacanvastofillthewindow.(Part1of2.)
14.17 AlphaTransparency   477


25
26	window.addEventListener( "load", draw, false ); 27         </script>
28	</body>
29  </html>







Theyellow canvasfillsthe browserwindow




Fig. 14.20 | Dynamicallyresizingacanvastofillthewindow.(Part2of2.)

First we use a CSS style sheet to set the positionof the canvasto absoluteand set both its widthand heightto 100%, rather than using fixed coordinates (lines 10–11). This places the canvasat the top left of the screen and allows the canvaswidth and height to be resized to 100% of those of the window. Do not include a border on the canvas.
We use JavaScript function drawto draw the canvaswhen the application is rendered (lines 17 and 26). Line 21 specifies the color of the rectangle by setting the fillStyleto yellow. We use fillRectto draw the color to the canvas. Recall that in previous exam-ples, the four coordinates we used for method fillRectwere x,y,x1,y1, where x1and y1represent the coordinates of the bottom-right corner of the rectangle. In this example, the x- and y-coordinates are (0,0)—the top left of the canvasThe the x1value is con-text.canvas.widthand the y1value is context.value.height, so no matter the size of the window, the x1value will always be the width of the canvasand the y1value will always be the height of the canvas.

14.17  Alpha Transparency
In Figure 14.21, we use the globalAlphaattribute to demonstrate three different alpha transparencies. To do this, we create three canvases, each with a fully opaque rectangle and an overlapping circle and varying transparencies. The globalAlphavalue can be any number between 0(fully transparent) and 1(the default value, which is fully opaque).
On the first canvaswe specify a globalAlphaattribute value of 0.9to create a circle that’s mostly opaque (line 23). On the second canvaswe specify a globalAlphaattribute value of 0.5to create a circle that’s semitransparent (line 41). Notice in the output that in theareawherethecircleoverlapstherectangle,therectangleisvisible.Onthethirdcanvas we specify a globalAlphaattribute value of 0.15to create a circle that’s almost entirely transparent (line 59). In the area where the circle overlaps the rectangle, the rectangle is even more visible.
478	Chapter14 HTML5:Introductiontocanvas


1  <!DOCTYPE html> 2
3  <!-- Fig. 14.21: alpha.html -->
4  <!-- Using the globalAlpha attribute on a canvas. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Alpha Transparency</title> 9     </head>
10	<body> 11
12	<!-- 0.75 alpha value -->
13	<canvas id = "alpha" width = "200" height = "200" 14            style = "border: 1px solid black;">
15	</canvas> 16	<script>
17	var canvas = document.getElementById("alpha"); 18	var context = canvas.getContext("2d")
19	context.beginPath();
20	context.rect(10, 10, 120, 120); 21	context.fillStyle = "purple"; 22	context.fill();
23	context.globalAlpha = 0.9; 24	context.beginPath();
25	context.arc(120, 120, 65, 0, 2 * Math.PI, false); 26	context.fillStyle = "lime";
27	context.fill(); 28         </script>
29
30	<!-- 0.5 alpha value -->
31	<canvas id = "alpha2" width = "200" height = "200" 32            style = "border: 1px solid black;">
33	</canvas> 34	<script>
35	var canvas = document.getElementById("alpha2"); 36	var context = canvas.getContext("2d")
37	context.beginPath();
38	context.rect(10, 10, 120, 120); 39	context.fillStyle = "purple"; 40	context.fill();
41	context.globalAlpha = 0.5; 42	context.beginPath();
43	context.arc(120, 120, 65, 0, 2 * Math.PI, false); 44	context.fillStyle = "lime";
45	context.fill(); 46         </script>
47
48	<!-- 0.15 alpha value -->
49	<canvas id = "alpha3" width = "200" height = "200" 50            style = "border: 1px solid black;">
51	</canvas> 52	<script>
53	var canvas = document.getElementById("alpha3");

Fig. 14.21 | UsingtheglobalAlphaattributeonacanvas.(Part1of2.)
14.18 Compositing   479


54	var context = canvas.getContext("2d") 55	context.beginPath();
56	context.rect(10, 10, 120, 120); 57	context.fillStyle = "purple"; 58	context.fill();
59	context.globalAlpha = 0.15; 60	context.beginPath();
61	context.arc(120, 120, 65, 0, 2 * Math.PI, false); 62	context.fillStyle = "lime";
63	context.fill(); 64         </script>
65	</body>
66  </html>













a)globalAlphavalueof 0.9makesthecircleonly slightlytransparent

b)globalAlphavalueof 0.5makesthecirclesemi-transparent

c)globalAlphavalueof 0.15makesthecirclealmost entirelytransparent


Fig. 14.21 | UsingtheglobalAlphaattributeonacanvas.(Part2of2.)


14.18  Compositing
Compositing allows you to control the layering of shapes and images on a canvasusing two attributes—the globalAlphaattribute described in the previous example, and the globalCompositeOperation attribute. There are 11 globalCompositeOperationattri-bute values (Fig. 14.22). The source is the image being drawn to a canvas. The destination is the current bitmap on a canvas.



Value

source-atop

Description

The source is placed on top of the destination image. If both images are opaque, the source is displayed where the images over-lap. If the source is transparent but the destination image is opaque, the destination image is displayed where the images overlap. The destination image is transparent where there is no overlap.


Fig. 14.22  | globalCompositeOperationvalues.(Part1of2.)
480	Chapter14 HTML5:Introductiontocanvas



Value

source-in

source-out


source-over (default)

destination-atop





destination-in


destination-out


destination-over


lighter


copy

xor

Description

The source image is displayed where the images overlap and both are opaque. Both images are transparent where there is no overlap.
If the source image is opaque and the destination image is transpar-ent, the source image is displayed where the images overlap. Both images are transparent where there is no overlap.
The source image is placed over the destination image. The source image is displayed where it’s opaque and the images overlap. The destination image is displayed where there is no overlap.
The destination image is placed on top of the source image. If both images are opaque, the destination image is displayed where the images overlap. If the destination image is transparent but the source image is opaque, the source image is displayed where the images overlap. The source image is transparent where there is no overlap.
The destination image is displayed where the images overlap and both are opaque. Both images are transparent where there is no overlap.
If the destination image is opaque and the source image is transpar-ent, the destination image is displayed where the images overlap. Both images are transparent where there is no overlap.
The destination image is placed over the source image. The destina-tion image is displayed where it’s opaque and the images overlap. The source image is displayed where there is no overlap.
Displays the sum of the source-image color and destination-image color—up to the maximum RGB color value (255)—where the images overlap. Both images are normal elsewhere.
If the images overlap, only the source image is displayed (the desti-nation is ignored).
Source-image xor(exclusive-or) destination. The images are trans-parent where they overlap and normal elsewhere.


Fig. 14.22 | globalCompositeOperationvalues.(Part2of2.)

In Fig. 14.23, we demonstrate six of the compositing effects (lines 21–49). In this example, the destination image isa large redrectangle (lines 18–19) and the source images are six limerectangles.


1  <!DOCTYPE html> 2
3  <!-- Fig. 14.23: image.html -->
4  <!-- Compositing on a canvas. -->

Fig. 14.23 | Demonstratingcompositingonacanvas.(Part1of3.)
14.18 Compositing   481


5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Compositing</title> 9     </head>
10	<body>
11	<canvas id = "composite" width = "220" height = "200"> 12	</canvas>
13	<script>
14	function draw() 15	{
16	var canvas = document.getElementById("composite"); 17	var context = canvas.getContext("2d")
18	context.fillStyle = "red";
19	context.fillRect(5, 50, 210, 100); 20
21	// source-atop
22	context.globalCompositeOperation = "source-atop"; 23	context.fillStyle = "lime";
24	context.fillRect(10, 20, 60, 60); 25
26	// source-over
27	context.globalCompositeOperation = "source-over"; 28	context.fillStyle = "lime";
29	context.fillRect(10, 120, 60, 60); 30
31	// destination-over
32	context.globalCompositeOperation = "destination-over"; 33	context.fillStyle = "lime";
34	context.fillRect(80, 20, 60, 60); 35
36	// destination-out
37	context.globalCompositeOperation = "destination-out"; 38	context.fillStyle = "lime";
39	context.fillRect(80, 120, 60, 60); 40
41	// lighter
42	context.globalCompositeOperation = "lighter"; 43	context.fillStyle = "lime";
44	context.fillRect(150, 20, 60, 60); 45
46	// xor
47	context.globalCompositeOperation = "xor"; 48	context.fillStyle = "lime";
49	context.fillRect(150, 120, 60, 60); 50            } // end function draw
51
52	window.addEventListener( "load", draw, false ); 53         </script>
54	</body>
55  </html>

Fig. 14.23 | Demonstratingcompositingonacanvas.(Part2of3.)
482	Chapter14 HTML5:Introductiontocanvas




destination-over showsthereddestination wheretheimagesoverlap, andthelimesource wherethere’snooverlap.

lighterdisplaysthe overlappingareainyellow (thesumoftheredand limevalues).Bothimages arenormalelsewhere.






source-atopshowsthe limesourcewherethe shapesoverlapand transparencyelsewhere.

source-overshowsthe limesourcewherethe shapesoverlapandwhere there’snooverlap.


destination-out showstransparency wheretheshapes overlapandwhere there’snooverlap.

xordisplays transparencywhere theimagesoverlap. Bothimagesare normalelsewhere.


Fig. 14.23 | Demonstratingcompositingonacanvas.(Part3of3.)

14.19  Cannon Game
Now let’s have some fun! The Cannon Game app challenges you to destroy a seven-piece moving target before a ten-second time limit expires (Fig. 14.24).2 The game consists of four visual components—a cannon that you control, a cannonball fired by the cannon, the seven-piecetargetanda moving blockerthat defendsthe target tomakethegamemorechal-lenging. You aim the cannon by clicking the screen—the cannon then aims where you clicked and fires a cannonball. You can fire a cannonball only if there is not another one on the screen.
The game begins with a 10-second time limit. Each time you hit a target section, you are rewarded with three seconds being added to the time limit; each time you hit the blocker, you are penalized with two seconds being subtracted from the time limit. You win by destroying all seven target sections before time runs out. If the timer reaches zero, you lose. When the game ends, it displays an alertdialog indicating whether you won or lost, and shows the number of shots fired and the elapsed time (Fig. 14.25).
When the cannon fires, the game plays a firing sound. The target consists of seven pieces. When a cannonball hits a piece of the target, a glass-breaking sound plays and that piece disappears from the screen. When the cannonball hits the blocker, a hit sound plays


2.    The Cannon Game currently works in Chrome, Internet Explorer 9 and Safari. It does not work properly in Opera, Firefox, iPhone and Android.
14.19 Cannon Game	483


and the cannonball bounces back. The blocker cannot be destroyed. The target and blocker move vertically at different speeds, changing direction when they hit the top or bottom of the screen. At any time, the blocker and the target can be moving in the same or different directions.






Timeremaining

Gapfrompreviously hittargetsection


Cannonballin flighttoward thetarget






Blocker



Target



Bluetarget piece

Yellowtarget piece









Fig. 14.24 | CompletedCannon Game app.



a)alertdialogdisplayedafteruser destroysallseventargetsections

b)alertdialogdisplayedwhengame endsbeforeuserdestroysallseventargets








Fig. 14.25 | Cannon Game appalertsshowingawinandaloss.
484	Chapter14 HTML5:Introductiontocanvas


14.19.1 HTML5 Document
Figure 14.26 shows the HTML5 document for the Cannon Game. Lines 15–20 use HTML5 audioelements to load the game’s sounds, which are located in the same folder as the HTML5 document. Recall from Chapter 9 that the HTML5 audioelement may contain multiple sourceelements forthe audio file in severalformats, sothat you can sup-port cross-browser playback of the sounds. For this app, we’ve included only MP3 files. We set the audioelement’s preloadattribute to autoto indicate that the sounds should be loaded immediately when the page loads. Line 22 creates a Start Game button which the user will click to launch the game. After a game is over, this button remains on the screen so that the user can click it to play again.

1  <!DOCTYPE html> 2
3  <!-- Fig. 14.26: cannon.html -->
4  <!-- Cannon Game HTML5 document. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Cannon Game</title> 9	<style type = "text/css">
10	canvas { border: 1px solid black; } 11         </style>
12	<script src = "cannon.js"></script> 13     </head>
14	<body>
15	<audio id = "blockerSound" preload = "auto">
16	<source src = "blocker_hit.mp3" type = "audio/mpeg"></audio> 17         <audio id = "targetSound" preload = "auto">
18	<source src = "target_hit.mp3" type = "audio/mpeg"></audio> 19         <audio id = "cannonSound" preload = "auto">
20            <source src = "cannon_fire.mp3" type = "audio/mpeg"></audio> 21         <canvas id = "theCanvas" width = "480" height = "600"></canvas>
22	<p><input id = "startButton" type = "button" value = "Start Game"> 23	</p>
24	</body>
25  </html>

Fig. 14.26 | Cannon Game HTML5document.

14.19.2 Instance Variables and Constants
Figure 14.27 lists theCannon Game’s numerous constants andinstancevariables. Most are self-explanatory, but we’ll explain each as we encounter it in the discussion.

1  // Fig. 14.27 cannon.js
2  // Logic of the Cannon Game 3  var canvas; // the canvas
4  var context; // used for drawing on the canvas

Fig. 14.27 | Cannon Game variabledeclarations.(Part1of2.)
14.19 Cannon Game	485


5
6  // constants for game play
7  var TARGET_PIECES = 7; // sections in the target
8  var MISS_PENALTY = 2; // seconds deducted on a miss 9  var HIT_REWARD = 3; // seconds added on a hit
10  var TIME_INTERVAL = 25; // screen refresh interval in milliseconds 11
12  // variables for the game loop and tracking statistics 13  var intervalTimer; // holds interval timer
14  var timerCount; // times the timer fired since the last second 15  var timeLeft; // the amount of time left in seconds
16  var shotsFired; // the number of shots the user has fired 17  var timeElapsed; // the number of seconds elapsed
18
19  // variables for the blocker and target
20  var blocker; // start and end points of the blocker 21  var blockerDistance; // blocker distance from left 22  var blockerBeginning; // blocker distance from top
23  var blockerEnd; // blocker bottom edge distance from top
24  var initialBlockerVelocity; // initial blocker speed multiplier 25  var blockerVelocity; // blocker speed multiplier during game
26
27  var target; // start and end points of the target 28  var targetDistance; // target distance from left 29  var targetBeginning; // target distance from top
30  var targetEnd; // target bottom's distance from top 31  var pieceLength; // length of a target piece
32  var initialTargetVelocity; // initial target speed multiplier 33  var targetVelocity; // target speed multiplier during game
34
35  var lineWidth; // width of the target and blocker 36  var hitStates; // is each target piece hit?
37  var targetPiecesHit; // number of target pieces hit (out of 7) 38
39  // variables for the cannon and cannonball
40  var cannonball; // cannonball image's upper-left corner 41  var cannonballVelocity; // cannonball's velocity
42  var cannonballOnScreen; // is the cannonball on the screen 43  var cannonballRadius; // cannonball radius
44  var cannonballSpeed; // cannonball speed
45  var cannonBaseRadius; // cannon base radius 46  var cannonLength; // cannon barrel length
47  var barrelEnd; // the end point of the cannon's barrel 48  var canvasWidth; // width of the canvas
49  var canvasHeight; // height of the canvas 50
51  // variables for sounds 52  var targetSound;
53  var cannonSound; 54  var blockerSound;
55

Fig. 14.27 | Cannon Game variabledeclarations.(Part2of2.)
486	Chapter14 HTML5:Introductiontocanvas


14.19.3 Function setupGame
Figure 14.28 shows function setupGame. Later in the script, line 408 registers the window object’s loadevent handler so that function setupGameis called when the cannon.html page loads.
Lines 71–78 create the blocker, target, cannonballand barrelEndas JavaScript Objects. You can create your own properties on such Objects simply by assigning a value to a property name. For example, lines 72–73 create startand endproperties to represent the start and end points, respectively, of the blocker. Each is initialized as an Objectso that it, in turn, can contain xand yproperties representing the coordinates of the point. Function resetElements(Fig. 14.30) sets the initial values of the xand yproperties for the start and end of the blocker and target.
We create booleanarray hitStates(line 81) to keep track of which of the target’s seven pieces have been hit (and thus should not be drawn). Lines 84–86 get references to the audioelements that represent the game’s sounds—we use these to call playon each audioat the appropriate time.


56  // called when the app first launches 57  function setupGame()
58  {
59	// stop timer if document unload event occurs
60	document.addEventListener( "unload", stopTimer, false ); 61
62	// get the canvas, its context and setup its click event handler 63	canvas = document.getElementById( "theCanvas" );
64	context = canvas.getContext("2d"); 65
66	// start a new game when user clicks Start Game button
67	document.getElementById( "startButton" ).addEventListener( 68         "click", newGame, false );
69
70	// JavaScript Object representing game items
71	blocker = new Object(); // object representing blocker line
72	blocker.start = new Object(); // will hold x-y coords of line start 73	blocker.end = new Object(); // will hold x-y coords of line end
74	target = new Object(); // object representing target line
75	target.start = new Object(); // will hold x-y coords of line start 76	target.end = new Object(); // will hold x-y coords of line end
77	cannonball = new Object(); // object representing cannonball point
78	barrelEnd = new Object(); // object representing end of cannon barrel 79
80	// initialize hitStates as an array 81	hitStates = new Array(TARGET_PIECES); 82
83	// get sounds
84	targetSound = document.getElementById( "targetSound" ); 85	cannonSound = document.getElementById( "cannonSound" ); 86	blockerSound = document.getElementById( "blockerSound" ); 87  } // end function setupGame
88

Fig. 14.28 | Cannon Game functionsetupGame.
14.19 Cannon Game	487


14.19.4 Functions startTimerand stopTimer
Figure 14.29 presents functions startTimer and stopTimer which manage the click event handler and the interval timer. As you know, users interact with this app by clicking the mouse on the device’s screen. A click aligns the cannon to face the point of the click and fires the cannon. Line 92 in function startTimerregisters function fireCannonball as the canvas’s clickevent handler. Once the game is over, we don’t want the user to be able to click the canvasanymore, so line 99 in function stopTimerremoves the canvas’s clickevent handler.
Line 93in functionstartTimercreates an interval timer that calls updatePositionsto update the game every TIME_INTERVAL(Fig. 14.27, line 10) milliseconds. TIME_INTERVAL can be adjusted to increase or decrease the CannonView’s refresh rate. Based on the value of the TIME_INTERVALconstant (25), updatePositionsis called approximately 40 times per second. When the game is over, stopTimeris called and line 100 terminates the interval timer so that updatePositionsis not called again until the user starts a new game.


89  // set up interval timer to update game 90  function startTimer()
91  {
92	canvas.addEventListener( "click", fireCannonball, false );
93	intervalTimer = window.setInterval( updatePositions, TIME_INTERVAL ); 94  } // end function startTimer
95
96  // terminate interval timer 97  function stopTimer()
98  {
99	canvas.removeEventListener( "click", fireCannonball, false ); 100	window.clearInterval( intervalTimer );
101 } // end function stopTimer
102

Fig. 14.29 | Cannon Game functionsstartTimerandstopTimer.


14.19.5 Function resetElements
Function resetElements(Fig. 14.30) is called by function newGameto position and scale the size of the game elements relative to the size of the canvas. The calculations performed here scale the game’s on-screen elements based on the canvas’s pixel width and height— we arrived at our scaling factors via trial and error until the game surface looked good. Lines 141–142 set the end point of the cannon’s barrel to point horizontally and to the right from the midpoint of the left border of the canvas.


103 // called by function newGame to scale the size of the game elements 104 // relative to the size of the canvas before the game begins
105 function resetElements()
106 {

Fig. 14.30 | Cannon Game functionresetElements.(Part1of2.)
488	Chapter14 HTML5:Introductiontocanvas


107	var w = canvas.width; 108	var h = canvas.height;
109	canvasWidth = w; // store the width 110	canvasHeight = h; // store the height
111	cannonBaseRadius = h / 18; // cannon base radius 1/18 canvas height 112	cannonLength = w / 8; // cannon length 1/8 canvas width
113
114	cannonballRadius = w / 36; // cannonball radius 1/36 canvas width 115	cannonballSpeed = w * 3 / 2; // cannonball speed multiplier
116
117	lineWidth = w / 24; // target and blocker 1/24 canvas width 118
119	// configure instance variables related to the blocker
120	blockerDistance = w * 5 / 8; // blocker 5/8 canvas width from left 121	blockerBeginning = h / 8; // distance from top 1/8 canvas height 122	blockerEnd = h * 3 / 8; // distance from top 3/8 canvas height
123	initialBlockerVelocity = h / 2; // initial blocker speed multiplier 124	blocker.start.x = blockerDistance;
125	blocker.start.y = blockerBeginning; 126	blocker.end.x = blockerDistance; 127	blocker.end.y = blockerEnd;
128
129	// configure instance variables related to the target
130	targetDistance = w * 7 / 8; // target 7/8 canvas width from left 131	targetBeginning = h / 8; // distance from top 1/8 canvas height 132	targetEnd = h * 7 / 8; // distance from top 7/8 canvas height 133	pieceLength = (targetEnd - targetBeginning) / TARGET_PIECES;
134	initialTargetVelocity = -h / 4; // initial target speed multiplier 135	target.start.x = targetDistance;
136	target.start.y = targetBeginning; 137	target.end.x = targetDistance; 138	target.end.y = targetEnd;
139
140	// end point of the cannon's barrel initially points horizontally 141	barrelEnd.x = cannonLength;
142	barrelEnd.y = h / 2;
143 } // end function resetElements
144

Fig. 14.30 | Cannon Game functionresetElements.(Part2of2.)




14.19.6 Function newGame
Function newGame(Fig. 14.31) is called when the user clicks the Start Game button; the function initializes the game’s instance variables. Lines 152–153 initialize all the elements of the hitStatesarray to falseto indicate that none of the targets have been destroyed. Lines 155–162 initialize key variables in preparation for launching a fresh game. In par-ticular, line 160 indicates that no cannonball is on the screen—this enables the cannon to fire a cannonball when the user next clicks the screen. Line 164 invokes function start-Timerto start the game loop for the new game.
14.19 Cannon Game	489


145 // reset all the screen elements and start a new game 146 function newGame()
147 {
148	resetElements(); // reinitialize all the game elements 149	stopTimer(); // terminate previous interval timer
150
151	// set every element of hitStates to false--restores target pieces 152	for (var i = 0; i < TARGET_PIECES; ++i)
153	hitStates[i] = false; // target piece not destroyed 154
155	targetPiecesHit = 0; // no target pieces have been hit
156	blockerVelocity = initialBlockerVelocity; // set initial velocity 157	targetVelocity = initialTargetVelocity; // set initial velocity 158	timeLeft = 10; // start the countdown at 10 seconds
159	timerCount = 0; // the timer has fired 0 times so far
160	cannonballOnScreen = false; // the cannonball is not on the screen 161	shotsFired = 0; // set the initial number of shots fired
162	timeElapsed = 0; // set the time elapsed to zero 163
164	startTimer(); // starts the game loop 165 } // end function newGame
166

Fig. 14.31 | Cannon Game functionnewGame.

14.19.7 Function updatePositions: Manual Frame-by-Frame
Animation and Simple Collision Detection
This app performs its animations manually by updating the positions of all the game ele-ments at fixed time intervals. Line 93 (Fig. 14.29) in function startTimercreated an in-terval timer that calls functionupdatePositions(Fig. 14.32) to update the gameevery 25 milliseconds (i.e., 40 times per second). This function also performs simple collision detec-tiontodeterminewhetherthecannonballhascollidedwithanyof thecanvas’sedges,with the blocker or with a section of the target. Game-development frameworks generally pro-vide more sophisticated, built-in collision-detection capabilities.


167 // called every TIME_INTERVAL milliseconds 168 function updatePositions()
169 {
170	// update the blocker's position
171	var blockerUpdate = TIME_INTERVAL / 1000.0 * blockerVelocity; 172	blocker.start.y += blockerUpdate;
173	blocker.end.y += blockerUpdate; 174
175	// update the target's position
176	var targetUpdate = TIME_INTERVAL / 1000.0 * targetVelocity; 177	target.start.y += targetUpdate;
178	target.end.y += targetUpdate;
179

Fig. 14.32 | Cannon Game functionupdatePositions.(Part1of3.)
490	Chapter14 HTML5:Introductiontocanvas


180	// if the blocker hit the top or bottom, reverse direction 181	if (blocker.start.y < 0 || blocker.end.y > canvasHeight) 182        blockerVelocity *= -1;
183
184	// if the target hit the top or bottom, reverse direction 185	if (target.start.y < 0 || target.end.y > canvasHeight) 186        targetVelocity *= -1;
187
188	if (cannonballOnScreen) // if there is currently a shot fired 189	{
190	// update cannonball position
191	var interval = TIME_INTERVAL / 1000.0; 192
193	cannonball.x += interval * cannonballVelocityX; 194	cannonball.y += interval * cannonballVelocityY; 195
196	// check for collision with blocker 197	if ( cannonballVelocityX > 0 &&
198	cannonball.x + cannonballRadius >= blockerDistance &&
199	cannonball.x + cannonballRadius <= blockerDistance + lineWidth && 200	cannonball.y - cannonballRadius > blocker.start.y &&
201	cannonball.y + cannonballRadius < blocker.end.y) 202        {
203	blockerSound.play(); // play blocker hit sound
204	cannonballVelocityX *= -1; // reverse cannonball's direction 205	timeLeft -= MISS_PENALTY; // penalize the user
206	} // end if 207
208	// check for collisions with left and right walls
209	else if (cannonball.x + cannonballRadius > canvasWidth || 210           cannonball.x - cannonballRadius < 0)
211	{
212	cannonballOnScreen = false; // remove cannonball from screen 213        } // end else if
214
215	// check for collisions with top and bottom walls
216	else if (cannonball.y + cannonballRadius > canvasHeight || 217           cannonball.y - cannonballRadius < 0)
218	{
219	cannonballOnScreen = false; // make the cannonball disappear 220        } // end else if
221
222	// check for cannonball collision with target 223	else if (cannonballVelocityX > 0 &&
224	cannonball.x + cannonballRadius >= targetDistance &&
225	cannonball.x + cannonballRadius <= targetDistance + lineWidth && 226	cannonball.y - cannonballRadius > target.start.y &&
227	cannonball.y + cannonballRadius < target.end.y) 228        {
229	// determine target section number (0 is the top) 230	var section =
231	Math.floor((cannonball.y  - target.start.y) / pieceLength);
232

Fig. 14.32 | Cannon Game functionupdatePositions.(Part2of3.)
14.19 Cannon Game	491


233	// check whether the piece hasn't been hit yet 234	if ((section >= 0 && section < TARGET_PIECES) && 235              !hitStates[section])
236	{
237	targetSound.play(); // play target hit sound 238	hitStates[section] = true; // section was hit 239	cannonballOnScreen = false; // remove cannonball
240	timeLeft += HIT_REWARD; // add reward to remaining time 241
242	// if all pieces have been hit
243	if (++targetPiecesHit == TARGET_PIECES) 244	{
245	stopTimer(); // game over so stop the interval timer 246	draw(); // draw the game pieces one final time
247	showGameOverDialog("You won!"); // show winning dialog 248              } // end if
249	} // end if 250        } // end else if 251     } // end if
252
253	++timerCount; // increment the timer event counter 254
255	// if one second has passed
256	if (TIME_INTERVAL * timerCount >= 1000) 257	{
258	--timeLeft; // decrement the timer
259	++timeElapsed; // increment the time elapsed 260	timerCount = 0; // reset the count
261	} // end if 262
263	draw(); // draw all elements at updated positions 264
265	// if the timer reached zero 266	if (timeLeft <= 0)
267	{
268	stopTimer();
269	showGameOverDialog("You lost"); // show the losing dialog 270     } // end if
271 } // end function updatePositions
272

Fig. 14.32 | Cannon Game functionupdatePositions.(Part3of3.)

The function begins by updating the positions of the blockerand the target. Lines 171–173 change the blocker’s position by multiplying blockerVelocityby the amount of time that has passed since the last update and adding that value to the current x- and y-coordinates. Lines 176–178 do the same for the target. If the blockerhas collided with thetop or bottom wall, its direction isreversed by multiplying its velocity by-1(lines 181– 182). Lines 185–186 perform the same check and adjustment for the full length of the target, including any sections that have already been hit.
Line188checkswhetherthecannonballisonthescreen.Ifitis,weupdateitsposition by adding the distance it should have traveled since the last timer event. This is calculated by multiplying its velocity by the amount of time that passed (lines 193–194).
492	Chapter14 HTML5:Introductiontocanvas


Lines 198–201 check whether the cannonball has collided with the blocker. We per-form simple collision detection, based on the rectangular boundary of the cannonball. Four conditions must be met if the cannonball is in contact with the blocker:
•	The cannonball has reached the blocker’s distance from the left edge of the screen.
•	The cannonball has not yet passed the blocker.
•	Part of the cannonball must be lower than the top of the blocker.
•	Part of the cannonball must be higher than the bottom of the blocker.
If all these conditions are met, we play blocker hit sound (line 203), reverse the cannon-ball’s direction on the screen (line 204) and penalize the user by subtracting MISS_PENALTY from timeLeft.
We remove the cannonball if it reaches any of the screen’s edges. Lines 209–212 test whether the cannonball has collided with the left or right wall and, if it has, remove the cannonball from the screen. Lines 216–219 remove the cannonball if it collides with the top or bottom of the screen.
We then check whether the cannonball has hit the target(lines 223–227). These conditions aresimilartothoseusedto determinewhetherthecannonball collided withthe blocker. If the cannonball hit the target, we determine which section of the targetwas hit. Lines 230–231 accomplish this—dividing the distance between the cannonball and the bottom of the targetby the length of a piece. This expression evaluates to 0for the topmost section and 6for the bottommost. We check whether that section was previously hit, using the hitStatesarray (lines 234–235). If it wasn’t, we play the target hit sound, set the corresponding hitStateselement to trueand remove the cannonball from the screen. We then add HIT_REWARDto timeLeft, increasing the game’s time remaining. We increment targetPiecesHit, then determine whether it’s equal to TARGET_PIECES(line 243). If so, the game is over, so we call function stopTimerto stop the interval timer and function drawto perform the final update of the game elements on the screen. Then we call showGameOverDialogwith the string "You won!".
We increment the timerCount, keeping track of the number of times we’ve updated the on-screen elements’ positions (line 253). If the product of TIME_INTERVALand timer-Countis >= 1000(i.e., one second has passed since timeLeftwas last updated), we decre-ment timeLeft, increment timeElapsedand reset timerCountto zero (lines 256–260). Then we draw all the elements at their updated positions (line 263). If the timer has reached zero, the game is over—we call function stopTimerand call function showGame-OverDialogwith the string "You Lost"(lines 266–269).


14.19.8 Function fireCannonball
Whentheuserclicksthemouseonthecanvas,theclickeventhandlercallsfunctionfire-Cannonball(Fig. 14.33) to fire a cannonball. If there’s already a cannonball on the screen, another cannot be fired, so the function returns immediately; otherwise, it fires the can-non. Line 279 calls alignCannontoaim the cannon at the click point and get the cannon’s angle. Lines 282–283 “load” the cannon (that is, position the cannonball inside the can-non). Then, lines 286 and 289 calculate the horizontal and vertical components of the cannonball’s velocity. Next, we set cannonballOnScreento trueso that the cannonball
14.19 Cannon Game	493


will be drawn by function draw(Fig. 14.35) and increment shotsFired. Finally, we play the cannon’s firing sound (cannonSound).

273 // fires a cannonball
274 function fireCannonball(event) 275 {
276	if (cannonballOnScreen) // if a cannonball is already on the screen 277        return; // do nothing
278
279	var angle = alignCannon(event); // get the cannon barrel's angle 280
281	// move the cannonball to be inside the cannon
282	cannonball.x = cannonballRadius; // align x-coordinate with cannon 283	cannonball.y = canvasHeight / 2; // centers ball vertically
284
285	// get the x component of the total velocity
286	cannonballVelocityX = (cannonballSpeed * Math.sin(angle)).toFixed(0); 287
288	// get the y component of the total velocity
289	cannonballVelocityY = (-cannonballSpeed * Math.cos(angle)).toFixed(0); 290	cannonballOnScreen = true; // the cannonball is on the screen
291	++shotsFired; // increment shotsFired 292
293	// play cannon fired sound 294	cannonSound.play();
295 } // end function fireCannonball
296

Fig. 14.33 | Cannon Game functionfireCannonball.

14.19.9 Function alignCannon
Function alignCannon(Fig. 14.34) aims the cannon at the point where the user clicked the mouse on the screen. Lines 302–303 get the x- and y-coordinates of the click from the eventargument. We compute the vertical distance of the mouse click from the center of the screen. If this is not zero, we calculate the cannon barrel’s anglefrom the horizontal (line 313). If the click is on the lower half of the screen we adjust the angleby Math.PI (line 317). We then use the cannonLengthand the angleto determine the x- and y-coor-dinates for the end point of the cannon’s barrel (lines 320–322)—this is used in function draw(Fig. 14.35) to draw a line from the cannon base’s center at the left edge of the screen to the cannon barrel’s end point.

297 // aligns the cannon in response to a mouse click 298 function alignCannon(event)
299 {
300	// get the location of the click 301	var clickPoint = new Object(); 302	clickPoint.x = event.x;
303	clickPoint.y = event.y;

Fig. 14.34 | Cannon Game functionalignCannon.(Part1of2.)
494	Chapter14 HTML5:Introductiontocanvas


304
305	// compute the click's distance from center of the screen 306	// on the y-axis
307	var centerMinusY = (canvasHeight / 2 - clickPoint.y); 308
309	var angle = 0; // initialize angle to 0 310
311	// calculate the angle the barrel makes with the horizontal 312	if (centerMinusY !== 0) // prevent division by 0
313	angle = Math.atan(clickPoint.x / centerMinusY); 314
315	// if the click is on the lower half of the screen 316	if (clickPoint.y > canvasHeight / 2)
317	angle += Math.PI; // adjust the angle 318
319	// calculate the end point of the cannon’s barrel
320	barrelEnd.x = (cannonLength * Math.sin(angle)).toFixed(0); 321	barrelEnd.y =
322	(-cannonLength * Math.cos(angle) + canvasHeight / 2).toFixed(0); 323
324	return angle; // return the computed angle 325 } // end function alignCannon
326

Fig. 14.34 | Cannon Game functionalignCannon.(Part2of2.)

14.19.10 Function draw
When the screen needs to be redrawn, the drawfunction (Fig. 14.35) renders the game’s on-screen elements—the cannon, the cannonball, the blocker and the seven-piece target. We use various canvas properties to specify drawing characteristics, including color, line thickness, font size and more, and various canvas functions to draw text, lines and circles.
Lines 333–336 display the time remaining in the game. If the cannonball is on the screen, lines 341–346 draw the cannonball in its current position.
We display the cannon barrel (lines 350–355), the cannon base (lines 358–362), the blocker (lines 365–369) and the target pieces (lines 372–398).
Lines 377–398 iterate through the target’s sections, drawing each in the correct color—blue for the odd-numbered pieces and yellow for the others. Only those sections that haven’t been hit are displayed.

327 // draws the game elements to the given Canvas 328 function draw()
329 {
330	canvas.width = canvas.width; // clears the canvas (from W3C docs) 331
332	// display time remaining 333	context.fillStyle = "black";
334	context.font = "bold 24px serif"; 335	context.textBaseline = "top";
336	context.fillText("Time remaining: " + timeLeft, 5, 5);

Fig. 14.35 | Cannon Game functiondraw.(Part1of3.)
14.19 Cannon Game	495


337
338	// if a cannonball is currently on the screen, draw it 339	if (cannonballOnScreen)
340	{
341	context.fillStyle = "gray"; 342	context.beginPath();
343	context.arc(cannonball.x, cannonball.y, cannonballRadius, 344           0, Math.PI * 2);
345	context.closePath(); 346	context.fill();
347	} // end if 348
349	// draw the cannon barrel
350	context.beginPath(); // begin a new path 351	context.strokeStyle = "black";
352	context.moveTo(0, canvasHeight / 2); // path origin 353	context.lineTo(barrelEnd.x, barrelEnd.y);
354	context.lineWidth = lineWidth; // line width 355	context.stroke(); // draw path
356
357	// draw the cannon base 358	context.beginPath();
359	context.fillStyle = "gray";
360	context.arc(0, canvasHeight / 2, cannonBaseRadius, 0, Math.PI*2); 361	context.closePath();
362	context.fill(); 363
364	// draw the blocker
365	context.beginPath(); // begin a new path
366	context.moveTo(blocker.start.x, blocker.start.y); // path origin 367	context.lineTo(blocker.end.x, blocker.end.y);
368	context.lineWidth = lineWidth; // line width 369	context.stroke(); //draw path
370
371	// initialize currentPoint to the starting point of the target 372	var currentPoint = new Object();
373	currentPoint.x = target.start.x; 374	currentPoint.y = target.start.y; 375
376	// draw the target
377	for (var i = 0; i < TARGET_PIECES; ++i) 378	{
379	// if this target piece is not hit, draw it 380	if (!hitStates[i])
381	{
382	context.beginPath(); // begin a new path for target 383
384	// alternate coloring the pieces yellow and blue 385	if (i % 2 === 0)
386	context.strokeStyle = "yellow"; 387           else
388	context.strokeStyle = "blue";
389

Fig. 14.35 | Cannon Game functiondraw.(Part2of3.)
496	Chapter14 HTML5:Introductiontocanvas


390	context.moveTo(currentPoint.x, currentPoint.y); // path origin 391	context.lineTo(currentPoint.x, currentPoint.y + pieceLength); 392	context.lineWidth = lineWidth; // line width
393	context.stroke(); // draw path 394        } // end if
395
396	// move currentPoint to the start of the next piece 397	currentPoint.y += pieceLength;
398	} // end for
399 } // end function draw
400

Fig. 14.35 | Cannon Game functiondraw.(Part3of3.)

14.19.11 Function showGameOverDialog
When the game ends, the showGameOverDialogfunction (Fig. 14.36) displays an alert indicating whether the player won or lost, the number of shots fired and the total time elapsed. Line 408 registers the windowobject’s loadevent handler so that function set-upGameis called when the cannon.htmlpage loads.

401 // display an alert when the game ends 402 function showGameOverDialog(message) 403 {
404	alert(message + "\nShots fired: " + shotsFired + 405        "\nTotal time: " + timeElapsed + " seconds "); 406 } // end function showGameOverDialog
407
408 window.addEventListener("load", setupGame, false);

Fig. 14.36 | Cannon Game functionshowGameOverDialog.

14.20  saveand restoreMethods
The canvas’s state includes its current style and transformations, which are maintained in a stack. The savemethod is used to save the context’s current state. The restoremethod restores the context to its previous state. Figure 14.37 demonstrates using the savemeth-od to change a rectangle’s fillStyleand the restoremethod to restore the fillStyle to the previous settings in the stack.

1  <!DOCTYPE html> 2
3  <!-- Fig. 14.37: saveandrestore.html -->
4  <!-- Saving the current state and restoring the previous state. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Save and Restore</title>
9	</head>

Fig. 14.37 | Savingthecurrentstateandrestoringthepreviousstate.(Part1of2.)
14.20 saveandrestoreMethods   497


10	<body>
11	<canvas id = "save" width = "400" height = "200"> 12	</canvas>
13	<script>
14	function draw() 15	{
16	var canvas = document.getElementById("save"); 17	var context = canvas.getContext("2d")
18
19	// draw rectangle and save the settings 20	context.fillStyle = "red"
21	context.fillRect(0, 0, 400, 200); 22	context.save();
23
24	// change the settings and save again 25	context.fillStyle = "orange"
26	context.fillRect(0, 40, 400, 160); 27	context.save();
28
29               // change the settings again 30               context.fillStyle = "yellow"
31	context.fillRect(0, 80, 400, 120); 32
33	// restore to previous settings and draw new rectangle 34	context.restore();
35	context.fillRect(0, 120, 400, 80); 36
37	// restore to original settings and draw new rectangle 38	context.restore();
39	context.fillRect(0, 160, 400, 40); 40            }
41	window.addEventListener( "load", draw, false ); 42         </script>
43	</body>
44  </html>





Firstrectangleisred

Secondrectangleisorange

Thirdrectangleisyellow

Fourthrectangleisrestoredtoorange

Fifthrectangleisrestoredtored



Fig. 14.37 | Savingthecurrentstateandrestoringthepreviousstate.(Part2of2.)
498	Chapter14 HTML5:Introductiontocanvas


We begin by drawing a red rectangle (lines 20–21), then using the savemethod to save its style (line 22). Next, we draw an orange rectangle and save its style (lines 25–27). Then we draw a yellow rectangle (lines 30–31) without saving its style.
Now we draw two rectangles, restoring the previous styles in reverse order of the stack—last in, first out. Line 34 uses the restoremethod to revert to the last-saved style in the stack. Then we draw a new rectangle (line 35). The result is an orange rectangle.
We use the restoremethod again to revert back to the first-saved style (line 38), then draw a fifth rectangle (line 39). The result is a red rectangle.

14.21  A Note on SVG
We’ve devoted this chapter to the new HTML5 canvas. Most current browsers also sup-port SVG (Scalable Vector Graphics), which offers a different approach to developing 2D graphics. Although we do not present SVG, we’ll compare it briefly to HTML5 canvasso you can determine which might be more appropriate for particular applications.
SVG has been around since the early 2000s and is a mature technology with well-established standards. canvasis part of the HTML5 initiative and is an emerging tech-nology with evolving standards.
canvasgraphics are bitmapped—they’re made of pixels. Vector graphics are made of scalable geometric primitives such as line segments and arcs.
Drawing is convenient in each of these technologies, but the mechanisms are dif-ferent. SVG is XML-based, so it uses a declarative approach—you say what you want and SVG builds it for you. HTML5 canvas is JavaScript-based, so it uses an imperative approach—you say how to build your graphics by programming in JavaScript.
Anything you draw on a canvasultimately becomes nothing more than bits. With SVG, each separate part of your graphic becomes an object that can be manipulated through the DOM. So, for example, it’s easy to attach event handlers to items in SVG graphics. This makes SVG graphics more appropriate for interactive applications.
canvasis a low-level capability that offers higher performance than SVG; this makes canvas more appropriate for applications with intense performance demands, such as game programming. The DOM manipulation in SVG can degrade performance, particu-larly for more complex graphics.
SVG graphics easily and accurately scale to larger or smaller drawing surfaces. canvas graphics can be scaled, but the results may not be as eye pleasing.
SVG is more appropriate for accessibility applications for people with disabilities. It’s easier, for example, for people with low vision or vision impairments to work with the XML text in an SVG document than with the pixels in a canvas.
canvas is more appropriate for pixel-manipulation applications (such as color-to-black-and-white image conversion; Section 14.12) and game-playingapplications (such as theCannonGame inSection 14.19).SVGhasbetteranimationcapabilities,sogamedevel-opers often use a mix of both the canvasand SVG approaches.
SVG has better text-rendering capabilities. And the text is still an object after it’s on the screen, so you can easily edit it and change its attributes. Text on a canvasis “lost” in the bits, so it’s difficult to modify.
SVG is more convenient for cross-platform graphics, which is becoming especially important with the proliferation of “form factors,” such as desktops, notebooks, smart-phones, tablets and various special-purpose devices such as car navigation systems.
14.22 ANoteoncanvas3D   499


An additional problem for canvas-based applications is that some web users disable JavaScript in their browsers. You should consider mastering both technologies.

14.22  A Note on canvas3D
At the time of this writing, 3D functionality was not yet supported in canvas, though var-ious tools and plug-ins enable you to create 3D effects. It’s widely expected that a future version of the HTML5 canvasspecification will support 3D capabilities. Figure 14.38 lists several websites with fun and interesting 3D examples.



URL

http://www.kevs3d.co.uk/dev/html5logo/
http://sebleedelisle.com/demos/ GravityParticles/ParticlesForces3D2.html
http://www.kevs3d.co.uk/dev/canvask3d/ k3d_test.html
http://alteredqualia.com/canvasmol/#DNA
http://deanm.github.com/pre3d/monster.html

http://html5canvastutorials.com/demos/ webgl/html5_canvas_webgl_3d_world/
http://onepixelahead.com/2010/09/24/10-awesome-html5-canvas-3d-examples/
http://sixrevisions.com/web-development/ how-to-create-an-html5-3d-engine/
http://sebleedelisle.com/2011/02/html5-canvas-3d-particles-uniform-distribution/
http://www.script-tutorials.com/
how-to-create-3d-canvas-object-in-html5/

http://blogs.msdn.com/b/davrous/archive/ 2011/05/27/how-to-add-the-3d-animated-html5-logo-into-your-webpages-thanks-to-lt-canvas-gt.aspx
http://www.bitstorm.it/blog/en/2011/05/
3d-sphere-html5-canvas/

Description

Spinning 3D HTML5 logo.
A basic 3D particle distribution sys-tem.
Includes several 3D shapes that rotate when clicked.
Spinning 3D molecules.
A cube that morphs into other 3D shapes.
Click and drag the mouse to smoothly change perspective in a 3D room.
Ten HTML5 canvas3D examples including games and animations.
The tutorial, “How to Create an HTML5 3D Engine.”
The short tutorial, “HTML5 Canvas 3D Particles Uniform Distribution.”
The tutorial, “How to Create Ani-mated 3D Canvas Objects in HTML5.”
The tutorial, “How to Add the 3D Animated HTML5 Logo to Your Webpages.”

The tutorial, “Draw Old School 3D Sphere with HTML5.”


Fig. 14.38 | HTML5canvas3Ddemosandtutorials.


Summary
Section 14.2 canvasCoordinate System
•  The canvascoordinate system (p. 445) is a scheme for identifying every point on a canvas.
•  By default, the upper-left corner of a canvashas the coordinates (0, 0).
500	Chapter14 HTML5:Introductiontocanvas


•  A coordinate pair has both an x-coordinate (the horizontal coordinate; p. 446) and a y-coordi-nate (the vertical coordinate; p. 446).
•  The x-coordinate (p. 446) is the horizontal distance to the right from the left border of a canvas. The y-coordinate (p. 446) is the vertical distance downward from the top border of a canvas.
•  The x-axis (p. 446) defines every horizontal coordinate, and the y-axis (p. 446) defines every ver-tical coordinate.
•  You position text and shapes on a canvasby specifying their x- y-coordinates.
•  Coordinate space units are measured in pixels (“picture elements”), which are the smallest units of resolution on a screen.

Section 14.3 Rectangles
•  A canvasis a rectangular area in which you can draw.
•  The canvaselement (p. 447) has two attributes—widthand height. The default widthis 300, and the default heightis 150.
•  The fillStyle(p. 447) specifies the color of the rectangle.
•  To specify the coordinates of the rectangle, we use fillRect(p. 447) in the format (x, y, w, h), where xand yare the coordinates for the top-left corner of the rectangle, wis the width of the rectangle and his the height.
•  ThestrokeStyle(p. 447)specifiesthestrokecolorandlineWidth(p. 447)specifiesthelinewidth. •  The strokeRectmethod (p. 447) specifies the path of the stroke in the format (x, y, w, h).
•  If the widthand heightare 0, no stroke will appear. If either the width or the height is 0, the result will be a line, not a rectangle.

Section 14.4 Using Paths to Draw Lines
•  The beginPathmethod (p. 448) starts the path.
•  The moveTomethod (p. 448) sets the x- and y-coordinates of the path’s origin.
•  From the point of origin, we use the lineTomethod (p. 448) specify the destinations for the path.
•  The lineWidthattribute (p. 448) is used to change the thickness of the line. The default lin-eWidthis 1.0.
•  The lineJoinattribute (p. 448) specifies the style of the corners where two lines meet. It has three possible values—bevel, round, and miter.
•  The bevellineJoingives the path sloping corners.
•  ThelineCapattribute(p. 449)definesthestyleofthelineends.Therearethreepossiblevalues— butt, round, and square.
•  A buttlineCapspecifies that the line ends have edges perpendicular to the direction of the line and no additional cap.
•  The strokeStyleattribute (p. 450) specifies the line color.
•  The strokemethod (p. 450) draws lines on a canvas. The default stroke color is black.
•  The roundlineJoincreates rounded corners. Then, the roundlineCapadds a semicircular cap to the ends of the path. The diameter of the added cap is equal to the width of the line.
•  The closePathmethod (p. 450) closes the path by drawing a line from the last specified desti-nation back to the point of the path’s origin.
•  ThemiterlineJoinbevelsthelinesatananglewheretheymeet.Forexample,thelinesthatmeet at a 90-degree angle have edges bevelled at 45-degree angles where they meet.
Summary   501


•  A square lineCapadds a rectangular cap to the line ends. The length of the cap is equal to the line width, and the width of the cap is equal to half of the line width. The edge of the square lineCapis perpendicular to the direction of the line.

Section 14.5 Drawing Arcs and Circles
•  Arcs are portions of the circumference of a circle. To draw an arc, you specify the arc’s starting angle and ending angle (p. 450) measured in radians—the ratio of the arc’s length to its radius.
•  The arcmethod (p. 450) draws the circle using five arguments. The first two arguments repre-sent the x- and y-coordinates of the center of the circle. The third argument is the radius of the circle. The fourth and fifth arguments are the arc’s starting and ending angles in radians.
•  The sixth argument is optional and specifies the direction in which the arc’s path is drawn. By default, the sixth argument is false, indicating that the arc is drawn clockwise. If the argument is true, the arc is drawn counterclockwise (or anticlockwise).
•  The constant Math.PIis the JavaScript representation of the mathematical constant p, the ratio ofacircle’scircumferencetoitsdiameter.2pradians representsa360-degreearc,pradiansis 180 degrees and p/2 radians is 90 degrees.

Section 14.6 Shadows
•  The shadowBlurattribute (p. 452) specifies the blur and color or a shadow. By default, the blur is 0(no blur). The higher the value, the more blurred the edges of the shadow will appear.
•  A positive shadowOffsetXattribute (p. 452) moves the shadow to the right of the rectangle. •  A positive shadowOffsetYattribute (p. 452) moves the shadow down from the rectangle
•  The shadowColorattribute (p. 452) specifies the color of the shadow.
•  Using a negative shadowOffsetXmoves the shadow to the left of the rectangle. •  Using a negative shadowOffsetYmoves the shadow up from the rectangle.
•  The default value for the shadowOffsetXand shadowOffsetYis 0(no shadow).

Section 14.7 Quadratic Curves
•  Quadratic curves (p. 454) have a starting point, an ending point and a single point of inflection.
•  The quadraticCurveTomethod (p. 454) uses four arguments. The first two, cpx and cpy, are the arethecoordinatesofthecontrolpoint—thepointofthecurve’sinflection.Thethirdandfourth arguments, x and y, are the coordinates of the ending point. The starting point is the last subpath destination, specified using the moveToor lineTomethods.

Section 14.8 Bezier Curves
•  Bezier curves (p. 456) have a starting point, an ending point and two control points through which the curve passes. These can be used to draw curves with one or two points of inflection, depending on the coordinates of the four points.
•  ThebezierCurveTomethod(p. 456)usessix arguments.Thefirsttwo arguments, cp1xandcp1y, are the coordinates of the first control point. The third and fourth arguments, cp2x and cp2y, are the coordinates for the second control point. Finally, the fifth and sixth arguments, x and y, are the coordinates of the ending point. The starting point is the last subpath destination, specified using either the moveToor lineTomethod.

Section 14.9 Linear Gradients
•  The createLinearGradientmethod (p. 457) has four arguments that represent x0, y0, x1, y1, where the first two arguments are the x- and y-coordinates of the gradient’s start and the last two are the x- and y-coordinates of the end.
502	Chapter14 HTML5:Introductiontocanvas


•  The start and end have the same x-coordinates but different y-coordinates, so the start of the gra-dient is a point at the top of the canvasdirectly above the point at the end of the gradient at the bottom. This creates a vertical linear gradient that starts at the top and changes as it moves to the bottom of the canvas.
•  The addColorStopmethod (p. 459) adds color stops to the gradient. Note that each color stop has a positive value between 0(the start of the gradient) and 1(the end of the gradient). For each color stop, specify a color.
•  The fillStylemethod specifies a gradient, then the fillRectmethod draws the gradient on the canvas.
•  To draw a horizontal gradient, use the createLinearGradientmethod where the start and end have different x-coordinates but the same y-coordinates.

Section 14.10 Radial Gradients
•  A radial gradient is comprised of two circles—an inner circle where the gradient starts and an outer circle where the gradient ends.
•  The createRadialGradientmethod (p. 459) has six arguments that represent x0, y0, r0, x1, y1, r1, where the first three arguments are the x- and y-coordinates and the radius of the gradi-ent’s start circle, and the last three arguments are the x- and y-coordinates and the radius of the end circle.
•  Drawing concentric circles with the same x- and y-coordinates but different radiuses creates a ra-dial gradient that starts in a common center and changes as it moves outward to the end circle.
•  If the start and end circles are not concentric circles, the effect is altered.

Section 14.11 Images
•  The drawImagemethod (p. 461) draws an image to a canvasusing five arguments. The first ar-gument can be an image, canvasor videoelement. The second and third arguments are the des-tination x- and destination y-coordinates—these indicate the position of the top-left corner of the image on the canvas. The fourth and fifth arguments are the destination width and destina-tion height.

Section 14.12 Image Manipulation: Processing the Individual Pixels of a canvas
•  You can obtain a canvas’s pixels and manipulate their red, green, blue and alpha (RGBA) values.
•  You can change the RGBA values with the input elements of type range defined in the body.
•  Themethod getImageData(p.466) obtains anobjectthat contains thepixels to manipulate. The method receives a bounding rectangle representing the portion of the canvasto get.
•  The returned object contains an array named datawhich stores every pixel in the selected rect-angular area as four elements in the array. Each pixel’s data is stored in the order red, green, blue, alpha. So, the first four elements in the array represent the RGBA values of the pixel in row 0 and column 0, the next four elements represent the pixel in row 0 and column 1, etc.

Section 14.13 Patterns
•  The createPatternmethod (p. 467) takes two arguments. The first argument is the image for the pattern, which can be an imageelement, a canvaselement or a videoelement. The second argument specifies how the image will be repeated to create the pattern and can be one of four values—repeat(repeats horizontally and vertically), repeat-x(repeats horizontally), repeat-y (repeats vertically) or no-repeat.
•  Usethe fillStyleattributepatternandusethefillmethodto draw thepattern tothecanvas.
Summary   503


Section 14.14 Transformations
•  You can change the transformation matrix (the coordinates) on the canvasusing method trans-late(p. 468) so that the center of thecanvasbecomes the point of origin with the x, y values 0,0.
•  The scalemethod (p. 469) can stretch a circle to create an ellipse. The x value represents the horizontal scale factor, the y value the vertical scale factor.
•  The rotatemethod (p. 470) allows you to create animated rotations on a canvas.
•  To rotate an image around its center, change the transformation matrix on the canvasusing the translatemethod. The rotatemethod takes one argument—the angle of the clockwise rota-tion, expressed in radians.
•  The setIntervalmethod (p. 471) of the windowobject takes two arguments. The first is the nameof the function to call (rotate) andthe second is the number ofmilliseconds between calls.
•  The clearRectmethod (p. 471) clears the rectangle’s pixels from the canvas, converting them back to transparent. This method takes four arguments—x, y, width and height.
•  The transformmethod (p. 472) allows you to skew, scale, rotate and translate elements without using separate transformation methods.
•  The transformmethod takes six arguments in the format (a, b, c, d, e, f)based on a transforma-tion matrix. The first argument, a, is the x-scale—the factor by which to scale an element hori-zontally. The second argument, b, is the y-skew. The third argument, c, is the x-skew. The fourth argument, d, is the y-scale—the factor by which to scale an element vertically. The fifth argu-ment, e, is the x-translation and the sixth argument, f, is the y-translation.

Section 14.15 Text
•  The fontattribute (p. 474) specifies the style, size and font of the text.
•  The textBaselineattribute (p. 475) specifies the alignment points of the text. There are six dif-ferent attribute values—top, hanging, middle, alphabetic, ideographicand bottom.
•  Method fillText(p. 475) draws the text to the canvas. This method takes three arguments. The first is the text being drawn to the canvas. The second and third arguments are the x- and y-coor-dinates. You may include the optional fourth argument, maxWidth, to limit the width of the text.
•  The textAlignattribute (p. 475) specifies the horizontal alignment of the text relative to the x-coordinate of the text. There are five possible textAlignattribute values—left, right, center, start(the default value) and end.
•  The lineWidthattribute specifies the thickness of the stroke used to draw the text. •  The strokeStylespecifies the color of the text.
•  Using strokeTextinstead of fillTextdraws outlined text instead of filled text.

Section 14.16 Resizing the canvasto Fill the Browser Window
•  Use a CSS style sheet to set the positionof the canvasto absoluteand set both its widthand heightto 100%, rather than using fixed coordinates.
•  Use JavaScript functiondrawto draw the canvaswhen the application is rendered.
•  Use the fillRectmethod to draw the color to the canvas. The x- and y-coordinates are 0,0— the top left of the canvas. The the x1value is context.canvas.widthand the y1value is con-text.value.height, so no matter the size of the window, the x1value will always be the width of the canvasand the y1value the height of the canvas.

Section 14.17 Alpha Transparency
•  The globalAlphaattribute (p. 477) value can be any number between 0(fully transparent) and 1(the default value, which is fully opaque).
504	Chapter14 HTML5:Introductiontocanvas


Section 14.18 Compositing
•  Compositing (p. 479) allows you to control the layering of shapes and images on a canvasusing two attributes—the globalAlphaattribute and the globalCompositeOperationattribute (p. 479).
•  There are 11 globalCompositeOperationattribute values. The source is the image being drawn to the canvas. The destination is the current bitmap on the canvas.
•  If you use source-in, the source image is displayed where the images overlap and both are opaque. Both images are transparent where there is no overlap.
•  Using source-out, if the source image is opaque and the destination is transparent, the source im-age is displayed where the images overlap. Both images are transparent where there is no overlap.
•  source-over(the default value) places the source image over the destination. The source image is displayed where it's opaque and the images overlap. The destination is displayed where there is no overlap.
•  destination-atopplaces the destination on top of the source image. If both images are opaque, the destination is displayed where the images overlap. If the destination is transparent but the source image is opaque, the source image is displayed where the images overlap. The source im-age is transparent where there is no overlap.
•  destination-indisplays the destination image where the images overlap and both are opaque. Both images are transparent where there is no overlap.
•  Using destination-out, if the destination image is opaque and the source image is transparent, the destination is displayed where the images overlap. Both images are transparent where there is no overlap.
•  destination-overplaces the destination image over the source image. The destination image is displayed where it's opaque and the images overlap. The source image is displayed where there’s no overlap.
•  lighterdisplays thesum ofthesource-imagecoloranddestination-imagecolor—up tothemax-imum RGB color value (255)—where the images overlap. Both images are normal elsewhere.
•  Using copy, if the images overlap, only the source image is displayed (the destination is ignored). •  With xor, the images are transparent where they overlap and normal elsewhere.

Section 14.19 Cannon Game
•  The HTML5 audioelement may contain multiple sourceelements for the audio file in several formats, so that you can support cross-browser playback of the sounds.
•  You can create your own properties on JavaScript Objects simply by assigning a value to a prop-erty name.
•  Collision detection determines whether the cannonball has collided with any of the canvas’s edges, with the blocker or with a section of the target. Game-development frameworks generally provide more sophisticated, built-in collision-detection capabilities.

Section 14.20 saveand restoreMethods
•  The canvas’s state (p. 496) includes its current style and transformations, which are maintained in a stack.
•  The savemethod (p. 496) is used to save the context's current state.
•  The restoremethod (p. 496) restores the context to its previous state.

Section 14.21 A Note on SVG
•  Vector graphics are made of scalable geometric primitives such as line segments and arcs.
Self-ReviewExercises   505


•  SVG (Scalable Vector Graphics, p. 498) is XML-based, so it uses a declarative approach—you say what you want and SVG builds it for you. HTML5 canvasis JavaScript-based, so it uses an imperative approach–you say how to build your graphics by programming in JavaScript.
•  With SVG, each separate part of your graphic becomes an object that can be manipulated through the DOM.
•  SVG is more convenient for cross-platform graphics, which is becoming especially important with the proliferation of “form factors,” such as desktops, notebooks, smartphones, tablets and various special-purpose devices such as car navigation systems.

Self-Review Exercises
14.1	 State whether each of the following is true or false. If false, explain why. a)  The strokeStyleattribute specifies the line width.
b)  The bevellineJoingives the path square corners.
c)   canvas’s roundedRectmethod is used to build rounded rectangles. d)  The fillRectmethod is used to specify a color or gradient.
e)   By default, the origin (0, 0) is located at the exact center of the monitor. f)   The restoremethod restores the context to its initial state.
g)  The canvas’s state includes its current style and transformations, which are maintained in a stack.
14.2	Fill in the blanks in each of the following:
a)  The canvaselement has two attributes—	and	.
b)  When drawing a rectangle, the	method specifies the path of the stroke in the format (x, y, w, h).
c)   The lineCapattribute has the possible values	,	, and	.
d)  The	method draws a line from the last specified destination back to the point of the path’s origin.
e)   The	method specifies the three points in the Bezier curve. f)   The	attribute specifies the color of the shadow.
g)	are portions of the circumference of a circle and are measured in	. h)  The                method is used to save the context's current state.

Answers to Self-Review Exercises
14.1	a) False. The strokeStyleattribute specifies the stroke color. b) False. The bevellineJoin gives the path sloping corners. c) False. Unlike CSS3, there’s no roundedRect method in canvas. d) False.ThefillStylemethodspecifiesacolorgradient,thenthefillRectmethoddrawsthecolor orgradientonthecanvas.e)False.Theorigin(0,0)correspondstotheupper-leftcornerofthecanvas by default. f) False. The restoremethod restores the context to its previous state. g) True.
14.2	a) width, height. b) strokeRect. c) butt, round, square. d) closePath. e) bezierCurveTo. f) shadowColor. g) Arcs, radians. h) save.

Exercises
14.3	State whether each of the following is true or false. If false, explain why.
a)  The moveTomethod sets the x- and y-coordinates of the path’s destination.
b)  A squarelineCapspecifies that the line ends have edges perpendicular to the direction of the line and no additional cap.
c)   A vertical gradient has different x-coordinates but the same y-coordinates. d)  In the canvascoordinate system, x values increase from left to right.
506	Chapter14 HTML5:Introductiontocanvas


e)   Bezier curves have a starting point, an ending point and a single point of inflection.
14.4     Fill in the blanks in each of the following: a)  The                method starts the path.
b)  The lineJoinattribute has three possible values—	,	, and	. c)   The	attribute specifies the line color.
d)  The	lineJoinbevels the lines at an angle where they meet.
e)   Each color stop in a gradient has a value between	(the start of the gradient) and	(the end of the gradient).
f)   The	attribute specifies the horizontal alignment of text relative to the x-coor-dinate of the text.
g)  The constant	is the JavaScript representation of the mathematical constant p.
14.5	(Text Shadow) Create a shadow on the phrase "HTML5 Canvas"with an offset-xof 2px, an offset-yof 5px, a blur of 6pxand a text-shadowcolor gray.
14.6	(Rounded Rectangle) Generalize the example in Fig. 14.7 into a roundedRectfunction and call it twice with different arguments to place two different rounded rectangles on the canvas.
14.7	(Diaglonal Linear Gradient) Create a canvaswith a widthand heightof 500. Create a diag-onal linear gradient using the colors of the rainbow—red, orange, yellow, green, blue, indigo, violet.
14.8	(Vertical Linear Gradient) Drawa nonrectangularshapeusinglines,thenaddavertical lin-ear gradient to the shape with three color stops.
14.9	(Radial Gradient) Create a canvaswith a widthand heightof 500px. Create a radial gra-dient with three colors. Start the gradient in the bottom-right corner with the colors changing as from right to left.
14.10   (Shadows) Create a script that draws a rectangle with a shadow on a canvasand allows the usertocontrol the x- andy-offsets andblur oftheshadow usingsliders. The first slidershouldadjust the shadowOffsetXusing a range of -30to 30. The second slider should adjust the shadowOffsetY using a range of -30to 30. The third slider should adjust the shadowBlurusing a range of 0to 100.
14.11   (Concentric Circles) Write a script that draws eight concentric circles. For each new circle, increase value of the radius by 5. Vary the circles’ colors.
14.12   (Image Manipulation) Write a script that converts a color image to black and white and to sepia, and draws all three images—the original, the black and white, and the sepia—to the canvas.
14.13   (Compositing) The example in Fig. 14.23 showed you how to use six of the 11 compositing values.Createan applicationthatusesall11ofthecompositingvalues,includingthefivevalues that were not covered in Fig. 14.23—source-in, source-out, destination-in, destination-atopand copy. Use an array to draw them all to the same canvas, arranged in a table. Use a redrectangle for the source image and a bluecircle for the destination image.
14.14   (Moving Circle) Crate a square canvaswith a width and height of 500. Write a script that continuously moves a circle counterclockwise in a diamond pattern so that the circle touches the center of each edge of the canvas.
14.15   (Draw  Street  Signs) Go  to  http://mutcd.fhwa.dot.gov/ser-shs_millennium_eng.htm and find three different street signs of your choosing. Draw each on a canvas.
14.16   (Printing in a Larger Font) Write a script that enables a (visually impaired) user to dynam-ically scale the font size of text on a canvasto a comfortable size. Use a slider to control the font size.
14.17   (Painting) Create a painting application that allows the you to create art by clicking and dragging the mouse across the canvas. Include options for changing the drawing color and line thickness. Provide red, green and blue sliders that allow you to select the RGB color. Include a color swatch below the three sliders so that as you move each slider, the color swatch shows you the cur-
Exercises   507


rent drawing color. Provide a line-width dialog with a single slider that controls the thickness of the line that you’ll draw. Also include options that allow you to turn the cursor into an eraser, to clear thescreen and to save thecurrent drawing. Atany point,you shouldbe abletoclear theentiredraw-ing from the canvas.
14.18   (Fireworks Text Skywriter) The website http://js-fireworks.appspot.com/ is a fun HTML5 application that uses canvas. You can enter a message, which is then written in the sky overtheLondonskylineusingafireworkseffect.Theauthorprovides theopen-sourcecode.Modify the example to create your own skywriting effect over an image of your choosing.
14.19   (Live canvasCoordinate System) Draw the canvascoordinate system. As you move the mouse around, dynamically display its x- and y-coordinates.

14.20   (Kaleidoscope) Create an animated kaleidoscope effect.
14.21   (Random-Lines Animated Art) Write a script that continuously draws lines with random lengths, locations, widths, orientations, colors, and transparencies.

14.22   (Creating Random 2D Animated Art) Create random art continuously drawing circles, rectangles,ellipses,trianglesandany othershapesofyourchoosing.Varytheircolors,linethickness-es, positions, dimensions, etc.
14.23   (Flashing Image) Write a script that repeatedly flashes an image on the screen. Do this by alternating the image with a plain background-color image.

14.24   (Cannon Game Enhancements) In Section 14.19 we showed you how to write a Cannon Game using JavaScript and HTML5 canvas. Add the following enhancements and others of your choosing:
1. Addan “explosion animation” eachtimethe cannonball hits one of the sections of thetar-get. Match the animation with the “explosion sound” that plays when a piece of the target is hit.
2. Play a sound when the blocker hits the top or the bottom of the screen. 3. Play a sound when the target hits the top ot the bottom of the screen.
4. Add a trail to the cannonball; erase it when the cannonball hits the target.
5. Modify the click events so that a single tap aims the cannon, and the second single tap fires it.
6. Add a scoring mechanism and keep track of the all-time best score.
7. Using CSS3 Media Queries, determine the size of the display area and scale the cannon game elements accordingly.
14.25   (Randomly Erasing an Image) Suppose an image is displayed in a canvas. One way to erase theimageis simply toseteverypixeltothesamebackgroundcolorimmediately,butthevisualeffect is dull. Write a JavaScript program that displays an image, then erases it by using random-number generation to select individual pixels to erase. After most of the image is erased, erase all the remain-ing pixels at once. You might try several variants of this problem. For example, you might display lines, circles or shapes randomly to erase regions of the screen.
14.26   (Text Flasher) Create a script that repeatedly flashes text on the screen. Do this by alternat-ing the text with a plain background-color image. Allow the user to control the “blink speed” and the background color or pattern.
14.27   (DigitalClock)Implementascriptthatdisplaysadigitalclockonthescreen.Includealarm-clock functionality.
508	Chapter14 HTML5:Introductiontocanvas


14.28   (Analog Clock) Create a script that displays an analog clock with hour, minute and second hands that move appropriately as the time changes.
14.29   (Calling Attention to an Image) If you want to emphasize an image, you might place a row of simulated light bulbs around it. You can let the light bulbs flash in unison or fire on and off in sequence one after the other.
14.30   (Animation) Create a general-purpose JavaScript animation. It should allow the user to specify the sequence of frames to be displayed, the speed at which the images are displayed, audios and videos to be played while the animation is running and so on.
14.31   (Random Interimage Transition) In Fig. 5.14, we used CSS3 to “melt” one image into an-other. This provides a nice visual effect. If you’re displaying one image in a given area on the screen and you’d like to transition to another image in the same area, store the new screen image in an off-screen “buffer” and randomly copy pixels from it to the display area, overlaying the pixels already at those locations. When the vast majority of the pixels have been copied, copy the entire new image to the display area to be sure you’re displaying the complete new image. You might try several vari-ants of this problem. For example, select all the pixels in a randomly chosen straight line or shape in the new image and overlay them above the corresponding positions of the old image.
14.32   (Background Audio) Add background audio to one of your favorite applications.
14.33   (Scrolling Marquee Sign) Create a script that scrolls dotted characters from right to left (or from left to right if that’s appropriate for your language) across a marquee-like display sign. As an option,display thetextin acontinuous loop,so thatafterthe text disappears atone end,itreappears at the other.
14.34   (Scrolling-Image Marquee) Create a script that scrolls a series of images across a marquee screen.
14.35   (Dynamic Audio and Graphical Kaleidoscope) Write a kaleidoscope script that displays re-flected graphics to simulate the popular children’s toy. Incorporate audio effects that “mirror” your script’s dynamically changing graphics.
14.36   (Automatic Jigsaw Puzzle Generator) Create a jigsaw puzzle generator and manipulator. The user specifies an image. Your script loads and displays the image, then breaks it into randomly selected shapes and shuffles them. The user then uses the mouse to move the pieces around to solve the puzzle. Add appropriate audio sounds as the pieces are moved around and snapped back into place. You might keep tabs on each piece and where it really belongs—then use audio effects to help the user get the pieces into the correct positions.
14.37   (Maze Generator and Walker) Develop a multimedia-based maze generator and traverser script.Let the usercustomize the maze by specifying thenumberof rows and columns and by indicat-ing the level of difficulty. Have an animated mouse walk the maze. Use audio to dramatize the move-ment of your mouse character.
14.38   (Maze Traversal Using Recursive Backtracking) The grid of #s and dots (.) in Fig. 14.39 is a two-dimensional array representation of a maze. The #s represent the walls of the maze, and the dots represent locations in the possible paths through the maze. A move can be made only to a lo-cation in the array that contains a dot.
Write a recursive method (mazeTraversal) to walk through mazes like the one in Fig. 14.39. The method should receive as arguments a 12-by-12 character array representing the maze and the current location in the maze (the first time this method is called, the current location should be the entry point of the maze). As mazeTraversalattempts to locate the exit, it should place the character xin each square in the path. There’s a simple algorithm for walking through a maze that guarantees find-ing the exit (assuming there’s an exit—if there’s no exit, you’ll arrive at the starting location again). For details, visit: http://en.wikipedia.org/wiki/Maze_solving_algorithm#Wall_follower
.
Exercises   509



# # # # # # # # # # # # # . . . # . . . . . . # . . # . # . # # # # . # # # # . # . . . . # . # # . . . . # # # . # . . # # # # . # . # . # . # # . . # . # . # . # . # # # . # . # . # . # . # # . . . . . . . . # . # # # # # # # . # # # . # # . . . . . . # . . . # # # # # # # # # # # # #

Fig. 14.39 | Two-dimensionalarrayrepresentationofamaze.

14.39   (Generating Mazes Randomly) Write a method mazeGeneratorthat takes as an argument a two-dimensional 12-by-12 character array and randomly produces a maze. The method should also provide the starting and ending locations of the maze. Test your method mazeTraversal from Exercise 14.38, using several randomly generated mazes.
14.40   (Mazes   of  Any   Size)   Generalize  methods  mazeTraversal and  mazeGenerator of Exercise 14.38 and Exercise 14.39 to process mazes of any width and height.
14.41   (One-Armed Bandit) Develop a multimedia simulation of a “one-armed bandit.” Have three spinning wheels. Place symbols and images of various fruits on each wheel. Use random-num-ber generation to simulate the spinning of each wheel and the stopping of each wheel on a symbol.
14.42   (Horse Race) Create a simulation of a horse race. Have multiple contenders. Use audios for a race announcer. Play the appropriate audios to indicate the correct status of each contender throughout the race. Use audios to announce the final results. You might try to simulate the kinds of horse-racing games that are often played at carnivals. The players take turns at the mouse and have to perform some skill-oriented manipulation with it to advance their horses.
14.43   (Shuffleboard) Develop a multimedia-based simulation of the game of shuffleboard. Use appropriate audio and visual effects.
14.44   (Game of Pool) Create a multimedia-based simulation of the game of pool. Each player takes turns using the mouse to position a pool cue and hit it against the ball at the appropriate angle to try to make other balls fall into the pockets. Your script should keep score.
14.45   (Fireworks Designer) Create a script that enables the user to create a customized fireworks display. Create a variety of fireworks demonstrations. Then orchestrate the firing of the fireworks for maximum effect. You might synchronize your fireworks with audios or videos.
14.46   (Floor Planner) Develop a script that will help someone arrange furniture in a room.
14.47   (Crossword Puzzle) Crossword puzzles are among the most popular pastimes. Develop a multimedia-based crossword-puzzle script. Your script should enable the player to place and erase words easily. Tie your script to a large computerized dictionary. Your script also should be able to suggest completion of words on which letters have already been filled in. Provide other features that will make the crossword-puzzle enthusiast’s job easier.
14.48   (15 Puzzle) Write a multimedia-based script that enables the user to play the game of 15. The game is played on a 4-by-4 board having a total of 16 slots. One slot is empty; the others are occupiedby15tilesnumbered1through15.Theusercanmoveanytilenexttothecurrentlyempty slotinto that slot by clicking on thetile. Your scriptshouldcreate theboardwiththe tiles in random order. The goal is to arrange the tiles into sequential order, row by row.
510	Chapter14 HTML5:Introductiontocanvas


14.49   (Reaction Time/Reaction Precision Tester) Create a script that moves a randomly created shape around the screen. The user moves the mouse to catch and click on the shape. The shape’s speed and size can be varied. Keep statistics on how long the user typically takes to catch a shape of a given size and speed. The user will have more difficulty catching faster-moving, smaller shapes.
14.50   (Rotating Images) Create a script that lets you rotate an image through some number of de-grees (out of a maximum of 360 degrees). The script should let you specify that you want to spin the image continuously. It should let you adjust the spin speed dynamically.
14.51   (Coloring Black-and-White Photographs and Images) Create a script that lets you paint a black-and-white photograph with color. Provide a color palette for selecting colors. Your script should let you apply different colors to different regions of the image.
14.52   (Vacuuming Robot) Start with a blank canvasthat represents the floor of the room. Add obstacles such as a chair, couch, table legs, floor-standing vase, etc. Add your vacuum-cleaning ro-bot. Start it moving in a random direction. It must avoid obstacles and must eventually vacuum the entire room. It has a known width and height. Keep track of which pixels have been “vacuumed.” Keeptrackofthepercentageofthecanvasthathasbeenvacuumedandhowmuchtimeithastaken.
14.53   (Eyesight Tester) You’ve probably had your eyesight tested several times—to qualify for a driver’slicense,etc.Intheseexams,you’reaskedtocoveroneeye,thenreadoutloudthelettersfrom an eyesight chart called a Snellen chart. The letters are arranged in 11 rows and include only the letters C, D, E, F, L, N, O, P, T, Z. The first row has one letter in a very large font. As you move down the page, the number of letters in each row increases by one and the font size of the letters decreases, ending with a row of 11 letters in a very small font. Your ability to read the letters accu-rately measures your visual acuity. Create an eyesight testing chart similar to the Snellen chart used by medical professionals. To learn more about the Snellen chart and to see an example, visit http:/ /en.wikipedia.org/wiki/Snellen_chart.
XML	15
Like everything metaphysical, the harmony between thought and reality is to be found in the grammar of the language.
—Ludwig Wittgenstein

I played with an idea, and grew willful; tossed it into the air; transformed it; let it escape and recapturedit;madeitiridescent with fancy, and winged it with paradox.
—Oscar Wilde



Objectives Inthischapteryou’ll:
ÿ   MarkupdatausingXML.
ÿ   LearnhowXMLnamespaces helpprovideuniqueXML
elementandattributenames.
ÿ   CreateDTDsandschemasfor specifyingandvalidatingthe structureofanXML
document.
ÿ   CreateandusesimpleXSL stylesheetstorenderXML
documentdata.
ÿ   RetrieveandmanipulateXML dataprogrammaticallyusing
JavaScript.
512	Chapter15 XML



15.1  Introduction 15.2  XMLBasics 15.3  StructuringData
15.4  XMLNamespaces
15.5  DocumentTypeDefinitions(DTDs) 15.6  W3CXMLSchemaDocuments

15.7  XMLVocabularies
15.7.1 MathML™
15.7.2 OtherMarkupLanguages
15.8  ExtensibleStylesheetLanguageand XSLTransformations
15.9  DocumentObjectModel(DOM) 15.10  WebResources


Summary | Self-Review Exercises | Answers to Self-Review Exercises | Exercises

15.1 Introduction
The Extensible Markup Language (XML) was developed in 1996 by the World Wide Web Consortium’s (W3C’s) XML Working Group. XML is a widely supported open technology (i.e., nonproprietary technology) for describing data that has become the stan-dard format for data exchanged between applications over the Internet.
WebapplicationsuseXMLextensively,andwebbrowsersprovidemanyXML-related capabilities. Sections 15.2–15.7 introduce XML and XML-related technologies—XML namespaces for providing unique XML element and attribute names, and Document Type Definitions (DTDs) and XML Schemas for validating XML documents. These sec-tions support the use of XML in many subsequent chapters. Sections 15.8–15.9 present additionalXML technologiesandkeyJavaScript capabilitiesforloading andmanipulating XML documents programmatically—this material is optional but is recommended if you plan to use XML in your own applications.

15.2 XML Basics
XML permits document authors to create markup (i.e., a text-based notation for describ-ing data) for virtually any type of information, enabling them to create entirely new mark-up languages for describing any type of data, such as mathematical formulas, software-configuration instructions, chemical molecular structures, music, news, recipes and finan-cial reports. XML describes data in a way that human beings can understand and comput-ers can process.
Figure 15.1 is a simple XML document that describes information for a baseball player. We focus on lines 5–9 to introduce basic XML syntax. You’ll learn about the other elements of this document in Section 15.3.

1  <?xml version = "1.0"?> 2
3  <!-- Fig. 15.1: player.xml -->
4  <!-- Baseball player structured with XML --> 5  <player>
6	<firstName>John</firstName> 7	<lastName>Doe</lastName>
8	<battingAverage>0.375</battingAverage>
9  </player>

Fig. 15.1  | XMLthatdescribesabaseballplayer’sinformation.
15.2 XMLBasics   513


XML Elements
XML documents contain text that represents content (i.e., data), such as John(line 6 of Fig. 15.1), and elements that specify the document’s structure, such as firstName(line 6 of Fig. 15.1). XML documents delimit elements with start tags and end tags. A start tag consists of the element name in angle brackets (e.g., <player>and <firstName>in lines 5 and 6, respectively). An end tag consists of the element name preceded by a forward slash (/) in angle brackets (e.g., </firstName>and </player>in lines 6 and 9, respective-ly). An element’s start and end tags enclose text that represents a piece of data (e.g., the player’sfirstName—John—inline6, whichisenclosedbythe <firstName>starttagand </firstName> end tag). Every XML document must have exactly one root element that contains all the other elements. In Fig. 15.1, the root element is player(lines 5–9).

XML Vocabularies
XML-based markup languages—called XML vocabularies—provide a means for describ-ing particular types of data in standardized, structured ways. Some XML vocabularies includeXHTML(ExtensibleHyperTextMarkupLanguage),MathML™(formathemat-ics), VoiceXML™ (for speech), CML (Chemical Markup Language—for chemistry), XBRL (Extensible Business Reporting Language—for financial data exchange) and others that we discuss in Section 15.7.
Massive amounts of data are currently stored on the Internet in many formats (e.g., databases, web pages, text files). Much of this data, especially that which is passed between systems, will soon take the form of XML. Organizations see XML as the future of data encoding. Information-technology groups are planning ways to integrate XML into their systems. Industry groups are developing custom XML vocabularies for most major indus-tries that will allow business applications to communicate in common languages. For example, many web services allow web-based applications to exchange data seamlessly through standard protocols based on XML.
The next generation of the web is being built on an XML foundation, enabling you to develop more sophisticated web-based applications. XML allows you to assign meaning towhat would otherwise be random pieces of data. As a result, programs can “understand” the data they manipulate. For example, a web browser might view a street address in a simple web page as a string of characters without any real meaning. In an XML document, however, this data can be clearly identified (i.e., marked up) as an address. A program that uses the document can recognize this data as an address and provide links to a map of that location, driving directions from that location or other location-specific information. Likewise, an application can recognize names of people, dates, ISBN numbers and any other type of XML-encoded data. The application can then present users with other related information, providing a richer, more meaningful user experience.

Viewing and Modifying XML Documents
XML documents are highly portable. Viewing or modifying an XML document—which is a text file that usually ends with the .xmlfilename extension—does not require special software, although many software tools exist, and new ones are frequently released that make it more convenient to develop XML-based applications. Any text editor that sup-ports ASCII/Unicode characters can open XML documents for viewing and editing. Also, most web browsers can display XML documents in a formatted manner that shows the
514	Chapter15 XML


XML’s structure (as we show in Section 15.3). An important characteristic of XML is that it’s both human and machine readable.

Processing XML Documents
Processing an XML document requires software called an XML parser (or XML proces-sor). A parser makes the document’s data available to applications. While reading an XML document’s contents, a parser checks that the document follows the syntax rules specified by the W3C’s XML Recommendation (www.w3.org/XML). XML syntax requires a single root element, a start tag and end tag for each element, and properly nested tags (i.e., the endtagforanestedelementmustappearbeforetheendtagoftheenclosingelement).Fur-thermore, XML is case sensitive, so the proper capitalization must be used in elements. A document that conforms to this syntax is a well-formed XML document and is syntacti-cally correct. We present fundamental XML syntax in Section 15.3. If an XML parser can process an XML document successfully, that XML document is well-formed. Parsers can provide access to XML-encoded data in well-formed documents only. XML parsers are of-ten built into browsers and other software.

Validating XML Documents
An XML document can reference a Document Type Definition (DTD) or a schema that defines the document’s proper structure. When an XML document references a DTD or aschema,someparsers(called validating parsers) canreadit andcheckthattheXML doc-ument follows the structure it defines. If the XML document conforms to the DTD/sche-ma (i.e., has the appropriate structure), the document is valid. For example, if in Fig. 15.1 we were referencing a DTD that specified that a playerelement must have firstName, lastNameand battingAverageelements, then omitting the lastNameelement (line 7 in Fig. 15.1) would invalidate the XML document player.xml. However, it would still be well-formed, because it follows proper XML syntax (i.e., it has one root element, each el-ement has a start tag and an end tag, and the elements are nested properly). By definition, a valid XML document is well-formed. Parsers that cannot check for document conformi-ty against DTDs/schemas are non-validating parsers—they determine only whether an XML document is well-formed, not whether it’s valid.
We discuss validation, DTDs and schemas, as well as the key differences between these two types of structural specifications, in Sections 15.5–15.6. For now, note that schemas are XML documents themselves, whereas DTDs are not. As you’ll learn in Section 15.6, this difference presents several advantages in using schemas over DTDs.

Software Engineering Observation 15.1
DTDs and schemas are essential for business-to-business (B2B) transactions and mission-critical  systems.  Validating  XML  documents  ensures  that  disparate  systems  can manipulate data structured in standardized ways and prevents errors caused by missing or malformed data.


Formatting and Manipulating XML Documents
Most XML documents contain only data, so applications that process XML documents must decide how to manipulate or display the data. For example, a PDA (personal digital assistant) may render an XML document differently than a wireless phone or a desktop
15.3 StructuringData   515


computer. You can use Extensible Stylesheet Language (XSL) to specify rendering in-structions for different platforms. We discuss XSL in Section 15.8.
XML-processingprogramscanalsosearch,sortandmanipulateXMLdatausingXSL. Some other XML-related technologies are XPath (XML Path Language—a language for accessing parts of an XML document), XSL-FO (XSL Formatting Objects—an XML vocabulary used to describe document formatting) and XSLT (XSL Transformations—a languagefortransformingXMLdocumentsintootherdocuments).WepresentXSLTand XPath in Section 15.8.


15.3 Structuring Data
In thissection andthroughout this chapter, wecreateourown XML markup. XML allows you to describe data precisely in a well-structured format.

XML Markup for an Article
In Fig. 15.2, we present an XML document that marks up a simple article using XML. The line numbers shown are for reference only and are not part of the XML document.

1  <?xml version = "1.0"?> 2
3  <!-- Fig. 15.2: article.xml -->
4  <!-- Article structured with XML --> 5  <article>
6	<title>Simple XML</title> 7	<date>July 4, 2007</date> 8	<author>
9	<firstName>John</firstName> 10	<lastName>Doe</lastName> 11     </author>
12	<summary>XML is pretty easy.</summary>
13	<content>This chapter presents examples that use XML.</content>
14  </article>

Fig. 15.2  | XMLusedtomarkupanarticle.

XML Declaration
This document begins with an XML declaration (line 1), which identifies the document as an XML document. The versionattribute specifies the XML version to whichthe doc-ument conforms. The current XML standard is version 1.0.Though the W3C released a version 1.1 specification in February 2004, this newer version is not yet widely supported. The W3C may continue to release new versions as XML evolves to meet the requirements of different fields.

Portability Tip 15.1
Documents should include the XML declaration to identify the version of XML used. A document that lacks an XML declaration might be assumed to conform to the latest ver-sion of XML—when it does not, errors could result.
516	Chapter15 XML


Blank Space and Comments
As in most markup languages, blank lines (line 2), white spaces and indentation help im-prove readability. Blank lines are normally ignored by XML parsers. XML comments (lines 3–4), which begin with <!--and end with -->, can be placed almost anywhere in an XML document and can span multiple lines. There must be one end marker (-->) for each begin marker (<!--).

Common Programming Error 15.1
Placing any characters, including white space, before the XML declaration is an error.


Common Programming Error 15.2
In an XML document, each start tag must have a matching end tag; omitting either tag is an error. Soon, you’ll learn how such errors are detected.

Common Programming Error 15.3
XML is case sensitive. Using different cases for the start-tag and end-tag names for the same element is a syntax error.

Root Node and XML Prolog
In Fig. 15.2, article(lines 5–14) is the root element. The lines that precede the root el-ement (lines 1–4) are the XML prolog. In an XML prolog, the XML declaration must ap-pear before the comments and any other markup.

XML Element Names
The elements we use in the example do not come from any specific markup language. In-stead, we chose the element names and markup structure that best describe our particular data. You can invent elements to mark up your data. For example, element title(line 6) contains text that describes the article’s title (e.g., SimpleXML). Similarly, date(line 7), author(lines 8–11), firstName(line 9), lastName(line 10), summary(line 12) and con-tent(line 13) contain text that describes the date, author, the author’s first name, the au-thor’s last name, a summary and the content of the document, respectively. XML element names can be of any length and may contain letters, digits, underscores, hyphens and pe-riods. However, they must begin with either a letter or an underscore, and they should not begin with “xml” in any combination of uppercase and lowercase letters (e.g., XML, Xml, xMl), as this is reserved for use in the XML standards.

Common Programming Error 15.4
Using a white-space character in an XML element name is an error.


Good Programming Practice 15.1
XML element names should be meaningful to humans and should not use abbreviations.


Nesting XML Elements
XML elements are nested to form hierarchies—with the root element at the top of the hi-erarchy. This allows document authors to create parent/child relationships between data
15.3 StructuringData   517


items. For example, elements title, date, author, summaryand contentare children of article. Elements firstNameand lastNameare children of author. We discuss the hier-archy of Fig. 15.2 later in this chapter (Fig. 15.23).

Common Programming Error 15.5
NestingXML tagsimproperlyis a syntax error.For example,<x><y>hello</x></y>is an error, because the </y>tag must precede the </x>tag.

Any element that contains otherelements (e.g., articleorauthor) is a container ele-ment. Container elements also are called parent elements. Elements nested inside a con-tainer element are child elements (or children) of that container element. If those child elements are at the same nesting level, they’re siblings of one another.

Viewing an XML Document in a Web Browser
TheXMLdocumentinFig. 15.2issimplyatextfilenamedarticle.xml.Itdoesnotcon-tain formatting information for the article. This is because XML is a technology for de-scribing the structure of data. The formatting and displaying of data from an XML document are application-specific issues. For example, when the user loads article.xml in a web browser, the browser parses and displays the document’s data. Each browser has abuilt-instyle sheettoformatthedata. Theresultingformatofthedata(Fig. 15.3)issim-ilar to the format of the listing in Fig. 15.2. In Section 15.8, we show how you can create your own style sheets to transform XML data into formats suitable for display.
The down arrow (   ) and right arrow (   ) in the screen shots of Fig. 15.3 are not part of the XML document. Google Chrome places them next to every container element. A down arrow indicates that the browser is displaying the container element’s child ele-ments. Clicking the down arrow next to an element collapses that element (i.e., causes the browser to hide the container element’s children and replace the down arrow with a right arrow). Conversely, clicking the right arrow next to an element expands that element (i.e.,


a)article.xmlwithallelementsexpanded






Downarrow



Expanded author element




Fig. 15.3  | article.xmldisplayedintheGoogleChromebrowser.(Part1of2.)
518	Chapter15 XML


b)article.xmlwiththeauthorelementcollapsed







Rightarrow

Collapsed author element

Fig. 15.3  | article.xmldisplayedintheGoogleChromebrowser.(Part2of2.)

causes the browser to display the container element’s children and replace the right arrow with a down arrow). This behavior is similar to viewing the directory structure in a file-manager window (like Windows Explorer on Windows or Finder on Mac OS X) or another similar directory viewer. In fact, a directory structure often is modeled as a series of tree structures, in which the root of a tree represents a disk drive (e.g., C:), and nodes in the tree represent directories. Parsers often store XML data as tree structures to facilitate efficient manipulation, as discussed in Section 15.9. [Note: Some browsers display minus and plus signs, rather than down and right arrows.]

XML Markup for a Business Letter
Now that you’ve seen a simple XML document, let’s examine a more complex one that marks up a business letter (Fig. 15.4). Again, we begin the document with the XML dec-laration (line 1) that states the XML version to which the document conforms.

1  <?xml version = "1.0"?> 2
3  <!-- Fig. 15.4: letter.xml -->
4  <!-- Business letter marked up with XML --> 5  <!DOCTYPE letter SYSTEM "letter.dtd">
6
7  <letter>
8	<contact type = "sender"> 9         <name>Jane Doe</name>
10	<address1>Box 12345</address1> 11	<address2>15 Any Ave.</address2> 12	<city>Othertown</city>
13	<state>Otherstate</state> 14	<zip>67890</zip>
15	<phone>555-4321</phone> 16	<flag gender = "F" />
17	</contact>

Fig. 15.4  | BusinesslettermarkedupwithXML.(Part1of2.)
15.3 StructuringData   519


18
19	<contact type = "receiver"> 20         <name>John Doe</name>
21	<address1>123 Main St.</address1> 22	<address2></address2>
23	<city>Anytown</city>
24	<state>Anystate</state> 25	<zip>12345</zip>
26	<phone>555-1234</phone> 27	<flag gender = "M" /> 28     </contact>
29
30	<salutation>Dear Sir:</salutation> 31
32	<paragraph>It is our privilege to inform you about our new database 33         managed with XML. This new system allows you to reduce the
34	load on your inventory list server by having the client machine 35	perform the work of sorting and filtering the data.
36	</paragraph> 37
38	<paragraph>Please visit our website for availability and pricing. 39	</paragraph>
40
41	<closing>Sincerely,</closing>
42	<signature>Ms. Jane Doe</signature>
43  </letter>

Fig. 15.4  | BusinesslettermarkedupwithXML.(Part2of2.)


Line 5 specifies that this XML document references a DTD. Recall from Section 15.2 that DTDs define the structure of the data for an XML document. For example, a DTD specifies the elements and parent/child relationships between elements permitted in an XML document.

Error-Prevention Tip 15.1
An XML document is not required to reference a DTD, but validating XML parsers can use a DTD to ensure that the document has the proper structure.

Portability Tip 15.2
Validating an XML document helps guarantee that independent developers will exchange data in a standardized form that conforms to the DTD.


DOCTYPE
The DOCTYPEreference (line 5) contains three items: the name of the root element that the DTD specifies (letter); the keyword SYSTEM(which denotes an external DTD—a DTD declared in a separate file, as opposed to a DTD declared locally in the same file); and the DTD’s name and location (i.e., letter.dtdin the current directory; this could also be a fully qualified URL). DTD document filenames typically end with the .dtdextension. We discuss DTDs and letter.dtdin detail in Section 15.5.
520	Chapter15 XML


Validating an XML Document Against a DTD
Many online tools can validate your XML documents against DTDs (Section 15.5) or schemas (Section 15.6). The validator at

http://www.xmlvalidation.com/
can validate XML documents against either DTDs or schemas. To use it, you can either paste your XML document’s code into a text area on the page or upload the file. If the XML document references a DTD, the site asks you to paste in the DTD or upload the DTD file. You can also select a checkbox for validating against a schema instead. You can then click a button to validate your XML document.


The XML Document’s Contents
Root element letter(lines 7–43 of Fig. 15.4) contains the child elements contact, con-tact, salutation, paragraph, paragraph, closingand signature. Data can be placed between an element’s tags or as attributes—name/value pairs that appear within the angle brackets of an element’s start tag. Elements can have any number of attributes (separated byspaces)intheirstarttags.Thefirstcontactelement(lines8–17)hasanattributenamed typewith attribute value "sender", which indicates that this contactelement identifies the letter’s sender. The second contactelement (lines 19–28) has attribute typewith val-ue "receiver", which indicates that this contactelement identifies the recipient of the letter. Like element names, attribute names are case sensitive, can be any length, may con-tain letters, digits, underscores, hyphens and periods, and must begin with either a letter or an underscore character. A contactelement stores various items of information about a contact, such as the contact’s name (represented by element name), address (represented by elements address1, address2, city, stateand zip), phone number (represented by element phone) and gender (represented by attribute genderof element flag). Element salutation(line 30) marks up the letter’s salutation. Lines 32–39 mark up the letter’s body using two paragraphelements. Elements closing(line 41) and signature(line 42) mark up the closing sentence and the author’s “signature,” respectively.

Common Programming Error 15.6
Failure to enclose attribute values in double ("") or single ('') quotes is a syntax error.

Line 16 introduces the empty element flag. An empty element is one that does not have any content. Instead, it sometimes places data in attributes. Empty element flaghas one attribute that indicates the gender of the contact (represented by the parent contact element). Document authors can close an empty element either by placing a slash imme-diately preceding the right angle bracket, as shown in line 16, or by explicitly writing an end tag, as in line 22:

<address2></address2>
The address2element in line 22 is empty because there’s no second part to this contact’s address. However, we must include this element to conform to the structural rules specified in the XML document’s DTD—letter.dtd (which we present in Section 15.5). This DTD specifies that each contactelement must have an address2child element (even if it’s empty). In Section 15.5, you’ll learn how DTDs indicate required and optional elements.
15.4 XMLNamespaces   521

15.4 XML Namespaces
XML allows document authors to create custom elements. This extensibility can result in naming collisions among elements in an XML document that have the same name. For example, we may use the element bookto mark up data about a Deitel publication. A stamp collector may use the element bookto mark up data about a book of stamps. Using both of these elements in the same document could create a naming collision, making it difficult to determine which kind of data each element contains.
An XML namespace is a collection of element and attribute names. XML namespaces provide a means for document authors to unambiguously refer to elements with the same name (i.e., prevent collisions). For example,

<subject>Geometry</subject>
and

<subject>Cardiology</subject>
useelementsubjecttomarkupdata. Inthefirstcase,thesubjectis somethingonestudies in school, whereas in the second case, the subject is a field of medicine. Namespaces can differentiate these two subjectelements—for example:

<highschool:subject>Geometry</highschool:subject>
and

<medicalschool:subject>Cardiology</medicalschool:subject>
Both highschooland medicalschoolare namespace prefixes. A document author places a namespace prefix and colon (:) before an element name to specify the namespace to which that element belongs. Document authors can create their own namespace prefixes using virtually any name except the reserved namespace prefix xml. In the subsections that follow, we demonstrate how document authors ensure that namespaces are unique.

Common Programming Error 15.7
Attempting to create a namespace prefix named xmlin any mixture of uppercase and low-ercase letters is a syntax error—the xmlnamespace prefix is reserved for internal use by XML itself.

Differentiating Elements with Namespaces
Figure 15.5 demonstrates namespaces. In this document, namespaces differentiate two distinct elements—the fileelement related to a text file and the filedocument related to an image file.

1  <?xml version = "1.0"?> 2
3  <!-- Fig. 15.5: namespace.xml --> 4  <!-- Demonstrating namespaces --> 5  <text:directory
6	xmlns:text = "urn:deitel:textInfo"
7	xmlns:image = "urn:deitel:imageInfo">

Fig. 15.5  | XMLnamespacesdemonstration.(Part1of2.)
522	Chapter15 XML


8
9	<text:file filename = "book.xml">
10	<text:description>A book list</text:description> 11     </text:file>
12
13	<image:file filename = "funny.jpg">
14	<image:description>A funny picture</image:description> 15	<image:size width = "200" height = "100" />
16	</image:file>
17  </text:directory>

Fig. 15.5  | XMLnamespacesdemonstration.(Part2of2.)

The xmlnsAttribute
Lines 6–7 use the XML-namespace reserved attribute xmlnsto create two namespace pre-fixes—textand image. Each namespace prefix is bound to a series of characters called a Uniform Resource Identifier (URI) that uniquely identifies the namespace. Document authors create their own namespace prefixes and URIs. A URI is a way to identifying a resource, typically on the Internet. Two popular types of URI are Uniform Resource Name (URN) and Uniform Resource Locator (URL).

Unique URIs
To ensure that namespaces are unique, document authors must provide unique URIs. In this example, we use urn:deitel:textInfoand urn:deitel:imageInfoas URIs. These URIs employ the URN scheme that is often used to identify namespaces. Under this nam-ing scheme, a URI begins with "urn:", followed by a unique series of additional names separated by colons.
Another common practice is to use URLs, which specify the location of a file or a resource on the Internet. For example, www.deitel.comis the URL that identifies the home  page  of  the  Deitel  &  Associates  website.  Using  URLs  guarantees  that  the namespaces are unique because the domain names (e.g., www.deitel.com) are guaranteed to be unique. For example, lines 5–7 could be rewritten as

<text:directory
xmlns:text = "http://www.deitel.com/xmlns-text" xmlns:image = "http://www.deitel.com/xmlns-image">
where URLs related tothe deitel.comdomain name serve as URIs to identify the textand imagenamespaces. Theparserdoes not visit these URLs, nordo these URLsneedtorefer to actual web pages. They each simply represent a unique series of characters used to differen-tiate URI names. In fact, any string can represent a namespace. For example, our image namespace URI could be hgjfkdlsa4556, in which case our prefix assignment would be

xmlns:image = "hgjfkdlsa4556"

Namespace Prefix
Lines 9–11 use the textnamespace prefix for elements fileand description. The end tags must also specify the namespace prefix text. Lines 13–16 apply namespace prefix imageto the elements file, descriptionand size. Attributes do not require namespace prefixes (although they can have them), because each attribute is already part of an element
15.5 DocumentTypeDefinitions(DTDs)   523


that specifies the namespace prefix. For example, attribute filename(line 9) is implicitly part of namespace textbecause its element (i.e., file) specifies the textnamespace prefix.

Specifying a Default Namespace Toeliminatetheneedtoplacenamespaceprefixesineachelement,documentauthorsmay specify a default namespace for an element and its children. Figure 15.6 demonstrates us-ing a default namespace (urn:deitel:textInfo) for element directory.

1  <?xml version = "1.0"?> 2
3  <!-- Fig. 15.6: defaultnamespace.xml --> 4  <!-- Using default namespaces -->
5  <directory xmlns = "urn:deitel:textInfo" 6	xmlns:image = "urn:deitel:imageInfo"> 7
8	<file filename = "book.xml">
9	<description>A book list</description> 10     </file>
11
12	<image:file filename = "funny.jpg">
13	<image:description>A funny picture</image:description> 14	<image:size width = "200" height = "100" />
15	</image:file>
16  </directory>

Fig. 15.6  | Defaultnamespacedemonstration.

Line 5 defines a default namespace using attribute xmlnswith no prefix specified but withaURIasitsvalue.Oncewedefinethis,childelementsbelongingtothenamespaceneed not be qualified by a namespace prefix. Thus, element file(lines 8–10) is in the default namespace urn:deitel:textInfo. Compare this to lines 9–10 of Fig. 15.5, where we had to prefix the fileand descriptionelement names with the namespace prefix text.
The default namespace applies to the directoryelement and all elements that are not qualified with a namespace prefix. However, we can use a namespace prefix to specify a different namespace for a particular element. For example, the fileelement in lines 12– 15 ofFig. 15.16includesthe imagenamespaceprefix,indicatingthat thiselementisin the urn:deitel:imageInfonamespace, not the default namespace.

Namespaces in XML Vocabularies
XML-based languages, such as XML Schema (Section 15.6) and Extensible Stylesheet Lan-guage (XSL) (Section 15.8), often use namespaces to identify their elements. Each vocabu-lary defines special-purpose elements that are grouped in namespaces. These namespaces help prevent naming collisions between predefined elements and user-defined elements.


15.5 Document Type Definitions (DTDs)
DocumentTypeDefinitions(DTDs)areoneoftwomain typesof documentsyoucan use to specify XML document structure. Section 15.6 presents W3C XML Schema docu-ments, which provide an improved method of specifying XML document structure.
524	Chapter15 XML


Software Engineering Observation 15.2
XML documents can have many different structures, and for this reason an application cannot be certain whether a particular document it receives is complete, ordered properly, and not missing data. DTDs and schemas (Section 15.6) solve this problem by providing an extensible way to describe XML document structure. Applications should use DTDs or schemas to confirm whether XML documents are valid.

Software Engineering Observation 15.3
Many organizations and individuals are creating DTDs and schemas for a broad range of applications. These collections—called repositories—are available free for download from the web (e.g., www.xml.org, www.oasis-open.org).

Creating a Document Type Definition
Figure 15.4 presented a simple business letter marked up with XML. Recall that line 5 of letter.xmlreferencesa DTD—letter.dtd(Fig. 15.7). This DTD specifies thebusiness letter’s element types and attributes and their relationships to one another.

1  <!-- Fig. 15.7: letter.dtd	--> 2  <!-- DTD document for letter.xml --> 3
4  <!ELEMENT letter ( contact+, salutation, paragraph+, 5	closing, signature )>
6
7  <!ELEMENT contact ( name, address1, address2, city, state, 8	zip, phone, flag )>
9  <!ATTLIST contact type CDATA #IMPLIED> 10
11  <!ELEMENT name ( #PCDATA )>
12  <!ELEMENT address1 ( #PCDATA )> 13  <!ELEMENT address2 ( #PCDATA )> 14  <!ELEMENT city ( #PCDATA )>
15  <!ELEMENT state ( #PCDATA )> 16  <!ELEMENT zip ( #PCDATA )> 17  <!ELEMENT phone ( #PCDATA )> 18  <!ELEMENT flag EMPTY>
19  <!ATTLIST flag gender (M | F) "M"> 20
21  <!ELEMENT salutation ( #PCDATA )> 22  <!ELEMENT closing ( #PCDATA )>
23  <!ELEMENT paragraph ( #PCDATA )>
24  <!ELEMENT signature ( #PCDATA )>

Fig. 15.7  | DocumentTypeDefinition(DTD)forabusinessletter.

A DTD describes the structure of an XML document and enables an XML parser to verify whether an XML document is valid (i.e., whether its elements contain the proper attributesandappearinthepropersequence).DTDsallowuserstocheckdocumentstruc-ture and to exchange data in a standardized format. A DTD expresses the set of rules for document structure using an EBNF (Extended Backus-Naur Form) grammar. DTDs are not themselves XML documents. [Note: EBNF grammars are commonly used to define
15.5 DocumentTypeDefinitions(DTDs)   525


programminglanguages. To learn moreabout EBNFgrammars, visit en.wikipedia.org/ wiki/EBNFor www.garshol.priv.no/download/text/bnf.html.]

Common Programming Error 15.8
For documentsvalidatedwith DTDs, any document thatuseselements,attributesor nest-ing relationships not explicitly defined by a DTD is an invalid document.

Defining Elements in a DTD
The ELEMENTelement type declaration in lines 4–5 defines the rules for element letter. Inthiscase,lettercontainsoneormorecontactelements,onesalutationelement,one or more paragraphelements, one closingelement and one signatureelement, in that sequence. The plus sign (+) occurrence indicator specifies that the DTD requires one or more occurrences of an element. Other occurrence indicators include the asterisk (*), which indicates an optional element that can occur zero or more times, and the question mark (?), which indicates an optional element that can occur at most once (i.e., zero or one occurrence). If an element does not have an occurrence indicator, the DTD requires exactly one occurrence.
The contactelement type declaration (lines 7–8) specifies that a contactelement contains child elements name, address1, address2, city, state, zip, phoneand flag— in that order. The DTD requires exactly one occurrence of each of these elements.

Defining Attributes in a DTD
Line 9 uses the ATTLISTattribute-list declaration to define an attribute named typefor the contactelement. Keyword #IMPLIEDspecifies that if the parser finds a contactele-ment without a typeattribute, the parser can choose an arbitrary value for the attribute or can ignore the attribute. Either way the document will still be valid (if the rest of the doc-ument is valid)—a missing typeattribute will not invalidate the document. Other key-words that can be used in place of #IMPLIEDin an ATTLISTdeclaration include #REQUIRED and #FIXED. Keyword #REQUIREDspecifies that the attribute must be present in the ele-ment, and keyword #FIXEDspecifies that the attribute (if present) must have the given fixed value. For example,

<!ATTLIST address zip CDATA #FIXED "01757">
indicates that attribute zip(if present in element address) must have the value 01757for the document to be valid. If the attribute is not present, then the parser, by default, uses the fixed value that the ATTLISTdeclaration specifies.

Character Data vs. Parsed Character Data
Keyword CDATA(line 9) specifies that attribute typecontains character data (i.e., a string). A parser will pass such data to an application without modification.

Software Engineering Observation 15.4
DTD syntax cannot describe an element’s or attribute’s data type. For example, a DTD cannot specify that a particular element or attribute can contain only integer data.

Keyword #PCDATA(line 11) specifies that an element (e.g., name) may contain parsed character data (i.e., data that’s processed by an XML parser). Elements with parsed char-
526	Chapter15 XML


acter data cannot contain markup characters, such as less than (<), greater than (>) or ampersand (&). The document author should replace any markup character in a #PCDATA element with the character’s corresponding character entity reference. For example, the character entity reference &lt;should be used in place of the less-than symbol (<), and the character entity reference &gt;should be used in place of the greater-than symbol (>). A document author who wishes to use a literal ampersand should use the entity reference &amp;instead—parsed character data can contain ampersands (&) only for inserting enti-ties. See Appendix A, HTML Special Characters, for a list of other character entity refer-ences.

Common Programming Error 15.9
Using markup characters (e.g., <, >and &) in parsed character data is an error. Use char-acter entity references (e.g., &lt;, &gt;and &amp;) instead.

Defining Empty Elements in a DTD
Line 18 defines an empty element named flag. Keyword EMPTYspecifies that the element does not contain any data between its start and end tags. Empty elements commonly de-scribedataviaattributes.For example,flag’sdataappearsinitsgenderattribute(line19). Line 19 specifies that the genderattribute’s value must be one of the enumerated values (MorF)enclosedinparenthesesanddelimitedbyaverticalbar(|) meaning “or.”Notethat line 19 also indicates that genderhas a default value of M.

Well-Formed Documents vs. Valid Documents
In Section 15.3, we demonstrated how to use the Microsoft XML Validator to validate an XML document against its specified DTD. The validation revealed that the XML docu-ment letter.xml (Fig. 15.4) is well-formed and valid—it conforms to letter.dtd (Fig. 15.7). Recall that a well-formed document is syntactically correct (i.e., each start tag has a corresponding end tag, the document contains only one root element, etc.), and a valid document contains the proper elements with the proper attributes in the proper se-quence. An XML document cannot be valid unless it’s well-formed.
When a document fails to conform to a DTD or a schema, an XML validator displays an error message. For example, the DTD in Fig. 15.7 indicates that a contactelement must contain the child element name. A document that omits this child element is still well-formed but is not valid. Figure 15.8 shows the error message displayed by the vali-dator at www.xmlvalidation.comfor a version of the letter.xmlfile that’s missing the first contactelement’s nameelement.


15.6 W3C XML Schema Documents
In this section, we introduceschemas forspecifying XML document structure and validat-ing XML documents. Many developers in the XML community believe that DTDs are not flexible enough to meet today’s programming needs. For example, DTDs lack a way of indicating what specific type of data (e.g., numeric, text) an element can contain, and DTDs are not themselves XML documents, forcing developers to learn multiple gram-mars and developers to create multiple types of parsers. These and other limitations have led to the development of schemas.
15.6 W3CXMLSchemaDocuments   527

























Fig. 15.8  | Errormessagewhenvalidatingletter.xmlwithamissingcontactname.

Unlike DTDs, schemas do not use EBNF grammar. Instead, they use XML syntax and are actually XML documents that programs can manipulate. Like DTDs, schemas are used by validating parsers to validate documents.
In this section, we focus on the W3C’s XML Schema vocabulary (note the capital “S” in “Schema”). To refer to it, we use the term XML Schema in the rest of the chapter. For the latest information on XML Schema, visit www.w3.org/XML/Schema. For tutorials on XML Schema concepts beyond what we present here, visit www.w3schools.com/schema/ default.asp.
Recall that a DTD describes an XML document’s structure, not the content of its ele-ments. For example,

<quantity>5</quantity>
contains character data. If the document that contains element quantity references a DTD, an XML parser can validate the document to confirm that this element indeed does contain PCDATAcontent. However, the parser cannot validate that the content is numeric; DTDs do not provide this capability. So, unfortunately, the parser also considers

<quantity>hello</quantity>
to be valid. An application that uses the XML document containing this markup should test that the data in element quantityis numeric and take appropriate action if it’s not.
XML Schema enables schema authors to specify that element quantity’s data must be numeric or, even more specifically, an integer. A parser validating the XML document
528	Chapter15 XML


against this schema can determine that 5conforms and hellodoes not. An XML docu-mentthatconformstoaschemadocumentisschemavalid,andonethatdoesnotconform is schema invalid. Schemas are XML documents and therefore must themselves be valid.

Validating Against an XML Schema Document
Figure 15.9 shows a schema-valid XML document named book.xml, and Fig. 15.10 shows the pertinent XML Schema document (book.xsd) that defines the structure for book.xml. By convention, schemas use the .xsdextension. We used an online XSD sche-ma validator provided at

www.xmlforasp.net/SchemaValidator.aspx
to ensure that the XML document in Fig. 15.9 conforms to the schema in Fig. 15.10. To validate the schema document itself (i.e., book.xsd) and produce the output shown in Fig. 15.10, we used an online XSV (XML Schema Validator) provided by the W3C at

www.w3.org/2001/03/webdata/xsv
These tools are free and enforce the W3C’s specifications regarding XML Schemas and schema validation.


1  <?xml version = "1.0"?> 2
3  <!-- Fig. 15.9: book.xml -->
4  <!-- Book list marked up as XML -->
5  <deitel:books xmlns:deitel = "http://www.deitel.com/booklist"> 6	<book>
7	<title>Visual Basic 2010 How to Program</title> 8     </book>
9	<book>
10	<title>Visual C# 2010 How to Program, 4/e</title> 11     </book>
12	<book>
13	<title>Java How to Program, 9/e</title> 14     </book>
15	<book>
16	<title>C++ How to Program, 8/e</title> 17     </book>
18	<book>
19	<title>Internet and World Wide Web How to Program, 5/e</title> 20     </book>
21  </deitel:books>

Fig. 15.9  | Schema-validXMLdocumentdescribingalistofbooks.


1  <?xml version = "1.0"?> 2
3  <!-- Fig. 15.10: book.xsd	-->
4  <!-- Simple W3C XML Schema document -->

Fig. 15.10 | XMLSchemadocumentforbook.xml.(Part1of2.)
15.6 W3CXMLSchemaDocuments   529


5  <schema xmlns = "http://www.w3.org/2001/XMLSchema" 6     xmlns:deitel = "http://www.deitel.com/booklist"
7	targetNamespace = "http://www.deitel.com/booklist"> 8
9	<element name = "books" type = "deitel:BooksType"/> 10
11	<complexType name = "BooksType"> 12         <sequence>
13	<element name = "book" type = "deitel:SingleBookType" 14               minOccurs = "1" maxOccurs = "unbounded"/>
15	</sequence> 16     </complexType> 17
18	<complexType name = "SingleBookType"> 19         <sequence>
20	<element name = "title" type = "string"/> 21         </sequence>
22	</complexType
23  </schema>













Fig. 15.10 | XMLSchemadocumentforbook.xml.(Part2of2.)

Figure 15.9 contains markup describing several Deitel books. The books element (line 5) has the namespace prefix deitel, indicating that the bookselement is a part of the http://www.deitel.com/booklistnamespace.

Creating an XML Schema Document
Figure 15.10presentstheXML Schema documentthatspecifiesthestructure ofbook.xml (Fig. 15.9).ThisdocumentdefinesanXML-basedlanguage(i.e., avocabulary)forwriting XML documents about collections of books. The schema defines the elements, attributes and parent/child relationships that such a document can (or must) include. The schema also specifies the type of data that these elements and attributes may contain.
Root element schema(Fig. 15.10, lines 5–23) contains elements that define the struc-ture of an XML document such as book.xml. Line 5 specifies as the default namespace the standard W3C XML Schema namespace URI—http://www.w3.org/2001/XMLSchema. This namespace contains predefined elements (e.g., root-element schema) that comprise the XML Schema vocabulary—the language used to write an XML Schema document.
530	Chapter15 XML


Portability Tip 15.3
W3CXML SchemaauthorsspecifyURIhttp://www.w3.org/2001/XMLSchemawhen re-ferringto the XMLSchema namespace. Thisnamespacecontainspredefined elementsthat comprise the XML Schema vocabulary. Specifying this URI ensures that validation tools correctly identify XML Schema elements and do not confuse them with those defined by document authors.

Line  6  binds  the  URI  http://www.deitel.com/booklist to  namespace  prefix deitel.Aswediscussmomentarily, theschema uses this namespacetodifferentiatenames created by us from names that are part of the XML Schema namespace. Line 7 also spec-ifies http://www.deitel.com/booklist as the targetNamespace of the schema. This attribute identifies the namespace of the XML vocabulary that this schema defines. Note that the targetNamespaceof book.xsdis the same as the namespace referenced in line 5 ofbook.xml(Fig. 15.9).Thisiswhat“connects”theXMLdocumentwiththeschemathat defines its structure. When a schema validator examines book.xmland book.xsd, it will recognize that book.xmluses elements and attributes from the http://www.deitel.com/ booklist namespace.  The  validator  also  will  recognize  that  this  namespace  is  the namespace defined in book.xsd(i.e., the schema’s targetNamespace). Thus the validator knows where to look for the structural rules for the elements and attributes used in book.xml.

Defining an Element in XML Schema
In XML Schema, the elementtag(line 9of Fig. 15.10) defines an element tobe included in an XML document that conforms to the schema. In other words, elementspecifies the ac-tual elements that can be used to mark up data. Line 9 defines the bookselement, which we use as the root element in book.xml(Fig. 15.9). Attributes nameand typespecify the ele-ment’s name and type, respectively. An element’s type indicates the data that the element may contain. Possible types include XML Schema-defined types (e.g., string, double) and user-defined  types  (e.g.,  BooksType,  which  is  defined  in  lines  11–16  of  Fig. 15.10). Figure 15.11 lists several of XML Schema’s many built-in types. For a complete list of built-in types, see Section 3 of the specification found at www.w3.org/TR/xmlschema-2.


Type

string
boolean
decimal


float

Description

A character string True or false
A decimal numeral

A floating-point number

Rangeorstructure


true, false
i*(10n), where iis an integer and nis an integer that’s less than or equal to zero.
m*(2e), where mis an integer whose absolute value is less than 224and eis an integer in the range -149to 104. Plus three additional numbers:positiveinfinity,negative infinity and not-a-number (NaN).

Examples

"hello"
true
5, -12, -45.78


0, 12, -109.375,
NaN


Fig. 15.11  | SomeXMLSchematypes.(Part1of2.)
15.6 W3CXMLSchemaDocuments   531



Type	Description

double	A floating-point number





long	A whole number

int	A whole number

short	A whole number
date	A date consisting of a year, month and day

time	A time consisting of hours, minutes and seconds

Rangeorstructure

m*(2e), where mis an integer whose absolute value is less than 253and eis an integer in the range -1075to 970. Plus three additional numbers: positive infinity, nega-tive infinity and not-a-number (NaN).
-9223372036854775808to 9223372036854775807, inclusive.
-2147483648to 2147483647, inclu-sive.
-32768to 32767, inclusive.
yyyy-mmwith an optional ddand an optional time zone, where yyyy is four digits long and mmand dd are two digits long.
hh:mm:sswith an optional time zone, where hh, mmand ssare two digits long.

Examples

0, 12, -109.375, NaN





1234567890, -1234567890
1234567890, -1234567890
12, -345 2005-05-10



16:30:25-05:00


Fig. 15.11 | SomeXMLSchematypes.(Part2of2.)


In this example, booksis defined as an element of type deitel:BooksType(line 9). BooksTypeis a user-defined type (lines 11–16 of Fig. 15.10) in the namespace http:// www.deitel.com/booklistand therefore must have the namespace prefix deitel. It’s not an existing XML Schema type.
TwocategoriesoftypeexistinXMLSchema—simpletypesandcomplextypes.They differ only in that simple types cannot contain attributes or child elements and complex types can.
A user-defined type that contains attributes or child elements must be defined as a complex type. Lines 11–16 use element complexTypeto define BooksTypeas a complex typethat hasa childelement namedbook.Thesequenceelement (lines 12–15) allows you to specify the sequential order in which child elements must appear. The element(lines 13–14) nested within the complexTypeelement indicates that a BooksTypeelement (e.g., books) can contain child elements named bookof type deitel:SingleBookType(defined inlines18–22). Attribute minOccurs(line14), withvalue1, specifiesthatelementsof type BooksTypemust contain a minimum of one bookelement. Attribute maxOccurs(line 14), with value unbounded, specifies that elements of type BooksTypemay have any number of bookchild elements.
Lines 18–22 define the complex type SingleBookType. An element of this type con-tains a child element named title. Line 20 defines element titleto be of simple type string. Recall that elements of a simple type cannot contain attributes or child elements. The schemaend tag (</schema>, line 23) declares the end of the XML Schema document.
532	Chapter15 XML


A Closer Look at Types in XML Schema
Every element in XML Schema has a type. Types include the built-in types provided by XML Schema (Fig. 15.11) or user-defined types (e.g., SingleBookTypein Fig. 15.10).
Every simple type defines a restriction on an XML Schema-defined type or a restric-tionon a user-definedtype. Restrictions limit thepossiblevalues thatan elementcan hold. Complex types are divided into two groups—those with simple content and those with complex content. Both can contain attributes, but only complex content can contain child elements. Complex types with simple content must extend or restrict some other existing type. Complex types with complex content do not have this limitation. We dem-
onstrate complex types with each kind of content in the next example.
The schema document in Fig. 15.12 creates both simple types and complex types. The  XML  document  in  Fig. 15.13  (laptop.xml)  follows  the  structure  defined  in Fig. 15.12 to describe parts of a laptop computer. A document such as laptop.xmlthat conforms to a schema is known as an XML instance document—the document is an instance (i.e., example) of the schema.

1  <?xml version = "1.0"?>
2  <!-- Fig. 15.12: computer.xsd --> 3  <!-- W3C XML Schema document  --> 4
5  <schema xmlns = "http://www.w3.org/2001/XMLSchema"
6	xmlns:computer = "http://www.deitel.com/computer" 7	targetNamespace = "http://www.deitel.com/computer"> 8
9	<simpleType name = "gigahertz"> 10         <restriction base = "decimal">
11	<minInclusive value = "2.1"/> 12         </restriction>
13	</simpleType> 14
15	<complexType name = "CPU"> 16         <simpleContent>
17	<extension base = "string">
18	<attribute name = "model" type = "string"/> 19            </extension>
20	</simpleContent> 21     </complexType>
22
23	<complexType name = "portable"> 24         <all>
25	<element name = "processor" type = "computer:CPU"/> 26	<element name = "monitor" type = "int"/>
27	<element name = "CPUSpeed" type = "computer:gigahertz"/> 28	<element name = "RAM" type = "int"/>
29	</all>
30	<attribute name = "manufacturer" type = "string"/> 31     </complexType>
32
33	<element name = "laptop" type = "computer:portable"/>
34  </schema>

Fig. 15.12 | XMLSchemadocumentdefiningsimpleandcomplextypes.
15.6 W3CXMLSchemaDocuments   533


1  <?xml version = "1.0"?> 2
3  <!-- Fig. 15.13: laptop.xml             --> 4  <!-- Laptop components marked up as XML -->
5  <computer:laptop xmlns:computer = "http://www.deitel.com/computer" 6	manufacturer = "IBM">
7
8	<processor model = "Centrino">Intel</processor> 9	<monitor>17</monitor>
10	<CPUSpeed>2.4</CPUSpeed> 11	<RAM>256</RAM>
12  </computer:laptop>

Fig. 15.13 | XMLdocumentusingthelaptopelementdefinedincomputer.xsd.

Line 5 of Fig. 15.12 declares the default namespace to be the standard XML Schema namespace—any elements without a prefix are assumed to be in that namespace. Line 6 binds  the  namespace  prefix  computer to  the  namespace  http://www.deitel.com/ computer. Line 7 identifies this namespace as the targetNamespace—the namespace being defined by the current XML Schema document.
To design the XML elements for describing laptop computers, we first create a simple type in lines 9–13 using the simpleTypeelement. We name this simpleTypegigahertz because it will be used to describe the clock speed of the processor in gigahertz. Simple types are restrictions of a type typically called a base type. For this simpleType, line 10 declares the base type as decimal, and we restrict the value to be at least 2.1by using the minInclusiveelement in line 11.
Next, we declare a complexTypenamed CPUthat has simpleContent(lines 16–20). Remember that a complex type with simple content can have attributes but not child ele-ments. Also recall that complex types with simple content must extend or restrict some XML Schema type or user-defined type. The extensionelement with attribute base(line 17)setsthebasetypeto string.InthiscomplexType,weextendthebasetypestringwith an attribute. The attributeelement (line 18) gives the complexTypean attribute of type stringnamed model. Thus an element of type CPUmust contain stringtext (because the base type is string) and may contain a modelattribute that’s also of type string.
Last, we define type portable, which is a complexTypewith complex content (lines 23–31). Such types are allowed to have child elements and attributes. The element all (lines 24–29) encloses elements that must each be included once in the corresponding XMLinstancedocument.Theseelementscanbeincludedinanyorder.Thiscomplextype holds four elements—processor, monitor, CPUSpeedand RAM. They’re given types CPU, int, gigahertzand int, respectively. When using types CPUand gigahertz, we must include the namespace prefix computer, because these user-defined types are part of the computer namespace (http://www.deitel.com/computer)—the namespace defined in the current document (line 7). Also, portablecontains an attribute defined in line 30. The attributeelement indicates that elements of type portablecontain an attribute of type stringnamed manufacturer.
Line 33 declares the actual element that uses the three types defined in the schema. The element is called laptopand is of type portable. We must use the namespace prefix computerin front of portable.
534	Chapter15 XML


We’ve now created an element named laptop that contains child elements pro-cessor, monitor, CPUSpeedand RAM, and an attribute manufacturer. Figure 15.13 uses the laptopelement defined in the computer.xsdschema. Once again, we used an online XSD schema validator (www.xmlforasp.net/SchemaValidator.aspx) to ensure that this XML instance document adheres to the schema’s structural rules.
Line 5 declares namespace prefix computer. The laptopelement requires this prefix because it’s part of the http://www.deitel.com/computernamespace. Line 6 sets the laptop’s manufacturerattribute, and lines 8–11 use the elements defined in the schema to describe the laptop’s characteristics.
This section introduced W3C XML Schema documents for defining the structure of XML documents, and we validated XML instance documents against schemas using an online XSD schema validator. Section 15.7 discusses several XML vocabularies and dem-onstrates the MathML vocabulary.


15.7 XML Vocabularies
XML allows authors to create their own tags to describe data precisely. People and orga-nizations in various fields of study have created many different kinds of XML for structur-ing  data.  Some  of  these  markup  languages  are:  MathML  (Mathematical  Markup Language), Scalable Vector Graphics (SVG), Wireless Markup Language (WML), Ex-tensible Business Reporting Language (XBRL), Extensible User Interface Language (XUL) and Product Data Markup Language (PDML). Two other examples of XML vo-cabularies are W3C XML Schema and the Extensible Stylesheet Language (XSL), which we discuss in Section 15.6 and Section 15.8, respectively. The following subsections de-scribe MathML and other custom markup languages.

15.7.1 MathML™
Untilrecently,computerstypicallyrequiredspecializedsoftwarepackagessuchasTeXand LaTeX  for  displaying  complex  mathematical  expressions.  This  section  introduces MathML, which the W3C developed for describing mathematical notations and expres-sions. The Firefox and Opera browsers can render MathML. There are also plug-ins or ex-tensions available that enable you to render MathML in other browsers.
MathML markup describes mathematical expressions for display. MathML is divided into two types of markup—content markup and presentation markup. Content markup providestagsthatembodymathematicalconcepts.Content MathMLallowsprogrammers towritemathematicalnotationspecific todifferent areasofmathematics. For instance,the multiplication symbol has one meaning in set theory and another in linear algebra. Con-tent MathML distinguishes between different uses of the same symbol. Programmers can take content MathML markup, discern mathematical context and evaluate the marked-up mathematical operations. Presentation MathML is directed toward formatting and dis-playing mathematical notation. We focus on Presentation MathML in the MathML examples.

Simple Equation in MathML
Figure 15.14 uses MathML to mark up a simple expression. For this example, we show the expression rendered in Firefox.
15.7 XMLVocabularies   535


1  <?xml version="1.0" encoding="iso-8859-1"?>
2  <!DOCTYPE math PUBLIC "-//W3C//DTD MathML 2.0//EN" 3	"http://www.w3.org/TR/MathML2/dtd/mathml2.dtd"> 4
5  <!-- Fig. 15.14: mathml1.mml --> 6  <!-- MathML equation. -->
7  <math xmlns="http://www.w3.org/1998/Math/MathML"> 8	<mn>2</mn>
9	<mo>+</mo> 10	<mn>3</mn> 11	<mo>=</mo> 12	<mn>5</mn>
13  </math>







Fig. 15.14 | ExpressionmarkedupwithMathMLanddisplayedintheFirefoxbrowser.

By convention, MathML files end with the .mmlfilename extension. A MathML doc-ument’s root node is the mathelement, and its default namespace is http://www.w3.org/ 1998/Math/MathML(line 7). The mnelement (line 8) marks up a number. The moelement (line 9) marks up an operator (e.g., +). Using this markup, we define the expression 2 + 3 = 5, which any MathML capable browser can display.

Algebraic Equation in MathML
Let’s consider using MathML to mark up an algebraic equation containing exponents and arithmetic operators (Fig. 15.15). For this example, we again show the expression ren-dered in Firefox.

1  <?xml version="1.0" encoding="iso-8859-1"?>
2  <!DOCTYPE math PUBLIC "-//W3C//DTD MathML 2.0//EN" 3	"http://www.w3.org/TR/MathML2/dtd/mathml2.dtd"> 4
5  <!-- Fig. 15.15: mathml2.html -->
6  <!-- MathML algebraic equation. -->
7  <math xmlns="http://www.w3.org/1998/Math/MathML"> 8	<mn>3</mn>
9	<mo>&InvisibleTimes;</mo> 10	<msup>
11	<mi>x</mi> 12	<mn>2</mn> 13     </msup>
14	<mo>+</mo>

Fig. 15.15 | AlgebraicequationmarkedupwithMathMLanddisplayedintheFirefoxbrowser. (Part1of2.)
536	Chapter15 XML


15	<mn>x</mn>
16	<mo>&minus;</mo> 17	<mfrac>
18	<mn>2</mn> 19	<mi>x</mi> 20     </mfrac>
21     <mo>=</mo> 22     <mn>0</mn>
23  </math>







Fig. 15.15 | AlgebraicequationmarkedupwithMathMLanddisplayedintheFirefoxbrowser. (Part2of2.)

Line 9 uses entity reference &InvisibleTimes;to indicate a multiplication operation without explicit symbolic representation (i.e., the multiplication symbol does not appear between the 3and x). For exponentiation, lines 10–13 use the msupelement, which repre-sentsasuperscript. Thismsupelementhas twochildren—theexpressiontobesuperscripted (i.e., the base) and the superscript (i.e., the exponent). Correspondingly, the msubelement represents a subscript. To display variables such as x, line 11 uses identifier element mi.
To display a fraction, lines 17–20 use the mfracelement. Lines 18–19 specify the numerator and the denominator for the fraction. If either the numerator or the denomi-nator contains more than one element, it must appear in an mrowelement.

Calculus Expression in MathML
Figure 15.16marksupacalculusexpressionthatcontainsanintegralsymbolandasquare-root symbol.

1  <?xml version="1.0" encoding="iso-8859-1"?>
2  <!DOCTYPE math PUBLIC "-//W3C//DTD MathML 2.0//EN" 3	"http://www.w3.org/TR/MathML2/dtd/mathml2.dtd"> 4
5  <!-- Fig. 15.16 mathml3.html -->
6  <!-- Calculus example using MathML -->
7  <math xmlns="http://www.w3.org/1998/Math/MathML"> 8	<mrow>
9	<msubsup>
10	<mo>&int;</mo> 11	<mn>0</mn>
12	<mrow>
13	<mn>1</mn>

Fig. 15.16 | CalculusexpressionmarkedupwithMathMLanddisplayedintheFirefoxbrowser. (Part1of2.)
15.7 XMLVocabularies   537


14	<mo>&minus;</mo> 15	<mi>y</mi>
16	</mrow> 17         </msubsup> 18         <msqrt>
19	<mn>4</mn>
20	<mo>&InvisibleTimes;</mo> 21	<msup>
22	<mi>x</mi> 23	<mn>2</mn> 24            </msup>
25	<mo>+</mo> 26	<mi>y</mi> 27         </msqrt>
28	<mo>&delta;</mo> 29	<mi>x</mi>
30	</mrow>
31  </math>




Integral symbol

Deltasymbol

Fig. 15.16 | CalculusexpressionmarkedupwithMathMLanddisplayedintheFirefoxbrowser. (Part2of2.)

Lines 8–30 group the entire expression in an mrowelement, which is used to group ele-mentsthatarepositionedhorizontallyinanexpression.Theentityreference&int;(line10) represents the integral symbol, while the msubsupelement (lines 9–17) specifies the sub-script andsuperscript for a base expression (e.g., the integral symbol). Elementmomarks up the integral operator. The msubsupelement requires three child elements—an operator (e.g., the integral entity, line 10), the subscript expression (line 11) and the superscript expression (lines 12–16).Elementmn(line11) marksupthenumber(i.e.,0)thatrepresents the subscript. Element mrow(lines 12–16) marks up the superscript expression (i.e., 1-y).
Element msqrt(lines 18–27) represents a square-root expression. Line 28 introduces entity reference &delta;for representing a lowercase delta symbol. Delta is an operator, so line 28 places this entity in element mo. To see other operations and symbols in MathML, visit www.w3.org/Math.

15.7.2 Other Markup Languages
Literally hundreds of markup languages derive from XML. Every day developers find new uses for XML. Figure 15.18 summarizes a few of these markup languages. The website

www.service-architecture.com/xml/articles/index.html
provides a nice list of common XML vocabularies and descriptions.
538	Chapter15 XML



Markuplanguage

Chemical Markup Language (CML)




VoiceXML™





SynchronousMultimedia Integration Language (SMIL™)
Research Information Exchange Markup Language (RIXML)
Geography Markup Language (GML)

Extensible User Interface Language (XUL)

Description

Chemical Markup Language (CML) is an XML vocabulary for representing molecular and chemical information. Many previous methods for storing this type of information (e.g., special file types) inhibited document reuse. CML takes advantage of XML’s portability to enable document authors to use and reuse molecular information without corrupting important data in the process.
The VoiceXML Forum founded by AT&T, IBM, Lucent and Motorola developed VoiceXML. It provides interactive voice com-munication between humans and computers through a telephone, PDA (personal digital assistant) or desktop computer. IBM’s VoiceXML SDK can process VoiceXML documents. Visit www.voicexml.orgfor more information on VoiceXML.
SMIL is an XML vocabulary for multimedia presentations. The W3C was the primary developer of SMIL, with contributions from some companies. Visit www.w3.org/AudioVideofor more on SMIL.
RIXML, developed by a consortium of brokerage firms, marks up investment data. Visit www.rixml.orgfor more information on RIXML.
OpenGIS developed the Geography Markup Language to describe geographic information. Visit www.opengis.orgfor more information on GML.
The Mozilla Project created the Extensible User Interface Lan-guage for describing graphical user interfaces in a platform-inde-pendent way.


Fig. 15.17 | VariousmarkuplanguagesderivedfromXML.

15.8 Extensible Stylesheet Language and XSL
Transformations
Extensible Stylesheet Language (XSL) documents specify how programs are to render XML document data. XSL is a group of three technologies—XSL-FO (XSL Formatting Objects), XPath (XML Path Language) and XSLT (XSL Transformations). XSL-FO is a vocabulary for specifyingformatting, and XPath is a string-based language of expressions used by XML and many of its related technologies for effectively and efficiently locating structures and data (such as specific elements and attributes) in XML documents.
The third portion of XSL—XSL Transformations (XSLT)—is a technology for trans-forming XML documents into other documents—i.e., transforming the structure of the XML document data to another structure. XSLT provides elements that define rules for transforming one XML document to produce a different XML document. This is useful when you want to use data in multiple applications or on multiple platforms, each of which may be designed to work with documents written in a particular vocabulary. For example, XSLT allows you to convert a simple XML document to an HTML5 document that presents the XML document’s data (or a subset of the data) formatted for display in a web browser.
15.8 ExtensibleStylesheetLanguageandXSLTransformations   539


Transforming an XML document using XSLT involves two tree structures—the source tree (i.e., the XML document to transform) and the result tree (i.e., the XML doc-ument to create). XPath locates parts of the source-tree document that match templates defined in an XSL style sheet. When a match occurs, the matching template executes and adds its result to the result tree. When there are no more matches, XSLT has transformed the source tree into the result tree. The XSLT does not analyze every node of the source tree; it selectively navigates the source tree using XPath’s selectand matchattributes. For XSLT to function, the source tree must be properly structured. Schemas, DTDs and val-idating parsers can validate document structure before using XPath and XSLTs.

A Simple XSL Example
Figure 15.18 lists an XML document that describes various sports. The output shows the result of the transformation (specified in the XSLT template of Fig. 15.19). Some web browsers will perform transformations on XML files only if they are accessed from a web server. For this reason, we’ve posted the example online at

http://test.deitel.com/iw3htp5/ch15/Fig15_18-19/sports.xml Also, to save space, we do not show the contents of the example’s CSS file here.

1  <?xml version = "1.0"?>
2  <?xml-stylesheet type = "text/xsl" href = "sports.xsl"?> 3
4  <!-- Fig. 15.18: sports.xml --> 5  <!-- Sports Database -->
6
7  <sports>
8	<game id = "783">
9	<name>Cricket</name> 10
11	<paragraph>
12	More popular among commonwealth nations. 13         </paragraph>
14	</game> 15
16	<game id = "239">
17	<name>Baseball</name> 18
19	<paragraph>
20	More popular in America. 21         </paragraph>
22	</game> 23
24	<game id = "418">
25	<name>Soccer (Futbol)</name> 26
27	<paragraph>
28	Most popular sport in the world. 29         </paragraph>
30	</game>
31  </sports>

Fig. 15.18 | XMLdocumentthatdescribesvarioussports.(Part1of2.)
540	Chapter15 XML













Fig. 15.18 | XMLdocumentthatdescribesvarioussports.(Part2of2.)

To perform transformations, an XSLT processor is required. Popular XSLT proces-sors  include  Microsoft’s  MSXML  and  the  Apache  Software  Foundation’s  Xalan  2 (xml.apache.org). The XML document in Fig. 15.18 is transformed into an XHTML document when it’s loaded into the web browser.
Line 2 (Fig. 15.18) is a processing instruction (PI) that references the XSL style sheet sports.xsl(Fig. 15.19). Aprocessing instruction is embeddedin an XML documentand provides application-specific information to whichever XML processor the application uses. In this particular case, the processing instruction specifies the location of an XSLT document  with  which  to  transform  the  XML  document.  The  <? and  ?> (line  2, Fig. 15.18) delimit a processing instruction, which consists of a PI target (e.g., xml-stylesheet) and a PI value (e.g., type = "text/xsl" href = "sports.xsl"). The PI value’s typeattribute specifies that sports.xslis a text/xslfile (i.e., a text file con-taining XSL content). The hrefattribute specifies the name and location of the style sheet to apply—in this case, sports.xslin the current directory.

Software Engineering Observation 15.5
XSL enablesdocumentauthorsto separatedata presentation (specified inXSL documents) from data description (specified in XML documents).

Common Programming Error 15.10
You’ll sometimes see the XML processing instruction <?xml-stylesheet?> written as <?xml:stylesheet?>with a colon rather than a dash. The version with a colon results in an XML parsing error in Firefox.

Figure 15.19 shows the XSL document for transforming the structured data of the XML document of Fig. 15.18 into an XHTML document for presentation. By conven-tion, XSL documents have the filename extension .xsl.

1  <?xml version = "1.0"?>
2  <!-- Fig. 15.19: sports.xsl -->
3  <!-- A simple XSLT transformation -->
4

Fig. 15.19 | XSLTthatcreateselementsandattributesinanHTML5document.(Part1of2.)
15.8 ExtensibleStylesheetLanguageandXSLTransformations   541


5  <!-- reference XSL style sheet URI --> 6  <xsl-stylesheet version = "1.0"
7	xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"> 8
9	<xsl:output method = "html" doctype-system = "about:legacy-compat" /> 10	<xsl:template match = "/"> <!-- match root element -->
11
12	<html xmlns = "http://www.w3.org/1999/xhtml"> 13         <head>
14	<meta charset = "utf-8"/>
15	<link rel = "stylesheet" type = "text/css" href = "style.css"/> 16	<title>Sports</title>
17	</head> 18
19	<body>
20	<table>
21	<caption>Information about various sports</caption> 22               <thead>
23	<tr>
24	<th>ID</th>
25	<th>Sport</th>
26	<th>Information</th> 27                  </tr>
28	</thead> 29
30	<!-- insert each name and paragraph element value --> 31	<!-- into a table row. -->
32	<xsl:for-each select = "/sports/game"> 33                  <tr>
34	<td><xsl:value-of select = "@id"/></td> 35	<td><xsl:value-of select = "name"/></td>
36	<td><xsl:value-of select = "paragraph"/></td> 37                  </tr>
38	</xsl:for-each> 39            </table>
40	</body> 41     </html>
42
43	</xsl:template>
44  </xsl:stylesheet>

Fig. 15.19 | XSLTthatcreateselementsandattributesinanHTML5document.(Part2of2.)

Lines 6–7 begin the XSL style sheet with the stylesheetstart tag. Attribute version specifies the XSLT version to which this document conforms. Line 7 binds namespace prefix xslto the W3C’s XSLT URI (i.e., http://www.w3.org/1999/XSL/Transform).

Outputting the DOCTYPE
Line 9 uses element xsl:outputto write an HTML5 document type declaration (DOC-TYPE) to the result tree (i.e., the XML document to be created). At the time of this writing, the W3C has not yet updated the XSLT recommendation (standard) to support the HTML5 DOCTYPE—in the meantime, they recommend setting the attribute doctype-
542	Chapter15 XML


systemto the value about:legacy-compatto produce an HTML5 compatible DOCTYPE using XSLT.

Templates
XSLT uses templates (i.e., xsl:templateelements) to describe how to transform partic-ular nodes from the source tree to the result tree. A template is applied to nodes that are specifiedintherequired matchattribute.Line10usesthematchattributetoselectthedoc-ument root (i.e., the conceptual part of the document that contains the root element and everything below it) of the XML source document (i.e., sports.xml). The XPath charac-ter /(a forward slash) always selects the document root. Recall that XPath is a string-based language used to locate parts of an XML document easily. In XPath, a leading forward slash specifies that we’re using absolute addressing (i.e., we’re starting from the root and definingpathsdownthesourcetree).IntheXMLdocumentofFig. 15.18,thechildnodes of the document root are the two processing-instruction nodes (lines 1–2), the two com-ment nodes (lines 4–5) and the sports-element node (lines 7–31). The template in Fig. 15.19, line 14, matches a node (i.e., the root node), so the contents of the template are now added to the result tree.

Repetition in XSL
The browser’s XML processor writes the HTML5 in lines 13–28 (Fig. 15.19) to the result tree exactly as it appears in the XSL document. Now the result tree consists of the DOCTYPE definition and the HTML5 code from lines 13–28. Lines 32–38 use element xsl:for-eachto iterate through the source XML document, searching for gameelements. Attribute selectis an XPath expression that specifies the nodes (called the node set) on which the xsl:for-eachoperates. Again, the first forward slash means that we’re using absolute ad-dressing. The forward slash between sportsand gameindicates that gameis a child node ofsports. Thus,thexsl:for-eachfindsgamenodes that arechildren ofthesportsnode. The XML document sports.xmlcontains only one sportsnode, which is also the docu-ment root node. After finding the elements that match the selection criteria, the xsl:for-eachprocesses each element with the code in lines 33–37 (these lines produce one row in a table each time they execute) and places the result in the result tree.
Line 34 uses element value-ofto retrieve attribute id’s value and place it in a tdele-ment in the result tree. The XPath symbol @specifies that idis an attribute node of the context node game. Lines 35–36 place the nameand paragraphelement values in tdele-ments and insert them in the result tree. When an XPath expression has no beginning for-ward slash, the expression uses relative addressing. Omitting the beginning forward slash tells the xsl:value-ofselectstatements to search for nameand paragraphelements that are children of the context node, not the root node. Owing to the last XPath expression selection, the current context node is game, which indeed has an idattribute, a namechild element and a paragraphchild element.

Using XSLT to Sort and Format Data
Figure 15.20 presents an XML document (sorting.xml) that marks up information about a book. Note that several elements of the markup describing the book appear out of order (e.g., the element describing Chapter 3 appears before the element describing Chap-ter 2). We arranged them this way purposely to demonstrate that the XSL style sheet ref-erenced in line 2 (sorting.xsl) can sort the XML file’s data for presentation purposes.
15.8 ExtensibleStylesheetLanguageandXSLTransformations   543


1  <?xml version = "1.0"?>
2  <?xml-stylesheet type = "text/xsl" href = "sorting.xsl"?> 3
4  <!-- Fig. 15.20: sorting.xml -->
5  <!-- XML document containing book information --> 6  <book isbn = "999-99999-9-X">
7	<title>Deitel&apos;s XML Primer</title> 8
9	<author>
10	<firstName>Jane</firstName> 11	<lastName>Blue</lastName> 12     </author>
13
14	<chapters>
15	<frontMatter>
16	<preface pages = "2" /> 17	<contents pages = "5" />
18	<illustrations pages = "4" /> 19         </frontMatter>
20
21	<chapter number = "3" pages = "44">Advanced XML</chapter>
22	<chapter number = "2" pages = "35">Intermediate XML</chapter> 23	<appendix number = "B" pages = "26">Parsers and Tools</appendix> 24	<appendix number = "A" pages = "7">Entities</appendix>
25	<chapter number = "1" pages = "28">XML Fundamentals</chapter> 26     </chapters>
27
28	<media type = "CD" />
29  </book>

Fig. 15.20 | XMLdocumentcontainingbookinformation.

Figure 15.21 presents an XSL document (sorting.xsl) for transforming the XML documentsorting.xml(Fig. 15.20) to HTML5. (Tosave space, we donot show thecon-tents of the example’s CSS file here.) Recall that an XSL document navigates a source tree and builds a result tree. In this example, the source tree is XML, and the output tree is HTML5. Line 12 of Fig. 15.21 matches the root element of the document in Fig. 15.20. Line 13 outputs an html start tag to the result tree. In line 14, the <xsl:apply-tem-plates/>elementspecifiesthattheXSLTprocessoristoapplythexsl:templatesdefined in this XSL document to the current node’s (i.e., the document root’s) children. The con-tent from the applied templates is output in the htmlelement that ends at line 15. You can view the results of the transformation at:

http://test.deitel.com/iw3htp5/ch15/Fig15_20-21/sorting.xml


1  <?xml version = "1.0"?> 2
3  <!-- Fig. 15.21: sorting.xsl -->
4  <!-- Transformation of book information into HTML5 -->

Fig. 15.21 | XSLdocumentthattransformssorting.xmlintoHTML5.(Part1of3.)
544	Chapter15 XML


5  <xsl:stylesheet version = "1.0"
6	xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"> 7
8	<!-- write XML declaration and DOCTYPE DTD information -->
9	<xsl:output method = "html" doctype-system = "about:legacy-compat" /> 10
11	<!-- match document root --> 12	<xsl:template match = "/"> 13         <html>
14	<xsl:apply-templates/> 15         </html>
16	</xsl:template> 17
18	<!-- match book -->
19	<xsl:template match = "book"> 20         <head>
21	<meta charset = "utf-8"/>
22	<link rel = "stylesheet" type = "text/css" href = "style.css"/> 23	<title>ISBN <xsl:value-of select = "@isbn"/> -
24	<xsl:value-of select = "title"/></title> 25         </head>
26
27	<body>
28	<h1><xsl:value-of select = "title"/></h1> 29	<h2>by
30	<xsl:value-of select = "author/lastName"/>,
31	<xsl:value-of select = "author/firstName"/></h2> 32
33	<table> 34
35	<xsl:for-each select = "chapters/frontMatter/*"> 36                  <tr>
37	<td>
38	<xsl:value-of select = "name()"/> 39                     </td>
40
41	<td>
42	( <xsl:value-of select = "@pages"/> pages ) 43                     </td>
44	</tr>
45	</xsl:for-each> 46
47	<xsl:for-each select = "chapters/chapter">
48	<xsl:sort select = "@number" data-type = "number" 49                        order = "ascending"/>
50	<tr>
51	<td>
52	Chapter <xsl:value-of select = "@number"/> 53                     </td>
54
55	<td>
56	<xsl:value-of select = "text()"/>

Fig. 15.21 | XSLdocumentthattransformssorting.xmlintoHTML5.(Part2of3.)
15.8 ExtensibleStylesheetLanguageandXSLTransformations   545


57	( <xsl:value-of select = "@pages"/> pages ) 58                     </td>
59	</tr>
60	</xsl:for-each> 61
62	<xsl:for-each select = "chapters/appendix">
63	<xsl:sort select = "@number" data-type = "text" 64                     order = "ascending"/>
65	<tr>
66	<td>
67	Appendix <xsl:value-of select = "@number"/> 68                     </td>
69
70	<td>
71	<xsl:value-of select = "text()"/>
72	( <xsl:value-of select = "@pages"/> pages ) 73                     </td>
74	</tr>
75	</xsl:for-each> 76            </table>
77
78	<p>Pages:
79	<xsl:variable name = "pagecount"
80	select = "sum(chapters//*/@pages)"/> 81               <xsl:value-of select = "$pagecount"/>
82	<p>Media Type: <xsl:value-of select = "media/@type"/></p> 83         </body>
84	</xsl:template>
85  </xsl:stylesheet>





















Fig. 15.21 | XSLdocumentthattransformssorting.xmlintoHTML5.(Part3of3.)
546	Chapter15 XML


Lines 19–84 specify a template that matches element book. The template indicates how to format the information contained in bookelements of sorting.xml(Fig. 15.20) as HTML5.
Lines 23–24 create the title for the HTML5 document. We use the book’s ISBN (from attribute isbn) and the contents of element titleto create the string that appears in the browser window’s title bar (ISBN 999-99999-9-X - Deitel’s XML Primer).
Line 28 creates a header element that contains the book’s title. Lines 29–31 create a header element that contains thebook’s author. Because thecontext node(i.e., thecurrent node being processed) is book, the XPath expression author/lastNameselects the author’s last name, and the expression author/firstNameselects the author’s first name.
Line35selects eachelement (indicatedby an asterisk) that’s achildof element front-Matter. Line 38 calls node-set function nameto retrieve the current node’s element name (e.g., preface). The current node is the context node specified in the xsl:for-each(line 35). Line 42 retrieves the value of the pagesattribute of the current node.
Line 47 selects each chapter element. Lines 48–49 use element xsl:sort to sort chapters by number in ascending order. Attribute selectselects the value of attribute numberin context node chapter. Attribute data-type, with value "number", specifies a numeric sort, and attribute order, with value "ascending", specifies ascending order. Attribute data-type also accepts the value "text" (line 63), and attribute order also accepts the value "descending". Line 56 uses node-set function textto obtain the text between the chapterstart and end tags (i.e., the name of the chapter). Line 57 retrieves the value of the pagesattribute of the current node. Lines 62–75 perform similar tasks for each appendix.
Lines 79–80 use an XSL variable to store the value of the book’s total page count and output the page count to the result tree. Attribute namespecifies the variable’s name (i.e., pagecount), and attribute selectassigns a value to the variable. Function sum(line 80) totals the values for all pageattribute values. The two slashes between chaptersand * indicate a recursive descent—the MSXML processor will search for elements that contain an attribute named pagesin all descendant nodes of chapters. The XPath expression

//*
selects all the nodes in an XML document. Line 81 retrieves the value of the newly created XSL variable pagecountby placing a dollar sign in front of its name.


Summary of XSL Stylesheet Elements
This section’s examples used several predefined XSL elements to perform various opera-tions. Figure 15.22 lists these and several other commonly used XSL elements. For more information on these elements and XSL in general, see www.w3.org/Style/XSL.



Element

<xsl:apply-templates>

Description

Applies the templates of the XSL document to the children of the current node.


Fig. 15.22 | XSLstyle-sheetelements.(Part1of2.)
15.9 DocumentObjectModel(DOM)   547



Element

<xsl:apply-templates match = "expression">

<xsl:template>
<xsl:value-of select = "expression">

<xsl:for-each select = "expression">
<xsl:sort select = "expression">


<xsl:output>



<xsl:copy>

Description

Applies the templates of the XSL document to the children of expression. The value of the attribute match (i.e., expression) must be an XPath expression that specifies elements.
Contains rules to apply when a specified node is matched.
Selects the value of an XML element and adds it to the output tree of the transformation. The required selectattribute con-tains an XPath expression.
Applies a template to every node selected by the XPath speci-fied by the selectattribute.
Used as a child element of an <xsl:apply-templates>or <xsl:for-each>element. Sorts the nodes selected by the <xsl:apply-template>or <xsl:for-each>element so that the nodes are processed in sorted order.
Has various attributes to define the format (e.g., XML), ver-sion (e.g., 1.0, 2.0), document type and media type of the out-put document. This tag is a top-level element—it can be used only as a child element of an xml:stylesheet.
Adds the current node to the output tree.


Fig. 15.22 | XSLstyle-sheetelements.(Part2of2.)

15.9 Document Object Model (DOM)
Although an XML document is a text file, retrieving data from the document using tradi-tional sequential file-processing techniques is neither practical nor efficient, especially for adding and removing elements dynamically.
Uponsuccessfullyparsingadocument,someXMLparsersstoredocumentdataastree structures in memory. Figure 15.23illustrates thetreestructurefortheroot element of the document article.xml(Fig. 15.2). This hierarchical tree structure is called a Document Object Model (DOM) tree, and an XML parser that creates this type of structure is known as a DOM parser. Each element name (e.g., article, date, firstName) is repre-sented by a node. A node that contains other nodes (called child nodes or children) is called a parent node (e.g., author). A parent node can have many children, but a child node can have only one parent node. Nodes that are peers (e.g., firstNameand lastName) arecalledsiblingnodes.Anode’sdescendantnodesincludeitschildren,itschildren’schil-dren and so on. A node’s ancestor nodes include its parent, its parent’s parent and so on. Many of the XML DOM capabilities you’ll see in this section are similar or identical to those of the HTML5 DOM you learned in Chapter 12.
The DOM tree has a single root node, which contains all the other nodes in the doc-ument. For example, the root node of the DOM tree that represents article.xml (Fig. 15.23) contains a node for the XML declaration (line 1), two nodes for the com-ments (lines 3–4) and a node for the XML document’s root element article(line 5).
To introduce document manipulation with the XML Document Object Model, we provide a scripting example (Figs. 15.24–15.25) that uses JavaScript and XML. This
548	Chapter15 XML



rootelement	article


title




childrenofthe article rootelement

date


author


summary



firstName


lastName




sibling elements



content

Fig. 15.23 | Treestructureforthedocumentarticle.xmlofFig.15.2.

exampleloads theXML document article.xml(Fig. 15.2) andusesthe XML DOM API to display the document’s element names and values. The example also provides buttons that enable you to navigate the DOM structure. As you click each button, an appropriate part of the document is highlighted.

HTML5 Document
Figure 15.24 containsthe HTML5document.When thisdocument loads, the loadevent calls our JavaScript function start(Fig. 15.25) to register event handlers for the buttons in the document and to load and display the contents of article.xmlin the divat line 21 (outputDiv). Lines 13–20 define a form consisting of five buttons. When each button is pressed, it invokes one of our JavaScript functions to navigate article.xml’s DOM structure. (To save space, we do not show the contents of the example’s CSS file here.) Some browsers allow you to load XML documents dynamically only when accessing the files from a web server. For this reason, you can test this example at:

http://test.deitel.com/iw3htp5/ch15/Fig15_24-25/XMLDOMTraversal.xml

1  <!DOCTYPE html> 2
3  <!-- Fig. 15.24: XMLDOMTraversal.html -->
4  <!-- Traversing an XML document using the XML DOM. --> 5  <html>
6  <head>
7	<meta charset = "utf-8">
8	<link rel = "stylesheet" type = "text/css" href = "style.css"> 9	<script src = "XMLDOMTraversal.js"></script>
10	<title>Traversing an XML document using the XML DOM</title>
11  </head>

Fig. 15.24 | TraversinganXMLdocumentusingtheXMLDOM.(Part1of5.)
15.9 DocumentObjectModel(DOM)   549


12  <body id = "body">
13	<form action = "#">
14	<input id = "firstChild" type = "button" value = "firstChild"> 15	<input id = "nextSibling" type = "button" value = "nextSibling"> 16	<input id = "previousSibling" type = "button"
17	value = "previousSibling">
18	<input id = "lastChild" type = "button" value = "lastChild"> 19	<input id = "parentNode" type = "button" value = "parentNode"> 20     </form>
21	<div id = "outputDiv"></div> 22  </body>
23  </html>


a)Commentnodeatthe beginningofarticle.xmlis highlightedwhentheXML documentfirstloads













b)Userclickedthe nextSiblingbuttonto highlightthesecond commentnode













Fig. 15.24 | TraversinganXMLdocumentusingtheXMLDOM.(Part2of5.)
550	Chapter15 XML


c)Userclickedthe nextSibling button againtohighlightthe articlenode












d)Userclickedthe firstChild buttonto highlightthearticle node’stitlechild node











e)Userclickedthe firstChild button againtohighlightthe titlenode’stext childnode











Fig. 15.24 | TraversinganXMLdocumentusingtheXMLDOM.(Part3of5.)
15.9 DocumentObjectModel(DOM)   551


f)Userclickedthe parentNode button tohighlightthetext node’sparenttitle node











g)Userclickedthe nextSiblingbuttonto highlightthetitle node’sdatesibling node











h)Userclickedthe nextSiblingbuttonto highlightthedate node’sauthorsibling node











Fig. 15.24 | TraversinganXMLdocumentusingtheXMLDOM.(Part4of5.)
552	Chapter15 XML


i)Userclickedthe lastChild buttonto highlighttheauthor node’slastchildnode (lastName)











j)Userclickedthe parentNode button tohighlightthe lastNamenode’s authorparentnode












Fig. 15.24 | TraversinganXMLdocumentusingtheXMLDOM.(Part5of5.)

JavaScript Code
Figure 15.24 lists the JavaScript code that manipulates this XML document and displays itscontentinanHTML5page.Line187indicatesthatthedocument’sloadeventhandler should call the script’s startfunction.

1  <!-- Fig. 15.25: XMLDOMTraversal.html -->
2  <!-- JavaScript for traversing an XML document using the XML DOM. --> 3  var outputHTML = ""; // stores text to output in outputDiv
4  var idCounter = 1; // used to create div IDs 5  var depth = -1; // tree depth is -1 to start
6  var current = null; // represents the current node for traversals
7  var previous = null; // represents prior node in traversals

Fig. 15.25 | JavaScriptfortraversinganXMLdocumentusingtheXMLDOM.(Part1of5.)
15.9 DocumentObjectModel(DOM)   553


8
9  // register event handlers for buttons and load XML document 10  function start()
11  {
12	document.getElementById( "firstChild" ).addEventListener( 13         "click", processFirstChild, false );
14	document.getElementById( "nextSibling" ).addEventListener( 15         "click", processNextSibling, false );
16	document.getElementById( "previousSibling" ).addEventListener( 17         "click", processPreviousSibling, false );
18	document.getElementById( "lastChild" ).addEventListener( 19         "click", processLastChild, false );
20	document.getElementById( "parentNode" ).addEventListener( 21         "click", processParentNode, false );
22	loadXMLDocument( 'article.xml' ) 23  } // end function start
24
25  // load XML document based on whether the browser is IE7 or Firefox 2 26  function loadXMLDocument( url )
27  {
28	var xmlHttpRequest = new XMLHttpRequest(); 29	xmlHttpRequest.open( "get", url, false ); 30	xmlHttpRequest.send( null );
31	var doc = xmlHttpRequest.responseXML;
32	buildHTML( doc.childNodes ); // display the nodes
33	displayDoc(); // display the document and highlight current node 34  } // end function loadXMLDocument
35
36  // traverse xmlDocument and build HTML5 representation of its content 37  function buildHTML( childList )
38  {
39	++depth; // increase tab depth 40
41	// display each node's content
42	for ( var i = 0; i < childList.length; i++ ) 43	{
44	switch ( childList[ i ].nodeType ) 45	{
46	case 1: // Node.ELEMENT_NODE; value used for portability 47	outputHTML += "<div id=\"id" + idCounter + "\">";
48	spaceOutput( depth ); // insert spaces
49	outputHTML += childList[ i ].nodeName; // show node's name 50	++idCounter; // increment the id counter
51
52	// if current node has children, call buildHTML recursively 53	if ( childList[ i ].childNodes.length != 0 )
54	buildHTML( childList[ i ].childNodes ); 55
56	outputHTML += "</div>"; 57	break;
58	case 3: // Node.TEXT_NODE; value used for portability
59	case 8: // Node.COMMENT_NODE; value used for portability

Fig. 15.25 | JavaScriptfortraversinganXMLdocumentusingtheXMLDOM.(Part2of5.)
554	Chapter15 XML


60	// if nodeValue is not 3 or 6 spaces (Firefox issue), 61	// include nodeValue in HTML
62	if ( childList[ i ].nodeValue.indexOf( "   " ) == -1 && 63               childList[ i ].nodeValue.indexOf( "	" ) == -1 ) 64	{
65	outputHTML += "<div id=\"id" + idCounter + "\">"; 66	spaceOutput( depth ); // insert spaces
67	outputHTML += childList[ i ].nodeValue + "</div>"; 68	++idCounter; // increment the id counter
69	} // end if 70         } // end switch 71     } // end for
72
73	--depth; // decrease tab depth 74  } // end function buildHTML
75
76  // display the XML document and highlight the first child 77  function displayDoc()
78  {
79	document.getElementById( "outputDiv" ).innerHTML = outputHTML; 80	current = document.getElementById( 'id1' );
81	setCurrentNodeStyle( current.getAttribute( "id" ), true ); 82  } // end function displayDoc
83
84  // insert nonbreaking spaces for indentation 85  function spaceOutput( number )
86  {
87	for ( var i = 0; i < number; i++ ) 88	{
89	outputHTML += "&nbsp;&nbsp;&nbsp;"; 90     } // end for
91  } // end function spaceOutput 92
93  // highlight first child of current node 94  function processFirstChild()
95  {
96	if ( current.childNodes.length == 1 && // only one child
97	current.firstChild.nodeType == 3 )  // and it's a text node 98     {
99	alert( "There is no child node" ); 100     } // end if
101	else if ( current.childNodes.length > 1 ) 102	{
103	previous = current; // save currently highlighted node 104
105	if ( current.firstChild.nodeType != 3 ) // if not text node 106           current = current.firstChild; // get new current node 107	else // if text node, use firstChild's nextSibling instead
108	current = current.firstChild.nextSibling; // get first sibling 109
110	setCurrentNodeStyle( previous.getAttribute( "id" ), false ); 111	setCurrentNodeStyle( current.getAttribute( "id" ), true );
112	} // end if

Fig. 15.25 | JavaScriptfortraversinganXMLdocumentusingtheXMLDOM.(Part3of5.)
15.9 DocumentObjectModel(DOM)   555


113	else
114	alert( "There is no child node" ); 115 } // end function processFirstChild
116
117 // highlight next sibling of current node 118 function processNextSibling()
119 {
120	if ( current.getAttribute( "id" ) != "outputDiv" && 121        current.nextSibling )
122	{
123        previous = current; // save currently highlighted node 124        current = current.nextSibling; // get new current node
125	setCurrentNodeStyle( previous.getAttribute( "id" ), false ); 126	setCurrentNodeStyle( current.getAttribute( "id" ), true ); 127     } // end if
128	else
129	alert( "There is no next sibling" ); 130 } // end function processNextSibling
131
132 // highlight previous sibling of current node if it is not a text node 133 function processPreviousSibling()
134 {
135	if ( current.getAttribute( "id" ) != "outputDiv" &&
136	current.previousSibling && current.previousSibling.nodeType != 3 ) 137     {
138	previous = current; // save currently highlighted node 139	current = current.previousSibling; // get new current node
140	setCurrentNodeStyle( previous.getAttribute( "id" ), false ); 141	setCurrentNodeStyle( current.getAttribute( "id" ), true ); 142     } // end if
143	else
144	alert( "There is no previous sibling" ); 145 } // end function processPreviousSibling
146
147 // highlight last child of current node 148 function processLastChild()
149 {
150	if ( current.childNodes.length == 1 && 151        current.lastChild.nodeType == 3 ) 152	{
153	alert( "There is no child node" ); 154     } // end if
155	else if ( current.childNodes.length != 0 ) 156	{
157	previous = current; // save currently highlighted node 158	current = current.lastChild; // get new current node
159	setCurrentNodeStyle( previous.getAttribute( "id" ), false ); 160	setCurrentNodeStyle( current.getAttribute( "id" ), true ); 161     } // end if
162	else
163	alert( "There is no child node" ); 164 } // end function processLastChild
165

Fig. 15.25 | JavaScriptfortraversinganXMLdocumentusingtheXMLDOM.(Part4of5.)
556	Chapter15 XML


166 // highlight parent of current node 167 function processParentNode()
168 {
169	if ( current.parentNode.getAttribute( "id" ) != "body" ) 170	{
171	previous = current; // save currently highlighted node 172	current = current.parentNode; // get new current node
173	setCurrentNodeStyle( previous.getAttribute( "id" ), false ); 174	setCurrentNodeStyle( current.getAttribute( "id" ), true ); 175     } // end if
176	else
177	alert( "There is no parent node" ); 178 } // end function processParentNode
179
180 // set style of node with specified id
181 function setCurrentNodeStyle( id, highlight ) 182 {
183	document.getElementById( id ).className = 184        ( highlight ? "highlighted" : "" ); 185 } // end function setCurrentNodeStyle
186
187 window.addEventListener( "load", start, false );

Fig. 15.25 | JavaScriptfortraversinganXMLdocumentusingtheXMLDOM.(Part5of5.)

Global Script Variables
Lines 3–7 declare several variables used throughout the script. Variable outputHTMLstores the markup that will be placed in outputDiv. Variable idCounteris used to track the unique idattributes that we assign to each element in the outputHTMLmarkup. These ids will be used to dynamically highlight parts of the document when the user clicks the but-tons in the form. Variable depthdetermines the indentation level for the content in ar-ticle.xml. We use this to structure the output using the nesting of the elements in article.xml. Variables currentand previoustrack the current and previous nodes in article.xml’s DOM structure as the user navigates it.

Function start
Function  start (lines  10–23)  registers  event  handlers  for  each  of  the  buttons  in Fig. 15.24, then calls function loadXMLDocument.

Function loadXMLDocument
Function loadXMLDocument(lines 26–35) loads the XML document at the specified URL. Line 28 creates an XMLHttpRequestobject, which can be used to load an XML document. Typically, such an object is used with Ajax to make asynchronous requests to a server—the topic of the next chapter. Here, we need to load an XML document immediately for use in thisexample.Line29usesthe XMLHttpRequestobject’sopenmethodtocreateagetrequest for an XML document at a specified URL. When the last argument’s value is false, the re-quest will be made synchronously—that is, the script will not continue until the document is received. Next, line 30 executes the XMLHttpRequest, which actually loads the XML doc-ument. The argument nullto the sendmethod indicates that no data is being sent to the server as part of this request. When the request completes, the resulting XML document is
15.9 DocumentObjectModel(DOM)   557


stored in the XMLHttpRequestobject’s responseXMLproperty, which we assign to local vari-able doc. When this completes, we call our buildHTMLmethod (defined in lines 37–74) to construct an HTML5 representation of the XML document. The expression doc.child-Nodesis a list of the XML document’s top-level nodes. Line 33 calls our displayDocfunc-tion (lines 77–82) to display the contents of article.xmlin outputDiv.

Function buildHTML
Function buildHTML(lines 37–74) is a recursive function that receives a list of nodes as an argument. Line 39 increments the depth for indentation purposes. Lines 42–71 iterate through the nodes in the list. The switchstatement (lines 44–70) uses the current node’s nodeTypeproperty to determine whether the current node is an element (line 46), a text node (i.e., the text content of an element; line 58) or a comment node (line 59). If it’s an element, then we begin a new divelement in our HTML5 (line 47) and give it a unique id. Then function spaceOutput(defined in lines 85–91) appends nonbreaking spaces (&nb-sp;)—i.e., spaces that the browser is not allowed to collapse or that can be used to keep words together—to indent the current element to the correct level. Line 49 appends the name of the current element using the node’s nodeNameproperty. If the current element has children, the length of the current node’s childNodeslist is nonzero and line 54 recursively calls buildHTMLto append the current element’s child nodes to the markup. When that re-cursive call completes, line 56 completes the divelement that we started at line 47.
If the current element is a text node, lines 62–63 obtain the node’s value with the nodeValueproperty and use the string method indexOfto determine whether the node’s value starts with three or six spaces. Some XML parsers do not ignore the white space used for indentation in XML documents. Instead they create text nodes containing just the space characters. The condition in lines 62–63 enables us to ignore these nodes in such browsers. If the node contains text, lines 65–67 append a new divto the markup and use the node’s nodeValueproperty to insert that text in the div. Line 73 in buildHTMLdecre-ments the depthcounter.

Portability Tip 15.4 Firefox’sXMLparserdoesnotignorewhitespaceusedforindentationinXMLdocuments. Instead, it creates text nodes containing the white-space characters.

Function displayDoc
In function displayDoc(lines 77–82), line 79 uses the DOM’s getElementByIdmethod to obtain the outputDivelement and set its innerHTMLproperty to the new markup gen-erated by buildHTML. Then, line 80 sets variable currentto refer to the divwith id'id1' in the new markup, and line 81 uses our setCurrentNodeStylemethod (defined at lines 181–185) to highlight that div.

Functions processFirstChildand processLastChild
Function processFirstChild (lines 94–115) is invoked by the onclick event of the firstChildbutton. If the currentnode has only one child and it’s a text node (lines 96– 97), line 99 displays an alert dialog indicating that there’s no child node—we navigate only to nested XML elements in this example. If there are two or more children, line 103 stores the value of currentin previous, and lines 105–108 set currentto refer to its firstChild (if this child is not a text node) or its firstChild’s nextSibling (if the
558	Chapter15 XML


firstChildis a text node)—again, this is to ensure that we navigate only to nodes that represent XML elements. Then lines 110–111 unhighlight the previousnode and high-light the new currentnode. Function processLastChild(lines 148–164) works similar-ly, using the currentnode’s lastChildproperty.

Functions processNextSiblingand processPreviousSibling
Function processNextSibling(lines 118–130) first ensures that the current node is not the outputDivand that nextSiblingexists. If so, lines 123–124 adjust the previousand currentnodes accordingly and update their highlighting. Function processPrevious-Sibling(lines 133–145) works similarly, ensuring first that the current node is not the outputDiv, that previousSiblingexists and that previousSiblingis not a text node.

Function processParentNode
Function processParentNode (lines 167–178) first checks whether the current node’s parentNodeis the HTML5 page’s body. If not, lines 171–174 adjust the previousand currentnodes accordingly and update their highlighting.

Common DOM Properties
The tables in Figs. 15.26–15.31 describe many common DOM properties and methods. Some of the key DOM objects are Node(a node in the tree), NodeList(an ordered set of Nodes), Document(the document), Element(an element node), Attr(an attribute node) and Text(a text node). There are many more objects, properties and methods than we can possibly list here. Our XML Resource Center (www.deitel.com/XML/) includes links to various DOM reference websites.




Property/Method

nodeType
nodeName
nodeValue
parentNode
childNodes
firstChild
lastChild
previousSibling
nextSibling
attributes

insertBefore

Description

An integer representing the node type. The name of the node.
A string or null depending on the node type. The parent node.
A NodeList(Fig. 15.27) with all the children of the node. The first child in the Node’s NodeList.
The last child in the Node’s NodeList.
The node preceding this node; nullif there’s no such node. The node following this node; nullif there’s no such node.
A collection of Attrobjects (Fig. 15.30) containing the attributes for this node.
Inserts the node (passed as the first argument) before the existing node (passed as the second argument). If the new node is already in the tree, it’s removed before insertion. The same behavior is true for other meth-ods that add nodes.


Fig. 15.26 | CommonNodepropertiesandmethods.(Part1of2.)
15.9 DocumentObjectModel(DOM)   559



Property/Method

replaceChild
removeChild
appendChild

Description

Replaces the second argument node with the first argument node. Removes the child node passed to it.
Appends the node it receives to the list of child nodes.


Fig. 15.26 | CommonNodepropertiesandmethods.(Part2of2.)



Property/Method

item


length

Description

Method that receives an index number and returns the element node at that index. Indices range from 0 to length – 1. You can also access the nodes in a NodeListvia array indexing.
The total number of nodes in the list.


Fig. 15.27 | NodeListpropertyandmethod.



Property/Method

documentElement
createElement

createAttribute

createTextNode
getElementsByTagName

Description

The root node of the document.
Creates and returns an element node with the specified tag name.
Creates and returns an Attrnode (Fig. 15.30) with the specified name and value.
Creates and returns a text node that contains the specified text.
Returns a NodeListof all the nodes in the subtree with the name specified as the first argument, ordered as they would be encoun-tered in a preorder traversal. An optional second argument spec-ifies either the direct child nodes (0) or any descendant (1).


Fig. 15.28 | Documentpropertyandmethods.



Property/Method

tagName
getAttribute
setAttribute

removeAttribute
getAttributeNode
setAttributeNode

Description

The name of the element.
Returns the value of the specified attribute.
Changes the value of the attribute passed as the first argument to the value passed as the second argument.
Removes the specified attribute. Returns the specified attribute node.
Adds a new attribute node with the specified name.


Fig. 15.29 | Elementpropertyandmethods.
560	Chapter15 XML



Property

value
name

Description

The specified attribute’s value.
The name of the attribute.


Fig. 15.30 | Attrproperties.



Property

data
length

Description

The text contained in the node.
The number of characters contained in the node.


Fig. 15.31 | Textproperties.

Locating Data in XML Documents with XPath
Althoughyou can use XML DOM capabilities to navigate throughandmanipulate nodes, this is not the most efficient means of locating data in an XML document’s DOM tree. A simpler way to locate nodes is to search for lists of nodes matching search criteria that are written as XPath expressions. Recall that XPath (XML Path Language) provides a syntax forlocating specific nodes in XML documents effectively andefficiently. XPath is a string-based language of expressions used by XML and many of its related technologies (such as XSLT, discussed in Section 15.8).
The example of Figs. 15.32–15.34 enables the user to enter XPath expressions in an HTML5 form. (To save space, we do not show the contents of the example’s CSS file here.) When the user clicks the Get Matches button, the script applies the XPath expres-sion to the XML DOM and displays the matching nodes.

HTML5 Document
WhentheHTML5document(Fig. 15.32)loads,itsloadeventcallsloadDocument(asspec-ified in Fig. 15.33, line 61) to load the sports.xmlfile (Fig. 15.34). The user specifies the XPath expression in the inputelement at line 14 (of Fig. 15.32). When the user clicks the GetMatchesbutton(line15),itsclickeventhandlerinvokesourprocessXPathExpression function(Fig. 15.33)tolocateanymatchesanddisplaytheresultsinoutputDiv(Fig. 15.32, line 17). Some browsers allow you to load XML documents dynamically only when access-ing the files from a web server. For this reason, you can test this example at:

http://test.deitel.com/iw3htp5/ch15/Fig15_24-25/XMLDOMTraversal.xml


1  <!DOCTYPE html> 2
3  <!-- Fig. 15.32: xpath.html -->
4  <!-- Using XPath to locate nodes in an XML document. --> 5  <html>
6  <head>

Fig. 15.32 | UsingXPathtolocatenodesinanXMLdocument.(Part1of2.)
15.9 DocumentObjectModel(DOM)   561


7	<meta charset = "utf-8">
8	<link rel = "stylesheet" type = "text/css" href = "style.css"> 9	<script src = "xpath.js"></script>
10	<title>Using XPath</title> 11  </head>
12  <body id = "body">
13	<form id = "myForm" action = "#">
14	<input id = "inputField" type = "text">
15	<input id = "matchesButton" type = "button" value = "Get Matches"> 16     </form>
17	<div id = "outputDiv"></div> 18  </body>
19  </html>


a)Selectingthesportsnode








c)Selectingthenamenodefromeachgamenode








.
e)Selectingthegamewiththeidattributevalue239

b)Selectingthegamenodesfromthesportsnode








d)Selectingtheparagraphnodefromeachgamenode








f)SelectingthegamewithnameelementvalueCricket










Fig. 15.32 | UsingXPathtolocatenodesinanXMLdocument.(Part2of2.)

JavaScript
The script of Fig. 15.33 loads the XML document sports.xml (Fig. 15.34) using the same techniques we presented in Fig. 15.25, so we focus on only the new features in this example.
562	Chapter15 XML


1  // Fig. 15.33: xpath.html
2  // JavaScript that uses XPath to locate nodes in an XML document. 3  var doc; // variable to reference the XML document
4  var outputHTML = ""; // stores text to output in outputDiv 5
6  // register event handler for button and load XML document 7  function start()
8  {
9	document.getElementById( "matchesButton" ).addEventListener( 10         "click", processXPathExpression, false );
11	loadXMLDocument( "sports.xml" ); 12  } // end function start
13
14  // load XML document programmatically 15  function loadXMLDocument( url )
16  {
17	var xmlHttpRequest = new XMLHttpRequest(); 18	xmlHttpRequest.open( "get", url, false ); 19	xmlHttpRequest.send( null );
20	doc = xmlHttpRequest.responseXML; 21  } // end function loadXMLDocument
22
23  // display the XML document 24  function displayHTML()
25  {
26	document.getElementById( "outputDiv" ).innerHTML = outputHTML; 27  } // end function displayDoc
28
29  // obtain and apply XPath expression 30  function processXPathExpression()
31  {
32	var xpathExpression = document.getElementById( "inputField" ).value; 33	var result;
34	outputHTML = ""; 35
36	if ( !doc.evaluate ) // Internet Explorer 37	{
38	result = doc.selectNodes( xpathExpression ); 39
40	for ( var i = 0; i < result.length; i++ ) 41	{
42	outputHTML += "<p>" + result.item( i ).text + "</p>"; 43         } // end for
44	} // end if
45	else // other browsers 46	{
47	result = doc.evaluate( xpathExpression, doc, null, 48            XPathResult.ORDERED_NODE_ITERATOR_TYPE, null ); 49	var current = result.iterateNext();
50
51	while ( current )
52	{

Fig. 15.33 | UsingXPathtolocatenodesinanXMLdocument.(Part1of2.)
15.9 DocumentObjectModel(DOM)   563


53	outputHTML += "<p>" + current.textContent + "</p>"; 54	current = result.iterateNext();
55	} // end while 56     } // end else
57
58	displayHTML();
59  } // end function processXPathExpression 60
61  window.addEventListener( "load", start, false );

Fig. 15.33 | UsingXPathtolocatenodesinanXMLdocument.(Part2of2.)

Function processXPathExpression
Function processXPathExpression(Fig. 15.33, lines 30–59) obtains the XPath expression (line 32) from the inputField. Internet Explorer and other browsers handle XPath process-ing differently, so this function contains an if…elsestatement to handle the differences.
Lines 36–44 apply the XPath expression in Internet Explorer (or any other browser that does not support to evaluatemethod on an XML document object), and lines 45– 56 apply the XPath expression in all other browsers. In IE, the XML document object’s selectNodesmethod (line 38) receives an XPath expression as an argument and returns a collection of elements that match the expression. Lines 40–43 iterate through the results and mark up each one in a separate pelement. After this loop completes, line 58 displays the generated markup in outputDiv.
For other browsers, lines 47–48 invoke the XML document object’s evaluate method, whichreceivesfivearguments—theXPathexpression, thedocument toapplythe expression to, a namespace resolver, a result type and an XPathResultobject into which to place the results. The result type XPathResult.ORDERED_NODE_ITERATOR_TYPEindi-cates that the method should return an object that can be used to iterate through the results in the order they appeared in the XML document. If the last argument is null, the function  simply  returns  a  new  XPathResult object  containing  the  matches.  The namespace resolver argument can be nullif you’re not using XML namespace prefixes in the XPath processing. Lines 47–55 iterate through the XPathResult and mark up the results. Line 49 invokes the XPathResult’s iterateNextmethod to position to the first result. If there’s a result, the condition in line 51 will be true, and line 53 creates a pele-ment for that result. Line 54 then positions to the next result. After this loop completes, line 58 displays the generated markup in outputDiv.

sports.xml
Figure 15.34 shows the XML document sports.xmlthat we use in this example. [Note: The versions of sports.xmlpresented in Fig. 15.34 and Fig. 15.18 are nearly identical. In the current example, we do not want to apply an XSLT, so we omit the processing instruc-tion found in line 2 of Fig. 15.18. We also removed extra blank lines to save space.]

1  <?xml version = "1.0"?> 2
3  <!-- Fig. 15.34: sports.xml -->

Fig. 15.34 | XMLdocumentthatdescribesvarioussports.(Part1of2.)
564	Chapter15 XML


4  <!-- Sports Database	--> 5  <sports>
6	<game id = "783">
7	<name>Cricket</name> 8	<paragraph>
9	More popular among commonwealth nations. 10         </paragraph>
11	</game>
12	<game id = "239">
13	<name>Baseball</name> 14	<paragraph>
15	More popular in America. 16         </paragraph>
17	</game>
18	<game id = "418">
19	<name>Soccer (Futbol)</name> 20	<paragraph>
21	Most popular sport in the world. 22         </paragraph>
23	</game>
24  </sports>

Fig. 15.34 | XMLdocumentthatdescribesvarioussports.(Part2of2.)

Function processXPathExpression
Figure 15.35 summarizes the XPath expressions that we demonstrated in Fig. 15.32’s sample outputs.



Expression

/sports

/sports/game

/sports/game/name


/sports/game/paragraph


/sports/game [@id=’239’]


/sports/game [name='Cricket']

Description

Matches all sportsnodes that are child nodes of the document root node.
Matches all gamenodes that are child nodes of sports, which is a child of the document root.
Matches all namenodes that are child nodes of game. The gameis a child of sports, which is a child of the document root.
Matches all paragraphnodes that are child nodes of game. The gameis a child of sports, which is a child of the document root.
Matches the gamenode with the idnumber 239. The gameis a child of sports, which is a child of the document root.
Matches all gamenodes that contain a child ele-ment whose name is Cricket. The gameis a child of sports, which is a child of the document root.


Fig. 15.35 | XPathexpressionsanddescriptions.
15.10 WebResources   565

15.10  Web Resources www.deitel.com/XML/
The Deitel XML Resource Center focuses on the vast amount of free XML content available online, plus some for-sale items. Start your search here for tools, downloads, tutorials, podcasts, wikis, doc-umentation, conferences, FAQs, books, e-books, sample chapters, articles, newsgroups, forums, downloads from CNET’s download.com, jobs and contract opportunities, and more that will help you develop XML applications.




Summary
Section 15.1 Introduction
•  The eXtensible Markup Language (XML; p. 512) is a portable, widely supported, open (i.e., nonproprietary) technology for data storage and exchange.

Section 15.2 XML Basics
•  XML documents are readable by both humans and machines.
•  XML permits document authors to create custom markup for any type of information. This en-ables document authors to create entirely new markup languages (p. 512) that describe specific types of data,including mathematical formulas, chemical molecularstructures,music andrecipes.
•  An XML parser (p. 514) is responsible for identifying components of XML documents (typically files with the .xmlextension) and then storing those components in a data structure for manip-ulation.
•  An XML document can optionally reference a Document Type Definition (DTD, p. 514) or schema that defines the XML document’s structure.
•  An XML documentthatconforms to aDTD/schema (i.e.,has theappropriatestructure)is valid.
•  If an XML parser (validating or non-validating; p. 514) can process an XML document success-fully, that XML document is well-formed (p. 514).

Section 15.3 Structuring Data
•  An XML document begins with an XML declaration (p. 515), which identifies the document as an XML document. The versionattribute (p. 515) specifies the version of XML syntax used in the document.
•  XML comments begin with <!--and end with -->.
•  An XML document contains text that represents its content (i.e., data) and elements that specify its structure. XML documents delimit an element with start and end tags.
•  The root element (p. 518) of an XML document encompasses all its other elements.
•  XML element names can be of any length and can contain letters, digits, underscores, hyphens and periods. However, they must begin with either a letter or an underscore, and they should not begin with “xml” in any combination of uppercase and lowercase letters, as this is reserved for use in the XML standards.
•  Whenauserloads anXMLdocumentin abrowser,aparserparsesthedocument,andthebrows-er uses a style sheet to format the data for display.
•  Data can be placed between tags or in attributes (name/value pairs that appear within the angle brackets of start tags, p. 520). Elements can have any number of attributes.
566	Chapter15 XML


Section 15.4 XML Namespaces
•  XML allows document authors to create their own markup, and as a result, naming collisions (i.e., two different elements that have the same name, p. 521) can occur. XML namespaces (p. 521) provide a means for document authors to prevent collisions.
•  Each namespace prefix (p. 521) is bound to a Uniform Resource Identifier (URI, p. 522) that uniquely identifies the namespace. A URI is a series of characters that differentiate names. Doc-umentauthorscreatetheirownnamespaceprefixes.Anynamecanbeusedasanamespaceprefix, but the namespace prefix xmlis reserved for use in XML standards.
•  To eliminate the need to place a namespace prefix in each element, authors can specify a default namespace for an element and its children. We declare a default namespace using keyword xmlns (p. 522) with a URI as its value.
•  DocumentauthorscommonlyuseURLs(UniformResourceLocators,p. 522)forURIs,because domain names (e.g., deitel.com) in URLs must be unique.

Section 15.5 Document Type Definitions (DTDs)
•  DTDs and schemas specify documents’ element types and attributes and their relationships to one another.
•  DTDs and schemas enable an XML parser to verify whether an XML document is valid (i.e., its elements contain the proper attributes and appear in the proper sequence).
•  ADTDexpressesthesetofrulesfordocumentstructureusinganEBNF(ExtendedBackus-Naur Form) grammar.
•  In a DTD, an ELEMENTelement type declaration (p. 525) defines the rules for an element. An ATTLISTattribute-list declaration (p. 525) defines attributes for a particular element.

Section 15.6 W3C XML Schema Documents
•  XML schemas use XML syntax and are themselves XML documents.
•  Unlike DTDs, XML Schema (p. 527) documents can specify what type of data (e.g., numeric, text) an element can contain.
•  An XML document that conforms to a schema document is schema valid (p. 528).
•  Two categories of types exist in XML Schema: simple types and complex types (p. 531). Simple types cannot contain attributes or child elements; complex types can.
•  Every simple type defines a restriction on an XML Schema-defined schema type or on a user-defined type.
•  Complex types can have either simple content or complex content. Both can contain attributes, but only complex content can contain child elements.
•  Whereas complex types with simple content must extend or restrict some other existing type, complex types with complex content do not have this limitation.

Section 15.7 XML Vocabularies
•  XML allows authors to create their own tags to describe data precisely.
•  Some of these XML vocabularies include MathML (Mathematical Markup Language, p. 534), ScalableVectorGraphics(SVG,p. 534),WirelessMarkupLanguage(WML,p. 534),Extensible Business Reporting Language  (XBRL,  p. 534), Extensible User Interface Language  (XUL, p. 534), Product Data Markup Language (PDML, p. 534), W3C XML Schema and Extensible Stylesheet Language (XSL).
•  MathML markup describes mathematical expressions for display. MathML is divided into two types of markup—content markup (p. 534) and presentation markup (p. 534).
Summary   567


•  Content markup provides tags that embody mathematical concepts. Content MathML allows programmers to write mathematical notation specific to different areas of mathematics.
•  Presentation MathML is directed toward formatting and displaying mathematical notation. •  By convention, MathML files end with the .mmlfilename extension.
•  A MathML document’s root node is the math element and its default namespace is http:// www.w3.org/1998/Math/MathML.
•  The mnelement (p. 535) marks up a number. The moelement (p. 535) marks up an operator.
•  Entity reference&InvisibleTimes;(p. 536)indicates amultiplication operation without explicit symbolic representation (p. 536).
•  The msupelement (p. 536) represents a superscript. It has two children—the expression to be su-perscripted (i.e., the base) and the superscript (i.e., the exponent). Correspondingly, the msubel-ement (p. 536) represents a subscript.
•  To display variables, use identifier element mi(p. 536).
•  The mfracelement (p. 536) displays a fraction. If either the numerator or the denominator con-tains more than one element, it must appear in an mrowelement (p. 537).
•  An mrowelement is used to group elements that are positioned horizontally in an expression. •  The entity reference &int;(p. 537) represents the integral symbol.
•  The msubsup element (p. 537) specifies the subscript and superscript of a symbol. It requires three child elements—an operator, the subscript expression and the superscript expression.
•  Element msqrt(p. 537) represents a square-root expression. •  Entity reference &delta;represents a lowercase delta symbol.

Section 15.8 Extensible Stylesheet Language and XSL Transformations
•  eXtensible Stylesheet Language (XSL; p. 538) can convert XML into any text-based document. XSL documents have the extension .xsl.
•  XPath (p. 538) is a string-based language of expressions used by XML and many of its related technologies for effectively and efficiently locating structures and data (such as specific elements and attributes) in XML documents.
•  XPathisusedtolocatepartsofthesource-treedocumentthatmatchtemplatesdefinedinanXSL style sheet. When a match occurs (i.e., a node matches a template), the matching template exe-cutes and adds its result to the result tree (p. 539). When there are no more matches, XSLT has transformed the source tree (p. 539) into the result tree.
•  The XSLT does not analyze every node of the source tree; it selectively navigates the source tree using XPath’s selectand matchattributes.
•  For XSLT to function, the source tree must be properly structured. Schemas, DTDs and validat-ing parsers can validate document structure before using XPath and XSLTs.
•  XSL style sheets (p. 539) can be connected directly to an XML document by adding an xml:stylesheetprocessing instruction to the XML document.
•  Two tree structures are involved in transforming an XML document using XSLT—the source tree (the document being transformed) and the result tree (the result of the transformation).
•  The XPath character /(a forward slash) always selects the document root. In XPath, a leading forward slash specifies that we’re using absolute addressing.
•  An XPath expression with no beginning forward slash uses relative addressing (p. 542).
•  XSL element value-ofretrieves an attribute’s value. The @symbol specifies an attribute node.
568	Chapter15 XML


•  XSL node-set function name(p. 546) retrieves the current node’s element name.
•  XSL node-set function text(p. 546) retrieves the text between an element’s start and end tags. •  The XPath expression //*selects all the nodes in an XML document.

Section 15.9 Document Object Model (DOM)
•  Although an XML document is a text file, retrieving data from the document using traditional sequential file-processing techniques is neither practical nor efficient, especially for adding and removing elements dynamically.
•  Upon successfully parsing a document, some XML parsers store document data as tree structures in memory. This hierarchical tree structure is called a Document Object Model (DOM) tree (p. 547),andanXMLparserthatcreatesthistypeofstructureisknownasaDOMparser(p. 547).
•  Each element name is represented by a node. A node that contains other nodes is called a parent node. A parent node (p. 547) can have many children, but a child node (p. 547) can have only one parent node.
•  Nodes that are peers are called sibling nodes (p. 547).
•  A node’s descendant nodes (p. 547) include its children, its children’s children and so on. A node’s ancestor nodes (p. 547) include its parent, its parent’s parent and so on.
•  Many of the XML DOM capabilities are similar or identical to those of the HTML5 DOM.
•  TheDOMtreehasasinglerootnode(p. 547),whichcontainsalltheothernodesinthedocument. •  An XMLHttpRequestobject can be used to load an XML document.
•  The XMLHttpRequestobject’s openmethod (p. 556) can be used to create a getrequest for an XML document at a specified URL. When the last argument’s value is false, the request will be made synchronously.
•  XMLHttpRequestmethod send(p. 556) executes the request to load the XML document. When the request completes, the resulting XML document is stored in the XMLHttpRequestobject’s re-sponseXMLproperty.
•  A document’s childNodesproperty contains a list of the XML document’s top-level nodes. •  A node’s nodeTypeproperty (p. 557) contains the type of the node.
•  Nonbreakingspaces(&nbsp;,p. 557)arespacesthatthebrowseris notallowedtocollapseorthat can be used to keep words together.
•  The name of an element can be obtained by the node’s nodeNameproperty (p. 557). •  If the currrent node has children, the length of the node’s childNodeslist is nonzero. •  The nodeValueproperty (p. 557) returns the value of an element.
•  Node property firstChild(p. 557) refers to the first child of a given node. Similarly, lastChild (p. 558) refers to the last child of a given node.
•  Node property nextSibling(p. 557) refers to the next sibling in a list of children of a particular node. Similarly, previousSiblingrefers to the current node’s previous sibling.
•  Property parentNode(p. 558) refers to the current node’s parent node.
•  A simpler way to locate nodes is to search for lists of node-matching search criteria that are writ-ten as XPath expressions.
•  In IE, the XML document object’s selectNodesmethod (p. 563) receives an XPath expression as an argument and returns a collection of elements that match the expression.
•  Other browsers search for XPath matches using the XML document object’s evaluatemethod (p. 563), which receives five arguments—the XPath expression, the document to apply the ex-
Self-ReviewExercises   569


pression to, a namespace resolver, a result type and an XPathResultobject (p. 563) into which to place the results. If the last argument is null, the function simply returns a new XPathResult object containing the matches. The namespace resolver argument can be nullif you’re not using XML namespace prefixes in the XPath processing.

Self-Review Exercises
15.1	Which of the following are valid XML element names? (Select all that apply.) a)  yearBorn
b)  year.Born c)   year Born d)  year-Born1 e)   2_year_born f)   _year_born_
15.2	 State which of the following statements are true and which are false. If false, explain why. a)  XML is a technology for creating markup languages.
b)  XML markup is delimited by forward and backward slashes (/and \). c)   All XML start tags must have corresponding end tags.
d)  Parsers check an XML document’s syntax. e)   XML does not support namespaces.
f)   When creating XML elements, document authors must use the set of XML tags provid-ed by the W3C.
g)  The pound character (#), dollar sign ($), ampersand (&) and angle brackets (<and >) are examples of XML reserved characters.
h)  XML is not case sensitive.
i)   XML Schemas are better than DTDs, because DTDs lack a way of indicating what spe-cific type of data (e.g., numeric, text) an element can contain, and DTDs are not them-selves XML documents.
j)   DTDs are written using an XML vocabulary.
k)  Schema is a technology for locating information in an XML document.
15.3	Fill in the blanks for each of the following:
a)	help prevent naming collisions.
b)	embed application-specific information into an XML document. c)	is Microsoft’s XML parser.
d)  XSL element	writes a DOCTYPEto the result tree. e)   XML Schema documents have root element	.
f)   XSL element	is the root element in an XSL document.
g)  XSL element	selects specific XML elements using repetition. h)  Nodes that contain other nodes are called	nodes.
i)   Nodes that are peers are called	nodes.
15.4	In Fig. 15.2, we subdivided the authorelement into more detailed pieces. How might you subdivide the dateelement? Use the date May 5, 2005, as an example.
15.5	Write a processing instruction that includes style sheet wap.xsl.
15.6	Write an XPath expression that locates contactnodes in letter.xml(Fig. 15.4).

Answers to Self-Review Exercises
15.1	a, b, d, f. [Choice c is incorrect because it contains a space. Choice e is incorrect because the first character is a number.]
570	Chapter15 XML


15.2	a)  True.b)False.InanXMLdocument,markuptextisdelimitedbytagsenclosedinangle brackets (<and>)with aforwardslashjustafterthe <in theendtag.c)True.d)True.e) False. XML does support namespaces. f) False. When creating tags, document authors can use any valid name but should avoid ones that begin with the reserved word xml(also XML, Xml, etc.). g) False. XML reserved characters include the ampersand (&), the left angle bracket (<) and the right angle bracket (>), but not #and $. h) False. XML is case sensitive. i) True. j) False. DTDs use EBNF grammar, which is not XML syntax. k) False. XPath is a technology for locating information in an XML doc-ument. XML Schema provides a means for type checking XML documents and verifying their va-lidity.
15.3	a)  Namespaces.  b)  Processing  instructions.  c)  MSXML.  d)  xsl:output.  e)  schema. f) xsl:stylesheet. g) xsl:for-each. h) parent. i) sibling.
15.4	<date> <month>May</month>
<day>5</day> <year>2005</year>
</date>
15.5	<?xsl:stylesheet type ="text/xsl"href ="wap.xsl"?> 15.6	/letter/contact.

Exercises
15.7	(Nutrition Information XML Document) Create an XML document that marks up the nu-trition facts for a package of Grandma White’s cookies. A package of cookies has a serving size of 1 package and the following nutritional value per serving: 260 calories, 100 fat calories, 11 grams of fat,2gramsofsaturatedfat,5milligramsofcholesterol,210milligramsofsodium,36gramsoftotal carbohydrates, 2 grams of fiber, 15 grams of sugars and 5 grams of protein. Name this document nutrition.xml. Load the XML document into your web browser. [Hint: Your markup should con-tain elements describing the product name, serving size/amount, calories, sodium, cholesterol, pro-teins, etc. Mark up each nutrition fact/ingredient listed above.]
15.8	(Nutrition Information XML Schema) Write an XML Schema document (nutrition.xsd) specifying the structure of the XML document created in Exercise 15.7.
15.9	(Nutrition Information XSL Style Sheet) Write an XSL style sheet for your solution to Exercise 15.7 that displays the nutritional facts in an HTML5 table.
15.10   (Sorting XSLT Modification) Modify Fig. 15.21 (sorting.xsl) to sort by the number of pages rather than by chapter number. Save the modified document as sorting_byPage.xsl.

Ajax-EnabledRichInternet ApplicationswithXMLand JSON

16
… the challenges are for the designers of these applications: to forget what we think we know about the limitations of theWeb,andbegintoimaginea wider, richer range of possibilities. It’s going to be fun.
—Jesse James Garrett

To know how to suggest is the great art of teaching.
—Henri-Frederic Amiel

It is characteristic of the epistemological tradition to presentuswithpartialscenarios and then to demand whole or categorical answers as it were.
—Avrum Stroll

O! call back yesterday, bid time return.
—William Shakespeare



Objectives Inthischapteryouwill:
ÿ   LearnwhatAjaxisandwhy it’simportantforbuilding
RichInternetApplications.
ÿ   Useasynchronousrequests to givewebapplicationsthe
feelofdesktopapplications.
ÿ   UsetheXMLHttpRequest objecttomanage asynchronousrequeststo serversandtoreceive
asynchronousresponses. ÿ   UseXMLwiththeDOM.
ÿ   Createafull-scaleAjax-
enabledapplication.
572	Chapter16 Ajax-EnabledRichInternetApplicationswithXMLandJSON



16.1  Introduction
16.1.1 TraditionalWebApplicationsvs.Ajax
Applications
16.1.2 TraditionalWebApplications
16.1.3 AjaxWebApplications
16.2  RichInternetApplications(RIAs) withAjax
16.3  HistoryofAjax
16.4  “Raw”AjaxExampleUsingthe XMLHttpRequestObject
16.4.1 AsynchronousRequests 16.4.2 ExceptionHandling 16.4.3 CallbackFunctions
16.4.4 XMLHttpRequestObjectEvent,
PropertiesandMethods

16.5  UsingXMLandtheDOM
16.6  CreatingaFull-ScaleAjax-Enabled Application
16.6.1 UsingJSON 16.6.2 RichFunctionality
16.6.3 InteractingwithaWebServiceonthe
Server
16.6.4 ParsingJSONData
16.6.5 CreatingHTML5ElementsandSetting
EventHandlersontheFly 16.6.6 ImplementingType-Ahead
16.6.7 ImplementingaFormwith
AsynchronousValidation


Summary | Self-Review Exercises | Answers to Self-Review Exercises | Exercises


16.1 Introduction
Despite the tremendous technological growth of the Internet over the past decade, the us-ability of web applications has lagged behind that of desktop applications. Rich Internet Applications (RIAs) are web applications that approximate the look, feel and usability of desktop applications. Two key attributes of RIAs are performance and a rich GUI.
RIA performance comes from Ajax (Asynchronous JavaScript and XML), which uses client-side scripting to make web applications more responsive. Ajax applications separate client-side user interaction and server communication and run them in parallel, reducing the delays of server-side processing normally experienced by the user.
There are many ways to implement Ajax functionality. “Raw” Ajax uses JavaScript to sendasynchronousrequeststotheserver,thenupdatesthepageusingtheDOM.“Raw”Ajax isbestsuitedforcreatingsmallAjaxcomponentsthatasynchronouslyupdateasectionofthe page. However, when writing “raw” Ajax you need to deal directly with cross-browser por-tabilityissues,makingitimpracticalfordevelopinglarge-scaleapplications.Theseportability issues are hidden by Ajax toolkits, such as jQuery, ASP.NET Ajax and JSF’s Ajax capabili-ties, which provide powerful ready-to-use controls and functions that enrich web applica-tions and simplify JavaScript coding by making it cross-browser compatible.
Traditional web applications use HTML5 forms to build GUIs that are simple by comparison with those of Windows, Macintosh and desktop systems in general. You can achieve rich GUIs in RIAs with JavaScript toolkits providing powerful ready-to-use con-trols and functions that enrich web applications.
Previous chapters discussed HTML5, CSS3, JavaScript, the DOM and XML. This chapter uses these technologies to build Ajax-enabled web applications. The client side of Ajax applications is written in HTML5 and CSS3 and uses JavaScript to add functionality to the user interface. XML is used to structure the data passed between server and client. We’ll also use JSON (JavaScript Object Notation) for this purpose. The Ajax component that  manages  interaction  with  the  server  is  usually  implemented  with  JavaScript’s XMLHttpRequestobject—commonly abbreviated as XHR. The server processing can be
16.1 Introduction   573


implemented using any server-side technology, such as PHP, ASP.NET and JavaServer Faces, each of which we cover in later chapters.
We begin with several examples that build basic Ajax applications using JavaScript and the XMLHttpRequestobject. In subsequent chapters, we use tools such as ASP.NET Ajax and JavaServer Faces to build Ajax-enabled RIAs. We also include an online intro-duction to jQuery.

16.1.1 Traditional Web Applications vs. Ajax Applications
In this section, we consider the key differences between traditional web applications and Ajax-based web applications.

16.1.2 Traditional Web Applications
Figure 16.1 presents the typical interactions between the client and the server in a tradi-tional web application, such as one that employs a user registration form. The user first fills in the form’s fields, then submits the form (Fig. 16.1, Step 1). The browser generates a request to the server, which receives the request and processes it (Step 2). The server gen-erates and sends a response containing the exact page that the browser will render (Step 3), which causes the browser to load the new page (Step 4) and temporarily makes the browser window blank. Note that the client waits for the server to respond and reloads the entire page with the data from the response (Step 4). While such a synchronous request is being processed on the server, the user cannot interact with the client web page. Frequent long periods of waiting, due perhaps to Internet congestion, have led some users to refer to the WorldWideWebasthe“WorldWideWait;”thissituation hasimprovedgreatly in recent years. If the user interacts with and submits another form, the process begins again (Steps 5–8).



2
Process request
Server




Request1


Generate response
3

Page2 Form

Form

6
Process request




Request2


Generate response
7

Page3 Form

Form



Page1	4	Page 1   Form                 reloading

Form
Client

Page2	8	Page	Page3 Form               reloading       Form

Form 5	Form


Fig. 16.1  | Classicwebapplicationreloadingthepageforeveryuserinteraction.

This model was originally designed for a web of hypertext documents—what some people call the “brochure web.” As the web evolved into a full-scale applications platform,
574	Chapter16 Ajax-EnabledRichInternetApplicationswithXMLandJSON


the model shown in Fig. 16.1 yielded erratic application performance. Every full-page refresh required users to re-establish their understanding of the full-page contents. Users sought a model that would yield the responsive feel of desktop applications.

16.1.3 Ajax Web Applications
Ajax applications add a layer between the client and the server to manage communication between the two (Fig. 16.2). When the user interacts with the page, the client creates an XMLHttpRequestobject to manage a request (Step 1). The XMLHttpRequestobject sends the request to the server (Step 2) and awaits the response. The requests are asynchronous, so the user can continue interacting with the application on the client side while the server processes the earlier request concurrently. Other user interactions could result in additional requests tothe server(Steps 3 and 4). Once theserver responds tothe originalrequest (Step 5), theXMLHttpRequestobject thatissuedtherequestcallsa client-sidefunctiontoprocess the data returned by the server. This function—known as a callback function—uses par-tial page updates (Step 6) to display the data in the existing web page without reloading the entire page. At the same time, the server may be responding to the second request (Step 7) and the client side may be starting to do another partial page update (Step 8). The callback function updates only a designated part of the page. Such partial page updates help make web applications more responsive, making them feel more like desktop applications. The web application does not load a new page while the user interacts with it.
Server




Process request1

Generate response

Process request2

Generate response




5  data
2	Uassyenrcihnrtoenraocutisorneqinuietisattes

data 7
pPaargteiaulpdate 4



Requestobject
Callbackfunction Responseprocessing
Client


1	Page1	8 Update    Form        Update
Form
6	3



Requestobject
Callbackfunction Responseprocessing



Partial
pageupdate

Userinteractioninitiates
asynchronousrequest

Fig. 16.2  | Ajax-enabledwebapplicationinteractingwiththeserverasynchronously.

16.2 Rich Internet Applications (RIAs) with Ajax
Ajax improves the user experience by making interactive web applications more respon-sive. Consider a registration form with a number of fields (e.g., first name, last name e-mail address, telephone number, etc.) and a Register (or Submit) button that sends the en-
16.2 RichInternetApplications(RIAs)withAjax   575


tered data to the server. Usually each field has rules that the user’s entries have to follow (e.g., valid e-mail address, valid telephone number, etc.).
When the user clicks Register, an HTML5 form sends the server all of the data to be validated (Fig. 16.3). While the server is validating the data, the user cannot interact with the page. The server finds invalid data, generates a new page identifying the errors in the form and sends it back to the client—which renders the page in the browser. Once the user fixes the errors and clicks the Register button, the cycle repeats until no errors are found, then the data is stored on the server. The entire page reloads every time the user submits invalid data.
Ajax-enabled forms are more interactive. Rather than the entire form being sent to be validated, entries can be validated individually, dynamically, as the user enters data into the fields. For example, consider a website registration form that requires a valid e-mail address. When the user enters an e-mail address into the appropriate field, then moves to the next form field to continue entering data, an asynchronous request is sent to the server to validate the e-mail address. If it’s not valid, the server sends an error message that’s dis-played on the page informing the user of the problem (Fig. 16.4). By sending each entry asynchronously, the user can address each invalid entry quickly, versus making edits and resubmitting the entire form repeatedly until all entries are valid. Simple validation like this for e-mails and phone numbers can also be accomplished with HTML5’s new input elements that you learned in Chapter 3, rather than using Ajax. Asynchronous requests could also be used to fill some fields based on previous fields (e.g., automatically filling in the “city” and “state” fields based on the ZIP code entered by the user).

a)Asampleregistration forminwhichtheuserhas notfilledintherequired fields,butattemptsto submittheformanyway byclickingRegister.
















Fig. 16.3  | ClassicHTML5form:Theusersubmitstheformtotheserver,whichvalidatesthe data(ifany).Serverrespondsindicatinganyfieldswithinvalidormissingdata.(Part1of2.)
576	Chapter16 Ajax-EnabledRichInternetApplicationswithXMLandJSON


b)Theserverrespondsby indicatingalltheformfields withmissingorinvaliddata. Theusermustcorrectthe problemsandresubmitthe entire formrepeatedlyuntil all errorsarecorrected.







Errormessageinred







Fig. 16.3  | ClassicHTML5form:Theusersubmitstheformtotheserver,whichvalidatesthe data(ifany).Serverrespondsindicatinganyfieldswithinvalidormissingdata.(Part2of2.)






















Fig. 16.4  | Ajax-enabledformshowserrorsasynchronouslywhenusermovestoanotherfield.
16.3 HistoryofAjax   577

16.3 History of Ajax
The term Ajax was coined by Jesse James Garrett of Adaptive Path in February 2005, when he was presenting the previously unnamed technology to a client. The technologies of Ajax (HTML,JavaScript,CSS,theDOMandXML)hadallexistedformanyyearspriorto2005. Asynchronous page updates can be traced back to earlier browsers. In the 1990s, Netscape’s LiveScript language made it possible to include scripts in web pages (e.g., web forms) that could run on the client. LiveScript evolved intoJavaScript. In 1998, Microsoft introduced the XMLHttpRequestobject to create and manage asynchronous requests and responses. Popular applications like Flickr and Google’s Gmail use the XMLHttpRequest object to update pages dynamically. For example, Flickr uses the technology for its text editing, tagging and organizational features; Gmail continuously checks the server for new e-mail; and Google Maps allows you to drag a map in any direction, downloading the new
areas on the map without reloading the entire page.
The name Ajax immediately caught on and brought attention to its component tech-nologies. Ajax has enabled “webtop” applications to challenge the dominance of estab-lished desktop applications. This has become increasingly significant as more and more computing moves to “the cloud.”


16.4 “Raw” Ajax Example Using the XMLHttpRequest
Object
In this section, we use the XMLHttpRequestobject to create and manage asynchronous re-quests. This object, whichresides on the client, is the layerbetween the client andthe serv-er that manages asynchronous requests in Ajax applications. It’s supported on most browsers, though they may implement it differently—a common issue with browsers. To initiate an asynchronous request (shown in Fig. 16.5), you create an instance of the XML-HttpRequestobject, then use its openmethod to set up the request and its sendmethod to initiate the request. We summarize the XMLHttpRequestproperties and methods in Figs. 16.6–16.7.
Figure 16.5 presents an Ajax application in which the user interacts with the page by moving the mouse over book-cover images; a detailed code walkthrough follows the figure. We use the mouseoverand mouseoutevents to trigger events when the user moves themouseoverandoutofanimage,respectively.Themouseovereventcallsfunctionget-Contentwith the URL of the document containing the book’s description. The function makes  this  request  asynchronously  using  an  XMLHttpRequest object.  When  the XMLHttpRequestobject receives the response, the book description is displayed below the book images. When the user moves the mouse out of the image, the mouseoutevent calls function clearContentto clear the display box. These tasks are accomplished without reloading  the  page  on  the  client.  You  can  test-drive  this  example  at  http:// test.deitel.com/iw3htp5/ch16/fig16_05/SwitchContent.html.

Performance Tip 16.1
When an Ajax application requests a file from a server, such as an HTML5 document or an image, the browser typically caches that file. Subsequent requests for the same file can load it from the browser’s cache rather than making the round trip to the server again.
578	Chapter16 Ajax-EnabledRichInternetApplicationswithXMLandJSON


Software Engineering Observation 16.1
For security purposes, the XMLHttpRequestobject doesn’t allow a web application to re-quest resources from domains other than the one that served the application. For this rea-son, the web application and its resources must reside on the same web server (this could be a web server on your local computer).This is commonly known as the same origin pol-icy (SOP). SOP aims to close a vulnerability called cross-site scripting, also known as XSS, which allows an attacker to compromise a website’s security by injecting a malicious script onto the page from another domain. To get content from another domain securely, you can implement a server-side proxy—an application on the web application’s web server—that can make requests to other servers on the web application’s behalf.

16.4.1 Asynchronous Requests
The function getContent(lines 46–63) sends the asynchronous request. Line 51 creates theXMLHttpRequestobject, whichmanagestheasynchronousrequest.Westoretheobject in the global variable asyncRequest(declared at line 13) so that it can be accessed any-where in the script. You can test this web page at test.deitel.com/iw3htp5/ch16/ fig16_05/SwitchContent.html.
Line 56 calls the XMLHttpRequest open method to prepare an asynchronous GET request. In this example, the urlparameter specifies the address of an HTML document containing the description of a particular book. When the third argument is true, the request is asynchronous. The URL is passed to function getContentin response to the onmouseoverevent for each image. Line 57 sends the asynchronous request to the server by calling the XMLHttpRequest send method. The argument null indicates that this request is not submitting data in the body of the request.

1  <!DOCTYPE html> 2
3  <!-- Fig. 16.5: SwitchContent.html -->
4  <!-- Asynchronously display content without reloading the page. --> 5  <html>
6  <head>
7	<meta charset = "utf-8"> 8	<style type = "text/css">
9	.box { border: 1px solid black; padding: 10px } 10     </style>
11	<title>Switch Content Asynchronously</title> 12	<script>
13	var asyncRequest; // variable to hold XMLHttpRequest object 14
15	// set up event handlers
16	function registerListeners() 17	{
18	var img;
19	img = document.getElementById( "cpphtp" ); 20	img.addEventListener( "mouseover",
21	function() { getContent( "cpphtp8.html" ); }, false ); 22            img.addEventListener( "mouseout", clearContent, false );
23	img = document.getElementById( "iw3htp" );

Fig. 16.5  | Asynchronouslydisplaycontentwithoutreloadingthepage.(Part1of4.)
16.4 “Raw”AjaxExampleUsingtheXMLHttpRequestObject   579


24	img.addEventListener( "mouseover",
25	function() { getContent( "iw3htp.html" ); }, false ); 26            img.addEventListener( "mouseout", clearContent, false ); 27            img = document.getElementById( "jhtp" );
28	img.addEventListener( "mouseover",
29	function() { getContent( "jhtp.html" ); }, false ); 30            img.addEventListener( "mouseout", clearContent, false ); 31            img = document.getElementById( "vbhtp" );
32	img.addEventListener( "mouseover",
33	function() { getContent( "vbhtp.html" ); }, false ); 34            img.addEventListener( "mouseout", clearContent, false ); 35            img = document.getElementById( "vcshtp" );
36	img.addEventListener( "mouseover",
37	function() { getContent( "vcshtp.html" ); }, false ); 38            img.addEventListener( "mouseout", clearContent, false ); 39            img = document.getElementById( "javafp" );
40	img.addEventListener( "mouseover",
41	function() { getContent( "javafp.html" ); }, false ); 42            img.addEventListener( "mouseout", clearContent, false ); 43         } // end function registerListeners
44
45	// set up and send the asynchronous request. 46	function getContent( url )
47	{
48	// attempt to create XMLHttpRequest object and make the request 49	try
50	{
51	asyncRequest = new XMLHttpRequest(); // create request object 52
53	// register event handler
54	asyncRequest.addEventListener(
55	"readystatechange", stateChange, false);
56	asyncRequest.open( "GET", url, true ); // prepare the request 57	asyncRequest.send( null ); // send the request
58	} // end try
59	catch ( exception ) 60	{
61	alert( "Request failed." ); 62            } // end catch
63	} // end function getContent 64
65	// displays the response data on the page 66	function stateChange()
67	{
68	if ( asyncRequest.readyState == 4 && asyncRequest.status == 200 ) 69	{
70	document.getElementById( "contentArea" ).innerHTML =
71	asyncRequest.responseText; // places text in contentArea 72            } // end if
73	} // end function stateChange
74

Fig. 16.5  | Asynchronouslydisplaycontentwithoutreloadingthepage.(Part2of4.)
580	Chapter16 Ajax-EnabledRichInternetApplicationswithXMLandJSON


75	// clear the content of the box 76	function clearContent()
77	{
78	document.getElementById( "contentArea" ).innerHTML = ""; 79         } // end function clearContent
80
81	window.addEventListener( "load", registerListeners, false ); 82     </script>
83  </head> 84  <body>
85	<h1>Mouse over a book for more information.</h1>
86	<img id = "cpphtp" alt = "C++ How to Program book cover"
87	src = "http://test.deitel.com/images/thumbs/cpphtp8.jpg">
88	<img id = "iw3htp" alt = "Internet & WWW How to Program book cover" 89         src = "http://test.deitel.com/images/thumbs/iw3htp5.jpg">
90	<img id = "jhtp" alt = "Java How to Program book cover"
91	src = "http://test.deitel.com/images/thumbs/jhtp9.jpg">
92	<img id = "vbhtp" alt = "Visual Basic 2010 How to Program book cover" 93         src = "http://test.deitel.com/images/thumbs/vb2010htp.jpg">
94	<img id = "vcshtp" alt = "Visual C# 2010 How to Program book cover" 95         src = "http://test.deitel.com/images/thumbs/vcsharp2010htp.jpg"> 96	<img id = "javafp" alt = "Java for Programmers book cover"
97	src = "http://test.deitel.com/images/thumbs/javafp.jpg"> 98     <div class = "box" id = "contentArea"></div>
99  </body>
100 </html>

a)UserhoversoverC++ How to Program book-coverimage,causinganasynchronousrequesttotheservertoobtainthe book’sdescription.Whentheresponseisreceived,theapplicationperformsapartial page update todisplaythedescription.







mousecursor













Fig. 16.5  | Asynchronouslydisplaycontentwithoutreloadingthepage.(Part3of4.)
16.4 “Raw”AjaxExampleUsingtheXMLHttpRequestObject   581


b)UserhoversoverInternet & World Wide Web How to Program book-coverimage,causingtheprocesstorepeat.









mousecursor












Fig. 16.5  | Asynchronouslydisplaycontentwithoutreloadingthepage.(Part4of4.)


16.4.2 Exception Handling
Lines59–62 introduceexception handling.Anexceptionisanindicationofaproblemthat occursduringaprogram’sexecution.Thename “exception”impliesthattheproblemoccurs infrequently. Exception handling enables you to create applications that can handle (i.e., re-solve) exceptions—often allowing a program to continue executing as if no problem had been encountered.
Lines 49–58 contain a tryblock, which encloses the code that might cause an excep-tion and the code that should not execute if an exception occurs (i.e., if an exception occurs in a statement of the tryblock, the remaining code in the tryblock is skipped). A tryblock consists of the keyword tryfollowed by a block of code enclosed in curly braces ({}). If there’s a problem sending the request—e.g., if a user tries to access the page using anolderbrowserthatdoesnotsupportXMLHttpRequest—thetryblockterminatesimme-diately and a catchblock (also called a catchclause or exception handler) catches (i.e., receives) and handles the exception. The catchblock (lines 59–62) begins with the key-word catchand is followed by a parameter in parentheses—called the exception param-eter—and a block of code enclosed in curly braces. The exception parameter’s name (exceptionin this example) enables the catchblock to interact with a caught exception object (for example, to obtain the name of the exception or an exception-specific error mes-sage via the exception object’s nameand messageproperties, respectively). In this case, we simply display our own error message "RequestFailed"and terminate the getContent
582	Chapter16 Ajax-EnabledRichInternetApplicationswithXMLandJSON


function. The request can fail because a user accesses the web page with an older browser or the content that’s being requested is located on a different domain.

16.4.3 Callback Functions
The stateChangefunction (lines 66–73) is the callback function that’s called when the client receives the response data. Lines 54–55 register function stateChangeas the event handler for the XMLHttpRequestobject’s readystatechangeevent. Whenever the request makes progress, the XMLHttpRequestobject calls the readystatechangeevent handler. This progress is monitored by the readyStateproperty, which has a value from 0 to 4. The value 0 indicates that the request is not initialized and the value 4 indicates that the request is complete—all the values for this property are summarized in Fig. 16.6. If the re-quest completes successfully (line 68), lines 70–71 use the XMLHttpRequest object’s responseTextproperty to obtain the response data and place it in the divelement named contentArea(defined at line 98). We use the DOM’s getElementByIdmethod to get this divelement, and use the element’s innerHTMLproperty to place the content in the div.

16.4.4 XMLHttpRequestObject Event, Properties and Methods
Figures 16.6 and 16.7 summarize some of the XMLHttpRequestobject’s properties and methods, respectively. The properties are crucial to interacting with asynchronous re-quests. The methods initialize, configure and send asynchronous requests.



EventorProperty

readystatechange

readyState





responseText
responseXML



status




statusText

Description

Register a listener for this event to specify the callback function—the event handler that gets called when the server responds.
Keeps track of the request’s progress. It’s usually used in the callback function to determine when the code that processes the response should be launched. The readyStatevalue 0signifies that the request is unini-tialized; 1that the request is loading; 2that the request has been loaded; 3that data is actively being sent from the server; and 4that the request has been completed.
Text that’s returned to the client by the server.
If the server’s response is in XML format, this property contains the XML document; otherwise, it’s empty. It can be used like a document object in JavaScript, which makes it useful for receiving complex data (e.g., populating a table).
HTTP status code of the request. A statusof 200means that request was successful. A statusof 404means that the requested resource was not found. A status of 500denotes that there was an error while the server was processing the request. For a complete status reference, visit www.w3.org/ Protocols/rfc2616/rfc2616-sec10.html.
Additional information on the request’s status. It’s often used to display the error to the user when the request fails.


Fig. 16.6 | XMLHttpRequestobjecteventandproperties.
16.5 UsingXMLandtheDOM	583



Method

open





send


setRequestHeader

getResponseHeader


getAllResponseHeaders

abort

Description

Initializes the request and has two mandatory parameters—method and URL. The method parameter specifies the purpose of the request—typically GETor POS. The URL parameter specifies the address of the file on the server that will generate the response. A third optional Boolean parameter specifies whether the request is asynchronous—it’s set to trueby default.
T
Sends the request to the server. It has one optional parameter, data, which specifies the data to be POSTed to the server—it’s set to null by default.
Alters the request header. The two parameters specify the header and its new value. It’s often used to set the content-typefield.
Returns the header data that precedes the response body. It takes one parameter, the name of the header to retrieve. This call is often used to determine the response’s type, to parse the response correctly.
Returns an array that contains all the headers that precede the response body.
Cancels the current request.


Fig. 16.7  | XMLHttpRequestobjectmethods.

16.5 Using XML and the DOM
When passing structured data between the server and the client, Ajax applications often use XML because it’s easy to generate and parse. When the XMLHttpRequestobject re-ceivesXML data,itparsesandstoresthedataasanXML DOMobjectintheresponseXML property. The example in Fig. 16.8 asynchronously requests from a server XML docu-ments containing URLs of book-cover images, then displays the images in the page. The code that configures the asynchronous request is the same as in Fig. 16.5. You can test-drive this application at

http://test.deitel.com/iw3htp5/ch16/fig16_08/PullImagesOntoPage.html


1  <!DOCTYPE html> 2
3  <!-- Fig. 16.8: PullImagesOntoPage.html -->
4  <!-- Image catalog that uses 1Ajax to request XML data asynchronously. --> 5  <html>
6  <head>
7  <meta charset="utf-8">
8  <title> Pulling Images onto the Page </title> 9  <style type = "text/css">
10	li { display: inline-block; padding: 4px; width: 120px; } 11	img { border: 1px solid black }
12  </style>

Fig. 16.8  | ImagecatalogthatusesAjaxtorequestXMLdataasynchronously.(Part1of4.)
584	Chapter16 Ajax-EnabledRichInternetApplicationswithXMLandJSON


13  <script>
14	var asyncRequest; // variable to hold XMLHttpRequest object 15
16	// set up and send the asynchronous request to get the XML file 17	function getImages( url )
18	{
19	// attempt to create XMLHttpRequest object and make the request 20	try
21	{
22	asyncRequest = new XMLHttpRequest(); // create request object 23
24	// register event handler
25	asyncRequest.addEventListener(
26	"readystatechange", processResponse, false);
27	asyncRequest.open( "GET", url, true ); // prepare the request 28	asyncRequest.send( null ); // send the request
29	} // end try
30	catch ( exception ) 31	{
32	alert( 'Request Failed' ); 33         } // end catch
34	} // end function getImages 35
36	// parses the XML response; dynamically creates an undordered list and 37	// populates it with the response data; displays the list on the page 38	function processResponse()
39	{
40	// if request completed successfully and responseXML is non-null 41	if ( asyncRequest.readyState == 4 && asyncRequest.status == 200 && 42            asyncRequest.responseXML )
43	{
44	clearImages(); // prepare to display a new set of images 45
46	// get the covers from the responseXML
47	var covers = asyncRequest.responseXML.getElementsByTagName( 48               "cover" )
49
50	// get base URL for the images
51	var baseUrl = asyncRequest.responseXML.getElementsByTagName( 52               "baseurl" ).item( 0 ).firstChild.nodeValue;
53
54	// get the placeholder div element named covers 55	var output = document.getElementById( "covers" ); 56
57	// create an unordered list to display the images 58	var imagesUL = document.createElement( "ul" );
59
60	// place images in unordered list
61	for ( var i = 0; i < covers.length; ++i ) 62	{
63	var cover = covers.item( i ); // get a cover from covers array
64

Fig. 16.8  | ImagecatalogthatusesAjaxtorequestXMLdataasynchronously.(Part2of4.)
16.5 UsingXMLandtheDOM	585


65	// get the image filename
66	var image = cover.getElementsByTagName( "image" ). 67                  item( 0 ).firstChild.nodeValue;
68
69	// create li and img element to display the image 70	var imageLI = document.createElement( "li" );
71	var imageTag = document.createElement( "img" ); 72
73	// set img element's src attribute
74	imageTag.setAttribute( "src", baseUrl + escape( image ) ); 75	imageLI.appendChild( imageTag ); // place img in li
76	imagesUL.appendChild( imageLI ); // place li in ul 77            } // end for statement
78
79	output.appendChild( imagesUL ); // append ul to covers div 80         } // end if
81	} // end function processResponse 82
83	// clears the covers div 84	function clearImages() 85	{
86	document.getElementById( "covers" ).innerHTML = ""; 87     } // end function clearImages
88
89	// register event listeners 90	function registerListeners() 91	{
92	document.getElementById( "all" ).addEventListener(
93	"click", function() { getImages( "all.xml" ); }, false ); 94         document.getElementById( "simply" ).addEventListener(
95	"click", function() { getImages( "simply.xml" ); }, false ); 96         document.getElementById( "howto" ).addEventListener(
97	"click", function() { getImages( "howto.xml" ); }, false ); 98         document.getElementById( "dotnet" ).addEventListener(
99	"click", function() { getImages( "dotnet.xml" ); }, false ); 100        document.getElementById( "javaccpp" ).addEventListener(
101	"click", function() { getImages( "javaccpp.xml" ); }, false ); 102        document.getElementById( "none" ).addEventListener(
103	"click", clearImages, false ); 104     } // end function registerListeners 105
106	window.addEventListener( "load", registerListeners, false ); 107	</script>
108 </head> 109 <body>
110	<input type = "radio" name ="Books" value = "all" 111        id = "all"> All Books
112	<input type = "radio" name = "Books" value = "simply" 113        id = "simply"> Simply Books
114	<input type = "radio" name = "Books" value = "howto" 115        id = "howto"> How to Program Books
116	<input type = "radio" name = "Books" value = "dotnet"
117	id = "dotnet"> .NET Books

Fig. 16.8  | ImagecatalogthatusesAjaxtorequestXMLdataasynchronously.(Part3of4.)
586	Chapter16 Ajax-EnabledRichInternetApplicationswithXMLandJSON


118	<input type = "radio" name = "Books" value = "javaccpp" 119        id = "javaccpp"> Java/C/C++ Books
120	<input type = "radio" checked name = "Books" value = "none" 121        id = "none"> None
122	<div id = "covers"></div> 123 </body>
124 </html>

a)UserclickstheAll Books radiobuttontodisplayallthebookcovers.Theapplicationsendsanasynchronous requestto theservertoobtainanXMLdocumentcontainingthelistofbook-coverfilenames.Whentheresponseisreceived,the applicationperformsapartial page update todisplaythesetofbookcovers.


















b)UserclickstheHow to Program Books radiobuttontoselectasubsetofbookcoverstodisplay.Applicationsendsan asynchronous requesttotheservertoobtainanXMLdocumentcontainingtheappropriatesubsetofbook-coverfilenames. Whentheresponseisreceived,theapplicationperformsapartial page update todisplaythesubsetofbookcovers.












Fig. 16.8  | ImagecatalogthatusesAjaxtorequestXMLdataasynchronously.(Part4of4.)

When the XMLHttpRequestobject receives the response, it invokes the callback func-tion processResponse (lines 38–81). We use XMLHttpRequest object’s responseXML property to access the XML returnedby theserver. Lines 41–42 check that the request was
16.6 CreatingaFull-ScaleAjax-EnabledApplication   587


successful and that the responseXML property is not empty. The XML file that we requested includes a baseURLnode that contains the address of the image directory and a collection of cover nodes that contain image filenames. responseXML is a document object, so we can extract data from it using the XML DOM functions. Lines 47–52 use the DOM’s method getElementsByTagNameto extract all the image filenames from cover nodes and the URL of the directory from the baseURLnode. Since the baseURLhas no childnodes,weuseitem(0).firstChild.nodeValuetoobtain thedirectory’saddressand store it in variable baseURL. The image filenames are stored in the coversarray.
As in Fig. 16.5 we have a placeholder divelement (line 122) to specify where the image table will be displayed on the page. Line 55 stores the divin variable output, so we can fill it with content later in the program.
Lines 58–77 generate an HTML5 unordered list dynamically, using the createEle-ment, setAttributeandappendChildHTML5 DOM methods. MethodcreateElement creates an HTML5 element of the specified type. Method appendChild inserts one HTML5 element into another. Line 58 creates the ulelement. Each iteration of the for statement obtains the filename of the image to be inserted (lines 63–67), creates an liele-ment to hold the image (line 70) and creates an <img>element (line 71). Line 74 sets the image’s srcattribute to the image’s URL, which we build by concatenating the filename tothe base URL of the HTML5 document. Lines 75–76 insert the<img>element into the lielement andthelielement intotheulelement. Onceallthe images havebeen inserted into the unordered list, the list is inserted into the placeholder element coversthat’s ref-erenced by variable output(line 79). This element is located on the bottom of the web page.
Function clearImages(lines 84–87) is called to clear images when the user clicks the None radio button. The text is cleared by setting the innerHTMLproperty of the place-holder element to an empty string.


16.6 Creating a Full-Scale Ajax-Enabled Application
OurnextexampledemonstratesadditionalAjaxcapabilities.Thewebapplicationinteracts with a web service to obtain data and to modify data in a server-side database. The web application and server communicate with a data format called JSON (JavaScript Object Notation). In addition, the application demonstrates server-side validation that occurs in parallel with the user interacting with the web application. You can test-drive the applica-tion at http://test.deitel.com/iw3htp5/ch16/fig16_09-10/AddressBook.html.

16.6.1 Using JSON
JSON (JavaScript Object Notation)—a simple way to represent JavaScript objects as strings—is a simpler alternative to XML for passing data between the client and the server. Each object in JSON is represented as a list of property names and values contained in curly braces, in the following format:

{ "propertyName1" : value1, "propertyName2": value2  }
Arrays are represented in JSON with square brackets in the following format: [ value1, value2, value3  ]
588	Chapter16 Ajax-EnabledRichInternetApplicationswithXMLandJSON


Each value can be a string, a number, a JSON representation of an object, true,falseor null. You can convert JSON strings into JavaScript objects with JavaScript’s JSON.parse function. JSON strings are easier to create and parse than XML and require fewer bytes. For these reasons, JSON is commonly used to communicate in client/server interaction.

16.6.2 Rich Functionality
The previous examples in thischapterrequesteddata from files on the server. The example in Figs. 16.9–16.10 is an address-book application that communicates with a server-side web service. The application uses server-side processing to give the page the functionality and usability of a desktop application. We use JSON to encode server-side responses and to create objects on the fly. Figure 16.9 presents the HTML5 document. Figure 16.10 presents the JavaScript.
Initially the address book loads a list of entries, each containing a first and last name (Fig. 16.9(a)). Each time the user clicks a name, the address book uses Ajax functionality toloadtheperson’saddressfrom theserverandexpandtheentrywithout reloading thepage (Fig. 16.9(b))—and it does this in parallel with allowing the user to click other names.
The application allows the user to search the address book by typing a last name. As the user enters each keystroke, the application asynchronously calls the server to obtain the list of names in which the last name starts with the characters the user has entered so far (Fig. 16.9(c), (d) and (e))—a popular feature called type-ahead.
The application also enables the user to add another entry to the address book by clicking the Add an Entry button (Fig. 16.9(f)). The application displays a form that enables live field validation.
As the user fills out the form, the ZIP code is eventually entered, and when the user tabs to the next field, the blurevent handler for the ZIP-code field makes an Ajax call to the server. The server then validates the ZIP code, uses the valid zip code to obtain the corresponding city and state from a ZIP-code web service and returns this information to the client (Fig. 16.9(g). [If the ZIP code were invalid, the web service would return an error to the server, which would then send an error message back to the client.]
WhentheuserentersthetelephonenumberandmovesthecursoroutoftheTelephone: field, the blurevent handler for that field uses an Ajax call to the server to validate the tele-phone number—if it were invalid, the server would return an error message to the client.
When the Submit button is clicked, the button’s event handler determines that some required data is missing and displays the message "First Name and Last Name must have a value." at the bottom of the screen (Fig. 16.9(h)). The user enters the missing data and clicks Submit again (Fig. 16.9(i)). The client-side code revalidates the data, determines that it’s correct and sends it to the server. The server performs its own validation, then returns the updated address book, which is displayed on the client, with the new name added in (Fig. 16.9(j)).

1  <!DOCTYPE html> 2
3  <!-- Fig. 16.9 addressbook.html -->
4  <!-- Ajax enabled address book application. -->

Fig. 16.9  | Ajax-enabledaddress-bookapplication.(Part1of4.)
16.6 CreatingaFull-ScaleAjax-EnabledApplication   589


5  <html> 6  <head>
7	<meta charset="utf-8">
8	<title>Address Book</title>
9	<link rel = "stylesheet" type = "text/css" href = "style.css"> 10	<script src = "AddressBook.js"></script>
11  </head> 12  <body> 13	<div>
14	<input id = "addressBookButton" type = "button" 15            value = "Address Book">
16	<input id = "addEntryButton" type = "button" 17            value = "Add an Entry">
18	</div>
19	<div id = "addressBook"">
20	<p>Search By Last Name: <input id = "searchInput"></p> 21	<div id = "Names"></div>
22	</div>
23	<div id = "addEntry" style = "display : none">
24	<p><label>First Name:</label> <input id = "first"></p> 25	<p><label>Last Name:</label> <input id = "last"></p> 26	<p class = "head">Address:</p>
27	<p><label>Street:</label> <input id = "street"></p>
28	<p><label>City:</label> <span id = "city" class = "validator"> 29            </span></p>
30	<p><label>State:</label> <span id = "state" class = "validator"> 31            </span></p>
32	<p><label>Zip:</label> <input id = "zip">
33	<span id = "validateZip" class = "validator"></span></p> 34         <p><label>Telephone:</label> <input id = "phone">
35	<span id = "validatePhone" class = "validator"></span></p>
36	<p><input id = "submitButton" type = "button" value = "Submit"></p> 37	<div id = "success" class = "validator"></div>
38	</div> 39  </body>
40  </html>
a)Pageisloaded.Alltheentriesaredisplayed.	b)Userclicksonanentry.Theentryexpands,showing theaddressandthetelephone.













Fig. 16.9  | Ajax-enabledaddress-bookapplication.(Part2of4.)
590	Chapter16 Ajax-EnabledRichInternetApplicationswithXMLandJSON




c)Usertypes"B"inthesearchfield.Applicationloads theentrieswhoselastnamesstartwith"B".













e)Usertypes"Bla"inthesearchfield.Application loadstheentrieswhoselastnamesstartwith"Bla".













g)UserentersavalidZIPcode,thentabstothenext field.Theserverfindsthecityandstateassociatedwith theZIPcodeenteredanddisplaysthemonthepage.

d)Usertypes"Bl"inthesearchfield.Application loadstheentrieswhoselastnamesstartwith"Bl".













f)UserclicksAdd an Entry button.Theform allowingusertoaddanentryisdisplayed.













h)Theuserentersatelephonenumberandtriesto submitthedata.Theapplicationdoesnotallowthis, becausetheFirstNameandLastNameareempty.














Fig. 16.9  | Ajax-enabledaddress-bookapplication.(Part3of4.)
16.6 CreatingaFull-ScaleAjax-EnabledApplication   591



i)Theuserentersthelastnameandthefirstname andclickstheSubmit button.

j)Theaddressbookisredisplayedwiththenewname addedin.














Fig. 16.9  | Ajax-enabledaddress-bookapplication.(Part4of4.)

1  // Fig. 16.10 addressbook.js
2  // Ajax-enabled address-book JavaScript code 3  // URL of the web service
4  var webServiceUrl = "/AddressBookWebService/Service.svc"; 5
6  var phoneValid = false; // indicates if the telephone is valid 7  var zipValid = false; //indicates if the ZIP code is valid
8
9  // get a list of names from the server and display them 10  function showAddressBook()
11  {
12	// hide the "addEntry" form and show the address book
13	document.getElementById( "addEntry" ).style.display = "none";
14	document.getElementById( "addressBook" ).style.display = "block"; 15
16	callWebService( "/getAllNames", parseData ); 17  } // end function showAddressBook
18
19  // send the asynchronous request to the web service
20  function callWebService( methodAndArguments, callBack ) 21  {
22	// build request URL string
23	var requestUrl = webServiceUrl + methodAndArguments; 24
25	// attempt to send the asynchronous request 26	try
27	{
28	var asyncRequest = new XMLHttpRequest(); // create request 29
30	// set up callback function and store it
31	asyncRequest.addEventListener("readystatechange",
32	function() { callBack( asyncRequest ); }, false);

Fig. 16.10 | JavaScriptcodefortheaddress-bookapplication.(Part1of6.)
592	Chapter16 Ajax-EnabledRichInternetApplicationswithXMLandJSON


33
34	// send the asynchronous request
35	asyncRequest.open( "GET", requestUrl, true ); 36	asyncRequest.setRequestHeader("Accept",
37	"application/json; charset=utf-8" ); 38         asyncRequest.send(); // send request 39     } // end try
40	catch ( exception ) 41	{
42	alert ( "Request Failed" ); 43     } // end catch
44  } // end function callWebService 45
46  // parse JSON data and display it on the page 47  function parseData( asyncRequest )
48  {
49	// if request has completed successfully, process the response 50	if ( asyncRequest.readyState == 4 && asyncRequest.status == 200 ) 51	{
52	// convert the JSON string to an Object
53	var data = JSON.parse(asyncRequest.responseText); 54	displayNames( data ); // display data on the page 55     } // end if
56  } // end function parseData 57
58  // use the DOM to display the retrieved address-book entries 59  function displayNames( data )
60  {
61	// get the placeholder element from the page
62	var listBox = document.getElementById( "Names" );
63	listBox.innerHTML = ""; // clear the names on the page 64
65	// iterate over retrieved entries and display them on the page 66	for ( var i = 0; i < data.length; ++i )
67	{
68	// dynamically create a div element for each entry 69	// and a fieldset element to place it in
70	var entry = document.createElement( "div" );
71	var field = document.createElement( "fieldset" );
72	entry.onclick = function() { getAddress( this, this.innerHTML ); }; 73	entry.id = i; // set the id
74	entry.innerHTML = data[ i ].First + " " + data[ i ].Last; 75	field.appendChild( entry ); // insert entry into the field 76	listBox.appendChild( field ); // display the field
77	} // end for
78  } // end function displayAll 79
80  // search the address book for input 81  // and display the results on the page 82  function search( input )
83  {
84	// get the placeholder element and delete its content
85	var listBox = document.getElementById( "Names" );

Fig. 16.10 | JavaScriptcodefortheaddress-bookapplication.(Part2of6.)
16.6 CreatingaFull-ScaleAjax-EnabledApplication   593


86	listBox.innerHTML = ""; // clear the display box 87
88	// if no search string is specified, all the names are displayed 89	if ( input == "" ) // if no search value specified
90	{
91	showAddressBook(); // Load the entire address book 92     } // end if
93	else 94	{
95	callWebService( "/search/" + input, parseData ); 96     } // end else
97  } // end function search 98
99  // Get address data for a specific entry 100 function getAddress( entry, name )
101 {
102	// find the address in the JSON data using the element's id 103	// and display it on the page
104	var firstLast = name.split(" "); // convert string to array 105	var requestUrl = webServiceUrl + "/getAddress/"
106	+ firstLast[ 0 ] + "/" + firstLast[ 1 ]; 107
108	// attempt to send an asynchronous request 109	try
110	{
111	// create request object
112	var asyncRequest = new XMLHttpRequest(); 113
114	// create a callback function with 2 parameters 115	asyncRequest.addEventListener("readystatechange",
116	function() { displayAddress( entry, asyncRequest ); }, false); 117
118	asyncRequest.open( "GET", requestUrl, true ); 119	asyncRequest.setRequestHeader("Accept",
120	"application/json; charset=utf-8"); // set response datatype 121        asyncRequest.send(); // send request
122	} // end try
123	catch ( exception ) 124	{
125	alert ( "Request Failed." ); 126     } // end catch
127 } // end function getAddress 128
129 // clear the entry's data
130 function displayAddress( entry, asyncRequest ) 131 {
132	// if request has completed successfully, process the response 133	if ( asyncRequest.readyState == 4 && asyncRequest.status == 200 ) 134	{
135	// convert the JSON string to an object
136	var data = JSON.parse(asyncRequest.responseText); 137	var name = entry.innerHTML // save the name string
138	entry.innerHTML = name + "<br>" + data.Street +

Fig. 16.10 | JavaScriptcodefortheaddress-bookapplication.(Part3of6.)
594	Chapter16 Ajax-EnabledRichInternetApplicationswithXMLandJSON


139	"<br>" + data.City + ", " + data.State
140	+ ", " + data.Zip + "<br>" + data.Telephone; 141
142	// change event listener
143	entry.onclick = function() { clearField( entry, name ); }; 144      } // end if
145 } // end function displayAddress 146
147 // clear the entry's data
148 function clearField( entry, name ) 149 {
150	entry.innerHTML = name; // set the entry to display only the name 151	entry.onclick = function() { getAddress( entry, name ); };
152 } // end function clearField 153
154 // display the form that allows the user to enter more data 155 function addEntry()
156 {
157	document.getElementById( "addressBook" ).style.display = "none"; 158	document.getElementById( "addEntry" ).style.display = "block"; 159 } // end function addEntry
160
161 // send the ZIP code to be validated and to generate city and state 162 function validateZip( zip )
163 {
164	callWebService ( "/validateZip/" + zip, showCityState ); 165 } // end function validateZip
166
167 // get city and state that were generated using the zip code 168 // and display them on the page
169 function showCityState( asyncRequest ) 170 {
171	// display message while request is being processed 172	document.getElementById( "validateZip" ).
173	innerHTML = "Checking zip..."; 174
175	// if request has completed successfully, process the response 176	if ( asyncRequest.readyState == 4 )
177	{
178	if ( asyncRequest.status == 200 ) 179	{
180	// convert the JSON string to an object
181	var data = JSON.parse(asyncRequest.responseText); 182
183	// update ZIP-code validity tracker and show city and state 184	if ( data.Validity == "Valid" )
185	{
186	zipValid = true; // update validity tracker 187
188	// display city and state
189              document.getElementById( "validateZip" ).innerHTML = ""; 190              document.getElementById( "city" ).innerHTML = data.City;
191	document.getElementById( "state" ).

Fig. 16.10 | JavaScriptcodefortheaddress-bookapplication.(Part4of6.)
16.6 CreatingaFull-ScaleAjax-EnabledApplication   595


192	innerHTML = data.State; 193           } // end if
194	else 195	{
196	zipValid = false; // update validity tracker 197	document.getElementById( "validateZip" ).
198	innerHTML = data.ErrorText; // display the error 199
200	// clear city and state values if they exist
201	document.getElementById( "city" ).innerHTML = ""; 202	document.getElementById( "state" ).innerHTML = ""; 203           } // end else
204	} // end if
205	else if ( asyncRequest.status == 500 ) 206	{
207	document.getElementById( "validateZip" ).
208	innerHTML = "Zip validation service not avaliable"; 209        } // end else if
210	} // end if
211 } // end function showCityState 212
213 // send the telephone number to the server to validate format 214 function validatePhone( phone )
215 {
216	callWebService( "/validateTel/" + phone, showPhoneError ); 217 } // end function validatePhone
218
219 // show whether the telephone number has correct format 220 function showPhoneError( asyncRequest )
221 {
222	// if request has completed successfully, process the response 223	if ( asyncRequest.readyState == 4 && asyncRequest.status == 200 ) 224	{
225	// convert the JSON string to an object
226	var data = JSON.parse(asyncRequest.responseText); 227
228	if ( data.ErrorText != "Valid Telephone Format" ) 229	{
230	phoneValid = false; // update validity tracker
231	document.getElementById( "validatePhone" ).innerHTML = 232              data.ErrorText; // display the error
233	} // end if 234	else
235	{
236	phoneValid = true; // update validity tracker 237        } // end else
238	} // end if
239 } // end function showPhoneError 240
241 // enter the user's data into the database 242 function saveForm()
243 {
244	// retrieve the data from the form

Fig. 16.10 | JavaScriptcodefortheaddress-bookapplication.(Part5of6.)
596	Chapter16 Ajax-EnabledRichInternetApplicationswithXMLandJSON


245	var first = document.getElementById( "first" ).value; 246	var last = document.getElementById( "last" ).value; 247	var street = document.getElementById( "street" ).value; 248	var city = document.getElementById( "city" ).innerHTML;
249	var state = document.getElementById( "state" ).innerHTML; 250	var zip = document.getElementById( "zip" ).value;
251	var phone = document.getElementById( "phone" ).value; 252
253	// check if data is valid
254	if ( !zipValid || !phoneValid  ) 255	{
256	// display error message
257	document.getElementById( "success" ).innerHTML =
258	"Invalid data entered. Check form for more information"; 259     } // end if
260	else if ( ( first == "" ) || ( last == "" ) ) 261	{
262	// display error message
263	document.getElementById("success").innerHTML = 264           "First Name and Last Name must have a value."; 265     } // end if
266	else 267	{
268	// hide the form and show the address book
269	document.getElementById( "addEntry" ).style.display = "none"; 270	document.getElementById( "addressBook" ).style.display = "block"; 271
272	// call the web service to insert data into the database
273	callWebService( "/addEntry/" + first + "/" + last + "/" + street + 274           "/" + city + "/" + state + "/" + zip + "/" + phone, parseData ); 275     } // end else
276 } // end function saveForm 277
278 // register event listeners 279 function start()
280 {
281	document.getElementById( "addressBookButton" ).addEventListener( 282        "click", showAddressBook, false );
283	document.getElementById( "addEntryButton" ).addEventListener( 284        "click", addEntry, false );
285	document.getElementById( "searchInput" ).addEventListener( 286        "keyup", function() { search( this.value ); } , false ); 287	document.getElementById( "zip" ).addEventListener(
288	"blur", function() { validateZip( this.value ); } , false ); 289     document.getElementById( "phone" ).addEventListener(
290	"blur", function() { validatePhone( this.value ); } , false ); 291     document.getElementById( "submitButton" ).addEventListener(
292	"click", saveForm , false ); 293
294	showAddressBook(); 295 } // end function start 296
297 window.addEventListener( "load", start, false );

Fig. 16.10 | JavaScriptcodefortheaddress-bookapplication.(Part6of6.)
16.6 CreatingaFull-ScaleAjax-EnabledApplication   597


16.6.3 Interacting with a Web Service on the Server
When the page loads, the loadevent (Fig. 16.10, line 297) calls the startfunction (lines 279–295) to register various event listeners and to call showAddressBook, which loads the addressbookontothepage.FunctionshowAddressBook(lines10–17)showstheaddress-Bookelement and hides the addEntryelement (lines 13–14). Then it calls function call-WebServiceto make an asynchronous request to the server (line 16). Our program uses an ASP.NET REST web service that we created for this example to do the server-side process-ing. The web service contains a collection of methods, including getAllNames, that can be called from a web application. To invoke a method you specify the web service URL fol-lowed by a forward slash (/), the name of the method to call, a forward slash and the argu-ments separated by forward slashes. Function callWebServicerequires a string containing the method to call on the server and the arguments to the method in the format described above.In thiscase, thefunctionwe’re invokingontheserverrequiresnoarguments, soline 16 passes the string "/getAllNames"as the first argument to callWebService.
Function callWebService(lines 20–44) contains the code to call our web service, givena stringcontainingtheweb-servicemethodtocallandtheargumentstothatmethod (if any), and the name of a callback function. The web-service method to call and its argu-ments are appended to the request URL (line 23). In this first call, we do not pass any parameters because the web method that returns all the entries requires none. However, future web method calls will include arguments in the methodAndArgumentsparameter. Lines 28–38 prepare and send the request, using functionality similar to that in the pre-vious two examples. There are many types of user interactions in this application, each requiring a separate asynchronous request. For this reason, we pass the appropriate asyn-cRequestobject as an argument to the function specified by the callBackparameter. However, event handlers cannot receive arguments, so lines 31–32 register an anonymous function for asyncRequest’s readystatechangeevent. When this anonymous function gets called, it calls function callBackand passes the asyncRequestobject as an argument. Lines 36–37 set an Acceptrequest header to receive JSON-formatted data.

16.6.4 Parsing JSON Data
Each of our web service’s methods in this example returns a JSON representation of an objectorarrayofobjects.For example,whenthewebapplicationrequeststhelistofnames in the address book, the list is returned  as a JSON array, as shown in Fig. 16.11. Each object in Fig. 16.11 has the attributes firstand last.

1  [ { "first": "Cheryl", "last": "Black" }, 2	{ "first": "James", "last": "Blue" }, 3	{ "first": "Mike", "last": "Brown" },
4	{ "first": "Meg", "last": "Gold" } ]

Fig. 16.11 | Address-bookdataformattedinJSON.

When the XMLHttpRequestobject receives the response, it calls function parseData (Fig. 16.10, lines 47–56). Line 53 calls the JSON.parse function, which converts the JSON string into a JavaScript object. Then line 54 calls function displayNames(lines 59– 78), which displays the first and last name of each address-book entry passed to it. Lines
598	Chapter16 Ajax-EnabledRichInternetApplicationswithXMLandJSON


62–63 use the HTML5 DOM to store the placeholder divelement Namesin the variable listbox and clear its content. Once parsed, the JSON string of address-book entries becomes an array, which this function traverses (lines 66–77).

16.6.5 Creating HTML5 Elements and Setting Event Handlers on the Fly
Line 71 uses an HTML5 fieldsetelement to create a box in which the entry will be placed. Line 72 registers an anonymous function that calls getAddressas the onclick event handler for the divcreated in line 70. This enables the user to expand each address-book entry by clicking it. The arguments to getAddressare generated dynamically and not evaluated until the getAddressfunction is called. This enables each function to re-ceive arguments that are specific to the entry the user clicked. Line 74 displays the names on the page by accessing the first(first name) and last(last name) fields of each element ofthedataarray.Todeterminewhichaddresstheuserclicked,weintroducethethiskey-word. The meaning of thisdepends on its context. In an event-handling function, this refers to the DOM object on which the event occurred. Our function uses thisto refer to the clicked entry. The thiskeyword allows us to use one event handler to apply a change to one of many DOM elements, depending on which one received the event.
Function getAddress(lines 100–127) is called when the user clicks an entry. This request must keep track of the entry where the address is to be displayed on the page. Lines 115–116 set as the callback function an anonymous function that calls displayAddress with the entryelement as an argument. Once the request completes successfully, lines 136–140 parse the response and display the addresses. Line 143 updates the div’s onclick event handler to hide the address data when that divis clicked again by the user. When the user clicks an expanded entry, function clearField(lines 148–152) is called. Lines 150–151 reset the entry’s content and its onclickevent handler to the values they had before the entry was expanded.
You’ll notice that we registered click-event handlers for the items in the fieldsetby using the onclickproperty of each item, rather than the addEventListenermethod. We did this for simplicity in this example because we want to modify the event handler for each item’s click event based on whether the item is currently displaying just the contact’s name or its complete address. Each call to addEventListeneradds another event listener to the object on which it’s called—for this example, that could result in many event lis-teners being called for one entry that the user clicks repeatedly. Using the onclickprop-erty allows you to set only one listener at a time for a paticular event, which makes it easy for us to switch event listeners as the user clicks each item in the contact list.

16.6.6 Implementing Type-Ahead
The inputelement declared in line 20 of Fig. 16.9 enables the user to search the address book by last name. As soon as the user starts typing in the input box, the keyupevent han-dler (registered at lines 285–286 in Fig. 16.10) calls the searchfunction (lines 82–97), passing the inputelement’s value as an argument. The searchfunction performs an asyn-chronousrequesttolocateentrieswithlastnamesthatstartwithitsargumentvalue.When the response is received, the application displays the matching list of names. Each time the user changes the text in the input box, function searchis called again to make another asynchronous request.
16.6 CreatingaFull-ScaleAjax-EnabledApplication   599


The searchfunction first clears the address-book entries from the page (lines 85–86). If the inputargument is the empty string, line 91 displays the entire address book by calling function showAddressBook. Otherwise line 95 sends a request to the server to search the data. Line 95 creates a string to represent the method and argument that call-WebServicewill append to the request URL. When the server responds, callback function parseDatais invoked, which calls function displayNamesto display the results on the page.


16.6.7 Implementing a Form with Asynchronous Validation
When the Add an Entry button in the HTML5 document is clicked, the addEntryfunc-tion (lines 155–159) is called, which hides the addressBookdivand shows the addEntry divthat allows the user to add a person to the address book. The addEntrydivin the HTML5 document contains a set of entry fields, some of which have event handlers (reg-istered in the JavaScript startfunction) that enable validation that occurs asynchronously as the user continues to interact with the page. When a user enters a ZIP code, then moves the cursor to another field, the validateZipfunction (lines 162–165) is called. This func-tion calls an external web service to validate the ZIP code. If it’s valid, that external web service returns the corresponding city and state. Line 164 calls the callWebServicefunc-tionwiththeappropriatemethodandargument,andspecifiesshowCityState(lines169– 211) as the callback function.
ZIP-code validation can take significant time due to network delays. The function showCityState is called every time the request object’s readyState property changes. Until the request completes, lines 172–173 display "Checkingzip..."on the page. After the request completes, line 181 converts the JSON response text to an object. The responseobject has four properties—Validity, ErrorText, CityandState. If the request isvalid,line186updatesthezipValidscriptvariablethatkeepstrackofZIP-codevalidity, and lines 189–192 show the city and state that the server generated using the ZIP code. Otherwise lines 196–198 update the zipValidvariable and show the error code. Lines 201–202 clear the city and state elements. If our web service fails to connect to the ZIP-code validator web service, lines 207–208 display an appropriate error message.
Similarly, when the user enters the telephone number, the function validatePhone (lines 214–217) sends the phone number to the server. Once the server responds, the showPhoneErrorfunction (lines 220–239) updates the validatePhonescript variable and shows the error message, if the web service returned one.
When the Submit button is clicked, the saveFormfunction is called (lines 242–276). Lines 245–251 retrieve the data from the form. Lines 254–259 check if the ZIP code and telephone number are valid, and display the appropriate error message in the Successele-ment on the bottom of the page. Before the data can be entered into a database on the server, both the first-name and last-name fields must have a value. Lines 260–265 check that these fields arenot empty and, if they’reempty, display the appropriateerrormessage. Once all the data entered is valid, lines 266–275 hide the entry form and show the address book. Lines 273–274 call function callWebServiceto invoke the addEntryfunction of our web service with the data for the new contact. Once the server saves the data, it queries the database for an updated list of entries and returns them; then function parseDatadis-plays the entries on the page.
600	Chapter16 Ajax-EnabledRichInternetApplicationswithXMLandJSON


Summary
Section 16.1 Introduction
•  Despite the tremendous technological growth of the Internet over the past decade, the usability of web applications has lagged behind that of desktop applications.
•  Rich Internet Applications (RIAs, p. 572) are web applications that approximate the look, feel andusabilityofdesktopapplications.RIAshavetwokeyattributes—performanceandrichGUI.
•  RIA performance comes from Ajax (Asynchronous JavaScript and XML, p. 572), which uses cli-ent-side scripting to make web applications more responsive.
•  Ajax applications separate client-side user interaction and server communication and run them in parallel, making the delays of server-side processing more transparent to the user.
•  “Raw” Ajax (p. 572) uses JavaScript to send asynchronous requests to the server, then updates the page using the DOM.
•  When writing “raw” Ajax you need to deal directly with cross-browser portability issues, making it impractical for developing large-scale applications.
•  Portability issues are hidden by Ajax toolkits (p. 572), which provide powerful ready-to-use con-trols and functions that enrich web applications and simplify JavaScript coding by making it cross-browser compatible.
•  We achieve rich GUI in RIAs with Ajax toolkits and with RIA environments such as Adobe’s Flex, Microsoft’s Silverlight and JavaServer Faces. Such toolkits and environments provide pow-erful ready-to-use controls and functions that enrich web applications.
•  The client-side of Ajax applications is written in HTML5 and CSS3 and uses JavaScript to add functionality to the user interface.
•  XML and JSON are used to structure the data passed between the server and the client.
•  The Ajax component that manages interaction with the server is usually implemented with Java-Script’s XMLHttpRequestobject (p. 572)—commonly abbreviated as XHR.
•  In traditional web applications, the user fills in the form’s fields, then submits the form. The browser generates a request to the server, which receives the request and processes it. The server generates and sends a response containing the exact page that the browser will render, which causes the browser to load the new page and temporarily makes the browser window blank. The client waits for the server to respond and reloads the entire page with the data from the response.
•  While a synchronous request (p. 573) is being processed on the server, the user cannot interact with the client web browser.
•  The synchronous model was originally designed for a web of hypertext documents—what some people call the “brochure web.” This model yielded “choppy” application performance.
•  In an Ajax application, when the user interacts with a page, the client creates an XMLHttpRequest object to manage a request. The XMLHttpRequestobject sends the request to and awaits the re-sponse from the server. The requests are asynchronous (p. 574), allowing the user to continue interacting with the application while the server processes the request concurrently. When the server responds, the XMLHttpRequestobject that issued the request invokes a callback function (p. 574), which typically uses partial page updates (p. 574) to display the returned data in the existing web page without reloading the entire page.
•  The callback function updates only a designated part of the page. Such partial page updates help make web applications more responsive, making them feel more like desktop applications.

Section 16.2 Rich Internet Applications (RIAs) with Ajax
•  A classic HTML5 registration form sends all of the data to be validated to the server when the user clicks the Register button. While the server is validating the data, the user cannot interact
Summary   601


with the page. The server finds invalid data, generates a new page identifying the errors in the form and sends it back to the client—which renders the page in the browser. Once the user fixes the errors and clicks the Register button, the cycle repeats until no errors are found; then the data is stored on the server. The entire page reloads every time the user submits invalid data.
•  Ajax-enabled forms are more interactive. Entries are validated dynamically as the user enters data into the fields. If a problem is found, the server sends an error message that’s asynchronously dis-played to inform the user of the problem. Sending each entry asynchronously allows the user to address invalidentries quickly,rather thanmakingedits andresubmitting theentireformrepeat-edly until all entries are valid. Asynchronous requests could also be used to fill some fields based on previous fields’ values.

Section 16.3 History of Ajax
•  The term Ajax was coined by Jesse James Garrett of Adaptive Path in February 2005, when he was presenting the previously unnamed technology to a client.
•  All of the technologies involved in Ajax (HTML5, JavaScript, CSS, dynamic HTML, the DOM and XML) had existed for many years before the term “Ajax” was coined.
•  In 1998, Microsoft introduced the XMLHttpRequestobject to create and manage asynchronous requests and responses.
•  Popular applications like Flickr, Google’s Gmail and Google Maps use the XMLHttpRequestob-ject to update pages dynamically.
•  The name Ajax immediately caught on and brought attention to its component technologies. Ajax has quickly become one of the hottest technologies in web development, as it enables web-top applications to challenge the dominance of established desktop applications.

Section 16.4 “Raw” Ajax Example Using the XMLHttpRequestObject
•  The XMLHttpRequestobject (which resides on the client) is the layer between the client and the serverthatmanagesasynchronousrequestsinAjaxapplications.Thisobjectissupportedonmost browsers, though they may implement it differently.
•  To initiate an asynchronous request, you create an instance of the XMLHttpRequestobject, then use its openmethod to set up the request and its sendmethod to initiate the request.
•  When an Ajax application requests a file from a server, the browsertypically caches that file. Sub-sequent requests for the same file can load it from the browser’s cache.
•  For security purposes, the XMLHttpRequestobject does not allow a web application to request re-sources from servers other than the one that served the web application.
•  Making a request to a different server is known as cross-site scripting (also known as XSS, p. 578). You can implement a server-side proxy—an application on the web application’s web server—that can make requests to other servers on the web application’s behalf.
•  When the third argument to XMLHttpRequestmethod openis true, the request is asynchronous. •  An exception (p. 581) is an indication of a problem that occurs during a program’s execution.
•  Exception handling (p. 581) enables you to create applications that can resolve (or handle) ex-ceptions—in some cases allowing a program to continue executing as if no problem had been encountered.
•  A tryblock (p. 581) encloses code that might cause an exception and code that should not exe-cute if an exception occurs. A tryblock consists of the keyword tryfollowed by a block of code enclosed in curly braces ({}).
•  When an exception occurs, a tryblock terminates immediately and a catchblock (also called a catchclause or exception handler, p. 581) catches (i.e., receives) and handles the exception.
602	Chapter16 Ajax-EnabledRichInternetApplicationswithXMLandJSON


•  The catchblock begins with the keyword catch(p. 581) and is followed by an exception param-eter in parentheses and a block of code enclosed in curly braces.
•  The exception parameter’s name enables the catchblock to interact with a caught exception ob-ject, which contains nameand messageproperties.
•  A callback function is registered as the event handler for the XMLHttpRequestobject’s ready-statechangeevent (p. 582). Whenever the request makes progress, the XMLHttpRequestcalls the readystatechangeevent handler.
•  Progress is monitored by the readyStateproperty, which has a value from 0 to 4. The value 0 indicates that the request is not initialized and the value 4 indicates that the request is complete.

Section 16.5 Using XML and the DOM
•  Whenpassingstructureddatabetweentheserverandtheclient,AjaxapplicationsoftenuseXML because it consumes little bandwidth and is easy to parse.
•  When the XMLHttpRequest object receives XML data, the XMLHttpRequest object parses and stores the data as a DOM object in the responseXMLproperty.
•  The XMLHttpRequestobject’s responseXMLproperty contains the XML returned by the server. •  DOM method createElementcreates an HTML5 element of the specified type.
•  DOM method setAttributeadds or changes an attribute of an HTML5 element. •  DOM method appendChildinserts one HTML5 element into another.
•  The innerHTMLproperty of a DOM element can be used to obtain or change the HTML5 that’s displayed in a particular element.

Section 16.6 Creating a Full-Scale Ajax-Enabled Application
•  JSON (JavaScript Object Notation, p. 587)—a simple way to represent JavaScript objects as strings—is an alternative way (to XML) for passing data between the client and the server.
•  Each JSON object is represented as a list of property names and values contained in curly braces. •  An array is represented in JSON with square brackets containing a comma-separated list of values.
•  Each value in a JSON array can be a string, a number, a JSON representation of an object, true, falseor null.
•  JavaScript’s JSON.parsefunction can convert JSON strings into JavaScript objects.
•  JSON strings are easier to create and parse than XML and require fewer bytes. For these reasons, JSON is commonly used to communicate in client/server interaction.
•  To implement type-ahead (p. 588), you can use an element’s keyup-event handler to make asyn-chronous requests.

Self-Review Exercises
16.1	Fill in the blanks in each of the following statements:
a)  Ajax applications use	requests to create Rich Internet Applications.
b)  In Ajax applications, the	object manages asynchronous interaction with the server.
c)   Theeventhandlercalledwhentheserverrespondsisknownasa(n)                 function. d)  The                  attribute can be accessed through the DOM to update an HTML5 el-
ement’s content without reloading the page.
e)   JavaScript’s XMLHttpRequestobject is commonly abbreviated as	. f)	is a simple way to represent JavaScript objects as strings.
g)  Making a request to a different server is known as	.
AnswerstoSelf-ReviewExercises   603


h)  JavaScript’s	function can convert JSON strings into JavaScript objects.
i)   A(n)	encloses code that might cause an exception and code that should not execute if an exception occurs.
j)   The XMLHttpRequestobject’s	contains the XML returned by the server.
16.2	 State whether each of the following is true or false. If false, explain why. a)  Ajax applications must use XML for server responses.
b)  The technologies that are used to develop Ajax applications have existed since the 1990s.
c)   To handle an Ajax response, register for the XMLHttpRequest object’s readystate-changedevent.
d)  An Ajax application can be implemented so that it never needs to reload the page on which it runs.
e)   The responseXMLproperty of the XMLHttpRequestobject stores the server’s response as a raw XML string.
f)   An exception indicates successful completion of a program’s execution.
g)  When the third argument to XMLHttpRequestmethod openis false, the request is asyn-chronous.
h)  For security purposes, the XMLHttpRequestobject does not allow a web application to request resources from servers other than the one that served the web application.
i)   The innerHTML property of a DOM element can be used to obtain or change the HTML5 that’s displayed in a particular element.

Answers to Self-Review Exercises
16.1	a)  asynchronous.  b)  XMLHttpRequest.  c)  callback.  d)  innerHTML.  e)  XHR.  f)  JSON. g) cross-site scripting (or XSS). h) JSON.parse. i) tryblock. j) responseXMLproperty.
16.2	a)  False. Ajax applications can use any type of textual data as a response. For example, we used JSON in this chapter.
b)  True. c)   True. d)  True.
e)   False. If the response data has XML format, the XMLHttpRequestobject parses it and stores it in a document object.
f)   False. An exception is an indication of a problem that occurs during a program’s execu-tion.
g)  False. The third argument to XMLHttpRequestmethod openmust be trueto make an asynchronous request.
h)  True. i)   True.

Exercises
16.3	Describe the differences between client/server interactions in traditional web applications and client/server interactions in Ajax web applications.
16.4	Consider the AddressBookapplication in Fig. 16.9. Describe how you could reimplement thetype-aheadcapabilitysothatitcouldperformthesearchusingdata previously downloadedrath-er than making an asynchronous request to the server after every keystroke.
16.5	Describe each of the following terms in the context of Ajax: a)  type-ahead
b)  edit-in-place
604	Chapter16 Ajax-EnabledRichInternetApplicationswithXMLandJSON


c)   partial page update d)  asynchronous request e)   XMLHttpRequest
f)   “raw” Ajax
g)  callback function h)  same origin policy i)   Ajax libraries
j)   RIA
[Note to Instructors and Students: Owing to security restrictions on using XMLHttpRequest, Ajax applications must be placed on a web server (even one on your local computer) to enable them to work correctly, and when they need to access other resources, those must reside on the same web server. Students: You’ll need to work closely with your instructors in order to understand your lab setup, so that you can run your solutions to the exercises (the examples are already posted on our web server), and in order to run many of the other server-side applications that you’ll learn later in the book.]
16.6	The XML files used in the book-cover catalog example (Fig. 16.8) also store the titles of the books in a titleattribute of each covernode. Modify the example so that every time the mouse hovers over an image, the book’s title is displayed below the image.
16.7	Create an Ajax-enabled version of the feedback form from Fig. 2.15. As the user moves be-tween form fields, ensure that each field is nonempty. For the e-mail field, ensure that the e-mail address has a valid format. In addition, create an XML file that contains a list of e-mail addresses that are not allowed to post feedback. Each time the user enters an e-mail address, check whether it’s on that list; if so, display an appropriate message.
16.8	Create an Ajax-based product catalog that obtains its data from JSON files located on the server. The data should be separated into four JSON files. The first should be a summary file, con-taininga listof products.Eachproductshouldhavea title,an imagefilename for a thumbnail image and a price. The second file should contain a list of descriptions for each product. The third file should contain a list of filenames for the full-size product images. The last file should contain a list of the thumbnail-image file names. Each item in a catalogue should have a unique ID that should be included with the entries for that product in every file. Next, create an Ajax-enabled web page that displays the product information in a table. The catalog should initially display a list of product names with their associated thumbnail imagesand prices.When the mouse hovers overa thumbnail image, the larger product image should be displayed. When the user moves the mouse away from that image, the original thumbnail should be redisplayed. You should provide a button that the user can click to display the product description.




WebServers (ApacheandIIS)

17
Stop abusing my verses, or publish some of your own.
—Martial

There are three difficulties in authorship: to write anything worth the publishing, to find honest men to publish it, and to get sensible men to read it.
—Charles Caleb Colton

When your Daemon is in charge, do not try to think consciously. Drift, wait and obey.
—Rudyard Kipling




Objectives Inthischapteryou’ll:
ÿ   Learnaboutawebserver’s
functionality.
ÿ   InstallApacheHTTPServer
andMicrosoftIISExpress.
ÿ   Testthebook’sexamples usingApacheandIIS
Express.
606	Chapter17 WebServers(ApacheandIIS)



17.1  Introduction
17.2  HTTPTransactions
17.3  MultitierApplicationArchitecture 17.4  Client-SideScriptingversusServer-
SideScripting
17.5  AccessingWebServers
17.6  Apache,MySQLandPHPInstallation 17.6.1 XAMPPInstallation


17.6.2 RunningXAMPP 17.6.3 TestingYourSetup
17.6.4 RunningtheExamplesUsingApache
HTTPServer
17.7  MicrosoftIISExpressandWebMatrix
17.7.1 InstallingandRunningIISExpress 17.7.2 InstallingandRunningWebMatrix
17.7.3 RunningtheClient-SideExamples
UsingIISExpress
17.7.4 RunningthePHPExamplesUsingIIS
Express



17.1 Introduction
In this chapter, we discuss the specialized software—called a web server—that responds to client requests (typically from a web browser) by providing resources such as XHTML documents. For example, when users enter a Uniform Resource Locator (URL) address, such as www.deitel.com, into a web browser, they’re requesting a specific document from a web server. The web server maps the URL to a resource on the server (or to a file on the server’s network) and returns the requested resource to the client. During this interaction, the web server and the client communicate using the platform-independent Hypertext Transfer Protocol (HTTP), a protocol for transferring requests and files over the Internet or a local intranet.
We also discuss two web servers—the open source Apache HTTP Server and Micro-soft’s Internet Information Services Express (IIS Express)—that you can install on your own computer for testing your web pages and web applications.
Becausethischapterisessentiallyaconciseseriesofinstallationinstructionstoprepare you for the server-side chapters of the book, it does not include a summary or exercises.


17.2 HTTP Transactions
In this section, we discuss the fundamentals of web-based interactions between a client web browser and a web server. In its simplest form, a web page is nothing more than an HTML (HyperText Markup Language) document (with the extension .htmlor .htm) that describes to a web browser the document’s content and structure.
HTML documents normally contain hyperlinks that link to different pages or to other parts of the same page. When the user clicks a hyperlink, the requested web page loads into the user’s web browser. Similarly, the user can type the address of a page into the browser’s address field.

URIs and URLs
URIs (Uniform Resource Identifiers) identify resources on the Internet. URIs that start with http://are called URLs (Uniform Resource Locators). Common URLs refer to files, direc-tories or server-side code that performs tasks such as database lookups, Internet searches and business-application processing. If you know the URL of a publicly available resource
17.2 HTTPTransactions   607


anywhere on the web, you can enter that URL into a web browser’s address field and the browser can access that resource.


Parts of a URL
A URL contains information that directs a browser to the resource that the user wishes to access. Web servers make such resources available to web clients.
Let’s examine the components of the URL

http://www.deitel.com/books/downloads.html
The text http://indicates that the HyperText Transfer Protocol (HTTP) should be used to obtain the resource. Next in the URL is the server’s fully qualified hostname (for exam-ple, www.deitel.com)—the name of the web-server computer on which the resource re-sides. This computer is referred to as the host, because it houses and maintains resources. The hostname www.deitel.comis translated into an IP (Internet Protocol) address—a numerical value that uniquely identifies the server on the Internet. An Internet Domain Name System (DNS) server maintains a database of hostnames and their corresponding IP addresses and performs the translations automatically.
The remainder of the URL (/books/downloads.html) specifies the resource’s loca-tion (/books) and name (downloads.html) on the web server. The location could repre-sent an actual directory on the web server’s file system. For security reasons, however, the location is typically a virtual directory. The web server translates the virtual directory into a real location on the server, thus hiding the resource’s true location.


Making a Request and Receiving a Response
When given a web page URL, a web browser uses HTTP to request the web page found at that address. Figure 17.1 shows a web browser sending a request to a web server.



a) Therequestis sentfromthe webclienttothe webserver




Webclient
Internet



Webserver
b) Afteritreceives therequest,the webserver searchesits systemforthe resource



Fig. 17.1  | Clientinteractingwithwebserver.Step 1: TheGETrequest.

In Fig. 17.1, the web browser sends an HTTP request to the server. The request (in its simplest form) is

GET /books/downloads.html HTTP/1.1
608	Chapter17 WebServers(ApacheandIIS)


The word GETis an HTTP method indicating that the client wishes to obtain a resource from the server. The remainder of the request provides the path name of the resource (e.g., an HTML5 document) and the protocol’s name and version number (HTTP/1.1). The cli-ent’s request also contains some required and optional headers.
Any server that understands HTTP (version 1.1) can translate this request and respond appropriately. Figure 17.2 shows the web server responding to a request.









Webclient
Internet

Webserver
Theserver respondstothe requestwith theresource's contents



Fig. 17.2  | Clientinteractingwithwebserver.Step 2: TheHTTPresponse.

The server first sends a line of text that indicates the HTTP version, followed by a numeric code and a phrase describing the status of the transaction. For example,

HTTP/1.1 200 OK
indicates success, whereas

HTTP/1.1 404 Not found
informs the client that the web server could not locate the requested resource. A complete list of numeric codes indicating the status of an HTTP transaction can be found at www.w3.org/Protocols/rfc2616/rfc2616-sec10.html.

HTTP Headers
Next, the server sends one or more HTTP headers, which provide additional information about the data that will be sent. In this case, the server is sending an HTML5 text docu-ment, so one HTTP header for this example would read:

Content-type: text/html
The information provided in this header specifies the Multipurpose Internet Mail Exten-sions(MIME) typeofthecontentthattheserveristransmittingtothebrowser.TheMIME standard specifies data formats, which programs can use to interpret data correctly. For ex-ample, the MIME type text/plainindicates that the sent information is text that can be displayed directly. Similarly, the MIME type image/jpegindicates that the content is a JPEG image. When the browser receives this MIME type, it attempts to display the image.
The header or set of headers is followed by a blank line, which indicates to the client browser that the server is finished sending HTTP headers. Finally, the server sends the contents of the requested document (downloads.html). The client-side browser then ren-ders (or displays) the document, which may involve additional HTTP requests to obtain associated CSS and images.
17.2 HTTPTransactions   609


HTTP getand postRequests
The two most common HTTP request types (also known as request methods) are get and post. A getrequest typically gets (or retrieves) information from a server, such as an HTML document, an image or search results based on a user-submitted search term. A postrequest typically posts (or sends) data to a server. Common uses of postrequests are to send form data or documents to a server.
An HTTP request often posts data to a server-side form handler that processes the data. For example, when a user performsa search orparticipates in a web-basedsurvey, the web server receives the information specified in the HTML form as part of the request. Getrequests and postrequests can both be used to send data to a web server, but each request type sends the information differently.
A getrequest appends data to the URL, e.g., www.google.com/search?q=deitel. In this case searchis the name of Google’s server-side form handler, qis the nameof a variable inGoogle’ssearchformanddeitelisthesearchterm.The?intheprecedingURLseparates the query string from the rest of the URL in a request. A name/value pair is passed to the server with the name and the value separated by an equals sign (=). If more than one name/ value pair is submitted, each pair is separated by an ampersand (&). The server uses data passed in a query string to retrieve an appropriate resource from the server. The server then sends a response to the client. A getrequest may be initiated by submittingan HTML form whose methodattribute is set to "get", or by typing the URL (possibly containing a query string) directly into the browser’s address bar. We discuss HTML forms in Chapters 2–3.
A postrequest sends form data as part of the HTTP message, not as part of the URL. A getrequest typically limits the query string (i.e., everything to the right of the ?) to a spe-cific numberof characters, soit’softennecessarytosendlargeamountsofinformation using the postmethod. The postmethod is also sometimes preferred because it hides the sub-mitted data from the user by embedding it in an HTTP message. If a form submits several hiddeninputvaluesalongwithuser-submitteddata,thepostmethodmightgenerateaURL like www.searchengine.com/search. The form data still reaches the server and is processed in a similar fashion to a getrequest, but the user does not see the exact information sent.

Software Engineering Observation 17.1
The data sent in a postrequest is not part of the URL, and the user can’t see the data by default. However, tools are available that expose this data, so you should not assume that the data is secure just because a postrequest is used.

Client-Side Caching
Browsers often cache (save on disk) recently viewed web pages for quick reloading. If there are nochanges between the version stored in the cache and the current version on the web, this speeds up your browsing experience. An HTTP response can indicate the length of time for which the content remains “fresh.” If this amount of time has not been reached, thebrowsercanavoidanotherrequesttotheserver.Ifnot,thebrowserloadsthedocument from the cache. Similarly, there’s also the “not modified” HTTP response, indicating that the file content has not changed since it was last requested (which is information that’s send in the request). Browsers typically do not cache the server’s response to a postre-quest, because the next postmight not return the same result. For example, in a survey, many users could visit the same web page and answer a question. The survey results could then be displayed for the user. Each new answer would change the survey results.
610	Chapter17 WebServers(ApacheandIIS)

17.3 Multitier Application Architecture
Web-based applications are often multitier applications (sometimes referred to as n-tier applications) that divide functionality into separate tiers (i.e., logical groupings of func-tionality). Although tiers can be located on the same computer, the tiers of web-based ap-plications often reside on separate computers. Figure 17.3 presents the basic structure of a three-tier web-based application.



Toptier alsocalled
Userinterfacetieror Clienttier

Middletier alsocalled Businesslogictier

Bottomtier alsocalled Datatieror Informationtier



Browser	webpage
Webserver	Database



Fig. 17.3  | Three-tierarchitecture.

The bottom tier (also called the data tier or the information tier) maintains the appli-cation’s data. This tier typically stores data in a relational database management system (RDBMS). We discuss RDBMSs in Chapter 18. For example, Amazon might have an inventory information database containing product descriptions, prices and quantities in stock. Another database might contain customer information, such as user names, billing addresses and credit card numbers. These may reside on one or more computers, which together comprise the application’s data.
The middle tier implements business logic, controller logic and presentation logic to control interactions between the application’s clients and its data. The middle tier acts as an intermediary between data in the information tier and the application’s clients. The middle-tier controller logic processes client requests (such as requests to view a product catalog)andretrievesdatafromthedatabase.Themiddle-tierpresentationlogicthenpro-cesses data from the information tier and presents the content to the client. Web applica-tions typically present data to clients as HTML documents.
Business logic in the middle tier enforces business rules and ensures that data is reliable beforetheapplicationupdatesadatabaseorpresentsdatatousers.Businessrulesdictatehow clients access data and how applications process data. For example, a business rule in the middle tier of a retail store’s web-based application might ensure that all product quantities remainpositive.Aclientrequesttosetanegativequantityinthebottomtier’sproductinfor-mation database would be rejected by the middle tier’s business logic.
The top tier, or client tier, is the application’s user interface, which gathers input and displaysoutput.Usersinteractdirectlywiththeapplicationthroughtheuserinterface,which is typically a web browser or a mobile device. In response to user actions (e.g., clicking a hyperlink), the client tier interacts with the middle tier to make requests and to retrieve data from the information tier. The client tier then displays the data retrieved for the user.
17.4 Client-SideScriptingversusServer-SideScripting   611

17.4 Client-Side Scripting versus Server-Side Scripting
Client-sidescriptingwithJavaScript can beusedtovalidateuserinput,tointeractwiththe browser, to enhance web pages, and to add client/server communication between a brows-er and a web server.
Client-side scripting does have limitations, such as browser dependency; the browser or  scripting  host  must  support  the  scripting  language  and  capabilities.  Scripts  are restricted from arbitrarily accessing the local hardware and file system for security reasons. Another issue is that client-side scripts can be viewed by the client using the browser’s source-viewing capability. Sensitive information, such as passwords or other personally identifiable data, should not be on the client. All client-side data validation should be mir-rored on the server. Also, placing certain operations in JavaScript on the client can open web applications to security issues.
Programmers have more flexibility with server-side scripts, which often generate custom responses for clients. For example, a client might connect to an airline’s web server and request a list of flights from Boston to San Francisco between April 19 and May 5. The server queries the database, dynamically generates an HTML document containing the flight list and sends the document to the client. This technology allows clients to obtain the most current flight information from the database by connecting to an airline’s web server.
Server-side scripting languages have a wider range of programmatic capabilities than their client-side equivalents. Server-side scripts also have access to server-side software that extends server functionality—Microsoft web servers use ISAPI (Internet Server Applica-tion Program Interface) extensions and Apache HTTP Servers use modules. Compo-nents and modules range from programming-language support to counting the numberof web-pagehits. Wediscusssomeofthesecomponentsandmodulesinsubsequentchapters.


17.5 Accessing Web Servers
To request documents from web servers, users must know the hostnames on which the web serversoftware resides. Users can request documents from local web servers (i.e., ones residing on users’ machines) or remote web servers (i.e., ones residing on different ma-chines).
Localwebserverscanbeaccessedthroughyourcomputer’snameorthroughthename localhost—a hostname that references the local machine and normally translates to the IP address 127.0.0.1(known as the loopback address). We sometimes use localhostin this book for demonstration purposes. To display the machine name in Windows, Mac OS X or Linux, run the hostnamecommand in a command prompt or terminal window. A remote web server referenced by a fully qualified hostname or an IP address can also serve  documents.  In  the  URL  http://www.deitel.com/books/downloads.html,  the
middle portion, www.deitel.com, is the server’s fully qualified hostname.


17.6 Apache, MySQL and PHP Installation
This section shows how to install the software you need for running web apps using PHP. The Apache HTTP Server, maintained by the Apache Software Foundation, is the most
612	Chapter17 WebServers(ApacheandIIS)


popular web server in use today because of its stability, efficiency, portability, security and small size. It’s open source software that runs on Linux, Mac OS X, Windows and numer-ous other platforms. MySQL (discussed in more detail in Section 18.5) is the most popu-lar open-source database management system. It, too, runs on Linux, Mac OS X and Windows. PHP (Chapter 19) is the most popular server-side scripting language for creat-ing dynamic, data-driven web applications.
The Apache HTTP Server, MySQL database server and PHP can each be down-loaded and installed separately, but this also requires additional configuration on your part. There are many integrated installers that install and configure the Apache HTTP Server, MySQL database server and PHP for you on various operating-system platforms. For simplicity, we’ll use the XAMPP integrated installer provided by the Apache Friends website (www.apachefriends.org).


17.6.1 XAMPP Installation
The XAMPP integrated installer for Apache, MySQL and PHP is available for Windows, Mac OS X and Linux. Chapters 18 and 19 assume that you’ve used the XAMPP installer to set up the software. Go to

http://www.apachefriends.org/en/xampp.html
then choose the installer for your platform. Carefully follow the provided installation in-structions and be sure to read the entire installation page for your platform! We assume in Chapters 18 and 19 that you used the default installation options here.

Microsoft Web Platform Installer
If you’d prefer to use PHP with Microsoft’s IIS Express and SQL Server Express, you can use their Web Platform Installer to set up and configure PHP:

http://www.microsoft.com/web/platform/phponwindows.aspx
Please note, however, that Chapter 19 assumes you’re using PHP with MySQL and the Apache HTTP Server.


17.6.2 Running XAMPP
Onceyou’veinstalledXAMPP,youcanstarttheApacheandMySQLserversforeachplat-form as described below.

Windows
Go to your c:\xamppfolder (or the folder in which you installed XAMPP) and double click xampp_start.exe. If you need to stop the servers (e.g., so you can shut down your computer), use xampp_stop.exein the same folder.

Mac OS X
Go to your Applicationsfolder(or the folder in whichyou installed XAMPP), then open the XAMPPfolder and run XAMPControl.app. Click the Start buttons in the control panel to start the servers. If you need to stop the servers (e.g., so you can shut down your com-puter), you can stop them by clicking the Stop buttons.
17.6 Apache,MySQLandPHPInstallation   613


Linux
Open a shell and enter the command

/opt/lampp/lampp start
If you need to stop the servers (e.g., so you can shut down your computer), open a shell and enter the command

/opt/lampp/lampp stop


17.6.3 Testing Your Setup
Once you’ve started the servers, you can open any web browser on your computer and en-ter the address

http://localhost/
to confirm that the web server is up and running. If it is, you’ll see a web page similar to the one in Fig. 17.4. You’re now ready to go!














Fig. 17.4  | defaultXAMPPwebpagedisplayedonWindows.


17.6.4 Running the Examples Using Apache HTTP Server
NowthattheApacheHTTPServerisrunningonyourcomputer,youcancopythebook’s examples into XAMPP’s htdocsfolder. Assuming you copy the entire examplesfolder into the htdocsfolder, you can run the examples in Chapters 2–16 and 19 with URLs of the form

http://localhost/examples/chapter/figure/filename
where chapter is one of the chapter folders (e.g., ch03), figure is a folder for a particular ex-ample (e.g., fig03_01) and filename is the page to load (e.g., NewFormInputTypes.html). So, you can run the first example in Chapter 3 with

http://localhost/examples/ch03/fig03_01/NewFormInputTypes.html
[Note: The ch02examples folder does not contain any subfolders.]
614	Chapter17 WebServers(ApacheandIIS)

17.7 Microsoft IIS Express and WebMatrix
Microsoft Internet Information Services Express (IIS Express) is a web server that can be installed on computers running Microsoft Windows. Once it’s running, you can use it to test web pages and web applications on your local computer. A key benefit of IIS Ex-press is that it can be installed without administrator privileges on all versions of Windows XP,WindowsVista,Windows7andWindowsServer2008.IISExpresscanbedownload-ed and installed by itself, or you can install it in a bundle with Microsoft’s WebMatrix— a free development tool for building PHP and ASP.NET web apps. We provide links for each below. When you use IIS Express without administrator privileges, it can serve doc-uments only to web browsers installed on your local computer.

17.7.1 Installing and Running IIS Express
If you simply want to test your web pages on IIS Express, you can install it from:

www.microsoft.com/web/gallery/install.aspx?appid=IISExpress
We recommend using the default installation options. Once you’ve installed IIS Express you can learn more about using it at:

learn.iis.net/page.aspx/860/iis-express/

17.7.2 Installing and Running WebMatrix
You can install the WebMatrix and IIS Express bundle from:

www.microsoft.com/web/gallery/install.aspx?appid=IISExpress
Again, we recommend using the default installation options. You can run WebMatrix by openingtheStart menuandselectingAllPrograms > MicrosoftWebMatrix > MicrosoftWeb-Matrix. This will also start IIS Express. Microsoft provides tutorials on how to use Web-Matrix at:

www.microsoft.com/web/post/web-development-101-using-webmatrix

17.7.3 Running the Client-Side Examples Using IIS Express
Once you have IIS Express installed, you can use it to test the examples in Chapters 2–16. When you start IIS Express, you can specify the folder on your computer that contains the documents you’d like to serve. To execute IIS Express, open a Command Prompt window and change directories to the IIS Express folder. On 32-bit Windows versions, use the command

cd "c:\Program Files\IIS Express"
On 64-bit Windows versions, use the command

cd "c:\Program Files (x86)\IIS Express"

Launching IIS Express
If the book’s examples are in a folder named c:\examples, you can use the command

iisexpress /path:c:\examples
17.7 MicrosoftIISExpressandWebMatrix   615


to start IIS. You can stop the server simply by typing Qin the Command Prompt window.

Testing a Client-Side Example
You can now run your examples with URLs of the form

http://localhost:8080/chapter/figure/filename
where chapter is one of the chapter folders (e.g., ch03), figure is a folder for a particular ex-ample (e.g., fig03_01) and filename is the page to load (e.g., NewFormInputTypes.html). So, you can run the first example in Chapter 3 with

http://localhost:8080/ch03/fig03_01/NewFormInputTypes.html
[Note: The ch02examples folder does not contain any subfolders.]

17.7.4 Running the PHP Examples Using IIS Express
The easiest way to test Chapter 19’s PHP examples is to use WebMatrix to enable PHP for the ch19folder in the book’s examples. To do so, perform the following steps.
1.  Run WebMatrix by opening the Start menu and selecting All Programs > Micro-soft WebMatrix > Microsoft WebMatrix.
2. In the Quick Start - Microsoft WebMatrix window, select Site From Folder.
3.  Locate and select the ch19 folder in the Select Folder window, then click the Se-lect Folder button.
This opens the ch19folder as a website in WebMatrix (Fig. 17.5).






















Fig. 17.5  | Thech19examplesfolderinWebMatrix.
616	Chapter17 WebServers(ApacheandIIS)


Enabling PHP
To enable PHP, perform the following steps:
1. Click the Site option in the bottom-left corner of the window.
2.  Click Settings and ensure that Enable PHP is checked (Fig. 17.6). [Note: The first time you do this, WebMatrix will ask you for permission to install PHP. You must do this to test the PHP examples.]





















Fig. 17.6  | EnablingPHPforthech19examplesfolderinWebMatrix.

Running a PHP Example
You can now run the PHP examples directly from WebMatrix. To do so:
1. Click the Files option in the bottom-left corner of the window. 2.  Open the folder for the example you wish to test.
3.  Right-click the example’s PHP script file and select Launch in browser. This opens your default browser and requests the selected PHP script file.




Database:SQL,MySQL, LINQandJavaDB

18
It is a capital mistake to theorize before one has data.
—Arthur Conan Doyle

Now go, write it before them in a table, and note it in a book, that it may be for the time to come for ever and ever.
—The Holy Bible, Isaiah 30:8

Get your facts first, and then you can distort them as much as you please.
—Mark Twain

I like two kinds of men: domestic and foreign.
—Mae West




Objectives Inthischapter,you’ll:
ÿ   Learnfundamentalrelational
databaseconcepts.
ÿ   LearnStructuredQuery Language(SQL)capabilities forretrievingdatafromand manipulatingdataina
database.
ÿ   ConfigureaMySQLuser
account.
ÿ   CreateMySQLdatabases.
ÿ   Learnfundamentalconcepts ofMicrosoft’sLanguage
IntegratedQuery(LINQ)
618	Chapter18 Database:SQL,MySQL,LINQandJavaDB



18.1  Introduction
18.2  RelationalDatabases
18.3  RelationalDatabaseOverview: AbooksDatabase
18.4  SQL
18.4.1 BasicSELECTQuery 18.4.2 WHEREClause 18.4.3 ORDERBYClause
18.4.4 MergingDatafromMultipleTables: INNERJOIN
18.4.5 INSERTStatement 18.4.6 UPDATEStatement
18.4.7 DELETEStatement 18.5  MySQL
18.5.1 InstructionsforSettingUpaMySQL
UserAccount
18.5.2 CreatingDatabasesinMySQL 18.6  (Optional)MicrosoftLanguage
IntegrateQuery(LINQ)
18.6.1 QueryinganArrayofintValues
UsingLINQ


18.6.2 QueryinganArrayofEmployee
ObjectsUsingLINQ
18.6.3 QueryingaGenericCollectionUsing
LINQ
18.7  (Optional)LINQtoSQL
18.8  (Optional)QueryingaDatabasewith LINQ
18.8.1 CreatingLINQtoSQLClasses
18.8.2 DataBindingsBetweenControlsand
theLINQtoSQLClasses
18.9  (Optional)DynamicallyBinding LINQtoSQLQueryResults
18.9.1 CreatingtheDisplay Query Results
GUI
18.9.2 CodingtheDisplay Query Results
Application
18.10  JavaDB/ApacheDerby

Summary | Self-Review Exercises | Answers to Self-Review Exercises | Exercises

18.1 Introduction
A database is an organized collection of data. There are many different strategies for orga-nizing data to facilitate easy access and manipulation. A database management system (DBMS) provides mechanisms for storing, organizing, retrieving and modifying data for many users. Database management systems allow for the access and storage of data with-out concern for the internal representation of data.
Today’s most popular database systems are relational databases. A language called SQL—pronounced “sequel,” or as its individual letters—is the international standard lan-guage used almost universally with relational databases to perform queries (i.e., to request information that satisfies given criteria) and to manipulate data. [Note: As you learn about SQL, you’ll see some authors writing “a SQL statement” (which assumes the pronuncia-tion “sequel”) and others writing “an SQL statement” (which assumes that the individual letters are pronounced). In this book we pronounce SQL as “sequel.”]
Programs connect to, and interact with, a relational database via an interface—soft-ware that facilitates communication between a database management system and a pro-gram. For example, Java developers can use the JDBC interface to interact with databases. Similarly,ASP.NETprogrammerscommunicatewithdatabasesandmanipulatetheirdata through interfaces provided by .NET.

18.2 Relational Databases
A relational database is a logical representation of data that allows the data to be accessed without consideration of its physical structure. A relational database stores data in tables.
18.2 RelationalDatabases   619


Figure 18.1 illustrates a sample table that might be used in a personnel system. The table name is Employee, and its primary purpose is to store the attributes of employees. Tables arecomposedof rows, and rows are composed of columns in which values are stored. This table consists of six rows. The Numbercolumn of each row is the table’s primary key—a column(orgroupofcolumns)withauniquevaluethatcannotbeduplicatedinotherrows. This guarantees that each row can be identified by its primary key. Good examples of pri-mary-key columns are a social security number, an employee ID number and a part num-ber in an inventory system, as values in each of these columns are guaranteed to be unique. TherowsinFig. 18.1aredisplayedinorderbyprimarykey.Inthiscase,therowsarelisted in increasing order, but we could also use decreasing order.



Number

23603
24568 Row	34589
35761
47132 78321
Primarykey

Name

Jones Kerwin Larson Myers Neumann
Stephens

Department	Salary

413	1100 413	2000 642	1800 611	1400 413	9000 611	8500
Column

Location

New Jersey New Jersey Los Angeles Orlando New Jersey
Orlando


Fig. 18.1  | Employeetablesampledata.

Rows in tables are not guaranteed to be stored in any particular order. As we’ll dem-onstrate in an upcoming example, programs can specify ordering criteria when requesting data from a database.
Each column represents a different data attribute. Rows are normally unique (by pri-mary key) within a table, but particular column values may be duplicated between rows. For example, three different rows in the Employeetable’s Departmentcolumn contain number 413.
Different users of a database are often interested in different data and different rela-tionships among the data. Most users require only subsets of the rows and columns. Que-ries specify which subsets of the data to select from a table. You use SQL to define queries. For example, you might select data from the Employeetable to create a result that shows whereeachdepartmentis located, presentingthedata sortedin increasing orderbydepart-ment number. This result is shown in Fig. 18.2. SQL is discussed in Section 18.4.



Department

413 611
642

Location

New Jersey Orlando
Los Angeles


Fig. 18.2  | ResultofselectingdistinctDepartmentandLocationdatafromtable Employee.
620	Chapter18 Database:SQL,MySQL,LINQandJavaDB

18.3 Relational Database Overview: A booksDatabase
Wenowoverviewrelationaldatabasesinthecontextofasamplebooksdatabasewecreated for this chapter. Before we discuss SQL, we discuss the tables of the booksdatabase. We use this database to introduce various database concepts, including how to use SQL to ob-tain information from the database and tomanipulate the data. We provide a script to cre-ate the database. You can find the script in the examples directory for this chapter. Section 18.5.2 explains how to use this script. The database consists of three tables: Authors, AuthorISBNand Titles.

AuthorsTable
The Authorstable (described in Fig. 18.3) consists of three columns that maintain each author’s unique ID number, first name and last name. Figure 18.4 contains sample data from the Authorstable of the booksdatabase.



Column

AuthorID



FirstName
LastName

Description

Author’s ID number in the database. In the booksdatabase, this integer col-umn is defined as autoincremented—for each row inserted in this table, the AuthorIDvalue is increased by 1 automatically to ensure that each row has a unique AuthorID. This column represents the table’s primary key.
Author’s first name (a string).
Author’s last name (a string).


Fig. 18.3  | Authorstablefromthebooksdatabase.



AuthorID

1 2 3 4
5

FirstName

Paul Harvey Abbey Michael
Eric

LastName

Deitel Deitel Deitel Morgano
Kern


Fig. 18.4 | SampledatafromtheAuthorstable.

AuthorISBNTable
The AuthorISBNtable (described in Fig. 18.5) consists of two columns that maintain each ISBN and the corresponding author’s ID number. This table associates authors with their books. Both columns are foreign keys that represent the relationship between the tables Authorsand Titles—one row in table Authorsmay be associated with many rows in ta-ble Titles, and vice versa. The combined columns of the AuthorISBNtable represent the table’s primary key—thus, each row in this table must be a unique combination of an Au-thorIDand an ISBN. Figure 18.6 contains sample data from the AuthorISBNtable of the booksdatabase. [Note: To save space, we have split the contents of this table into two col-
18.3 RelationalDatabaseOverview:AbooksDatabase	621


umns, each containing the AuthorIDand ISBNcolumns.] The AuthorIDcolumn is a for-eign key—a column in this table that matches the primary-key column in another table (i.e., AuthorIDin the Authorstable). Foreign keys are specified when creating a table. The foreign key helps maintain the Rule of Referential Integrity—every foreign-key value must appear as another table’s primary-key value. This enables the DBMS to determine whether the AuthorIDvalue for a particular book is valid. Foreign keys also allow related data in multiple tables to be selected from those tables for analytic purposes—this is known as joining the data.


Column

AuthorID
ISBN

Description

The author’s ID number, a foreign key to the Authorstable.
The ISBN for a book, a foreign key to the Titlestable.


Fig. 18.5  | AuthorISBNtablefromthebooksdatabase.



AuthorID

1 2 1 2 1 1 2 3 4
5

ISBN

0132152134 0132152134 0132151421 0132151421 0132575663 013705842X 013705842X 013705842X 013705842X
013705842X

AuthorID

2 1 2 1 2 1 2 3
4

ISBN

0132575663 0132662361 0132662361 0132404168 0132404168 0132121360 0132121360 0132121360
0132121360


Fig. 18.6  | SampledatafromtheAuthorISBNtableofbooks.

TitlesTable
The Titlestable described in Fig. 18.7 consists of four columns that stand for the ISBN, the title, the edition number and the copyright year. The table is in Fig. 18.8.

Column	Description

ISBN	ISBN of the book (a string). The table’s primary key. ISBN is an abbre-viation for “International Standard Book Number”—a numbering scheme that publishers use to give every book a unique identification number.
Title	Title of the book (a string).

Fig. 18.7  | Titlestablefromthebooksdatabase.(Part1of2.)
622	Chapter18 Database:SQL,MySQL,LINQandJavaDB



Column

EditionNumber
Copyright

Description

Edition number of the book (an integer).
Copyright year of the book (a string).


Fig. 18.7  | Titlestablefromthebooksdatabase.(Part2of2.)



ISBN

0132152134 0132151421 0132575663 0132662361 0132404168 013705842X

0132121360


Title

Visual Basic 2010 How to Program Visual C# 2010 How to Program Java How to Program
C++ How to Program C How to Program
iPhone for Programmers: An App-Driven Approach
Android for Programmers: An App-Driven Approach


EditionNumber

5 4 9 8 6 1

1


Copyright

2011 2011 2012 2012 2010 2010

2012


Fig. 18.8  | SampledatafromtheTitlestableofthebooksdatabase.

Entity-Relationship (ER) Diagram
There’s a one-to-many relationship between a primary key and a corresponding foreign key (e.g., one author can write many books). A foreign key can appear many times in its own table, but only once (as the primary key) in another table. Figure 18.9 is an entity-relationship (ER) diagram for the booksdatabase. This diagram shows the database tables and the relationships among them. The first compartment in each box contains the table’s name and the remaining compartments contain the table’s columns. The names in italic are primary keys. A table’s primary key uniquely identifies each row in the table. Every row must have a primary-key value, and that value must be unique in the table. This is known as the Rule of Entity Integrity. Again, for the AuthorISBNtable, the primary key is the combination of both columns.




Authors
AuthorID	1
FirstName
LastName

AuthorISBN

AuthorID
ISBN

Titles 1  ISBN
Title
EditionNumber
Copyright



Fig. 18.9  | Tablerelationshipsinthebooksdatabase.
18.4 SQL   623


Common Programming Error 18.1
Not providing a value for every column in a primary key breaks the Rule of Entity Integ-rity and causes the DBMS to report an error.

Common Programming Error 18.2
Providing the same primary-key value in multiple rows causes the DBMS to report an error.
The lines connecting the tables (Fig. 18.9) represent the relationships between the tables.ConsiderthelinebetweentheAuthorISBNandAuthorstables.OntheAuthorsend of the line is a 1, and on the AuthorISBNend is an infinity symbol ( ), indicating a one-to-many relationship in which every author in the Authorstable can have an arbitrary number of books in the AuthorISBN table. The relationship line links the AuthorID column in Authors(i.e., its primary key) to the AuthorIDcolumn in AuthorISBN(i.e., its foreign key). The AuthorIDcolumn in the AuthorISBNtable is a foreign key.
¥

Common Programming Error 18.3
Providingaforeign-keyvaluethatdoesnotappearasaprimary-keyvalueinanothertable breaks the Rule of Referential Integrity and causes the DBMS to report an error.

The line between Titlesand AuthorISBNillustrates anotherone-to-many relationship; atitlecanbewrittenbyanynumberofauthors.Infact,thesolepurposeoftheAuthorISBN table is to provide a many-to-many relationship between Authorsand Titles—an author can write many books and a book can have many authors.

18.4 SQL
We now overview SQL in the context of our booksdatabase. The next several subsections discuss the SQL keywords listed in Fig. 18.10 in the context of SQL queries and state-ments. Other SQL keywords are beyond this text’s scope. To learn other keywords, refer to the SQL reference guide supplied by the vendor of the DBMS you’re using.



SQLkeyword

SELECT
FROM
WHERE

GROUP BY
ORDER BY
INNER JOIN
INSERT
UPDATE
DELETE

Description

Retrieves data from one or more tables.
Tables involved in the query. Required in every SELECT
.
Criteria for selection that determine the rows to be retrieved, deleted or updated. Optional in a SQL query or a SQL statement.
Criteria for grouping rows. Optional in a SELECTquery. Criteria for ordering rows. Optional in a SELECTquery. Merge rows from multiple tables.
Insert rows into a specified table. Update rows in a specified table.
Delete rows from a specified table.


Fig. 18.10  | SQLquerykeywords.
624	Chapter18 Database:SQL,MySQL,LINQandJavaDB


18.4.1 Basic SELECTQuery
Let us consider several SQL queries that extract information from database books. A SQL query “selects” rows and columns from one or more tables in a database. Such selections are performed by queries with the SELECTkeyword. The basic form of a SELECTquery is
SELECT * FROM tableName
in which the asterisk (*) wildcard character indicates that all columns from the tableName table should be retrieved. For example, to retrieve all the data in the Authorstable, use

SELECT * FROM Authors
Mostprogramsdonotrequireallthedatainatable.Toretrieveonlyspecificcolumns, replace the *with a comma-separated list of column names. For example, to retrieve only the columns AuthorIDand LastNamefor all rows in the Authorstable, use the query

SELECT AuthorID, LastName FROM Authors This query returns the data listed in Fig. 18.11.


AuthorID

1 2 3 4
5

LastName

Deitel Deitel Deitel Morgano
Kern


Fig. 18.11 | SampleAuthorIDand LastNamedatafromtheAuthorstable.

Software Engineering Observation 18.1
In general, you process results by knowing in advance the order of the columns in the result—for example, selecting AuthorIDand LastNamefrom table Authorsensures that the columns will appear in the result with AuthorIDas the first column and LastNameas the second. Programs typically process result columns by specifying the column number in the result (starting from 1 for the first column). Selecting columns by name avoids returning unneeded columns and protects against changes to the order of the columns in the table(s) by returning the columns in the exact order specified.

Common Programming Error 18.4
If you assume that the columns are always returned in the same order from a query that uses the asterisk (*), the program may process the results incorrectly.

18.4.2 WHEREClause
In most cases, it’s necessary to locate rows in a database that satisfy certain selection crite-ria. Only rows that satisfy the selection criteria (formally called predicates) are selected. SQLusestheoptionalWHEREclauseinaquerytospecifytheselectioncriteriaforthequery. The basic form of a query with selection criteria is
18.4 SQL   625


SELECT columnName1, columnName2, …  FROM tableName  WHERE criteria
For example, to select the Title, EditionNumber and Copyright columns from table Titlesfor which the Copyrightdate is greater than 2010, use the query

SELECT Title, EditionNumber, Copyright FROM Titles
WHERE Copyright > '2010'
Strings in SQL are delimited by single (') rather than double (") quotes. Figure 18.12 shows the result of the preceding query.



Title

Visual Basic 2010 How to Program Visual C# 2010 How to Program Java How to Program
C++ How to Program
Android for Programmers: An App-Driven Approach

EditionNumber

5 4 9 8
1

Copyright

2011 2011 2012 2012
2012


Fig. 18.12 | Samplingoftitleswithcopyrightsafter2005fromtableTitles.


Pattern Matching: Zero or More Characters
The WHEREclause criteria can contain the operators <, >, <=, >=, =, <>and LIKE. Operator LIKEis used for pattern matching with wildcard characters percent (%) and underscore (_). Pattern matching allows SQL to search for strings that match a given pattern.
A pattern that contains a percent character (%) searches for strings that have zero or more characters at the percent character’s position in the pattern. For example, the next query locates the rows of all the authors whose last name starts with the letter D:

SELECT AuthorID, FirstName, LastName FROM Authors
WHERE LastName LIKE 'D%'
This query selects the two rows shown in Fig. 18.13—three of the five authors have a last name starting with the letter D(followed by zero or more characters). The %symbol in the WHEREclause’s LIKEpattern indicates that any number of characters can appear after the letter Din the LastName. The pattern string is surrounded by single-quote characters.



AuthorID

1 2
3

FirstName

Paul Harvey
Abbey

LastName

Deitel Deitel
Deitel


Fig. 18.13  | AuthorswhoselastnamestartswithDfromtheAuthorstable.
626	Chapter18 Database:SQL,MySQL,LINQandJavaDB


Portability Tip 18.1 SeethedocumentationforyourdatabasesystemtodeterminewhetherSQLiscasesensitive on your system and to determine the syntax for SQL keywords.

Portability Tip 18.2
Read your database system’s documentation carefully to determine whether it supports the LIKEoperator as discussed here.

Pattern Matching: Any Character
An underscore ( _) in the pattern string indicates a single wildcard character at that posi-tion in the pattern. For example, the following query locates the rows of all the authors whoselastnamesstartwithanycharacter(specifiedby_),followedbythelettero,followed by any number of additional characters (specified by %):

SELECT AuthorID, FirstName, LastName FROM Authors
WHERE LastName LIKE '_o%'
The preceding query produces the row shown in Fig. 18.14, because only one author in our database has a last name that contains the letter oas its second letter.



AuthorID

4

FirstName

Michael

LastName

Morgano


Fig. 18.14  | TheonlyauthorfromtheAuthorstable whoselastnamecontainsoasthesecondletter.

18.4.3 ORDERBYClause
Therowsintheresult ofaquerycanbesortedintoascendingordescendingorderbyusing the optional ORDERBYclause. The basic form of a query with an ORDERBYclause is

SELECT columnName1,columnName2,… FROMtableName ORDERBYcolumn ASC SELECTcolumnName1,columnName2,… FROMtableNameORDERBYcolumnDESC
where ASCspecifies ascending order (lowest to highest), DESCspecifies descending order (highest to lowest) and column specifies the column on which the sort is based. For exam-ple,toobtain thelistof authorsinascendingorderbylastname(Fig. 18.15),usethequery

SELECT AuthorID, FirstName, LastName FROM Authors
ORDER BY LastName ASC



AuthorID

1

FirstName

Paul

LastName

Deitel


Fig. 18.15 | SampledatafromtableAuthorsinascendingorderbyLastName. (Part1of2.)
18.4 SQL   627




AuthorID

2 3 5
4

FirstName

Harvey Abbey Eric
Michael

LastName

Deitel Deitel Kern
Morgano


Fig. 18.15 | SampledatafromtableAuthorsinascendingorderbyLastName. (Part2of2.)

Sorting in Descending Order
The default sorting order is ascending, so ASCis optional. To obtain the same list of au-thors in descending order by last name (Fig. 18.16), use the query

SELECT AuthorID, FirstName, LastName FROM Authors
ORDER BY LastName DESC



AuthorID

4 5 1 2
3

FirstName

Michael Eric Paul Harvey
Abbey

LastName

Morgano Kern Deitel Deitel
Deitel


Fig. 18.16  | SampledatafromtableAuthorsindescendingorderbyLastName.

Sorting By Multiple Columns
Multiple columns can be used for sorting with an ORDERBYclause of the form

ORDER BY column1  sortingOrder, column2  sortingOrder, …
where sortingOrder is either ASCor DESC. The sortingOrder does not have to be identical for each column. The query

SELECT AuthorID, FirstName, LastName FROM Authors
ORDER BY LastName, FirstName
sorts all the rows in ascending order by last name, then by first name. If any rows have the same last-name value, they’re returned sorted by first name (Fig. 18.17).

Combining the WHEREand ORDERBYClauses
The WHEREand ORDERBYclauses can be combined in one query, as in

SELECT ISBN, Title, EditionNumber, Copyright FROM Titles
WHERE Title LIKE '%How to Program' ORDER BY Title ASC
628	Chapter18 Database:SQL,MySQL,LINQandJavaDB




AuthorID

3 2 1 5
4

FirstName

Abbey Harvey Paul Eric
Michael

LastName

Deitel Deitel Deitel Kern
Morgano


Fig. 18.17 | SampledatafromAuthorsinascendingorderbyLastNameandFirstName.

which returns theISBN, Title, EditionNumberandCopyrightof eachbookin the Titles table that has a Titleending with "HowtoProgram"and sorts them in ascending order by Title. The query results are shown in Fig. 18.18.





ISBN

0132404168 0132662361 0132575663 0132152134
0132151421



Title

C How to Program C++ How to Program Java How to Program
Visual Basic 2005 How to Program
Visual C# 2005 How to Program

Editio
n-        Copy-Number    right

6	2010 8	2012 9	2012 5	2011
4	2011


Fig. 18.18 | SamplingofbooksfromtableTitleswhosetitlesendwithHowtoProgramin ascendingorderbyTitle.

18.4.4 Merging Data from Multiple Tables: INNERJOIN
Databasedesignersoftensplitrelateddataintoseparatetablestoensurethatadatabasedoes notstoredataredundantly.Forexample,inthebooksdatabase,weuseanAuthorISBNtable to store the relationship data between authors and their corresponding titles. If we did not separate this information into individual tables, we’d need to include author information with each entry in the Titlestable. This would result in the database’s storing duplicate author information for authors who wrote multiple books. Often, it’s necessary to merge data from multiple tables into a single result. Referred to as joining the tables, this is speci-fied by an INNERJOINoperator, which merges rows from two tables by matching values in columns that are common to the tables. The basic form of an INNERJOINis:

SELECT columnName1, columnName2, … FROM table1
INNER JOIN table2
ON table1.columnName  = table2.columnName
The ONclause of the INNERJOINspecifies the columns from each table that are com-pared to determine which rows are merged. For example, the following query produces a list of authors accompanied by the ISBNs for books written by each author:
18.4 SQL   629


SELECT FirstName, LastName, ISBN FROM Authors
INNER JOIN AuthorISBN
ON Authors.AuthorID = AuthorISBN.AuthorID ORDER BY LastName, FirstName
The query merges the FirstNameand LastNamecolumns from table Authorswith the ISBNcolumn from table AuthorISBN, sorting the result in ascending order by LastName and FirstName. Note the use of the syntax tableName.columnName in the ONclause. This syntax, called a qualified name, specifies the columns from each table that should be com-pared to join the tables. The “tableName.” syntax is required if the columns have the same name in both tables. The same syntax can be used in any SQL statement to distinguish columns in different tables that have the same name. In some systems, table names quali-fied with the database name can be used to perform cross-database queries. As always, the query can contain an ORDERBYclause. Figure 18.19 shows the results of the preceding query, ordered by LastNameand FirstName. [Note: To save space, we split the result of the query into two parts, each containing the FirstName, LastNameand ISBNcolumns.]



FirstName

Abbey Abbey Harvey Harvey Harvey Harvey Harvey Harvey Harvey
Paul

LastName

Deitel Deitel Deitel Deitel Deitel Deitel Deitel Deitel Deitel
Deitel

ISBN

013705842X 0132121360 0132152134 0132151421 0132575663 0132662361 0132404168 013705842X 0132121360
0132152134

FirstName

Paul Paul Paul Paul Paul Paul Eric Michael
Michael

LastName

Deitel Deitel Deitel Deitel Deitel Deitel Kern Morgano
Morgano

ISBN

0132151421 0132575663 0132662361 0132404168 013705842X 0132121360 013705842X 013705842X
0132121360


Fig. 18.19 | SamplingofauthorsandISBNsforthebookstheyhavewritteninascending orderbyLastNameandFirstName.

Software Engineering Observation 18.2
If a SQL statement includes columns with the same name from multiple tables, the statement must precede those column names with their table names and a dot (e.g., Authors.AuthorID).

Common Programming Error 18.5
Failure to qualify names for columns that have the same name in two or more tables is an error.


18.4.5 INSERTStatement
The INSERTstatement inserts a row into a table. The basic form of this statement is
630	Chapter18 Database:SQL,MySQL,LINQandJavaDB


INSERT INTO tableName  ( columnName1, columnName2, …, columnNameN  ) VALUES ( value1, value2, …, valueN )
where tableName is the table in which to insert the row. The tableName is followed by a comma-separated list of column names in parentheses (this list is not required if the IN-SERToperation specifies a value for every column of the table in the correct order). The list of column names is followed by the SQL keyword VALUESand a comma-separated list of valuesinparentheses.Thevaluesspecifiedheremustmatchthecolumnsspecifiedafterthe table name in both order and type (e.g., if columnName1 is supposed to be the FirstName column, then value1 should be a string in single quotes representing the first name). Al-ways explicitly list the columns when inserting rows. If the table’s column order changes or a new column is added, using only VALUESmay cause an error. The INSERTstatement

INSERT INTO Authors ( FirstName, LastName ) VALUES ( 'Sue', 'Red' )
inserts a row into the Authorstable. The statement indicates that values are provided for the FirstNameand LastNamecolumns. The corresponding values are 'Sue'and 'Smith'. We do not specify an AuthorIDin this example because AuthorIDis an autoincremented column in the Authorstable. For every row added to this table, the DBMS assigns a unique AuthorIDvalue that is the next value in the autoincremented sequence (i.e., 1, 2, 3 and so on). In this case, Sue Red would be assigned AuthorIDnumber 6. Figure 18.20 shows the Authorstable after the INSERToperation. [Note: Not every database manage-ment system supports autoincremented columns. Check the documentation for your DBMS for alternatives to autoincremented columns.]



AuthorID

1 2 3 4 5
6

FirstName

Paul Harvey Abbey Michael Eric
Sue

LastName

Deitel Deitel Deitel Morgano Kern
Red


Fig. 18.20 | SampledatafromtableAuthorsafteranINSERToperation.


Common Programming Error 18.6
It’s normally an error to specify a value for an autoincrement column.


Common Programming Error 18.7
SQL delimits strings with single quotes ('). A string containing a single quote (e.g., O’Malley) must have two singlequotes in theposition wherethesingle quoteappears (e.g., 'O''Malley'). The first acts as an escape character for the second. Not escaping single-quote characters in a string that’s part of a SQL statement is a SQL syntax error.
18.4 SQL   631


18.4.6 UPDATEStatement
An UPDATEstatement modifies data in a table. Its basic form is

UPDATE tableName
SET columnName1 =value1, columnName2 =value2, …, columnNameN =valueN WHERE criteria
where tableName is the table to update. The tableName is followed by keyword SETand a comma-separated list of column name/value pairs in the format columnName =value. The optional WHEREclause provides criteria that determine which rows to update. Though not required, the WHEREclause is typically used, unless a change is to be made to every row. The UPDATEstatement

UPDATE Authors
SET LastName = 'Black'
WHERE LastName = 'Red' AND FirstName = 'Sue'
updatesarowintheAuthorstable.ThestatementindicatesthatLastNamewillbeassigned the value Blackfor the row in which LastNameis equal to Redand FirstNameis equal to Sue. [Note: If there are multiple rows with the first name “Sue” and the last name “Red,” this statement will modify all such rows to have the last name “Black.”] If we know the AuthorIDin advance of the UPDATEoperation (possibly because we searched for it previ-ously), the WHEREclause can be simplified as follows:

WHERE AuthorID = 6
Figure 18.21 shows the Authorstable after the UPDATEoperation has taken place.



AuthorID

1 2 3 4 5
6

FirstName

Paul Harvey Abbey Michael Eric
Sue

LastName

Deitel Deitel Deitel Morgano Kern
Black


Fig. 18.21 | SampledatafromtableAuthorsafteranUPDATEoperation.


18.4.7 DELETEStatement
A SQL DELETEstatement removes rows from a table. Its basic form is

DELETE FROM tableName  WHERE criteria
where tableName is the table from which to delete. The optional WHEREclause specifies the criteria usedtodeterminewhichrowstodelete. If thisclause isomitted,all the table’s rows are deleted. The DELETEstatement

DELETE FROM Authors
WHERE LastName = 'Black' AND FirstName = 'Sue'
632	Chapter18 Database:SQL,MySQL,LINQandJavaDB


deletes the row for Sue Black in the Authorstable. If we know the AuthorIDin advance of the DELETEoperation, the WHEREclause can be simplified as follows:

WHERE AuthorID = 5
Figure 18.22 shows the Authorstable after the DELETEoperation has taken place.



AuthorID

1 2 3 4
5

FirstName

Paul Harvey Abbey Michael
Eric

LastName

Deitel Deitel Deitel Morgano
Kern


Fig. 18.22 | SampledatafromtableAuthorsafteraDELETEoperation.

18.5 MySQL
In 1994, TcX, aSwedish consultingfirm, neededa fastandflexibleway toaccess itstables. Unable to find a database server that could accomplish the required task adequately, Mi-chael Widenius, the principal developer at TcX, decided to create his own database server. The resulting product was called MySQL (pronounced “my sequel”), a robust and scalable relational database management system (RDBMS).
MySQL, now owned by Oracle, is a multiuser, multithreaded (i.e., allows multiple simultaneous connections) RDBMS server that uses SQL to interact with and manipulate data.   The   MySQL   Manual   (www.mysql.com/why-mysql/topreasons.html)   lists numerous benefits of MySQL. A few important benefits include:
1.  Scalability.Youcanembeditinanapplicationoruseitinmassivedatawarehous-ing environments.
2.  Performance. You can optimize performance based on the purpose of the data-base in your application.
3.  Support for many programming languages. Later chapters demonstrate how to access a MySQL database from PHP (Chapter 19) .
4.  Implementations of MySQL for Windows, Mac OS X, Linux and UNIX.
5.  Handling large databases (e.g., tens of thousands of tables with millions of rows).
For these reasons and more, MySQL is the database of choice for many businesses, universities and individuals. MySQL is an open source software product. [Note: Under certain situations, a commercial license is required for MySQL. See www.mysql.com/ about/legalfor details]

MySQL Community Edition
MySQL Community Edition is an open-source database management system that exe-cutes on many platforms, including Windows, Linux, and Mac OS X. Complete informa-tion about MySQL is available from www.mysql.com. The data-driven web applications in
18.5 MySQL	633


Chapter 19 manipulate MySQL databases using the version of MySQL that you installed with XAMPP in Chapter 17.

18.5.1 Instructions for Setting Up a MySQL User Account
For the MySQL examples to execute correctly, you need to set up a user account so you can create, delete and modify databases. Open the XAMPP control panel and start the MySQL server, then follow the steps below to set up a user account:
1.  Next, you’ll start the MySQL monitor so you can set up a user account. (The fol-lowing commands assume that you followed the default installation instructions forXAMPPasdiscussedinChapter 17.)InWindows,openaCommandPrompt and execute the command

mysql -h localhost -u root
In Mac OS X, open a Terminal window and execute the command

/Applications/XAMPP/xamppfiles/bin/mysql -h localhost -u root
In Linux, open a shell and execute the command

/opt/lamp/bin/mysql -h localhost -u root
The -hoption indicates the host (i.e., computer) on which the MySQL server is running—in this case your local computer (localhost). The -uoption indicates the user account that will be used to log in to the server—rootis the default user account that is created during installation to allow you to configure the server. Once you’ve logged in, you’ll see a mysql>prompt at which you can type com-mands to interact with the MySQL server.
2.   At the mysql>prompt, type

USE mysql;
and press Enter to select the built-in database named mysql, which stores server information, such as user accounts and their privileges for interacting with the server. Each command must end with a semicolon. To confirm the command, MySQL issues the message “Databasechanged.”
3.  Next, you’ll add the iw3htpuser account to the mysqlbuilt-in database. The mysqldatabasecontainsatablecalleduserwithcolumnsthatrepresent theuser’s name, password and various privileges. To create the iw3htpuser account with the password password, execute the following commands from the mysql> prompt:

create user 'iw3htp'@'localhost' identified by 'password'; grant select, insert, update, delete, create, drop, references,
execute on *.* to 'deitel'@'localhost';
This creates the user account iw3htpwith the password passwordwith and privi-leges needed to create the databases used in Chapter 19 and manipulate them.
4.  Type the command

exit;
to terminate the MySQL monitor.
634	Chapter18 Database:SQL,MySQL,LINQandJavaDB


18.5.2 Creating Databases in MySQL
For each MySQL database we use in Chapter 19, we provide a SQL script in a .sqlfile that sets up the database and its tables. You can execute these scripts in the MySQL mon-itor. In this chapter’s examples directory, you’ll find the following scripts:
•	books.sql—creates the booksdatabase discussed in Section 18.3
•	products.sql—creates the Productsdatabase used in Section 19.9
•	mailinglist.sql—creates the MailingListdatabase used in Section 19.11 •	URLs.sql—creates the URLdatabase used in Exercise 19.9.

Executing a SQL Script To execute a SQL script:
1.  Start the MySQL monitor using the username and password you created in Section 18.5.1. In Windows, open a Command Prompt and execute the com-mand

mysql -h localhost -u iw3htp -p
In Mac OS X, open a Terminal window and execute the command

/Applications/XAMPP/xamppfiles/bin/mysql -h localhost -u iw3htp -p
In Linux, open a shell and execute the command

/opt/lamp/bin/mysql -h localhost -u iw3htp -p
The -poption prompts you for the password for the iw3htpuser account. When prompted, enter the password password.
2.  Execute the script with the sourcecommand. For example:

source books.sql;
creates the booksdatabase.
3.  Repeat Step 2 for each SQL script now, so the databases are ready for use in Chapter 19.
4.  Type the command

exit;
to terminate the MySQL monitor.


18.6 (Optional) Microsoft Language Integrate Query
(LINQ)
[Note:  Sections 18.6–18.9  support  the  database-driven  C#  ASP.NET  examples  in Chapters 20–22, which assume that you already know C#. Chapters 23–25 also use LINQ to access databases from Visual Basic ASP.NET examples. Those chapters assume that you already know Visual Basic. For more information on LINQ in VB, visit the site msdn.microsoft.com/en-us/library/bb397910.aspx.]
18.6 (Optional)MicrosoftLanguageIntegrateQuery(LINQ)   635


The next several sections introduce C#’s LINQ (Language Integrated Query) capa-bilities. LINQ allows you to write query expressions, similar to SQL queries, that retrieve information from a wide variety of data sources, not just databases. We use LINQ to Objects in this section to query arrays and Lists, selecting elements that satisfy a set of conditions—this is known as filtering.

18.6.1 Querying an Array of intValues Using LINQ
First, we demonstrate querying an array of integers using LINQ. Repetition statements that filter arrays focus on theprocess of gettingthe results—iterating through the elements and checking whether they satisfy the desired criteria. LINQ specifies the conditions that selected elements must satisfy. This is known as declarative programming—as opposed to imperative programming (which we’ve been doing so far) in which you specify the actual steps to perform a task. The next several statements assume that the integer array

int[] values = { 2, 9, 5, 0, 3, 7, 1, 4, 8, 5 };
is declared. The query

var filtered =
from value in values where value > 4 select value;
specifies that the results should consist of all the ints in the valuesarray that are greater than 4(i.e., 9, 5, 7, 8 and 5). It does not specify how those results are obtained—the C# compiler generates all the necessary code automatically, which is one of the great strengths ofLINQ.TouseLINQtoObjects,youmustimporttheSystem.Linqnamespace(line4).

The fromClause and Implicitly Typed Local Variables
A LINQ query begins with a fromclause, which specifies a range variable (value) and the data source to query (values). The range variable represents each item in the data source (one at a time), much like the control variable in a foreachstatement. We do not specify the range variable’s type. Since it is assigned one element at a time from the array values, which is an intarray, the compiler determines that the range variable valueshould be of type int. This is a C# feature called implicitly typed local variables, which enables the compiler to infer a local variable’s type based on the context in which it’s used.
Introducing the range variable in the fromclause at the beginning of the query allows the IDE to provide IntelliSense while you write the rest of the query. The IDE knows the range variable’s type, so when you enter the range variable’s name followed by a dot (.) in the code editor, the IDE can display the range variable’s methods and properties.

The varKeyword and Implicitly Typed Local Variables
You can also declare a local variable and let the compiler infer the variable’s type based on the variable’s initializer. To do so, the varkeyword is used in place of the variable’s type when declaring the variable. Consider the declaration

var x = 7;
Here, the compiler infers that the variable xshould be of type int, because the compiler assumes that whole-number values, like 7, are of type int. Similarly, in the declaration
636	Chapter18 Database:SQL,MySQL,LINQandJavaDB


var y = -123.45;
the compiler infers that yshould be of type double, because the compiler assumes that floating-pointnumbervalues, like -123.45, are oftype double.Typically, implicitly typed local variables are used for more complex types, such as the collections of data returned by LINQ queries.

The whereClause
If the condition in the whereclause evaluates to true, the element is selected—i.e., it’s in-cluded in the results. Here, the ints in the array are included only if they’re greater than 4. An expression that takes an element of a collection and returns trueor falseby testing a condition on that element is known as a predicate.

The selectClause
For each item in the data source, the selectclause determines what value appears in the results. In this case, it’s the intthat the range variable currently represents. A LINQ query typically ends with a selectclause.

Iterating Through the Results of the LINQ Query The foreachstatement

foreach ( var element in filtered ) Console.Write( " {0}", element );
displays the query results. A foreachstatement can iterate through the contents of an ar-ray, collection or the results of a LINQ query, allowing you to process each element in the array, collection or query. The preceding foreachstatement iterates over the query result filtered, displaying each of its items.

LINQ vs. Repetition Statements
It would be simple to display the integers greater than 4 using a repetition statement that tests each value before displaying it. However, this would intertwine the code that selects elements and the code that displays them. With LINQ, these are kept separate, making the code easier to understand and maintain.

The orderbyClause
The orderbyclause sorts the query results in ascending order. The query

var sorted =
from value in values orderby value
select value;
sorts the integers in array valuesinto ascending order and assigns the results to variable sorted. To sort in descending order, use  descendingin the orderbyclause, as in

orderby value descending
An ascendingmodifier also exists but isn’t normally used, because it’s the default. Any value that can be compared with other values of the same type may be used with the or-derbyclause. A value of a simple type (e.g., int) can always be compared to another value of the same type.
18.6 (Optional)MicrosoftLanguageIntegrateQuery(LINQ)   637


The following two queries

var sortFilteredResults = from value in filtered orderby value descending select value;
var sortAndFilter = from value in values where value > 4
orderby value descending select value;

generate the same results, but in different ways. The first query uses LINQ to sort the re-sults of the filteredquery presented earlier in this section. The second query uses both the whereand orderbyclauses. Because queries can operate on the results of other queries, it’s possible to build a query one step at a time, and pass the results of queries between methods for further processing.


More on Implicitly Typed Local Variables
Implicitly typed localvariables can alsobe used toinitialize arrays without explicitly giving their type. For example, the following statement creates an array of intvalues:

var array = new[] { 32, 27, 64, 18, 95, 14, 90, 70, 60, 37 };
Note that there are no square brackets on the left side of the assignment operator, and that new[]is used to specify that the variable is an array.


An Aside: Interface IEnumerable<T>
As we mentioned, the foreachstatement can iterate through the contents of arrays, col-lections and LINQ query results. Actually, foreachiterates over any so-called IEnumera-ble<T>object, which just happens to be what a LINQ query returns. IEnumerable<T>is an interfacethat describesthe functionality of any object that can be iteratedoverandthus offers methods to access each element.
C# arrays are IEnumerable<T>objects, so a foreachstatement can iterate over an array’s elements. Similarly, each LINQ query returns an IEnumerable<T>object. There-fore, you can use a foreachstatement to iterate over the results of any LINQ query. The notation <T>indicates that the interface is a generic interface that can be used with any type of data (for example, ints, strings or Employees).


18.6.2 Querying an Array of EmployeeObjects Using LINQ
LINQ is not limited to querying arrays of primitive types such as ints. It can be used with mostdatatypes,includingstringsanduser-definedclasses.It cannotbeusedwhenaque-ry does not have a defined meaning—forexample, you cannot use orderbyon objects that are not comparable. Comparable types in .NET are those that implement the ICompara-bleinterface. All built-in types, such as string, intand doubleimplement IComparable. Figure 18.23 presents the Employeeclass we use in this section. Figure 18.24 uses LINQ to query an array of Employeeobjects.
638	Chapter18 Database:SQL,MySQL,LINQandJavaDB


1  // Fig. 18.23: Employee.cs
2  // Employee class with FirstName, LastName and MonthlySalary properties. 3  public class Employee
4  {
5	private decimal monthlySalaryValue; // monthly salary of employee 6
7	// auto-implemented property FirstName 8	public string FirstName { get; set; } 9
10	// auto-implemented property LastName 11	public string LastName { get; set; } 12
13	// constructor initializes first name, last name and monthly salary 14	public Employee( string first, string last, decimal salary )
15	{
16	FirstName = first; 17	LastName = last;
18	MonthlySalary = salary; 19     } // end constructor
20
21	// property that gets and sets the employee's monthly salary 22	public decimal MonthlySalary
23	{
24	get 25	{
26	return monthlySalaryValue; 27         } // end get
28	set 29	{
30	if ( value >= 0M ) // if salary is nonnegative 31	{
32	monthlySalaryValue = value; 33            } // end if
34	} // end set
35	} // end property MonthlySalary 36
37	// return a string containing the employee's information 38	public override string ToString()
39	{
40	return string.Format( "{0,-10} {1,-10} {2,10:C}", 41            FirstName, LastName, MonthlySalary );
42	} // end method ToString
43  } // end class Employee

Fig. 18.23 | Employeeclass.

1  // Fig. 18.24: LINQWithArrayOfObjects.cs
2  // LINQ to Objects using an array of Employee objects. 3  using System;
4  using System.Linq;
5

Fig. 18.24 | LINQtoObjectsusinganarrayofEmployeeobjects.(Part1of3.)
18.6 (Optional)MicrosoftLanguageIntegrateQuery(LINQ)   639


6  public class LINQWithArrayOfObjects 7  {
8	public static void Main( string[] args ) 9	{
10	// initialize array of employees 11	Employee[] employees = {
12	new Employee( "Jason", "Red", 5000M ),
13	new Employee( "Ashley", "Green", 7600M ),
14	new Employee( "Matthew", "Indigo", 3587.5M ), 15	new Employee( "James", "Indigo", 4700.77M ), 16	new Employee( "Luke", "Indigo", 6200M ),
17	new Employee( "Jason", "Blue", 3200M ),
18	new Employee( "Wendy", "Brown", 4236.4M ) }; // end init list 19
20	// display all employees
21	Console.WriteLine( "Original array:" ); 22	foreach ( var element in employees ) 23            Console.WriteLine( element );
24
25	// filter a range of salaries using && in a LINQ query 26	var between4K6K =
27	from e in employees
28	where e.MonthlySalary >= 4000M && e.MonthlySalary <= 6000M 29	select e;
30
31	// display employees making between 4000 and 6000 per month 32	Console.WriteLine( string.Format(
33	"\nEmployees earning in the range {0:C}-{1:C} per month:", 34	4000, 6000 ) );
35	foreach ( var element in between4K6K ) 36            Console.WriteLine( element );
37
38	// order the employees by last name, then first name with LINQ 39	var nameSorted =
40	from e in employees
41	orderby e.LastName, e.FirstName 42	select e;
43
44	// header
45	Console.WriteLine( "\nFirst employee when sorted by name:" ); 46
47	// attempt to display the first result of the above LINQ query 48	if ( nameSorted.Any() )
49	Console.WriteLine( nameSorted.First() ); 50         else
51	Console.WriteLine( "not found" ); 52
53	// use LINQ to select employee last names 54	var lastNames =
55	from e in employees 56	select e.LastName;
57

Fig. 18.24 | LINQtoObjectsusinganarrayofEmployeeobjects.(Part2of3.)
640	Chapter18 Database:SQL,MySQL,LINQandJavaDB


58	// use method Distinct to select unique last names 59	Console.WriteLine( "\nUnique employee last names:" ); 60	foreach ( var element in lastNames.Distinct() )
61	Console.WriteLine( element ); 62
63	// use LINQ to select first and last names 64	var names =
65	from e in employees
66	select new { e.FirstName, Last = e.LastName }; 67
68	// display full names
69	Console.WriteLine( "\nNames only:" ); 70	foreach ( var element in names )
71	Console.WriteLine( element ); 72
73	Console.WriteLine(); 74     } // end Main
75  } // end class LINQWithArrayOfObjects




Original array: Jason	Red Ashley	Green Matthew	Indigo James	Indigo Luke	Indigo Jason	Blue Wendy	Brown


$5,000.00 $7,600.00 $3,587.50 $4,700.77 $6,200.00 $3,200.00 $4,236.40


Employees earning in the range $4,000.00-$6,000.00 per month: Jason	Red	$5,000.00
James      Indigo      $4,700.77 Wendy      Brown      $4,236.40

First employee when sorted by name: Jason	Blue	$3,200.00

Unique employee last names: Red
Green Indigo Blue Brown

Names only:
{ FirstName = Jason, Last = Red }
{ FirstName = Ashley, Last = Green } { FirstName = Matthew, Last = Indigo } { FirstName = James, Last = Indigo } { FirstName = Luke, Last = Indigo }
{ FirstName = Jason, Last = Blue } { FirstName = Wendy, Last = Brown }

Fig. 18.24 | LINQtoObjectsusinganarrayofEmployeeobjects.(Part3of3.)
18.6 (Optional)MicrosoftLanguageIntegrateQuery(LINQ)   641


Accessing the Properties of a LINQ Query’s Range Variable
Line 28 of Fig. 18.24 shows a whereclause that accesses the properties of the range vari-able. In this example, the compiler infers that the range variable is of type Employeebased on its knowledge that employeeswas defined as an array of Employeeobjects (lines 11– 18). Any boolexpression can be used in a whereclause. Line 28 uses the conditional AND (&&) operator to combine conditions. Here, only employees that have a salary between $4,000 and $6,000 per month, inclusive, are included in the query result, which is dis-played in lines 35–36.

Sorting a LINQ Query’s Results By Multiple Properties
Line 41 uses an orderbyclause to sort the results according to multiple properties—spec-ified in a comma-separated list. In this query, the employees are sorted alphabetically by last name. Each group of Employees that have the same last name is then sorted within the group by first name.

Any, Firstand CountExtension Methods
Line 48 introduces the query result’s Anymethod, which returns trueif there’s at least one element, and falseif there are no elements. The query result’s Firstmethod (line 49) returns the first element in the result. You should check that the query result is not empty (line 48) before calling First.
We’ve not specified the class that defines methods Firstand Any. Your intuition probably tells you they’re methods declared in the IEnumerable<T>interface, but they aren’t. They’re actually extension methods, but they can be used as if they were methods of IEnumerable<T>.
LINQ defines many more extension methods, such as Count, which returns the number of elements in the results. Rather than using Any, we could have checked that Countwas nonzero, but it’s more efficient to determine whether there’s at least one ele-ment than to count all the elements. The LINQ query syntax is actually transformed by the compiler into extension method calls, with the results of one method call used in the next. It’s this design that allows queries to be run on the results of previous queries, as it simply involves passing the result of a method call to another method.

Selecting a Portion of an Object
Line 56 uses the selectclause to select the range variable’s LastNameproperty rather than the range variable itself. This causes the results of the query to consist of only the last names (as strings),insteadof completeEmployeeobjects.Lines 60–61display theunique last names. The Distinctextension method (line 60) removes duplicate elements, caus-ing all elements in the result to be unique.

Creating New Types in the selectClause of a LINQ Query
The last LINQ query in the example (lines 65–66) selects the properties FirstNameand LastName. The syntax

new { e.FirstName, Last = e.LastName }
creates a new object of an anonymous type (a type with no name), which the compiler generates for you based on the properties listed in the curly braces ({}). In this case, the anonymoustypeconsistsofpropertiesforthefirstandlastnamesoftheselectedEmployee. The LastNameproperty is assigned to the property Lastin the selectclause. This shows
642	Chapter18 Database:SQL,MySQL,LINQandJavaDB


howyoucanspecifyanewnamefortheselectedproperty.Ifyoudon’tspecifyanewname, the property’s original name is used—this is the case for FirstNamein this example. The preceding query is an example of a projection—it performs a transformation on the data. In this case, the transformation creates new objects containing only the FirstNameand Lastproperties. Transformations can also manipulate the data. For example, you could give all employees a 10% raise by multiplying their MonthlySalaryproperties by 1.1.
When creating a new anonymous type, you can select any number of properties by specifying them in a comma-separated list within the curly braces ({}) that delineate the anonymoustypedefinition.Inthisexample,thecompilerautomaticallycreatesanewclass having properties FirstName and Last, and the values are copied from the Employee objects. These selected properties can then be accessed when iterating over the results. Implicitly typed local variables allow you to use anonymous types because you do not have to explicitly state the type when declaring such variables.
When the compiler creates an anonymous type, it automatically generates a ToString method that returns a stringrepresentation of the object. You can see this in the pro-gram’s output—it consists of the property names and their values, enclosed in braces.

18.6.3 Querying a Generic Collection Using LINQ
You can use LINQ to Objects to query Lists just as arrays. In Fig. 18.25, a List of strings is converted to uppercase and searched for those that begin with "R".

1  // Fig. 18.25: LINQWithListCollection.cs
2  // LINQ to Objects using a List< string >. 3  using System;
4  using System.Linq;
5  using System.Collections.Generic; 6
7  public class LINQWithListCollection 8  {
9	public static void Main( string[] args ) 10	{
11	// populate a List of strings
12	List< string > items = new List< string >();
13         items.Add( "aQua" ); // add "aQua" to the end of the List 14         items.Add( "RusT" ); // add "RusT" to the end of the List
15	items.Add( "yElLow" ); // add "yElLow" to the end of the List 16	items.Add( "rEd" ); // add "rEd" to the end of the List
17
18	// convert all strings to uppercase; select those starting with "R" 19	var startsWithR =
20	from item in items
21	let uppercaseString = item.ToUpper() 22	where uppercaseString.StartsWith( "R" ) 23	orderby uppercaseString
24	select uppercaseString; 25
26	// display query results
27	foreach ( var item in startsWithR )
28	Console.Write( "{0} ", item );

Fig. 18.25 | LINQtoObjectsusingaList<string>.(Part1of2.)
18.6 (Optional)MicrosoftLanguageIntegrateQuery(LINQ)   643


29
30	Console.WriteLine(); // output end of line 31
32	items.Add( "rUbY" ); // add "rUbY" to the end of the List
33	items.Add( "SaFfRon" ); // add "SaFfRon" to the end of the List 34
35	// display updated query results 36	foreach ( var item in startsWithR ) 37            Console.Write( "{0} ", item ); 38
39	Console.WriteLine(); // output end of line 40     } // end Main
41  } // end class LINQWithListCollection

RED RUST
RED RUBY RUST

Fig. 18.25 | LINQtoObjectsusingaList<string>.(Part2of2.)


Line 21 uses LINQ’s letclause to create a new range variable. This is useful if you need to store a temporary result for use later in the LINQ query. Typically, letdeclares a new range variable to which you assign the result of an expression that operates on the query’s original range variable. In this case, we use stringmethod ToUpperto convert each itemto uppercase, then store the result in the new range variable uppercaseString. We then use the new range variable uppercaseStringin the where, orderbyand select clauses. The whereclause (line 22) uses stringmethod StartsWithto determine whether uppercaseString starts with the character "R". Method StartsWith performs a case-sensitive comparison to determine whether a stringstarts with the stringreceived as an argument. If uppercaseStringstarts with "R", method StartsWithreturns true, and the element is included in the query results. More powerful stringmatching can be done using .NET’s regular-expression capabilities.
The query is created only once (lines 20–24), yet iterating over the results (lines 27– 28 and 36–37) gives two different lists of colors. This demonstrates LINQ’s deferred exe-cution—the query executes only when you access the results—such as iterating over them or using the Countmethod—not when you define the query. This allows you to create a query once and execute it many times. Any changes to the data source are reflected in the results each time the query executes.
There may be times when you do not want this behavior, and want to retrieve a col-lectionoftheresultsimmediately.LINQprovidesextensionmethodsToArrayandToList for this purpose. These methods execute the query on which they’re called and give you the results as an array or List<T>, respectively. These methods can also improve efficiency if you’ll be iterating over the results multiple times, as you execute the query only once.
C#hasafeaturecalled collectioninitializers,whichprovideaconvenientsyntax(sim-ilar to array initializers) for initializing a collection. For example, lines 12–16 of Fig. 18.25 could be replaced with the following statement:

List< string > items =
new List< string > { "aQua", "RusT", "yElLow", "rEd" };
644	Chapter18 Database:SQL,MySQL,LINQandJavaDB

18.7 (Optional) LINQ to SQL
[Note: This section supports Chapters 20–22.] LINQ to SQL enables you to access data in SQL Server databases using the same LINQ syntax introduced in Section 18.6. You in-teractwiththedatabaseviaclassesthatareautomaticallygeneratedfromthedatabasesche-ma by the IDE’s LINQ to SQL Designer. For each table in the database, the IDE creates two classes:
•	A class that represents a row of the table: This class contains properties for each column in the table. LINQ to SQL creates objects of this class—called row ob-jects—to store the data from individual rows of the table.
•	 A class that represents the table: LINQ to SQL creates an object of this class to store a collection of row objects that correspond to all of the rows in the table.
Relationships between tables are also taken into account in the generated classes:
•	In a row object’s class, an additional property is created for each foreign key. This property returns the row object of the corresponding primary key in another ta-ble. For example, the class that represents the rows of the Booksdatabase’s Au-thorISBNtable also contains an Authorproperty and a Titleproperty—from any AuthorISBNrow object, you can access the full author and title information.
•	In the class for a row object, an additional property is created for the collection of row objects with foreign-keys that reference the row object’s primary key. For example, the LINQ to SQL class that represents the rows of the Booksdatabase’s Authorstable contains an AuthorISBNsproperty that you can use to get all of the books written by that author. The IDE automatically adds the "s"to "Author-ISBN"toindicatethatthis property representsa collection ofAuthorISBNobjects. Similarly,theLINQtoSQLclassthatrepresentstherowsoftheTitlestablealso contains an AuthorISBNsproperty that you can use to get all of the co-authors of a particular title.
Once generated, the LINQ to SQL classes have full IntelliSense support in the IDE.

IQueryableInterface
LINQ to SQL works through the IQueryableinterface, which inherits from the IEnu-merableinterface introduced in Section 18.6. When a LINQ to SQL query on an IQue-ryable object executes against the database, the results are loaded into objects of the corresponding LINQ to SQL classes for convenient access in your code.

DataContextClass
All LINQ to SQL queries occur via a DataContextclass, which controls the flow of data between the program and the database. A specific DataContextderived class, which inher-its from the class System.Data.Linq.DataContext, is created when the LINQ to SQL classes representing each row of the table are generated by the IDE. This derived class has properties for each table in the database, which can be used as data sources in LINQ que-ries. Any changes made to the DataContextcan be saved back to the database using the DataContext’s SubmitChangesmethod, so with LINQ to SQL you can modify the data-base’s contents.
18.8 (Optional)QueryingaDatabasewithLINQ   645

18.8 (Optional) Querying a Database with LINQ
[Note: ThissectionsupportsChapters 20–22.]Inthissection, wedemonstratehowtocon-nect to a database, query it and display the results of the query. There is little code in this section—the IDE provides visual programming tools and wizards that simplify accessing data in applications. These tools establish database connections and create the objects nec-essary to view and manipulate the data through Windows Forms GUI controls—a tech-nique known as data binding.
Our first example performs a simple query on the Booksdatabase from Section 18.3. We retrieve the entire Authors table and use data binding to display its data in a DataGridView—a control from namespace System.Windows.Formsthat can display data from a data source in tabular format. The basic steps we’ll perform are:
•	Connect to the Booksdatabase.
•	Create the LINQ to SQL classes required to use the database. •	Add the Authorstable as a data source.
•	 Drag the Authorstable data source onto the Design view to create a GUI for dis-playing the table’s data.
•	Add a few statements to the program to allow it to interact with the database.
The GUI for the program is shown in Fig. 18.26. All of the controls in this GUI are automatically generatedwhen we draga datasource that representsthe Authorstableonto the Formin Design view. The BindingNavigatorat the top of the window is a collection of controls that allow you to navigate through the records in the DataGridViewthat fills the rest of the window. The BindingNavigatorcontrols also allow you to add records, delete records and save your changes to the database. If you add a new record, note that empty values are not allowed in the Booksdatabase, so attempting to save a new record without specifying a value for each field will cause an error.


Move previous	Move next	Add new	Save Data
Move first	Current position	Move last	Delete


GUIcontrolsforthe BindingNavigator

DataGridViewwith theAuthorstable’s columnnames

Youcanaddanewrecordby typinginthisrowofthe DataGridView

Fig. 18.26 | GUIfortheDisplay Authors Table application.

18.8.1 Creating LINQ to SQL Classes
This section presents the steps required to create LINQ to SQL classes for a database.
646	Chapter18 Database:SQL,MySQL,LINQandJavaDB


Step 1: Creating the Project
Create a new Windows Forms Application named DisplayTable. Change the name of the source file to DisplayAuthorsTable.cs. The IDE updates the Form’s class name to match the source file. Set the Form’s Text property to DisplayAuthorsTable.

Step 2: Adding a Database to the Project and Connecting to the Database
To interact with a database, you must create a connection to the database. This will also give you the option of copying the database file to your project.
1. In Visual C# 2010 Express, select View > Other Windows > Database Explorer to display the Database Explorer window. By default, it appears on the left side of the IDE. If you’re using a full version of Visual Studio, select View > Server Ex-plorer to display the Server Explorer. From this point forward, we’ll refer to the Database Explorer. If you have a full version of Visual Studio, substitute Server Explorer for Database Explorer in the steps.
2.  Click the Connect to Database icon (	) at the top of the Database Explorer. If the Choose Data Source dialog appears (Fig. 18.27), selectMicrosoft SQL Server Database File from the Data source: list. If you check the Always use this selection CheckBox, the IDE will use this type of database file by default when you connect to databases in the future. Click Continue to display the Add Connection dialog.















Fig. 18.27 | Choose Data Source dialog.

3.  In the Add Connection dialog (Fig. 18.28), the Data source: TextBoxreflects your selection from the Choose Data Source dialog. You can click the Change… But-tonto select a different type of database. Next, click Browse… to locate and select the Books.mdffile in the Databasesdirectory included with this chapter’s exam-ples. You can click Test Connection to verify that the IDE can connect to the database through SQL Server Express. Click OK to create the connection.

Error-Prevention Tip 18.1
Ensure that no other program is using the database file before you attempt to add it to the project. Connecting to the database requires exclusive access.
18.8 (Optional)QueryingaDatabasewithLINQ   647


i



















Fig. 18.28 | Add Connection dialog.

\Step 3: Generating the LINQ to SQL classes
After adding the database, you must select the database tables from which the LINQ to SQL classes will be created. LINQ to SQL uses the database’s schema to help define the classes.
1. Right click the project name in the Solution Explorer and select Add > New Item… to display the Add New Item dialog. Select the LINQ to SQL Classes template, name thenewitem Books.dbmland click theAdd button. TheObject Relational Designer  window  will  appear  (Fig. 18.29).  You  can  also  double  click  the Books.dbmlfile in the Solution Explorer to open the Object Relational Designer.




Dragthedatabase’s tablesheretogenerate theLINQtoSQLclasses



Fig. 18.29 | Object Relational Designer window.

2. Expand the Books.mdfdatabase node in the Database Explorer, then expand the Tables node. Drag the Authors, Titlesand AuthorISBNtables onto the Object Relational Designer. The IDE prompts whether you want to copy the database to the project directory. Select Yes. The Object Relational Designer will display the tables that you dragged from the Database Explorer (Fig. 18.30). Notice that the
648	Chapter18 Database:SQL,MySQL,LINQandJavaDB


i








Fig. 18.30 | Object Relational Designer windowshowingtheselectedtablesfromthe Booksdatabaseandtheirrelationships.

ObjectRelationalDesigner namedtheclassthatrepresentsitemsfromtheAuthors table as Author, and named the class that represents the Titlestable as Title. ThisisbecauseoneobjectoftheAuthorclassrepresentsoneauthor—asinglerow from the Authorstable. Similarly, one object of the Titleclass represents one book—asinglerowfromtheTitlestable.BecausetheclassnameTitleconflicts with one of the column names in the Titlestable, the IDE renames that col-umn’s property in the Titleclass as Title1.
3.  Save the Books.dbmlfile.
When you save Books.dbml, the IDE generates the LINQ to SQL classes that you can use to interact with the database. These include a class for each table you selected from the database and a derived class of DataContextnamed BooksDataContextthat enables you to programmatically interact with the database.

Error-Prevention Tip 18.2
Be sure to save the file in the Object Relational Designer before trying to use the LINQ to SQL classes in code. The IDE does not generate the classes until you save the file.

18.8.2 Data Bindings Between Controls and the LINQ to SQL Classes
The IDE’s automatic data binding capabilities simplify creating applications that can view and modify the data in a database. You must write a small amount of code to enable the autogenerated data-binding classes to interact with the autogenerated LINQ to SQL class-es. You’ll now perform the steps to display the contents of the Authorstable in a GUI.

Step 1: Adding the AuthorLINQ to SQL Class as a Data Source TousetheLINQtoSQLclassesfordatabinding,youmustfirstaddthemasadatasource.
1. Select Data > Add New Data Source… to display the Data Source Configuration Wizard.
2.  The LINQ to SQL classes are used to create objects representing the tables in the database, so we’ll use an Object data source. In the dialog, select Object and click Next >. Expand the tree view as shown in Fig. 18.31 and ensure that Author is checked. An object of this class will be used as the data source.
3.  Click Finish.
18.8 (Optional)QueryingaDatabasewithLINQ   649























Fig. 18.31 | SelectingtheAuthorLINQtoSQLclassasthedatasource.

The Authorstable in the database is now a data source that can be used by the bind-ings.  Open  the  Data  Sources  window  (Fig. 18.32)  by  selecting  Data > Show  Data Sources—the window is displayed at the left side of the IDE. You can see the Authorclass that you added in the previous step. The columns of the database’s Authorstable should appear below it, as well as an AuthorISBNsentry representing the relationship between the database’s Authorsand AuthorISBNtables.








Fig. 18.32 | Data Sources windowshowingtheAuthorclassasadatasource.

Step 2: Creating GUI Elements
Next, you’ll use the Design view to create a GUI control that can display the Authorsta-ble’s data.
1. Switch to Design view for the DisplayAuthorsTableclass.
2.  Click the Author node in the Data Sources window—it should change to a drop-down list. Open the drop-down by clicking the down arrow and ensure that the
650	Chapter18 Database:SQL,MySQL,LINQandJavaDB


DataGridViewoption is selected—this is the GUI control that will beusedto dis-play and interact with the data.
3. Drag the Author node from the Data Sources window onto the Formin Design view.
The IDE creates a DataGridView(Fig. 18.33) with the correct column names and a Bind-ingNavigator(authorBindingNavigator) that contains Buttons for moving between en-tries, adding entries, deleting entries and saving changes to the database. The IDE also generates a BindingSource(authorBindingSource), which handles the transfer of data between the data source and the data-bound controls on the Form. Nonvisual components such as the BindingSourceand the non-visual aspects of the BindingNavigatorappear in the component tray—the gray region below the Formin Design view. We use the default names for automatically generated components throughout this chapter to show exactly what the IDE creates. To make the DataGridView occupy the entire window, select the DataGridView, then use the Properties window to set the Dockproperty to Fill.




GUIcontrolsforthe BindingNavigator

DataGridViewwith theAuthorstable’s columnnames








Objectsinthecomponenttray (thegrayareabelowtheForm)

Fig. 18.33 | ComponenttrayholdsnonvisualcomponentsinDesign view.

Step 3: Connecting the BooksDataContextto the authorBindingSource
The final step is to connect the BooksDataContext(created with the LINQ to SQL classes in Section 18.8.1) tothe authorBindingSource(created earlierin this section), so that the application can interact with the database. Figure 18.34 shows the small amount of code needed to obtain data from the database and to save any changes that the user makes to the data back into the database.
As mentioned in Section 18.7, a DataContextobject is used to interact with the data-base. The BooksDataContextclass was automatically generated by the IDE when you cre-ated the LINQ to SQL classes to allow access to the Booksdatabase. Line 18 creates an object of this class named database.
18.8 (Optional)QueryingaDatabasewithLINQ   651


1  // Fig. 18.34: DisplayAuthorsTable.cs
2  // Displaying data from a database table in a DataGridView. 3  using System;
4  using System.Linq;
5  using System.Windows.Forms; 6
7  namespace DisplayTable 8  {
9	public partial class DisplayAuthorsTable : Form 10	{
11	// constructor
12	public DisplayAuthorsTable() 13	{
14	InitializeComponent(); 15         } // end constructor
16
17	// LINQ to SQL data context
18	private BooksDataContext database = new BooksDataContext(); 19
20	// load data from database into DataGridView
21	private void DisplayAuthorsTable_Load( object sender, EventArgs e ) 22	{
23	// use LINQ to order the data for display 24	authorBindingSource.DataSource =
25	from author in database.Authors 26	orderby author.AuthorID
27	select author;
28	} // end method DisplayAuthorsTable_Load 29
30	// click event handler for the Save Button in the
31	// BindingNavigator saves the changes made to the data 32	private void authorBindingNavigatorSaveItem_Click(
33	object sender, EventArgs e ) 34         {
35	Validate(); // validate input fields
36	authorBindingSource.EndEdit(); // indicate edits are complete 37	database.SubmitChanges(); // write changes to database file 38         } // end method authorBindingNavigatorSaveItem_Click
39	} // end class DisplayAuthorsTable
40  } // end namespace DisplayTable









Fig. 18.34 | DisplayingdatafromadatabasetableinaDataGridView.

Create the Form’s Loadhandler by double clicking the Form’s title bar in Design view. We allow data to move between the DataContextand the BindingSourceby creating a
652	Chapter18 Database:SQL,MySQL,LINQandJavaDB


LINQ query that extracts data from the BooksDataContext’s Authorsproperty (lines 25– 27), which corresponds to the Authorstable in the database. The authorBindingSource’s DataSourceproperty (line 24) is set to the results of this query. The authorBindingSource uses the DataSourceto extract data from the database and to populate the DataGridView.

Step 4: Saving Modifications Back to the Database
If the user modifies the data in the DataGridView, we’d also like to save the modifications in the database. By default, the BindingNavigator’s Save Data Button(	) is disabled. To enable it, right click this Button’s icon and select Enabled. Then, double click the icon to create its Clickevent handler.
Saving the data entered into the DataGridViewback to the database is a three-step pro-cess (lines 35–37). First, all controls on the form are validated (line 35)—if any of the con-trols have event handlers for the Validatingevent, those execute. You typically handle this event to determine whether a control’s contents are valid. Second, line 36 calls EndEditon the authorBindingSource, which forces it to save any pending changes in the BooksData-Context. Finally, line 37 calls SubmitChanges on the BooksDataContext to store the changes in the database. For efficiency, LINQ to SQL saves only data that has changed.

Step 5: Configuring the Database File to Persist Changes
When you run the program in debugmode, thedatabasefile is overwritten withtheoriginal database file each time you execute the program. This allows you to test your program with the original content until it works correctly. When you run the program in release mode (Ctrl + F5), changes you make to the database persist automatically; however, if you change the code, the next time you run the program, the database will be restored to its original ver-sion. Topersistchanges forallexecutions, select thedatabasein the Solution Explorer andset the Copy to Output Directory property in the Properties window to Copy if newer.


18.9 (Optional) Dynamically Binding LINQ to SQL
Query Results
[Note:ThissectionsupportsChapters 20–22.]Nowthatyou’veseenhowtodisplayanen-tire database table in a DataGridView, we show how to perform several different queries and  display  the  results  in  a  DataGridView.  The  Display  Query  Results  application (Fig. 18.35) allows the user to select a query from the ComboBoxat the bottom of the win-dow, then displays the results of the query.

18.9.1 Creating the Display Query Results GUI
Perform the following steps to build the Display Query Results application’s GUI.

Step 1: Creating the Project
First, create a new Windows Forms Application named DisplayQueryResult. Rename the source file to TitleQueries.cs. Set the Form’s Text property to DisplayQueryResults.

Step 2: Creating the LINQ to SQL Classes
Follow the steps in Section 18.8.1 to add the Booksdatabase to the project and generate the LINQ to SQL classes.
18.9 (Optional)DynamicallyBindingLINQtoSQLQueryResults   653


a)Resultsofthe“All titles”query,which showsthecontents oftheTitlestable orderedbythebook titles






b)Resultsofthe “Titleswith2008 copyright”query





c)Resultsofthe “Titlesendingwith ’HowtoProgram’” query







Fig. 18.35 | SampleexecutionoftheDisplay Query Results application.

Step 3: Creating a DataGridViewto Display the TitlesTable
Follow Steps 1 and 2 in Section 18.8.2 to create the data source and the DataGridView. In this example, select the Titleclass (rather than the Authorclass) as the data source, and drag the Title node from the Data Sources window onto the form.

Step 4: Adding a ComboBoxto the Form
In Design view, add a ComboBoxnamed queriesComboBoxbelow the DataGridViewon the Form. Users will select which query to execute from this control. Set the ComboBox’s Dock property to Bottomand the DataGridView’s Dockproperty to Fill.
Next,you’lladdthenamesofthequeriestotheComboBox.OpentheComboBox’sString Collection Editor by right clicking the ComboBox and selecting Edit Items. You can also access the String Collection Editor from the ComboBox’s smart tag menu. A smart tag menu provides you with quick access to common properties you might set for a control (such as the Multilineproperty of a TextBox), so you can set these properties directly in Design view, rather than in the Properties window. You can open a control’s smart tag menu by
654	Chapter18 Database:SQL,MySQL,LINQandJavaDB


clickingthesmallarrowhead(   )thatappearsinthecontrol’supper-rightcornerinDesign view when the control is selected. In the String Collection Editor, add the following three items to queriesComboBox—one for each of the queries we’ll create:
1.  Alltitles
2.  Titleswith2008copyright
3.  Titlesendingwith"HowtoProgram"

18.9.2 Coding the Display Query Results Application
Next you must write code that executes the appropriate query each time the user chooses a different item from queriesComboBox. Double click queriesComboBoxin Design view to generateaqueriesComboBox_SelectedIndexChangedeventhandler(Fig. 18.36,lines44– 78) in the TitleQueries.csfile. In the event handler, add a switchstatement (lines 48– 75) to change the titleBindingSource’s DataSourceproperty to a LINQ query that re-turns the correct set of data. The data bindings created by the IDE automatically update the titleDataGridVieweach time we change its DataSource. The MoveFirstmethod of theBindingSource(line77)movestothefirstrowoftheresulteachtimeaqueryexecutes. The results of the queries in lines 53–55, 61–64 and 70–73 are shown in Fig. 18.35(a), (b) and (c), respectively. [Note: As we mentioned previously, in the generated LINQ to SQL classes, the IDE renamed the Titlecolumn of the Titlestable as Title1to avoid a naming conflict with the class Title.]

Customizing the Form’s LoadEvent Handler CreatetheTitleQueries_Loadeventhandler(lines20–28)bydoubleclickingthetitlebar in Design view. Line 23 sets the Logproperty of the BooksDataContextto Console.Out. ThiscausestheprogramtooutputtotheconsoletheSQLquerythatissenttothedatabase for each LINQ query. When the Formloads, it should display the complete list of books from the Titlestable, sorted by title. Rather than defining the same LINQ query as in lines  53–55,  we  can  programmatically  cause  the  queriesComboBox_SelectedIndex-Changedevent handler to execute simply by setting the queriesComboBox’s Selected-Indexto 0(line 27).

1  // Fig. 18.36: TitleQueries.cs
2  // Displaying the result of a user-selected query in a DataGridView. 3  using System;
4  using System.Linq;
5  using System.Windows.Forms; 6
7  namespace DisplayQueryResult 8  {
9	public partial class TitleQueries : Form 10	{
11	public TitleQueries() 12	{
13	InitializeComponent();
14	} // end constructor

Fig. 18.36 | Displayingtheresultofauser-selectedqueryinaDataGridView.(Part1of3.)
18.9 (Optional)DynamicallyBindingLINQtoSQLQueryResults   655


15
16	// LINQ to SQL data context
17	private BooksDataContext database = new BooksDataContext(); 18
19	// load data from database into DataGridView
20	private void TitleQueries_Load( object sender, EventArgs e ) 21	{
22	// write SQL to standard output stream 23	database.Log = Console.Out;
24
25	// set the ComboBox to show the default query that 26	// selects all books from the Titles table
27	queriesComboBox.SelectedIndex = 0; 28         } // end method TitleQueries_Load
29
30	// Click event handler for the Save Button in the
31	// BindingNavigator saves the changes made to the data 32	private void titleBindingNavigatorSaveItem_Click(
33	object sender, EventArgs e ) 34         {
35	Validate(); // validate input fields
36	titleBindingSource.EndEdit(); // indicate edits are complete 37	database.SubmitChanges(); // write changes to database file 38
39	// when saving, return to "all titles" query 40	queriesComboBox.SelectedIndex = 0;
41	} // end method titleBindingNavigatorSaveItem_Click 42
43	// loads data into titleBindingSource based on user-selected query 44	private void queriesComboBox_SelectedIndexChanged(
45	object sender, EventArgs e ) 46         {
47	// set the data displayed according to what is selected 48	switch ( queriesComboBox.SelectedIndex )
49	{
50	case 0: // all titles
51	// use LINQ to order the books by title 52	titleBindingSource.DataSource =
53	from book in database.Titles 54	orderby book.Title1
55	select book; 56                  break;
57	case 1: // titles with 2008 copyright 58                  // use LINQ to get titles with 2008 59                  // copyright and sort them by title 60                  titleBindingSource.DataSource =
61	from book in database.Titles 62	where book.Copyright == "2008" 63	orderby book.Title1
64	select book;
65	break;

Fig. 18.36 | Displayingtheresultofauser-selectedqueryinaDataGridView.(Part2of3.)
656	Chapter18 Database:SQL,MySQL,LINQandJavaDB


66	case 2: // titles ending with "How to Program" 67                  // use LINQ to get titles ending with
68	// "How to Program" and sort them by title 69	titleBindingSource.DataSource =
70	from book in database.Titles
71	where book.Title1.EndsWith( "How to Program" ) 72	orderby book.Title1
73	select book; 74                  break;
75	} // end switch 76
77	titleBindingSource.MoveFirst(); // move to first entry 78         } // end method queriesComboBox_SelectedIndexChanged
79	} // end class TitleQueries
80  } // end namespace DisplayQueryResult

Fig. 18.36 | Displayingtheresultofauser-selectedqueryinaDataGridView.(Part3of3.)


Saving Changes
Follow the instructions in the previous example to add a handler for the BindingNaviga-tor’s Save Data Button(lines 32–41). Note that, except for changes to the names, the three lines are identical. The last statement (line 40) displays the results of the Alltitles query in the DataGridView.


18.10  Java DB/Apache Derby
The Java SE 6 and 7 Development Kits (JDKs) come bundled with the open source, pure JavadatabaseJavaDB(theOraclebrandedversionofApacheDerby).Chapters 27–28use Java DB in data-driven web applications. Similarto MySQL, Java DB has both an embed-ded version and a network (client/server) version. The tools we use in Chapters 27–28 come with Java DB. For those examples, we use Java DB’s network version, and we pro-vide all the information you need to configure each example’s database. You can learn more about Apache Derby at db.apache.org/derby. You can learn more about Java DB at www.oracle.com/technetwork/java/javadb/overview/index.html.






Summary
Section 18.1 Introduction
•  A database (p. 618) is an integrated collection of data. A database management system (DBMS; p. 618) provides mechanisms for storing, organizing, retrieving and modifying data.
•  Today’s most popular database management systems are relational database (p. 618) systems.
•  SQL (p. 618) is the international standard language used to query (p. 618) and manipulate rela-tional data.
Summary   657


Section 18.2 Relational Databases
•  A relational database (p. 618) stores data in tables (p. 618). Tables are composed of rows (p. 619), and rows are composed of columns in which values are stored.
•  A table’s primary key (p. 619) provides a unique value that cannot be duplicated among rows. •  Each column (p. 619) of a table represents a different attribute.
•  The primary key can be composed of more than one column.
•  A foreign key (p. 621) is a column in a table that must match the primary-key column in another table. This is known as the Rule of Referential Integrity (p. 621).
•  Every column in a primary key must have a value, and the value of the primary key must be unique. This is known as the Rule of Entity Integrity (p. 622).
•  A one-to-many relationship (p. 623) between tables indicates that a row in one table can have many related rows in a separate table.
•  Foreign keys enable information from multiple tables to be joined together. There’s a one-to-many relationship between a primary key and its corresponding foreign key.

Section 18.4.1 Basic SELECTQuery •  The basic form of a query (p. 624) is
SELECT * FROM tableName
where the asterisk (*; p. 624) indicates that all columns from tableName should be selected, and tableName specifies the table in the database from which rows will be retrieved.
•  To retrieve specific columns, replace the *with a comma-separated list of column names.

Section 18.4.2 WHEREClause
•  The optional WHEREclause (p. 624) in a query specifies the selection criteria for the query. The basic form of a query with selection criteria (p. 624) is
SELECT columnName1,columnName2,… FROMtableName WHEREcriteria
•  TheWHEREclausecancontainoperators<,>,<=,>=,=,<>andLIKE.LIKE(p. 625)isusedforstring pattern matching (p. 625) with wildcard characters percent (%) and underscore (_).
•  A percent character (%; p. 625) in a pattern indicates that a string matching the pattern can have zero or more characters at the percent character’s location in the pattern.
•  An underscore ( _; p. 625) in the pattern string indicates a single character at that position in the pattern.

Section 18.4.3 ORDER BYClause
•  A query’s result can be sorted with the ORDERBYclause (p. 626). The simplest form of an ORDER BYclause is
SELECT columnName1,columnName2,… FROMtableName ORDERBYcolumn ASC
SELECT columnName1,columnName2,… FROMtableName ORDERBYcolumn DESC
where ASCspecifies ascending order, DESCspecifies descending order and column specifies the col-umn on which the sort is based. The default sorting order is ascending, so ASCis optional.
•  Multiple columns can be used for ordering purposes with an ORDERBYclause of the form ORDER BY column1 sortingOrder, column2 sortingOrder, …
•  The WHEREand ORDERBYclauses can be combined in one query. If used, ORDER BYmust be the last clause in the query.
658	Chapter18 Database:SQL,MySQL,LINQandJavaDB


Section 18.4.4 Merging Data from Multiple Tables: INNER JOIN
•  An INNERJOIN(p. 628) merges rows from two tables by matching values in columns that are common to the tables. The basic form for the INNERJOINoperator is:
SELECT columnName1, columnName2, … FROM table1
INNER JOIN table2
ON table1.columnName = table2.columnName
The ONclause (p. 628) specifies the columns from each table that are compared to determine which rows are joined. If a SQL statement uses columns with the same name from multiple ta-bles, the column names must be fully qualified (p. 629) by prefixing them with their table names and a dot (.).

Section 18.4.5 INSERTStatement
•  An INSERTstatement (p. 629) inserts a new row into a table. The basic form of this statement is
INSERT INTO tableName ( columnName1, columnName2, …, columnNameN )
VALUES ( value1, value2, …, valueN )
where tableName is the table in which to insert the row. The tableName is followed by a comma-separated list of column names in parentheses. The list of column names is followed by the SQL keyword VALUES(p. 630) and a comma-separated list of values in parentheses.
•  SQL uses single quotes (') to delimit strings. To specify a string containing a single quote in SQL, escape the single quote with another single quote (i.e., '').

Section 18.4.6 UPDATEStatement
•  An UPDATEstatement (p. 631) modifies data in a table. The basic form of an UPDATEstatement is
UPDATE tableName
SET columnName1 =value1, columnName2 =value2, …, columnNameN =valueN
WHERE criteria
where tableName is the table to update. Keyword SET(p. 631) is followed by a comma-separated list of columnName =value pairs. The optional WHEREclause determines which rows to update.

Section 18.4.7 DELETEStatement
•  A DELETEstatement (p. 631) removes rows from a table. The simplest form for a DELETEstate-ment is
DELETE FROM tableName WHERE criteria
where tableName is the table from which to delete a row (or rows). The optional WHEREcriteria determines which rows to delete. If this clause is omitted, all the table’s rows are deleted.

Section 18.5 MySQL
•  MySQL (pronounced “my sequel”) is a robust and scalable relational database management sys-tem (RDBMS) that was created by the Swedish consulting firm TcX in 1994.
•  MySQL is a multiuser, multithreaded RDBMS server that uses SQL to interact with and manip-ulate data.
•  Multithreading capabilities enable MySQL database to perform multiple tasks concurrently, al-lowing the server to process client requests efficiently.
•  Implementations of MySQL are available for Windows, Mac OS X, Linux and UNIX.
Summary   659


Section 18.6 (Optional) Microsoft Language Integrate Query (LINQ)
•  .NET’scollectionclassesprovidereusabledatastructuresthatarereliable,powerfulandefficient.
•  Lists automatically increase their size to accommodate additional elements.
•  Large amounts of data are often stored in a database—an organized collection of data. Today’s most popular database systems are relational databases. SQL is the international standard lan-guage used almost universally with relational databases to perform queries (i.e., to request infor-mation that satisfies given criteria).
•  LINQ allows you to write query expressions (similar to SQL queries) that retrieve information fromawidevarietyofdatasources.YoucanqueryarraysandLists,selectingelementsthatsatisfy a set of conditions—this is known as filtering.
•  A LINQ provider is a set of classes that implement LINQ operations and enable programs to interact with data sources to perform tasks such as sorting, grouping and filtering elements.

Section 18.6.1 Querying an Array of intValues Using LINQ
•  Repetition statements focus on the process of iterating through elements and checking whether they satisfythe desiredcriteria.LINQspecifies theconditions thatselectedelementsmustsatisfy, not the steps necessary to get the results.
•  The System.Linqnamespace contains the classes for LINQ to Objects.
•  A fromclause specifies a range variable and the data source to query. The range variable represents each item in the data source (one at a time), much like the control variable in a foreachstatement.
•  If the condition in the whereclause evaluates to truefor an element, it’s included in the results. •  The selectclause determines what value appears in the results.
•  AC#interfacedescribesasetofmethodsandpropertiesthatcanbeusedtointeractwithanobject.
•  The IEnumerable<T>interface describes the functionality of any object that’s capable of being iterated over and thus offers methods to access each element in some order.
•  A class that implements an interface must define each method in the interface. •  Arrays and collections implement the IEnumerable<T>interface.
•  A foreachstatement can iterate over any object that implements the IEnumerable<T>interface. •  A LINQ query returns an object that implements the IEnumerable<T>interface.
•  The orderbyclause sorts query results in ascending order by default. Results can also be sorted in descending order using the descendingmodifier.
•  C# provides implicitly typed local variables, which enable the compiler to infer a local variable’s type based on the variable’s initializer.
•  To distinguish such an initialization from a simple assignment statement, the varkeyword is used in place of the variable’s type.
•  Youcanuselocaltypeinferencewithcontrolvariablesintheheaderofafororforeachstatement.
•  Implicitly typed local variables can be used to initialize arrays without explicitly giving their type. To do so, use new[]to specify that the variable is an array.

Section 18.6.2 Querying an Array of EmployeeObjects Using LINQ •  LINQ can be used with collections of most data types.
•  Any booleanexpression can be used in a whereclause.
•  An orderbyclause can sort the results according to multiple properties specified in a comma-sep-arated list.
•  Method Anyreturns trueif there’s at least one element in the result; otherwise, it returns false.
660	Chapter18 Database:SQL,MySQL,LINQandJavaDB


•  The Firstmethod returns the first element in the query result. You should check that the query result is not empty before calling First.
•  The Countmethod returns the number of elements in the query result. •  The Distinctmethod removes duplicate values from query results.
•  You can select any number of properties in a selectclause by specifying them in a comma-sep-arated list in braces after the newkeyword. The compiler automatically creates a new class having these properties—called an anonymous type.

Section 18.6.3 Querying a Generic Collection Using LINQ •  LINQ to Objects can query Lists.
•  LINQ’s letclause creates a new range variable. This is useful if you need to store a temporary result for use later in the LINQ query.
•  The StartsWithmethod of the stringclass determines whether a stringstarts with the string passed to it as an argument.
•  A LINQ query uses deferred execution—it executes only when you access the results, not when you create the query.

Section 18.7 (Optional) LINQ to SQL
•  LINQ to SQL enables you to access data in SQL Server databases using LINQ syntax.
•  You interact with LINQ to SQL via classes that are automatically generated by the IDE’s LINQ to SQL Designer based on the database schema.
•  LINQtoSQLrequires everytableto haveaprimarykey tosupportmodifyingthedatabasedata.
•  The IDE creates a class for each table. Objects of these classes represent the collections of rows in the corresponding tables.
•  The IDE also creates a class for a row of each table with a property for each column in the table. Objects of these classes (row objects) hold the data from individual rows in the database’s tables.
•  In the class for a row object, an additional property is created for each foreign key. This property returns the row object of the corresponding primary key in another table.
•  In the class for a row object, an additional property is created for the collection of row objects with foreign-keys that reference the row object’s primary key.
•  Once generated, the LINQ to SQL classes have full IntelliSense support in the IDE.

Section 18.8 (Optional) Querying a Database with LINQ
•  The IDE provides visual programming tools and wizards that simplify accessing data in your projects. These tools establish database connections and create the objects necessary to view and manipulate the data through the GUI—a technique known as data binding.
•  A DataGridView(namespace System.Windows.Forms) displays data from a data source in tabular format.
•  A BindingNavigatoris a collection of controls that allow you to navigate through the records displayed in a GUI. The BindingNavigatorcontrols also allow you to add records, delete records and save your changes to the database.

Section 18.8.1 Creating LINQ to SQL Classes
•  To interact with a database, you must create a connection to the database.
•  In Visual C# 2010 Express, use the Database Explorer window to connect to the database. In full versions of Visual Studio 2010, use the Server Explorer window.
Self-ReviewExercises   661


•  After connecting to the database, you can generate the LINQ to SQL classes by adding a new LINQ to SQL Classes item to your project, then dragging the tables you wish to use from the Da-tabase Explorer onto the Object Relational Designer. When you save the .dbmlfile, the IDE gen-erates the LINQ to SQL classes.

Section 18.8.2 Data Bindings Between Controls and the LINQ to SQL Classes
•  To use the LINQ to SQL classes for data binding, you must first add them as a data source.
•  Select Data > Add New Data Source… to display the Data Source Configuration Wizard. Use an Ob-ject data source. Select the LINQ to SQL object to use as a data source. Drag that data source from the Data Sources window onto the Formto create controls that can display the table’s data.
•  By default, the IDE creates a DataGridViewwith the correct column names and a BindingNavi-gatorthat contains Buttons for moving between entries, adding entries, deleting entries and sav-ing changes to the database.
•  The IDE also generates a BindingSource, which handles the transfer of data between the data source and the data-bound controls on the Form.
•  The result of a LINQ query on the DataContextcan be assigned to the BindingSource’s Data-Sourceproperty. The BindingSourceuses the DataSourceto extract data from the database and to populate the DataGridView.
•  To save the user’s changes to the data in the DataGridView, enable the BindingNavigator’s Save Data Button(	). Then, double click the icon to create its Clickevent handler. In the event handler, you must validate the data, call EndEditon the BindingSourceto save pending changes in the DataContext, and call SubmitChanges on the DataContext to store the changes in the database. For efficiency, LINQ to SQL saves only data that has changed.

Section 18.9 (Optional) Dynamically Binding LINQ to SQL Query Results
•  The IDE displays smart tag menus for many GUI controls to provide you with quick access to common properties you might set for a control, so you can set these properties directly in Design view. You can open a control’s smart tag menu by clicking the small arrowhead (    ) that appears in the control’s upper-right corner in Design view.
•  The MoveFirstmethod of the BindingSourcemoves to the first row of the result.

Section 18.10 Java DB/Apache Derby
•  The Java SE 6 and 7 Development Kits (JDKs) come bundled with the open source, pure Java database Java DB (the Oracle branded version of Apache Derby).

Self-Review Exercises
18.1	Fill in the blanks in each of the following statements:
a)  The international standard database language is	. b)  A table in a database consists of	and                 . c)   The	uniquely identifies each row in a table.
d)  SQL keyword	is followed by the selection criteria that specify the rows to select in a query.
e)   SQL keywords	specify the order in which rows are sorted in a query. f)   Merging rows from multiple database tables is called	the tables.
g)  A(n)	is an organized collection of data.
h)  A(n)	is a set of columns whose values match the primary key values of an-other table.
i)   The LINQ	clause is used for filtering.
662	Chapter18 Database:SQL,MySQL,LINQandJavaDB


j)   To get only unique results from a LINQ query, use the                     method. k)  The                clause declares a new temporary variable within a LINQ query.
18.2	State whether each of the following is true or false. If false, explain why.
a)  The orderbyclause in a LINQ query can sort only in ascending order. b)  LINQ queries can be used on both arrays and collections.
c)   The Removemethod of the Listclass removes an element at a specific index. d)  A BindingNavigatorobject can extract data from a database.
e)   LINQ to SQL automatically saves changes made back to the database.

Answers to Self-Review Exercises
18.1	a)  SQL. b) rows, columns. c) primary key. d) WHERE. e) ORDERBY. f) joining. g) database. h) foreign key. i) where. j) Distinct. k) let.
18.2	a) False. The descending modifier is used to make orderby sort in descending order. b) True. c) False. Removeremoves the first element equal to its argument. RemoveAtremoves the el-ement at a specific index. d) False. A BindingNavigatorallows users to browse and manipulate data displayed by another GUI control. A DataContextcan extract data from a database.  e) False. You must call the SubmitChangesmethod of the DataContextto save the changes made back to the da-tabase.

Exercises
18.3     Define the following terms: a)  Qualified name
b)  Rule of Referential Integrity c)   Rule of Entity Integrity
d)  selection criteria
18.4	State the purpose of the following SQL keywords: a)  ASC
b)  FROM c)   DESC d)  INSERT e)   LIKE f)   UPDATE g)  SET
h)  VALUES i)   ON
18.5	Write SQL queries for the booksdatabase (discussed in Section 18.3) that perform each of the following tasks:
a)  Select all authors from the Authors table with the columns in the order lastName, firstNameand authorID.
b)  Select a specific author and list all books for that author. Include the title, year and ISBN number. Order the information alphabetically by title.
c)   Add a new author to the Authorstable.
d)  Add a new title for an author (remember that the book must have an entry in the AuthorISBNtable).
18.6	Fill in the blanks in each of the following statements:
a)  The	states that every column in a primary key must have a value, and the value of the primary key must be unique
Exercises   663


b)  The	states that every foreign-key value must appear as another table’s prima-ry-key value.
c)   A(n)	in a pattern indicates that a string matching the pattern can have zero or more characters at the percent character’s location in the pattern.
d)  Java DB is the Oracle branded version of	.
e)   A(n)	in a LIKEpattern string indicates a single character at that position in the pattern.
f)   There’s a(n)	relationship between a primary key and its corresponding for-eign key.
g)  SQL uses	as the delimiter for strings.
18.7	 Correct each of the following SQL statements that refer to the booksdatabase. a)  SELECT firstName FROM author WHERE authorID = 3
b)  SELECT isbn, title FROM Titles ORDER WITH title DESC c)   INSERT INTO Authors ( authorID, firstName, lastName )
VALUES ( "2", "Jane", "Doe" )
19 PHP
Be careful when reading health books; you may die of a misprint.
—Mark Twain

Reckoners without their host must reckon twice.
—John Heywood

There was a door to which I found no key;
There was the veil through which I might not see.
—Omar Khayyam


Objectives Inthischapteryouwill:
ÿ   Manipulatedataofvarious
types.
ÿ   Useoperators,arraysand
controlstatements.
ÿ   Useregularexpressionsto searchfortextthatmatchesa
patterns.
ÿ   Constructprogramsthat
processformdata.
ÿ   Storedataontheclientusing
cookies.
ÿ   Createprogramsthatinteract
withMySQLdatabases.
19.1 Introduction   665



19.1  Introduction
19.2  SimplePHPProgram
19.3  ConvertingBetweenDataTypes 19.4  ArithmeticOperators
19.5  InitializingandManipulatingArrays 19.6  StringComparisons
19.7  StringProcessingwithRegular Expressions
19.7.1 SearchingforExpressions
19.7.2 RepresentingPatterns


19.7.3 FindingMatches 19.7.4 CharacterClasses
19.7.5 FindingMultipleInstancesofa
Pattern
19.8  FormProcessingandBusinessLogic
19.8.1 SuperglobalArrays
19.8.2 UsingPHPtoProcessHTML5Forms 19.9  ReadingfromaDatabase
19.10  UsingCookies 19.11  DynamicContent 19.12  WebResources


Summary | Self-Review Exercises | Answers to Self-Review Exercises | Exercises


19.1 Introduction
PHP, or PHP: Hypertext Preprocessor, has become the most popular server-side script-inglanguageforcreatingdynamicwebpages.PHPwascreatedbyRasmusLerdorftotrack users at his website. In 1995, Lerdorf released it as a package called the “Personal Home Page Tools.” Two years later, PHP 2 featured built-in database support and form han-dling. In 1997, PHP 3 was released after a substantial rewrite, which resulted in a large increaseinperformanceandledtoanexplosionofPHPuse.ThereleaseofPHP4featured the new Zend Engine from Zend, a PHP software company. This version was considerably faster and more powerful than its predecessor, further increasing PHP’s popularity. It’s es-timated that over 15 million domains now use PHP, accounting for more than 20 percent of web pages.1 Currently, PHP 5 features the Zend Engine 2, which provides further speed increases, exception handling and a new object-oriented programming model.2 More in-formation about the Zend Engine can be found at www.zend.com.
PHPisanopen-sourcetechnologythat’ssupportedbyalargecommunityofusersand developers. PHP is platform independent—implementations exist for all major UNIX, Linux,  Mac  and  Windows  operating  systems.  PHP  also  supports  many  databases, including MySQL.
After introducing the basics of the PHP scripting language, we discuss form pro-cessing and business logic, which are vital to e-commerce applications. Next, we build a three-tier web application that queries a MySQL database. We also show how PHP can use cookies to store information on the client that can be retrieved during future visits to thewebsite.Finally,werevisittheform-processingexampletodemonstratesomeofPHP’s more dynamic capabilities.

Notes Before Proceeding
To run a PHP script, PHP must first be installed on your system. We assume that you’ve followed the XAMPP installation instructions in Chapter 17. This ensures that the Apache web server, MySQL DBMS and PHP are configured properly so that you can test

1.    “History of PHP,” 30 June 2007, PHP <us.php.net/history>.
2.    Z. Suraski, “The OO Evolution of PHP,” 16 March 2004, Zend <devzone.zend.com/node/view/ id/1717>.
666	Chapter19 PHP


PHP web applications on your local computer. For the examples that access a database, this chapter also assumes that you’ve followed the instructions in Chapter 18 for setting up a MySQL user account and for creating the databases we use in this chapter. All exam-plesandexercisesinthischapterhavebeenverifiedusingPHP5.3.5—theversioninstalled by XAMPP at the time of publication.
Before continuing, take the examples folder for this chapter (ch19) and copy it into the XAMPP installation folder’s htdocssubfolder. This is the folder from which XAMPP serves documents, images and scripts.

19.2 Simple PHP Program
The power of the web resides not only in serving content to users, but also in responding to requests from users and generating web pages with dynamic content. Interactivity be-tween the user and the server has become a crucial part of web functionality, making PHP—a language written specifically for handling client requests—a valuable tool.
PHP code is embedded directly into text-based documents, such as HTML, though these script segments are interpreted by the server before being delivered to the client. PHP script file names end with .php.
Figure 19.1 presents a simple PHP script that displays a welcome message. PHP code is inserted between the delimiters <?php and ?> and can be placed anywhere in HTML markup. Line7 declares variable $nameand assignsit thestring "Paul". Allvariables are pre-ceded by a $and are created the first time they’re encountered by the PHP interpreter. PHP statements terminate with a semicolon (;).

Common Programming Error 19.1
Variable names in PHP are case sensitive. Failure to use the proper mixture of cases to refer to a variable will result in a logic error, since the script will create a new variable for any name it doesn’t recognize as a previously used variable.

Common Programming Error 19.2
Forgetting to terminate a statement with a semicolon (;) is a syntax error.


1  <!DOCTYPE html> 2
3  <!-- Fig. 19.1: first.php --> 4  <!-- Simple PHP program. --> 5  <html>
6  <?php
7	$name = "Paul"; // declaration and initialization 8  ?><!-- end PHP script -->
9	<head>
10	<meta charset = "utf-8">
11	<title>Simple PHP document</title> 12     </head>
13	<body>
14	<!-- print variable name’s value -->
15	<h1><?php print( "Welcome to PHP, $name!" ); ?></h1>

Fig. 19.1  | SimplePHPprogram.(Part1of2.)
19.3 ConvertingBetweenDataTypes   667


16	</body>
17  </html>








Fig. 19.1  | SimplePHPprogram.(Part2of2.)

Line 7 also contains a single-line comment, which begins with two slashes (//). Text to the right of the slashes is ignored by the interpreter. Multiline comments begin with delimiter /*on the first line of the comment and end with delimiter */at the end of the last line of the comment.
Line 15 outputs the value of variable $nameby calling function print. The value of $nameis printed, not the string "$name". When a variable is encountered inside a double-quoted ("") string, PHP interpolates the variable. In other words, PHP inserts the vari-able’s value where the variable name appears in the string. Thus, variable $nameis replaced by Paulfor printing purposes. All operations of this type execute on the server before the HTML5 document is sent to the client. You can see by viewing the source of a PHP doc-ument that the code sent to the client does not contain any PHP code.
PHP variables are loosely typed—they can contain different types of data (e.g., inte-gers, doubles or strings) at different times. Figure 19.2 introduces PHP’s data types.



Type

int, integer
float, double, real
string

bool, boolean array
object
resource
NULL

Description

Whole numbers (i.e., numbers without a decimal point). Real numbers (i.e., numbers containing a decimal point).
Text enclosed in either single ('') or double ("") quotes. [Note: Using double quotes allows PHP to recognize more escape sequences.]
trueor false. Group of elements.
Group of associated data and methods.
An external source—usually information from a database.
No value.


Fig. 19.2  | PHPtypes.

19.3 Converting Between Data Types
Converting between different data types may be necessary when performing arithmetic operations with variables. Type conversions can be performed using function settype. Figure 19.3 demonstrates type conversion of some types introduced in Fig. 19.2.
668	Chapter19 PHP


1  <!DOCTYPE html> 2
3  <!-- Fig. 19.3: data.php --> 4  <!-- Data type conversion. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Data type conversion</title> 9	<style type = "text/css">
10	p	{ margin: 0; }
11	.head  { margin-top: 10px; font-weight: bold; } 12	.space { margin-top: 10px; }
13	</style> 14     </head>
15	<body> 16         <?php
17	// declare a string, double and integer 18	$testString = "3.5 seconds";
19	$testDouble = 79.2; 20	$testInteger = 12;
21	?><!-- end PHP script --> 22
23	<!-- print each variable’s value and type --> 24	<p class = "head">Original values:</p>
25	<?php
26	print( "<p>$testString is a(n) " . gettype( $testString ) 27               . "</p>" );
28	print( "<p>$testDouble is a(n) " . gettype( $testDouble ) 29               . "</p>" );
30	print( "<p>$testInteger is a(n) " . gettype( $testInteger ) 31               . "</p>" );
32	?><!-- end PHP script -->
33	<p class = "head">Converting to other data types:</p> 34	<?php
35	// call function settype to convert variable 36	// testString to different data types
37	print( "<p>$testString " );
38	settype( $testString, "double" );
39	print( " as a double is $testString</p>" ); 40	print( "<p>$testString " );
41	settype( $testString, "integer" );
42	print( " as an integer is $testString</p>" ); 43	settype( $testString, "string" );
44	print( "<p class = 'space'>Converting back to a string results in 45               $testString</p>" );
46
47	// use type casting to cast variables to a different type 48	$data = "98.6 degrees";
49	print( "<p class = 'space'>Before casting: $data is a " . 50               gettype( $data ) . "</p>" );
51	print( "<p class = 'space'>Using type casting instead:</p> 52               <p>as a double: " . (double) $data . "</p>" .
53	"<p>as an integer: " . (integer) $data . "</p>";

Fig. 19.3  | Datatypeconversion.(Part1of2.)
19.3 ConvertingBetweenDataTypes   669


54	print( "<p class = 'space'>After casting: $data is a " . 55               gettype( $data ). "</p>" );
56	?><!-- end PHP script --> 57     </body>
58  </html>


















Fig. 19.3  | Datatypeconversion.(Part2of2.)

Functions gettypeand settype
Lines 18–20 assign a string to variable $testString, a floating-point number to variable $testDoubleand an integer to variable $testInteger. Variables are typed based on the values assigned to them. For example, variable $testStringbecomes a string when as-signed the value "3.5 seconds". Lines 26–31 printthe value of each variable and its type using function gettype, which returns the current type of its argument. When a variable is in a printstatement but not part of a string, enclosing the variable name in double quotes is unnecessary. Lines 38, 41 and 43 call settypeto modify the type of each vari-able. Function settypetakes two arguments—the variable whose type is to be changed and the variable’s new type.
Callingfunction settypecan result inloss ofdata. For example, doublesaretruncated when they’reconverted to integers. Whenconvertingfrom a string to a number, PHPuses the value of the number that appears at the beginning of the string. If no number appears atthebeginning,thestringevaluatesto 0.Inline38,thestring"3.5seconds"isconverted to a double, storing 3.5in variable $testString. In line 41, double 3.5is converted to integer 3. When we convert this variable to a string (line 43), the variable’s value becomes "3"—much of the original content from the variable’s declaration in line 14 is lost.

Casting
Another option for conversion between types is casting (or type casting). Unlike settype, casting does not change a variable’s content—it creates a temporary copy of a variable’s value in memory. Lines 52–53 cast variable $data’s value (declared in line 48) from a stringto a
670	Chapter19 PHP


doubleand an integer. Casting is useful when a different type is required in a specific op-eration but you would like to retain the variable’s original value and type. Lines 49–55 show that the type and value of $dataremain unchanged even after it has been cast several times.

String Concatenation
The concatenation operator (.) combines multiple strings in the same printstatement, as demonstrated in lines 49–55. A printstatement may be split over multiple lines—all data that’s enclosed in the parentheses and terminated by a semicolon is printed to the XHTML document.

Error-Prevention Tip 19.1
Function printcan be used to display the value of a variable at a particular point during a program’s execution. This is often helpful in debugging a script.

19.4 Arithmetic Operators
PHP provides several arithmetic operators, which we demonstrate in Fig. 19.4. Line 15 declares variable $aand assigns to it the value 5. Line 19 calls function defineto create a named constant. Function definetakes two arguments—the name and value of the con-stant. An optional third argument accepts a boolvalue that specifies whether the constant is case insensitive—constants are case sensitive by default.

Common Programming Error 19.3
Assigning a value to a constant after it’s declared is a syntax error.

Line 22 adds constant VALUEto variable $a. Line 26 uses the multiplication assign-ment operator *=to yield an expression equivalent to $a=$a*2(thus assigning $athe value 20). Arithmetic assignment operators—like the ones described in Chapter 6—are syntactical shortcuts. Line 34 adds 40to the value of variable $a.
Uninitialized variables have undefined values that evaluate differently, depending on thecontext. Forexample,whenanundefinedvalueisusedinanumericcontext(e.g.,$num in line 51), it evaluates to 0. In contrast, when an undefined value is interpreted in a string context (e.g., $nothingin line 48), it evaluates to the string "undef". When you run a PHPscript that uses an undefinedvariable, the PHPinterpreteroutputs warningmessages in the web page. You can adjust the level of error and warning messages in the PHP con-figuration files for your platform (e.g., the php.inifile on Windows). For more informa-tion, see the online documentation for PHP at php.net.

1  <!DOCTYPE html> 2
3  <!-- Fig. 19.4: operators.php -->
4  <!-- Using arithmetic operators. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<style type = "text/css">

Fig. 19.4  | Usingarithmeticoperators.(Part1of3.)
19.4 ArithmeticOperators   671


9	p { margin: 0; } 10         </style>
11	<title>Using arithmetic operators</title> 12     </head>
13	<body> 14         <?php
15	$a = 5;
16	print( "<p>The value of variable a is $a</p>" ); 17
18	// define constant VALUE 19	define( "VALUE", 5 );
20
21	// add constant VALUE to variable $a 22	$a = $a + VALUE;
23	print( "<p>Variable a after adding constant VALUE is $a</p>" ); 24
25	// multiply variable $a by 2 26	$a *= 2;
27	print( "<p>Multiplying variable a by 2 yields $a</p>" ); 28
29	// test if variable $a is less than 50 30	if ( $a < 50 )
31	print( "<p>Variable a is less than 50</p>" ); 32
33	// add 40 to variable $a 34	$a += 40;
35	print( "<p>Variable a after adding 40 is $a</p>" ); 36
37	// test if variable $a is 50 or less 38	if ( $a < 51 )
39	print( "<p>Variable a is still 50 or less</p>" ); 40            elseif ( $a < 101 ) // $a >= 51 and <= 100
41	print( "<p>Variable a is now between 50 and 100, 42                  inclusive</p>" );
43	else // $a > 100
44	print( "<p>Variable a is now greater than 100</p>" ); 45
46	// print an uninitialized variable
47	print( "<p>Using a variable before initializing: 48               $nothing</p>" ); // nothing evaluates to "" 49
50	// add constant VALUE to an uninitialized variable 51	$test = $num + VALUE; // num evaluates to 0
52	print( "<p>An uninitialized variable plus constant 53               VALUE yields $test</p>" );
54
55	// add a string to an integer 56	$str = "3 dollars";
57	$a += $str;
58	print( "<p>Adding a string to variable a yields $a</p>" ); 59         ?><!-- end PHP script -->
60	</body>
61  </html>

Fig. 19.4  | Usingarithmeticoperators.(Part2of3.)
672	Chapter19 PHP



















Fig. 19.4  | Usingarithmeticoperators.(Part3of3.)

Error-Prevention Tip 19.2
Initialize variables before they’re used to avoid subtle errors. For example, multiplying a number by an uninitialized variable results in 0.

Strings are converted to integers or doubles when they’re used in arithmetic opera-tions. In line 57, a copy of the value of variable str, "3dollars", is converted to the integer 3for use in the calculation. The type and value of variable $strare left unchanged.

Keywords
Keywords (examples from Fig. 19.4 include if, elseifand else) may not be used as function, method, class or namespace names. Figure 19.5 lists the PHP keywords.


PHPkeywords


abstract
case
continue
elseif
endswitch
foreach
implements
or
switch
while

and
catch
declare
enddeclare
endwhile
function
interface
private
throw
xor

array
class
default
endfor
extends
global
instanceof
protected
try

as	break
clone	const
do	else
endforeach	endif
final	for
goto	if
namespace	new
public	static
use	var


Fig. 19.5  | PHPkeywords.
19.4 ArithmeticOperators   673


Keywords
Figure 19.6 contains the operator precedence chart for PHP. The operators are shown from top to bottom in decreasing order of precedence.


Operator

new clone
[]

++ --
~ -
@ (type)

instanceof

!

* / %
+ -.
<< >>
< > <= >=
== != === !==
&

^

|

&&

||

?:

Type

constructor copy an object
subscript
increment decrement
bitwise not unary negative error control cast


not

multiplication division modulus
addition subtraction concatenation
bitwise shift left bitwise shift right
less than greater than
less than or equal greater than or equal
equal
not equal identical not identical
bitwise AND
bitwise XOR

bitwise OR

logical AND
logical OR
ternary conditional

Associativity

none

left to right
none

right to left



none

right to left

left to right


left to right


left to right

none



none



left to right
left to right

left to right

left to right
left to right
left to right


Fig. 19.6 | PHPoperatorprecedenceandassociativity.(Part1of2.)
674	Chapter19 PHP



Operator

= += -= *= /= %= &= |= ^= .= <<= >>= =>
and
xor
or
,

Type

assignment
addition assignment subtraction assignment multiplication assignment division assignment modulus assignment bitwise AND assignment bitwise OR assignment
bitwise exclusive OR assignment concatenation assignment bitwise shift left assignment bitwise shift right assignment assign value to a named key
logical AND exclusive OR logical OR
list

Associativity

right to left











left to right left to right left to right
left to right


Fig. 19.6 | PHPoperatorprecedenceandassociativity.(Part2of2.)

19.5 Initializing and Manipulating Arrays
PHP provides the capability to store data in arrays. Arrays are divided into elements that behave as individual variables. Array names, like other variables, begin with the $symbol. Figure 19.7 demonstrates initializing and manipulating arrays. Individual array elements are accessed by following the array’s variable name with an index enclosed in square brack-ets ([]). If a value is assigned to an array element of an array that does not exist, then the array is created (line 18). Likewise, assigning a value to an element where the index is omitted appends a new element to the end of the array (line 21). The forstatement (lines 24–25) prints each element’s value. Function countreturns the total number of elements in the array. In this example, the forstatement terminates when the counter ($i) is equal to the number of array elements.

1  <!DOCTYPE html> 2
3  <!-- Fig. 19.7: arrays.php --> 4  <!-- Array manipulation. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Array manipulation</title> 9	<style type = "text/css">
10	p	{ margin: 0; }
11	.head { margin-top: 10px; font-weight: bold; }

Fig. 19.7  | Arraymanipulation.(Part1of3.)
19.5 InitializingandManipulatingArrays   675


12	</style> 13     </head>
14	<body> 15         <?php
16	// create array first
17	print( "<p class = 'head'>Creating the first array</p>" ); 18	$first[ 0 ] = "zero";
19	$first[ 1 ] = "one"; 20	$first[ 2 ] = "two"; 21	$first[] = "three"; 22
23	// print each element’s index and value 24	for ( $i = 0; $i < count( $first ); ++$i )
25	print( "Element $i is $first[$i]</p>" ); 26
27	print( "<p class = 'head'>Creating the second array</p>" ); 28
29	// call function array to create array second
30	$second = array( "zero", "one", "two", "three" ); 31
32	for ( $i = 0; $i < count( $second ); ++$i ) 33               print( "Element $i is $second[$i]</p>" ); 34
35	print( "<p class = 'head'>Creating the third array</p>" ); 36
37	// assign values to entries using nonnumeric indices 38	$third[ "Amy" ] = 21;
39	$third[ "Bob" ] = 18; 40	$third[ "Carol" ] = 23; 41
42	// iterate through the array elements and print each 43	// element’s name and value
44	for ( reset( $third ); $element = key( $third ); next( $third ) ) 45               print( "<p>$element is $third[$element]</p>" );
46
47	print( "<p class = 'head'>Creating the fourth array</p>" ); 48
49	// call function array to create array fourth using 50	// string indices
51	$fourth = array(
52	"January"   => "first",   "February" => "second", 53	"March"	=> "third",   "April"   => "fourth", 54	"May"	=> "fifth",   "June"	=> "sixth", 55	"July"	=> "seventh", "August"   => "eighth", 56	"September" => "ninth",   "October"  => "tenth",
57	"November"  => "eleventh","December" => "twelfth" ); 58
59	// print each element’s name and value 60	foreach ( $fourth as $element => $value )
61	print( "<p>$element is the $value month</p>" ); 62         ?><!-- end PHP script -->
63	</body>
64  </html>

Fig. 19.7  | Arraymanipulation.(Part2of3.)
676	Chapter19 PHP






























Fig. 19.7  | Arraymanipulation.(Part3of3.)

Line 30 demonstrates a second method of initializing arrays. Function arraycreates an array that contains the arguments passed to it. The first item in the argument list is stored as the first array element (recall that the first element’s index is 0), the second item is stored as the second array element and so on. Lines 32–33 display the array’s contents.
In addition to integer indices, arrays can have float or nonnumeric indices (lines 38– 40). An array with noninteger indices is called an associative array. For example, indices Amy, Boband Carolare assigned the values 21, 18and 23, respectively.
PHP provides functions for iterating through the elements of an array (line 44). Each array has a built-in internal pointer, which points to the array element currently being ref-erenced. Function resetsets the internal pointer to the first array element. Function key returns the index of the element currently referenced by the internal pointer, and function nextmoves the internalpointertothe next element andreturns theelement. In ourscript, the forstatement continues to execute as long as function keyreturns an index. Function nextreturns falsewhen there are no more elements in the array. When this occurs, func-tion keycannot return an index, $elementis set to falseand the forstatement termi-nates. Line 45 prints the index and value of each element.
19.6 StringComparisons   677


The array $fourthis also associative. To override the automatic numeric indexing performed by function array, you can use operator =>, as demonstrated in lines 51–57. The value to the left of the operator is the array index and the value to the right is the ele-ment’s value.
The foreach control statement (lines 60–61) is specifically designed for iterating through arrays, especially associative arrays, because it does not assume that the array has consecutive integer indices that start at 0. The foreachstatement starts with the array to iterate through, followed by the keyword as, followed by two variables—the first is assigned the index of the element, and the second is assigned the value of that index. (If there’s only one variable listed after as, it’s assigned the value of the array element.) We use the foreachstatement to printthe index and value of each element in array $fourth.

19.6 String Comparisons
Many string-processing tasks can be accomplished by using the equality and comparison operators, demonstrated in Fig. 19.8. Line 16 declares and initializes array $fruits. Lines 19–38 iterate through each element in the $fruitsarray.
Lines 23 and 25 call function strcmpto compare two strings. The function returns -1if the first string alphabetically precedes the second string, 0if the strings are equal, and 1if the first string alphabetically follows the second. Lines 23–28 compare each element inthe$fruitsarraytothestring"banana",printingwhethereachisgreaterthan,lessthan or equal to the string.
Relationaloperators(==,!=,<,<=,>and>=)canalsobeusedtocomparestrings.Lines 32–37userelationaloperatorstocompareeachelementofthearraytothestring "apple".

1  <!DOCTYPE html> 2
3  <!-- Fig. 19.8: compare.php -->
4  <!-- Using the string-comparison operators. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>String Comparison</title> 9	<style type = "text/css">
10	p { margin: 0; } 11         </style>
12	</head> 13	<body> 14         <?php
15	// create array fruits
16	$fruits = array( "apple", "orange", "banana" ); 17
18	// iterate through each array element
19	for ( $i = 0; $i < count( $fruits ); ++$i ) 20	{
21	// call function strcmp to compare the array element 22	// to string "banana"
23	if ( strcmp( $fruits[ $i ], "banana" ) < 0 )
24	print( "<p>" . $fruits[ $i ] . " is less than banana " );

Fig. 19.8  | Usingthestring-comparisonoperators.(Part1of2.)
678	Chapter19 PHP


25	elseif ( strcmp( $fruits[ $i ], "banana" ) > 0 )
26	print( "<p>" . $fruits[ $i ] . " is greater than banana "); 27               else
28	print( "<p>" . $fruits[ $i ] . " is equal to banana " ); 29
30	// use relational operators to compare each element 31	// to string "apple"
32	if ( $fruits[ $i ] < "apple" )
33	print( "and less than apple!</p>" ); 34               elseif ( $fruits[ $i ] > "apple" )
35	print( "and greater than apple!</p>" ); 36               elseif ( $fruits[ $i ] == "apple" )
37	print( "and equal to apple!</p>" ); 38            } // end for
39	?><!-- end PHP script --> 40     </body>
41  </html>








Fig. 19.8  | Usingthestring-comparisonoperators.(Part2of2.)

19.7 String Processing with Regular Expressions
PHP can process text easily and efficiently, enabling straightforward searching, substitu-tion, extraction and concatenation of strings. Text manipulation is usually done with reg-ular expressions—a series of characters that serve as pattern-matching templates (or search criteria) in strings, text files and databases. Function preg_matchuses regular expressions to search a string for a specified pattern using Perl-compatible regular expressions (PCRE). Figure 19.9 demonstrates regular expressions.

1  <!DOCTYPE html> 2
3  <!-- Fig. 19.9: expression.php --> 4  <!-- Regular expressions. -->
5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Regular expressions</title> 9	<style type = "text/css">
10	p { margin: 0; } 11         </style>
12	</head>

Fig. 19.9  | Regularexpressions.(Part1of2.)
19.7 StringProcessingwithRegularExpressions   679


13	<body> 14         <?php
15	$search = "Now is the time";
16	print( "<p>Test string is: '$search'</p>" ); 17
18	// call preg_match to search for pattern 'Now' in variable search 19	if ( preg_match( "/Now/", $search ) )
20	print( "<p>'Now' was found.</p>" ); 21
22	// search for pattern 'Now' in the beginning of the string 23	if ( preg_match( "/^Now/", $search ) )
24	print( "<p>'Now' found at beginning of the line.</p>" ); 25
26	// search for pattern 'Now' at the end of the string 27	if ( !preg_match( "/Now$/", $search ) )
28	print( "<p>'Now' was not found at the end of the line.</p>" ); 29
30	// search for any word ending in 'ow'
31	if ( preg_match( "/\b([a-zA-Z]*ow)\b/i", $search, $match ) ) 32               print( "<p>Word found ending in 'ow': " .
33	$match[ 1 ] . "</p>" ); 34
35	// search for any words beginning with 't'
36	print( "<p>Words beginning with 't' found: " ); 37
38	while ( preg_match( "/\b(t[[:alpha:]]+)\b/", $search, $match ) ) 39	{
40	print( $match[ 1 ] . " " ); 41
42	// remove the first occurrence of a word beginning 43	// with 't' to find other instances in the string
44	$search = preg_replace("/" . $match[ 1 ] . "/", "", $search); 45            } // end while
46
47	print( "</p>" );
48	?><!-- end PHP script --> 49     </body>
50  </html>













Fig. 19.9  | Regularexpressions.(Part2of2.)
680	Chapter19 PHP


19.7.1 Searching for Expressions
Line 15 assigns the string "Nowisthetime"to variable $search. The condition in line 19 calls function preg_match to search for the literal characters "Now" inside variable $search. If the pattern is found, preg_matchreturns the length of the matched string— which evaluates to truein a boolean context—and line 20 prints a message indicating that the pattern was found. We use single quotes ('') inside the string in the printstate-ment to emphasize the search pattern. Anything enclosed in single quotes is not interpolated, unless the single quotes are nested in a double-quoted string literal, as in line 16). For example, '$name'in a printstatement would output $name, not variable $name’s value.
Function preg_matchtakes two arguments—a regular-expression pattern to search for and the string to search. The regular expression must be enclosed in delimiters—typi-cally a forward slash (/) is placed at the beginning and end of the regular-expression pat-tern. By default, preg_matchperforms a case-sensitive pattern matches. To perform case-insensitivepatternmatchesyousimplyplacetheletteriaftertheregular-expressionpattern’s closing delimiter, as in "/\b([a-zA-Z]*ow)\b/i"(line 31).

19.7.2 Representing Patterns
In addition to literal characters, regular expressions can include metacharacters, such as ^, $and ., that specify patterns. The caret (^) metacharacter matches the beginning of a string (line 23), while the dollar sign ($) matches the end of a string (line 27). The period (.) metacharacter matches any single character except newlines, but can be made to match newlines with the smodifier. Line 23 searches for the pattern "Now" at the beginning of $search. Line 27 searches for "Now"at the end of $search. Note that Now$is not a vari-able—it’s a pattern that uses $to search for the characters "Now"at the end of a string.
Line 31, which contains a bracket expression, searches (from left to right) for the first word ending with the letters ow. Bracket expressions are lists of characters enclosed in square brackets ([]) that match any single character from the list. Ranges can be specified by supplying the beginning and the end of the range separated by a dash (-). For instance, the bracket expression [a-z]matches any lowercase letter and [A-Z]matches any uppercase letter. In this example, we combine the two to create an expression that matches any letter. The \bbefore and after the parentheses indicates the beginning and end of a word, respec-tively—in other words, we’re attempting to match whole words.
The expression [a-zA-Z]*ow inside the parentheses (line 31) represents any word ending in ow. The quantifier *matches the preceding pattern zero or more times. Thus, [a-zA-Z]*owmatches any number of letters followed by the literal characters ow. Quanti-fiers are used in regular expressions to denote how often a particular character or set of characters can appear in a match. Some PHP quantifiers are listed in Fig. 19.10.



Quantifier

{n} {m,n}
{n,}

Matches

Exactly n times
Between m and n times, inclusive
n or more times


Fig. 19.10  | Someregularexpressionquantifiers.(Part1of2.)
19.7 StringProcessingwithRegularExpressions   681



Quantifier

+
*
?

Matches

One or more times (same as {1,}) Zero or more times (same as {0,})
Zero or one time (same as {0,1})


Fig. 19.10  | Someregularexpressionquantifiers.(Part2of2.)

19.7.3 Finding Matches
The optional third argument to function preg_matchis an array that stores matches to the regular expression. When the expression is broken down into parenthetical sub-expres-sions, preg_matchstores the first encountered instance of each expression in this array, starting from the leftmost parenthesis. The first element (i.e., index 0) stores the string matched for the entire pattern. The match to the first parenthetical pattern is stored in the second array element, the second in the third array element and so on. If the parenthetical pattern is not encountered, the value of the array element remains uninitialized. Because the statement in line 31 is the first parenthetical pattern, Now is stored in variable $match[1](and, because it’s the only parenthetical statement in this case, it’s also stored in $match[0]).
Searching for multiple instances of a single pattern in a string is slightly more compli-cated, because the preg_matchfunction returns only the first instance it encounters. To findmultipleinstancesofagivenpattern,wemustmakemultiplecallstopreg_match,and remove any matched instances before calling the function again. Lines 38–45 use a while statement and the preg_replacefunction to find all the words in the string that begin with t. We’ll say more about this function momentarily.


19.7.4 Character Classes
The pattern in line 38, /\b(t[[:alpha:]]+)\b/i, matches any word beginning with the character tfollowed by one or more letters. The pattern uses the character class [[:al-pha:]]to recognize any letter—this is equivalent to the [a-zA-Z]. Figure 19.11 lists some character classes that can be matched with regular expressions.



Characterclass

alnum
alpha
digit
space
lower
upper

Description

Alphanumeric characters (i.e., letters [a-zA-Z] or digits [0-9]) Word characters (i.e., letters [a-zA-Z])
Digits White space
Lowercase letters
Uppercase letters


Fig. 19.11 | Someregularexpressioncharacterclasses.
682	Chapter19 PHP


Character classes are enclosed by the delimiters [:and :]. When this expression is placed in another set of brackets, such as [[:alpha:]]in line 38, it’s a regular expression matchingasinglecharacterthat’samemberoftheclass.Abracketedexpressioncontaining two or more adjacent character classes in the class delimiters represents those character sets combined. For example, the expression [[:upper:][:lower:]]*represents all strings of uppercase and lowercase letters in any order, while [[:upper:]][[:lower:]]*matches strings with a single uppercase letter followed by any number of lowercase characters. The expression  ([[:upper:]][[:lower:]])* represents  all  strings  that  alternate  between uppercase and lowercase characters (starting with uppercase and ending with lowercase).

19.7.5 Finding Multiple Instances of a Pattern
The quantifier +matches one or more consecutive instances of the preceding expression. The result of the match is stored in $match[1]. Once a match is found, we printit in line 40.Wethenremoveitfromthestringinline44,usingfunctionpreg_replace.Thisfunc-tion takes three arguments—the pattern to match, a string to replace the matched string andthestringtosearch.Themodifiedstringisreturned. Here,wesearchforthewordthat we matched with the regular expression, replace the word with an empty string, then as-sign the result back to $search. This allows us to match any other words beginning with the character tin the string and print them to the screen.

19.8 Form Processing and Business Logic

19.8.1 Superglobal Arrays
Knowledge of a client’s execution environment is useful to system administrators who want to access client-specific information such as the client’s web browser, the servername or the data sent to the server by the client. One way to obtain this data is by using a superglobal array. Superglobal arrays are associative arrays predefined by PHP that hold variables acquired from user input, the environment or the web server, and are accessible in any variable scope. Some of PHP’s superglobal arrays are listed in Fig. 19.12.



Variablename

$_SERVER
$_ENV
$_GET
$_POST
$_COOKIE
$GLOBALS

Description

Data about the currently running server. Data about the client’s environment. Data sent to the server by a getrequest. Data sent to the server by a postrequest.
Data contained in cookies on the client’s computer.
Array containing all global variables.


Fig. 19.12  | Someusefulsuperglobalarrays.

Superglobal arrays are useful for verifying user input. The arrays $_GETand $_POST retrieve information sent to the server by HTTP get and post requests, respectively, making it possible for a script to have access to this data when it loads another page. For
19.8 FormProcessingandBusinessLogic	683


example, if data entered by a user into a form is posted to a script, the $_POSTarray will contain all of this information in the new script. Thus, any information entered into the form can be accessed easily from a confirmation page, or a page that verifies whether fields have been entered correctly.

19.8.2 Using PHP to Process HTML5 Forms
Forms enable web pages to collect data from users and send it to a web server for process-ing. Such capabilities allow users to purchase products, request information, send and re-ceive web-based e-mail, create profiles in online networking services and take advantage of various other online services. The HTML5 form in Fig. 19.13 gathers information to add a user to a mailing list.


1  <!DOCTYPE html> 2
3  <!-- Fig. 19.13: form.html -->
4  <!-- HTML form for gathering user input. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Sample Form</title> 9	<style type = "text/css">
10	label  { width: 5em; float: left; } 11         </style>
12	</head> 13	<body>
14	<h1>Registration Form</h1>
15	<p>Please fill in all fields and click Register.</p> 16
17	<!-- post form data to form.php -->
18	<form method = "post" action = "form.php"> 19            <h2>User Information</h2>
20
21	<!-- create four text boxes for user input --> 22	<div><label>First name:</label>
23	<input type = "text" name = "fname"></div> 24            <div><label>Last name:</label>
25	<input type = "text" name = "lname"></div> 26            <div><label>Email:</label>
27	<input type = "text" name = "email"></div> 28            <div><label>Phone:</label>
29	<input type = "text" name = "phone"
30	placeholder = "(555) 555-5555"></div> 31            </div>
32
33	<h2>Publications</h2>
34	<p>Which book would you like information about?</p> 35
36	<!-- create drop-down list containing book names --> 37	<select name = "book">
38	<option>Internet and WWW How to Program</option>

Fig. 19.13 | HTML5formforgatheringuserinput.(Part1of2.)
684	Chapter19 PHP


39	<option>C++ How to Program</option> 40	<option>Java How to Program</option>
41	<option>Visual Basic How to Program</option> 42            </select>
43
44	<h2>Operating System</h2>
45	<p>Which operating system do you use?</p> 46
47	<!-- create five radio buttons -->
48	<p><input type = "radio" name = "os" value = "Windows" 49                  checked>Windows
50	<input type = "radio" name = "os" value = "Mac OS X">Mac OS X 51	<input type = "radio" name = "os" value = "Linux">Linux
52	<input type = "radio" name = "os" value = "Other">Other</p> 53
54	<!-- create a submit button -->
55	<p><input type = "submit" name = "submit" value = "Register"></p> 56         </form>
57	</body>
58  </html>

Theformisfilledout withanincorrect phonenumber

























Fig. 19.13 | HTML5formforgatheringuserinput.(Part2of2.)
19.8 FormProcessingandBusinessLogic	685


The form’s actionattribute (line 18) indicates that when the user clicks the Register button, the form data will be posted to form.php (Fig. 19.14) for processing. Using method="post"appends form data to the browser request that contains the protocol (i.e., HTTP) and the URL of the requested resource (specified by the actionattribute). Scripts located on the web server’s machine can access the form data sent as part of the request.
We assign a unique name(e.g., email) to each of the form’s controls. When Register is clicked, each field’s nameand valueare sent to the web server. Script form.phpaccesses the value for each field through the superglobal array $_POST, which contains key/value pairs corresponding to name–value pairs for variables submitted through the form. [Note: Thesuperglobalarray$_GETwouldcontainthesekey–valuepairsiftheformhadbeensub-mitted using the HTTP get method. In general, getis not as secure as post, because it appends the information directly to the URL, which is visible to the user.] Figure 19.14 processes the data posted by form.htmland sends HTML5 back to the client.

Good Programming Practice 19.1
Use meaningful HTML5 object names for inputfields. This makes PHP scripts that re-trieve formdata easier to understand.


1  <!DOCTYPE html> 2
3  <!-- Fig. 19.14: form.php -->
4  <!-- Process information sent from form.html. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Form Validation</title> 9	<style type = "text/css">
10	p	{ margin: 0px; } 11	.error  { color: red }
12	p.head  { font-weight: bold; margin-top: 10px; } 13         </style>
14	</head> 15	<body> 16         <?php
17	// determine whether phone number is valid and print 18	// an error message if not
19	if (!preg_match( "/^\([0-9]{3}\) [0-9]{3}-[0-9]{4}$/", 20               $_POST["phone"]))
21	{
22	print( "<p class = 'error'>Invalid phone number</p> 23                  <p>A valid phone number must be in the form
24	(555) 555-5555</p><p>Click the Back button, 25	enter a valid phone number and resubmit.</p> 26	<p>Thank You.</p></body></html>" );
27	die(); // terminate script execution 28            }
29	?><!-- end PHP script -->
30	<p>Hi <?php print( $_POST["fname"] ); ?>. Thank you for
31	completing the survey. You have been added to the

Fig. 19.14 | Processinformationsentfromform.html.(Part1of2.)
686	Chapter19 PHP


32	<?php print( $_POST["book"] ); ?>mailing list.</p>
33	<p class = "head">The following information has been saved 34            in our database:</p>
35	<p>Name: <?php print( $_POST["fname"] ); 36            print( $_POST["lname"] ); ?></p>
37	<p>Email: <?php print( "$email" ); ?></p> 38	<p>Phone: <?php print( "$phone" ); ?></p> 39	<p>OS: <?php print( $_POST["os"] ); ?></p>
40	<p class = "head">This is only a sample form.
41	You have not been added to a mailing list.</p> 42     </body>
43  </html>

a)Submittingtheformin Fig.19.13redirectstheuser toform.php,whichgives appropriateinstructionsif thephonenumberisinan incorrectformat



b)Theresultsofform.php aftertheusersubmitsthe forminFig.19.13witha phonenumberinavalid format








Fig. 19.14 | Processinformationsentfromform.html.(Part2of2.)

Lines 19–20 determine whether the phone number entered by the user is valid. We get the phone number from the $_POST array using the expression $_POST["phone"], where "phone"is the name of the corresponding inputfield in the form. The validation in thisexample requires thephonenumbertobegin with an opening parenthesis, followed by an area code, a closing parenthesis, a space, an exchange, a hyphen and a line number. It’s crucial to validate information that will be entered into databases or used in mailing lists. For example, validation can be used to ensure that credit card numbers contain the proper number of digits before the numbers are encrypted and sent to a merchant. This script implements the business logic, or business rules, of our application.

Software Engineering Observation 19.1
Use business logic to ensure that invalid information is not stored in databases. Validate important or sensitive form data on the server, since JavaScript may be disabled by the client. Some data, such as passwords, must always be validated on the server side.
19.9 ReadingfromaDatabase	687


In lines 19–20, the expression \( matches the opening parenthesis of the phone number.Wewanttomatchtheliteralcharacter (,soweescapeitsnormalmeaning bypre-ceding it with the backslash character (\). This parenthesis in the expression must be fol-lowed by three digits ([0-9]{3}), a closing parenthesis, three more digits, a literal hyphen and four additional digits. Note that we use the ^and $symbols to ensure that no extra characters appear at either end of the string.
If the regular expression is matched, the phone number has a valid format, and an HTML5 document is sent to the client that thanks the user for completing the form. We extract each inputelement’s value from the $_POSTarray in lines (30–39). Otherwise, the body of the ifstatement executes and displays an error message.
Function die(line 27) terminates script execution. This function is called if the user did not enter a correct telephone number, since we do not want to continue executing the rest of the script. The function’s optional argument is a string or an integer. If it’s a string, it’s printed as the script exits. If it’s an integer, it’s used as a return status code (typically in command-line PHP shell scripts).

19.9 Reading from a Database
PHP offers built-in support for many databases. Our database examples use MySQL. We assume that you’ve followed the XAMPP installation instructions in Chapter 17 (XAMPP includes MySQL) and that you’ve followed the Chapter 18 instructions for setting up a MySQL user account and for creating the databases we use in this chapter.
The example in this section uses a Productsdatabase. The user selects the name of a column in the database and submits the form. A PHP script then builds a SQL SELECT query, queries the database to obtain the column’s data and outputs the data in an HTML5 document that’s displayed in the user’s web browser. Chapter 18 discusses how to build SQL queries.
Figure 19.15 is a web page that posts form data consisting of a selected database column to the server. The script in Fig. 19.16 processes the form data.

HTML5 Document
Line 12 of Fig. 19.15 begins an HTML5 form, specifying that the data submitted from the formwill be sent to the script database.php(Fig. 19.16) in a postrequest. Lines 16– 22 add a select box to the form, set the name of the select box to selectand set its default selection to *. Submitting *specifies that all rows and columns are to be retrieved from the database. Each of the database’s column names is set as an option in the select box.

1  <!DOCTYPE html> 2
3  <!-- Fig. 19.15: data.html -->
4  <!-- Form to query a MySQL database. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Sample Database Query</title>
9	</head>

Fig. 19.15 | FormtoqueryaMySQLdatabase.(Part1of2.)
688	Chapter19 PHP


10	<body>
11	<h1>Querying a MySQL database.</h1>
12	<form method = "post" action = "database.php"> 13            <p>Select a field to display:
14	<!-- add a select box containing options --> 15	<!-- for SELECT query -->
16	<select name = "select">
17	<option selected>*</option> 18	<option>ID</option>
19	<option>Title</option>
20	<option>Category</option> 21	<option>ISBN</option>
22	</select></p>
23	<p><input type = "submit" value = "Send Query"></p> 24         </form>
25	</body>
26  </html>







Selectingthisoption resultsinallcolumns beingdisplayed



Fig. 19.15 | FormtoqueryaMySQLdatabase.(Part2of2.)

database.php
Script database.php(Fig. 19.16) builds a SQL query with the posted field name then queries the MySQL database. Line 25 concatenates the posted field name to a SELECT query. Lines 28–29 call function mysql_connectto connect to the MySQL database. We pass three arguments—the server’s hostname, a username and a password. The host name localhostis your computer. The username and password specified here were created in Chapter 18. Function mysql_connect returns a database handle—a representation of PHP’s connection to the database—which we assign to variable $database. If the connec-tion to MySQL fails, the function returns falseand we call dieto output an error mes-sage and terminate the script. Line 33 calls function mysql_select_dbto select and open the database to be queried (in this case, products). The function returns trueon success or falseon failure. We call dieif the database cannot be opened.

1  <!DOCTYPE html> 2
3  <!-- Fig. 19.16: database.php -->

Fig. 19.16 | Queryingadatabaseanddisplayingtheresults.(Part1of3.)
19.9 ReadingfromaDatabase	689


4  <!-- Querying a database and displaying the results. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Search Results</title> 9     <style type = "text/css">
10	body  { font-family: sans-serif;
11	background-color: lightyellow; } 12            table { background-color: lightblue;
13	border-collapse: collapse; 14	border: 1px solid gray; } 15            td    { padding: 5px; }
16	tr:nth-child(odd) {
17	background-color: white; } 18         </style>
19	</head> 20	<body> 21         <?php
22	$select = $_POST["select"]; // creates variable $select 23
24	// build SELECT query
25	$query = "SELECT " . $select . " FROM books"; 26
27	// Connect to MySQL
28	if ( !( $database = mysql_connect( "localhost", 29               "iw3htp", "password" ) ) )
30	die( "Could not connect to database </body></html>" ); 31
32	// open Products database
33	if ( !mysql_select_db( "products", $database ) )
34	die( "Could not open products database </body></html>" ); 35
36	// query Products database
37	if ( !( $result = mysql_query( $query, $database ) ) ) 38	{
39	print( "<p>Could not execute query!</p>" ); 40	die( mysql_error() . "</body></html>" ); 41            } // end if
42
43	mysql_close( $database ); 44         ?><!-- end PHP script -->
45	<table>
46	<caption>Results of "SELECT <?php print( "$select" ) ?> 47               FROM books"</caption>
48	<?php
49	// fetch each record in result set
50	while ( $row = mysql_fetch_row( $result ) ) 51	{
52	// build table to display results 53	print( "<tr>" );
54
55	foreach ( $row as $key => $value )
56	print( "<td>$value</td>" );

Fig. 19.16 | Queryingadatabaseanddisplayingtheresults.(Part2of3.)
690	Chapter19 PHP


57
58	print( "</tr>" ); 59               } // end while
60	?><!-- end PHP script --> 61         </table>
62	<p>Your search yielded
63	<?php print( mysql_num_rows( $result ) ) ?> results.</p>
64	<p>Please email comments to <a href = "mailto:deitel@deitel.com"> 65               Deitel and Associates, Inc.</a></p>
66	</body>
67  </html>
















Fig. 19.16 | Queryingadatabaseanddisplayingtheresults.(Part3of3.)

To query the database, line 37 calls function mysql_query, specifying the query string and the database to query. If the query fails, the function returns false. Function dieis then called with a call to function mysql_erroras an argument. Function mysql_error returns any error strings from the database. If the query succeeds, mysql_queryreturns a resourcecontaining the query result, which we assign to variable $result. Once we’ve stored the data in $result, we call mysql_closein line 43 to close the connection to the database. Function mysql_query can also execute SQL statements such as INSERT or DELETEthat do not return results.
Lines 50–59 iterate through each record in the result set and construct an HTML5 table containing the results. The loop’s condition calls the mysql_fetch_rowfunction to returnanarraycontainingthevaluesforeachcolumninthecurrentrowofthequeryresult ($result). The array is stored in variable $row. Lines 55–56 construct individual cells for each column in the row. The foreachstatement takes the name of the array ($row), iter-ates through each index value of the array and stores the value in variable $value. Each element of the array is then printed as an individual cell. When the result has no more rows, falseis returned by function mysql_fetch_row, which terminates the loop.
Afterall the rows in the result havebeen displayed, the table’s closingtagiswritten (line 61). Lines 62–63 display the number of rows in $resultby calling mysql_num_rowswith $resultas an argument.
19.10 UsingCookies   691

19.10  Using Cookies
A cookie is a piece of information that’s stored by a server in a text file on a client’s com-puter to maintain information about the client during and between browsing sessions. A website can store a cookie on a client’s computer to record user preferences and other in-formation that the website can retrieve during the client’s subsequent visits. For example, a website can use cookies to store clients’ zip codes, so that it can provide weather reports and news updates tailored to the user’s region. Websites also can use cookies to track in-formationabout client activity. Analysis ofinformation collectedvia cookies can revealthe popularity of websites or products. Marketers can use cookies to determine the effective-ness of advertising campaigns.
Websites store cookies on users’ hard drives, which raises issues regarding security and privacy. Websites should not store critical information, such as credit card numbers or passwords, in cookies, because cookies are typically stored in text files that any program can read. Several cookie features address security and privacy concerns. A server can access only the cookies that it has placed on the client. For example, a web application running on www.deitel.comcannot access cookies that the website www.pearson.comhas placed on the client’s computer. A cookie also has an expiration date, after which the web browser deletes it. Users who are concerned about the privacy and security implications of cookies can disable cookies in theirbrowsers.But,disablingcookiescan makeit difficult orimpos-sible for the user to interact with websites that rely on cookies to function properly.
The information stored in a cookie is sent back to the web server from which it orig-inated whenever the user requests a web page from that particular server. The web server can send the client HTML5 output that reflects the preferences or information that’s stored in the cookie.

HTML5 Document
Figure 19.17 presents an HTML5 document containinga form in which the userspecifies a name, height and favorite color. When the user clicks the Write Cookie button, the cook-ies.phpscript (Fig. 19.18) executes.

Writing Cookies: cookies.php
Script cookies.php(Fig. 19.18) calls function setcookie(lines 8–10) to set the cookies to the values posted from cookies.html. The cookies defined in function setcookieare sent to the client at the same time as the information in the HTTP header; therefore, set-cookieneeds to be called before any other output. Function setcookietakes the name of the cookie to be set as the first argument, followed by the value to be stored in the cookie. For example, line 8 sets the name of the cookie to "Name"and the value to variable $Name, which is passed to the script from cookies.html. The optional third argument indicates the expiration date of the cookie. In this example, we set the cookies to expire in five days by taking the current time, which is returned by function time, and adding the constant FIVE_DAYS—the number of seconds after which the cookie is to expire (60seconds per minute *60minutes per hour *24hours per day *5= 5days). If no expiration date is spec-ified, the cookie lasts only until the end of the current session—that is, when the user closes thebrowser.Thistypeofcookieisknownasasessioncookie,whileonewithanexpiration date is a persistent cookie. If only the nameargument is passed to function setcookie, the cookie is deleted from the client’s computer. Lines 13–35 send a web page to the client
692	Chapter19 PHP


1  <!DOCTYPE html> 2
3  <!-- Fig. 19.17: cookies.html -->
4  <!-- Gathering data to be written as a cookie. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Writing a cookie to the client computer</title> 9	<style type = "text/css">
10	label { width: 7em; float: left; } 11         </style>
12	</head> 13	<body>
14	<h2>Click Write Cookie to save your cookie data.</h2> 15	<form method = "post" action = "cookies.php">
16	<div><label>Name:</label>
17	<input type = "text" name = "name"><div> 18            <div><label>Height:</label>
19	<input type = "text" name = "height"></div> 20            <div><label>Favorite Color:</label>
21	<input type = "text" name = "Color"></div>
22	<p><input type = "submit" value = "Write Cookie"> 23         </form>
24	</body>
25  </html>













Fig. 19.17 | Gatheringdatatobewrittenasacookie.

indicating that the cookie has been written and listing the values that are stored in the cookie.

Software Engineering Observation 19.2 Someclientsdonotacceptcookies.Whenaclientdeclinesacookie,thebrowserapplication normally informsthe user that the site may not function correctly without cookies enabled.

Software Engineering Observation 19.3
Cookiesshouldnot beused to store e-mail addresses,passwords or private data on a client’s computer.
19.10 UsingCookies   693


1  <!-- Fig. 19.18: cookies.php -->
2  <!-- Writing a cookie to the client. --> 3  <?php
4	define( "FIVE_DAYS", 60 * 60 * 24 * 5 ); // define constant 5
6	// write each form field’s value to a cookie and set the 7	// cookie’s expiration date
8	setcookie( "name", $_POST["name"], time() + FIVE_DAYS );
9	setcookie( "height", $_POST["height"], time() + FIVE_DAYS ); 10	setcookie( "color", $_POST["color"], time() + FIVE_DAYS ); 11  ?><!-- end PHP script -->
12
13  <!DOCTYPE html> 14
15  <html>
16	<head>
17	<meta charset = "utf-8">
18	<title>Cookie Saved</title> 19	<style type = "text/css"> 20            p { margin: 0px; }
21	</style> 22     </head>
23	<body>
24	<p>The cookie has been set with the following data:</p> 25
26	<!-- print each form field’s value --> 27	<p>Name: <?php print( $Name ) ?></p>
28	<p>Height: <?php print( $Height ) ?></p> 29	<p>Favorite Color:
30	<span style = "color: <?php print( "$Color" ) ?> "> 31	<?php print( "$Color" ) ?></span></p>
32	<p>Click <a href = "readCookies.php">here</a> 33            to read the saved cookie.</p>
34	</body>
35  </html>











Fig. 19.18 | Writingacookietotheclient.

Reading an Existing Cookie
Figure 19.19 reads the cookie that was written in Fig. 19.18 and displays the cookie’s in-formation in a table. PHP creates the superglobal array $_COOKIE, which contains all the
694	Chapter19 PHP


cookie values indexed by their names, similar to the values stored in array $_POSTwhen an HTML5 form is posted (see Section 19.8).
Lines 18–19 of Fig. 19.19 iterate through the $_COOKIEarray using a foreachstate-ment,printingoutthenameandvalueofeachcookieinaparagraph.Theforeachstatement takes the name of the array ($_COOKIE) and iterates through each index value of the array ($key).Inthiscase,theindexvaluesarethenamesofthecookies.Eachelementisthenstored invariable$value,andthesevaluesbecometheindividualcellsofthetable.Tryclosingyour browser and revisiting readCookies.phpto confirm that the cookie has persisted.

1  <!DOCTYPE html> 2
3  <!-- Fig. 19.19: readCookies.php -->
4  <!-- Displaying the cookie’s contents. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Read Cookies</title> 9	<style type = "text/css">
10	p { margin: 0px; } 11         </style>
12	</head> 13	<body>
14	<p>The following data is saved in a cookie on your computer.</p> 15	<?php
16	// iterate through array $_COOKIE and print 17	// name and value of each cookie
18	foreach ($_COOKIE as $key => $value ) 19               print( "<p>$key: $value</p>" );
20	?><!-- end PHP script --> 21     </body>
22  </html>









Fig. 19.19 | Displayingthecookie’scontents.

19.11  Dynamic Content
PHP can dynamically change the HTML5 it outputs based on a user’s input. We now build on Section 19.8’s example by combining the HTML5 form of Fig. 19.13 and the PHP script of Fig. 19.14 into one dynamic document. The form in Fig. 19.20 is created using a series of loops, arrays and conditionals. We add error checking to each of the text inputfieldsandinformtheuserofinvalidentriesontheformitself,ratherthanonanerror page. If an error exists, the script maintains the previously submitted values in each form
19.11 DynamicContent	695


element. Finally, after the form has been successfully completed, we store the input from the user in a MySQL database. Once again, we assume that you’ve followed the XAMPP installation instructions in Chapter 17 (XAMPP includes MySQL) and that you’ve fol-lowed the Chapter 18 instructions for setting up a MySQL user account and for creating the database MailingListthat we use in this example.

Variables
Lines 19–28 create variables that are used throughout the script to fill in form fields and check for errors. Lines 19–24 usethe issetfunction to determine whetherthe$_POSTarray containskeysrepresentingthevariousformfields.Thesekeysexistonlyaftertheformissub-mitted. If function issetreturns true, then the form has been submitted and we assign the value for each key to a variable. Otherwise, we assign the empty string to each variable.

Arrays
Lines 31–41 create three arrays, $booklist, $systemlistand $inputlist, that are used to dynamically create the form’s input fields. We specify that the formcreated in this doc-ument is self-submitting (i.e., it posts to itself) by setting the action to the script 'dynamicForm.php'in line 125. [Note: We enclose HTML5 attribute values in the string argument of a printstatement in single quotes so that they do not interfere with the dou-ble quotes that delimit the string. We could alternatively have used the escape sequence \" to print double quotes instead of single quotes.] Line 44 uses function issetto determine whether the Register button has been pressed, in which case the $_POSTarray will contain the key "submit"(the nameof the button in the form). If it has, each of the text input fields’valuesisvalidated.Ifanerrorisdetected(e.g.,atextfieldisblankorthephonenum-ber is improperly formatted), the corresponding entry in array $formerrorsis set to true and variable $iserroris set to true. If the Register button has not been pressed, we skip ahead to line 115.

1  <!DOCTYPE html> 2
3  <!-- Fig. 19.20: dynamicForm.php --> 4  <!-- Dynamic form. -->
5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Registration Form</title> 9	<style type = "text/css">
10	p	{ margin: 0px; } 11	.error  { color: red }
12	p.head  { font-weight: bold; margin-top: 10px; } 13	label   { width: 5em; float: left; }
14	</style> 15     </head>
16	<body> 17         <?php
18	// variables used in script
19	$fname = isset($_POST[ "fname" ]) ? $_POST[ "fname" ] : "";
20	$lname = isset($_POST[ "lname" ]) ? $_POST[ "lname" ] : "";

Fig. 19.20 | Dynamicform.(Part1of5.)
696	Chapter19 PHP


21	$email = isset($_POST[ "email" ]) ? $_POST[ "email" ] : ""; 22	$phone = isset($_POST[ "phone" ]) ? $_POST[ "phone" ] : ""; 23	$book = isset($_POST[ "book" ]) ? $_POST[ "book" ] : "";
24	$os = isset($_POST[ "os" ]) ? $_POST[ "os" ] : ""; 25	$iserror = false;
26	$formerrors =
27	array( "fnameerror" => false, "lnameerror" => false, 28                  "emailerror" => false, "phoneerror" => false ); 29
30	// array of book titles
31	$booklist = array( "Internet and WWW How to Program", 32               "C++ How to Program", "Java How to Program",
33	"Visual Basic How to Program" ); 34
35	// array of possible operating systems
36	$systemlist = array( "Windows", "Mac OS X", "Linux", "Other" ); 37
38	// array of name values for the text input fields 39	$inputlist = array( "fname" => "First Name",
40	"lname" => "Last Name", "email" => "Email", 41	"phone" => "Phone" );
42
43	// ensure that all fields have been filled in correctly 44	if ( isset( $_POST["submit"] ) )
45	{
46	if ( $fname == "" ) 47	{
48	$formerrors[ "fnameerror" ] = true; 49	$iserror = true;
50	} // end if 51
52	if ( $lname == "" ) 53	{
54	$formerrors[ "lnameerror" ] = true; 55	$iserror = true;
56	} // end if 57
58	if ( $email == "" ) 59	{
60	$formerrors[ "emailerror" ] = true; 61	$iserror = true;
62	} // end if 63
64	if ( !preg_match( "/^\([0-9]{3}\) [0-9]{3}-[0-9]{4}$/", 65                  $phone ) )
66	{
67	$formerrors[ "phoneerror" ] = true; 68	$iserror = true;
69	} // end if 70
71	if ( !$iserror )
72	{

Fig. 19.20 | Dynamicform.(Part2of5.)
19.11 DynamicContent	697


73	// build INSERT query
74	$query = "INSERT INTO contacts " .
75	"( LastName, FirstName, Email, Phone, Book, OS ) " . 76	"VALUES ( '$lname', '$fname', '$email', " .
77	"'" . mysql_real_escape_string( $phone ) . 78	"', '$book', '$os' )";
79
80	// Connect to MySQL
81	if ( !( $database = mysql_connect( "localhost", 82                     "iw3htp", "password" ) ) )
83	die( "<p>Could not connect to database</p>" ); 84
85	// open MailingList database
86	if ( !mysql_select_db( "MailingList", $database ) )
87	die( "<p>Could not open MailingList database</p>" ); 88
89	// execute query in MailingList database
90	if ( !( $result = mysql_query( $query, $database ) ) ) 91	{
92	print( "<p>Could not execute query!</p>" ); 93	die( mysql_error() );
94	} // end if 95
96	mysql_close( $database ); 97
98	print( "<p>Hi $fname. Thank you for completing the survey. 99                         You have been added to the $book mailing list.</p> 100                     <p class = 'head'>The following information has been 101                        saved in our database:</p>
102	<p>Name: $fname $lname</p> 103	<p>Email: $email</p>
104	<p>Phone: $phone</p> 105	<p>OS: $os</p>
106	<p><a href = 'formDatabase.php'>Click here to view 107                        entire database.</a></p>
108	<p class = 'head'>This is only a sample form. 109                        You have not been added to a mailing list.</p> 110	</body></html>" );
111	die(); // finish the page 112              } // end if
113	} // end if 114
115	print( "<h1>Sample Registration Form</h1>
116	<p>Please fill in all fields and click Register.</p>" ); 117
118	if ( $iserror ) 119	{
120	print( "<p class = 'error'>Fields with * need to be filled 121                 in properly.</p>" );
122	} // end if
123

Fig. 19.20 | Dynamicform.(Part3of5.)
698	Chapter19 PHP


124	print( "<!-- post form data to dynamicForm.php --> 125              <form method = 'post' action = 'dynamicForm.php'> 126              <h2>User Information</h2>
127
128	<!-- create four text boxes for user input -->" ); 129           foreach ( $inputlist as $inputname => $inputalt ) 130           {
131	print( "<div><label>$inputalt:</label><input type = 'text' 132                 name = '$inputname' value = '" . $$inputname . "'>" ); 133
134	if ( $formerrors[ ( $inputname )."error" ] == true ) 135                 print( "<span class = 'error'>*</span>" );
136
137	print( "</div>" ); 138           } // end foreach
139
140	if ( $formerrors[ "phoneerror" ] )
141	print( "<p class = 'error'>Must be in the form 142                 (555)555-5555" );
143
144	print( "<h2>Publications</h2>
145	<p>Which book would you like information about?</p> 146
147	<!-- create drop-down list containing book names --> 148	<select name = 'book'>" );
149
150	foreach ( $booklist as $currbook ) 151	{
152	print( "<option" .
153	($currbook == $book ? " selected>" : ">") . 154	$currbook . "</option>" );
155	} // end foreach 156
157	print( "</select>
158	<h2>Operating System</h2>
159	<p>Which operating system do you use?</p> 160
161	<!-- create five radio buttons -->" ); 162
163	$counter = 0; 164
165	foreach ( $systemlist as $currsystem ) 166	{
167	print( "<input type = 'radio' name = 'os' 168                 value = '$currsystem' " );
169
170	if ( ( !$os && $counter == 0 ) || ( $currsystem == $os ) ) 171                 print( "checked" );
172
173	print( ">$currsystem" ); 174	++$counter;
175	} // end foreach
176

Fig. 19.20 | Dynamicform.(Part4of5.)
19.11 DynamicContent	699


177	print( "<!-- create a submit button -->
178	<p class = 'head'><input type = 'submit' name = 'submit' 179	value = 'Register'></p></form></body></html>" );
180	?><!-- end PHP script -->

a)Registrationformafter itwassubmittedwitha missingfieldandan incorrectlyformatted phonenumber























b)Confirmationpage displayedafterthe userproperlyfillsin theformandthe informationisstored inthedatabase









Fig. 19.20 | Dynamicform.(Part5of5.)
700	Chapter19 PHP


Dynamically Creating the Form Line71determineswhetheranyerrorsweredetected.If $iserrorisfalse(i.e.,therewere noinputerrors),lines74–111displaythepageindicatingthattheformwassubmittedsuc-cessfully—we’ll say more about these lines later. If $iserroris true, lines 74–111 are skipped, and the code from lines 115–179 executes. These lines include a series of print statements and conditionals to output the form, as seen in Fig. 19.20(a).
Lines 129–138 iterate through each element in the $inputlistarray. In line 132 the value of $$inputnameis assigned to the text field’s valueattribute. If the form has not yet been submitted, this will be the empty string "". The notation $$variable specifies a variable variable, which allows the code to reference variables dynamically. You can use thisexpressiontoobtainthevalueofthevariablewhosenameisequaltothevalueof$vari-able. PHP first determines the value of $variable, then appends this value to the leading $ to form the identifier of the variable you wish to reference dynamically. (The expression $$variable can also be written as ${$variable}to convey this procedure.) For example, in lines 129–138, we use $$inputnameto reference the value of each form-field variable. During the iteration of the loop, $inputnamecontains the name of one of the text input elements, such as "email". PHP replaces $inputnamein the expression $$inputnamewith the string representing that element’s name forming the expression ${"email"}. The entire expression then evaluates to the value of the variable $email. Thus, the variable $email, which stores the value of the e-mail text field after the form has been submitted, is dynamically referenced. This dynamic variable reference is added to the string as the value of the input field (using the concatenation operator) to maintain data over multiple submissions of the form.
Lines134–135addaredasterisknexttothetextinputfieldsthatwerefilledoutincor-rectly. Lines 140–142 display the phone number format instructions in red if the user entered an invalid phone number.
Lines 150–155 and 165–175 generate options for the book drop-down list and oper-ating-system radio buttons, respectively. In both cases, we ensure that the previously selected or checked element (if one exists) remains selected or checked over multiple attempts to correctly fill out the form. If any book was previously selected, line 153 adds selectedto its option tag. Lines 170–171 select an operating system radio button under two conditions. If the form is begin displayed for the first time, the first radio button is selected. Otherwise, if the $currsystemvariable’s value matches what’s stored in the $os variable(i.e.,whatwassubmittedaspartoftheform),thatspecificradiobuttonisselected.

Inserting Data into the Database
If the form has been filled out correctly, lines 74–95 place the form information in the MySQL database MailingList using an INSERT statement. Line 77 uses the function mysql_real_escape_stringto insert a backslash (\) before any special characters in the passed string. We must use this function so that MySQL does not interpret the parenthe-ses in the phone number as having a special meaning aside from being part of a value to insert into the database. Lines 98–110 generate the web page indicating a successful form submission, which also provides a link to formDatabase.php(Fig. 19.21).

Displaying the Database’s Contents
The script in Fig. 19.21 displays the contents of the MailingListdatabase using the same techniques that we showed in Fig. 19.16.
19.11 DynamicContent	701


1  <!DOCTYPE html> 2
3  <!-- Fig. 19.21: formDatabase.php -->
4  <!-- Displaying the MailingList database. --> 5  <html>
6	<head>
7	<meta charset = "utf-8">
8	<title>Search Results</title> 9	<style type = "text/css">
10	table  { background-color: lightblue; 11                     border: 1px solid gray;
12	border-collapse: collapse; }
13	th, td { padding: 5px; border: 1px solid gray; } 14	tr:nth-child(even) { background-color: white; } 15	tr:first-child { background-color: lightgreen; } 16         </style>
17	</head> 18	<body> 19         <?php
20	// build SELECT query
21	$query = "SELECT * FROM contacts"; 22
23	// Connect to MySQL
24	if ( !( $database = mysql_connect( "localhost", 25               "iw3htp", "password" ) ) )
26	die( "<p>Could not connect to database</p></body></html>" ); 27
28	// open MailingList database
29	if ( !mysql_select_db( "MailingList", $database ) ) 30               die( "<p>Could not open MailingList database</p> 31                  </body></html>" );
32
33	// query MailingList database
34	if ( !( $result = mysql_query( $query, $database ) ) ) 35	{
36	print( "<p>Could not execute query!</p>" ); 37	die( mysql_error() . "</body></html>" ); 38            } // end if
39	?><!-- end PHP script --> 40
41	<h1>Mailing List Contacts</h1> 42	<table>
43	<caption>Contacts stored in the database</caption> 44	<tr>
45	<th>ID</th>
46	<th>Last Name</th> 47	<th>First Name</th>
48	<th>E-mail Address</th> 49	<th>Phone Number</th> 50	<th>Book</th>
51	<th>Operating System</th>
52	</tr>

Fig. 19.21 | DisplayingtheMailingListdatabase.(Part1of2.)
702	Chapter19 PHP


53	<?php
54	// fetch each record in result set
55	for ( $counter = 0; $row = mysql_fetch_row( $result ); 56                  ++$counter )
57	{
58	// build table to display results 59	print( "<tr>" );
60
61	foreach ( $row as $key => $value ) 62                     print( "<td>$value</td>" );
63
64	print( "</tr>" ); 65               } // end for
66
67	mysql_close( $database ); 68            ?><!-- end PHP script -->
69	</table> 70     </body>
71  </html>











Fig. 19.21 | DisplayingtheMailingListdatabase.(Part2of2.)

19.12  Web Resources www.deitel.com/PHP/
The Deitel PHP Resource Center contains links to some of the best PHP information on the web. There you’ll find categorized links to PHP tools, code generators, forums, books, libraries, frame-works and more. Also check out the tutorials for all skill levels, from introductory to advanced. Be sure to visit the related Resource Centers on HTML5 (www.deitel.com/html5/) and CSS 3 (www.deitel.com/css3/).



Summary
Section 19.1 Introduction
•  PHP (p. 665), or PHP: Hypertext Preprocessor, has become one of the most popular server-side scripting languages for creating dynamic web pages.
•  PHP is open source and platform independent—implementations exist for all major UNIX, Li-nux, Mac and Windows operating systems. PHP also supports a large number of databases.
Summary   703


Section 19.2 Simple PHP Program
•  PHP code is embedded directly into HTML5 documents and interpreted on the server.
•  PHP script file names end with .php.
•  In PHP, code is inserted between the scripting delimiters <?phpand ?>(p. 666). PHP code can be placed anywhere in HTML5 markup, as long as the code is enclosed in these delimiters.
•  Variables are preceded by a $(p. 666) and are created the first time they’re encountered. •  PHP statements terminate with a semicolon (;, p. 666).
•  Single-line comments (p. 667) which begin with two forward slashes (//). Text to the right of the delimiter is ignored by the interpreter. Multiline comments begin with delimiter /*and end with delimiter */.
•  Whenavariableis encounteredinsideadouble-quoted("")string,PHPinterpolates(p. 667)the variable—it inserts the variable’s value where the variable name appears in the string.
•  All operations requiring PHP interpolation execute on the server before the HTML5 document is sent to the client.

Section 19.3 Converting Between Data Types
•  PHP variables are loosely typed—they can contain different types of data at different times.
•  Type conversions can be performed using function settype(p. 667). This function takes two arguments—a variable whose type is to be changed and the variable’s new type.
•  Variables are automatically converted to the type of the value they’re assigned. •  Function gettype(p. 669) returns the current type of its argument.
•  Calling function settypecan result in loss of data. For example, doubles are truncated when they’re converted to integers.
•  When converting from a string to a number, PHP uses the value of the number that appears at the beginning of the string. If no number appears at the beginning, the string evaluates to 0.
•  Another option for conversion between types is casting (or type casting, p. 669). Casting does not change a variable’s content—it creates a temporary copy of a variable’s value in memory.
•  The concatenation operator (., p. 670) combines multiple strings.
•  A printstatement split over multiple lines prints all the data that’s enclosed in its parentheses.

Section 19.4 Arithmetic Operators
•  Functiondefine(p. 670)createsanamedconstant.Ittakestwoarguments—thenameandvalue of the constant. An optional third argument accepts a boolean value that specifies whether the constant is case insensitive—constants are case sensitive by default.
•  Uninitializedvariableshaveundefinedvalues.Inanumeric context,anundefinedvalueevaluates to 0. In a string context, it evaluates to "undef").
•  Keywords may not be used as function, method, class or namespace names.

Section 19.5 Initializing and Manipulating Arrays
•  PHP provides the capability to store data in arrays. Arrays are divided into elements that behave as individual variables. Array names, like other variables, begin with the $symbol.
•  Individual array elements are accessed by following the array’s variable name with an index en-closed in square brackets ([]).
•  If a value is assigned to an array that does not exist, then the array is created. Likewise, assigning a value to an element where the index is omitted appends a new element to the end of the array.
704	Chapter19 PHP


•  Function count(p. 674) returns the total number of elements in the array.
•  Function array(p. 676) creates an array that contains the arguments passed to it. The first item in the argument list is stored as the first array element (index 0), the second item is stored as the second array element and so on.
•  Arrays with nonnumeric indices are called associative arrays (p. 676). You can create an associa-tive array using the operator =>, where the value to the left of the operator is the array index and the value to the right is the element’s value.
•  PHP provides functions for iterating through the elements of an array. Each array has a built-in internal pointer (p. 676), whichpoints to the array element currently being referenced. Function reset(p. 676) sets the internal pointer to the first array element. Function key(p. 676) returns the index of the element currently referenced by the internal pointer, and function next(p. 676) moves the internal pointer to the next element.
•  The foreachstatement (p. 677), designed for iterating through arrays, starts with the array to iterate through, followed by the keyword as(p. 677), followed by two variables—the first is as-signed the index of the element and the second is assigned the value of that index. (If only one variable is listed after as, it’s assigned the value of the array element.)

Section 19.6 String Comparisons
•  Many string-processing tasks can be accomplished using the equality and relational operators.
•  Function strcmp(p. 677) compares two strings. The function returns -1if the first string alpha-beticallyprecedes thesecondstring,0ifthestringsareequal,and1ifthefirststringalphabetically follows the second.

Section 19.7 String Processing with Regular Expressions
•  A regular expression (p. 678) is a series of characters used for pattern-matching templates in strings, text files and databases.
•  Function preg_match(p. 678) uses regular expressions to search a string for a specified pattern. If a pattern is found, it returns the length of the matched string.
•  Anything enclosed in single quotes in a printstatement is not interpolated (unless the single quotes are nested in a double-quoted string literal).
•  Function preg_matchreceives a regular expression pattern to search for and the string to search.
•  Regular expressions can include metacharacters (p. 680) that specify patterns. For example, the caret (^) metacharacter matches the beginning of a string, while the dollar sign ($) matches the end of a string. The period (.) metacharacter matches any single character except newlines.
•  Bracketexpressions (p.680)arelistsofcharacters enclosedinsquarebrackets([])thatmatchany single character from the list. Ranges can be specified by supplying the beginning and the end of the range separated by a dash (-).
•  Quantifiers (p. 680) are used in regular expressions to denote how often a particular character or set of characters can appear in a match.
•  The optional third argument to function preg_matchis an array that stores matches to each par-enthetical statement of the regular expression. The first element stores the string matched for the entire pattern, and the remaining elements are indexed from left to right.
•  To find multiple instances of a pattern, multiple calls to preg_match, and remove matched in-stances before calling the function again by using a function such as preg_replace(p. 681).
•  Character classes (p. 681), or sets of specific characters, are enclosed by the delimiters [:and :]. When this expression is placed in another set of brackets, it’s a regular expression matching all of the characters in the class.
Summary   705


•  A bracketed expression containing two or more adjacent character classes in the class delimiters represents those character sets combined.
•  Functionpreg_replace(p.681)takes threearguments—thepattern tomatch,astringto replace the matched string and the string to search. The modified string is returned.

Section 19.8 Form Processing and Business Logic
•  Superglobal arrays (p. 682) are associative arrays predefined by PHP that hold variables acquired from user input, the environment or the web server and are accessible in any variable scope.
•  The arrays $_GETand $_POST(p. 685) retrieve information sent to the server by HTTP getand postrequests, respectively.
•  A script located on a web server can access the form data posted to the script as part of a request.
•  Function die(p. 687) terminates script execution. The function’s optional argument is a string to display or an integer to return as the script exits.

Section 19.9 Reading from a Database
•  Function mysql_connect(p. 688) connects to the MySQL database. It takes three arguments— the server’s hostname, a username and a password, and returns a database handle (p. 688)—a representation of PHP’s connection to the database, or falseif the connection fails.
•  Function mysql_select_db(p. 688) specifies the database to be queried, and returns a boolin-dicating whether or not it was successful.
•  To query the database, we call function mysql_query(p. 690), specifying the query string and the database to query. This returns a resource containing the result of the query, or falseif the query fails. It can also execute SQL statements such as INSERTor DELETEthat do not return results.
•  Function mysql_errorreturns any error strings from the database.

Section 19.10 Using Cookies
•  Acookie(p.691)isatextfilethatawebsitestoresonaclient’scomputertomaintaininformation about the client during and between browsing sessions.
•  A server can access only the cookies that it has placed on the client.
•  Function setcookie(p. 691) takes the name of the cookie to be set as the first argument, fol-lowed by the value to be stored in the cookie. The optional third argument indicates the expira-tion date of the cookie. A cookie without a third argument is known as a session cookie, while onewithanexpirationdateisapersistentcookie.Ifonlythenameargumentispassedtofunction setcookie, the cookie is deleted from the client’s computer.
•  Cookies defined in function setcookieare sent to the client at the same time as the information in the HTTP header; therefore, it needs to be called before any HTML5 is printed.
•  The current time is returned by function time(p. 691).
•  When using Internet Explorer, cookies are stored in a Cookies directory on the client’s machine. In Firefox, cookies are stored in a file named cookies.txt.
•  The superglobal array $_COOKIE(p. 693) contains all the cookie values indexed by their names.

Section 19.11 Dynamic Content
•  Function isset(p. 695) allows you to find out if a variable has a value.
•  Avariablevariable($$variable,p.700)allowsthecodetoreferencevariablesdynamically.Youcan usethisexpressiontoobtainthevalueofthevariablewhosenameisequaltothevalueof$variable.
•  The mysql_real_escape_stringfunction (p. 700) inserts a backslash (\) before any special char-acters in the passed string.
706	Chapter19 PHP


Self-Review Exercises
19.1	 State whether each of the following is true or false. If false, explain why. a)  PHP script is never in the same file as HTML5 script.
b)  PHP variable names are case sensitive.
c)   The settypefunction only temporarily changes the type of a variable.
d)  Conversion between data types happens automatically when a variable is used in a con-text that requires a different data type.
e)   The foreachstatement is designed specifically for iterating over arrays. f)   Relational operators can only be used for numeric comparison.
g)  The quantifier +, when used in a regular expression, matches any number of the preced-ing pattern.
h)  Function dienever takes arguments.
i)   Cookies are stored on the server computer.
j)   The *arithmetic operator has higher precedence than the +operator.
19.2	Fill in the blanks in each of the following statements:
a)  PHP scripts typically have the file extension	.
b)  The two numeric types that PHP variables can store are	and	. c)	are divided into elements, each of which acts like an individual variable. d)  Function                     returns the total number of elements in an array.
e)   A(n)	in a regular expression matches a predefined set of characters. f)   Data submitted through the HTTP postmethod is stored in array	. g)  Function                     terminates script execution.
h)	can be used to maintain state information on a client’s computer.

Answers to Self-Review Exercises
19.1	a) False. PHP is directly embedded directly into HTML5. b) True. c) False. Function set-typepermanently changes the type of a variable. d) True. e) True. f) False. Relational operators can also be used for alphabetic comparison. g) False. The quantifier +matches one or more of the pre-cedingpattern.h) False.Function diehas anoptionalargument—a stringtobe printed asthe script exits. i) False. Cookies are stored on the client’s computer. j) True.
19.2	a) .php.   b) int or integer, float or double.   c) Arrays.   d) count.   e) character class. f) $_POST.  g) die.  h) Cookies.

Exercises
19.3	Identify and correct the error in each of the following PHP code examples: a)  <?php print( "Hello World" ); >
b)  <?phps
$name = "Paul"; print( "$Name" );
?><!-- end PHP script -->
19.4	Write a PHP regular expression pattern that matches a string that satisfies the following de-scription: The string must begin with the (uppercase) letter A. Any three alphanumeric characters must follow. After these, the letter B (uppercase or lowercase) must be repeated one or more times, and the string must end with two digits.
19.5	Describe how input from an HTML5 formis retrieved in a PHP program.
19.6	Describe how cookies can be used to store information on a computer and how the infor-mation can be retrieved by a PHP script. Assume that cookies are not disabled on the client.
Exercises   707


19.7	Write a PHP script named states.phpthat creates a variable $stateswith the value "Mis-sissippiAlabamaTexasMassachusettsKansas". The script should perform the following tasks:
a)  Search for a word in $statesthat ends in xas. Store this word in element 0 of an array named $statesArray.
b)  Searchforawordin$statesthatbeginswithkandendsins.Performacase-insensitive comparison. Store this word in element 1 of $statesArray.
c)   Search for a word in $statesthat begins with Mand ends in s. Store this element in element 2 of the array.
d)  Search for a word in $statesthat ends in a. Store this word in element 3 of the array. e)   Search for a word in $statesat the beginning of the string that starts with M. Store this
word in element 4 of the array.
f)   Output the array $statesArrayto the screen.
19.8	Write a PHP script that tests whether an e-mail address is input correctly. Verify that the input begins with series of characters, followed by the @character, another series of characters, a pe-riod (.) and a final series of characters. Test your program, using both valid and invalid e-mail ad-dresses.
19.9	Write a PHP script that obtains a URL and its description from a user and stores the infor-mation into a database using MySQL. Create and run a SQL script with a database named URLand a table named Urltable. The first field of the table should contain an actual URL, and the second, which is named Description, should contain a description of the URL. Use www.deitel.comas the first URL, and input Coolsite!as its description. The second URL should be www.php.net, and the description should be TheofficialPHPsite. After each new URL is submitted, print the con-tents of the database in a table. [Note: Follow the instructions in Section 18.5.2 to create the Url database by using the URLs.sqlscript that’s provided with this chapter’s examples in the dbscripts folder.]
20
… the challenges are for the designers of these applications: to forget what we think we know about the limitations of theWeb,andbegintoimaginea wider, richer range of possibilities. It’s going to be fun.
—Jesse James Garrett

If any man will draw up his case, and put his name at the foot of the first page, I will give himanimmediatereply.Where he compels me to turn over the sheet, he must wait my leisure.
—Lord Sandwich





WebAppDevelopmentwith ASP.NETinC#




Objectives Inthischapteryou’lllearn:
ÿ   Webapplication
developmentusingASP.NET.
ÿ   Tohandletheeventsfroma
WebForm’scontrols.
ÿ   Tousevalidationcontrolsto ensurethatdataisinthe correctformatbeforeit’ssent
fromaclienttotheserver.
ÿ   Tomaintainuser-specific
information.
ÿ   Tocreateadata-drivenweb applicationusingASP.NET
andLINQtoSQL.
20.1 Introduction   709



20.1  Introduction 20.2  WebBasics
20.3  MultitierApplicationArchitecture
20.4  YourFirstASP.NETApplication
20.4.1 BuildingtheWebTimeApplication
20.4.2 ExaminingWebTime.aspx’sCode-
BehindFile
20.5  StandardWebControls:Designinga Form
20.6  ValidationControls
20.7  SessionTracking
20.7.1 Cookies
20.7.2 SessionTrackingwith HttpSessionState


20.7.3 Options.aspx:Selectinga
ProgrammingLanguage
20.7.4 Recommendations.aspx: DisplayingRecommendationsBased
onSessionValues
20.8  CaseStudy:Database-Driven ASP.NETGuestbook
20.8.1 BuildingaWebFormthatDisplays
DatafromaDatabase
20.8.2 ModifyingtheCode-BehindFilefor
theGuestbookApplication
20.9  CaseStudyIntroduction:ASP.NET AJAX
20.10  CaseStudyIntroduction:Password-ProtectedBooksDatabase Application


Summary | Self-Review Exercises | Answers to Self-Review Exercises | Exercises


20.1 Introduction
In this chapter, we introduce web-application development with Microsoft’s ASP.NET technology. Web-based applications create web content for web-browser clients.
We present several examples that demonstrate web-application development using WebForms,webcontrols (alsocalledASP.NETservercontrols) andVisualC#program-ming. Web Form files have the file-name extension .aspxand contain the web page’s GUI. You customize Web Forms by adding web controls including labels, textboxes, images, buttons and other GUI components. The Web Form file represents the web page that is sent to the client browser. We often refer to Web Form files as ASPX files.
An ASPX file created in Visual Studio has a corresponding class written in a .NET language—we use Visual C# in this book. This class contains event handlers, initialization code, utility methods and other supporting code. The file that contains this class is called the code-behind file and provides the ASPX file’s programmatic implementation.
To develop the code and GUIs in this chapter, we used Microsoft’s Visual Web Developer 2010 Express—a free IDE designed for developing ASP.NET web applica-tions. The full version of Visual Studio 2010 includes the functionality of Visual Web Developer, so the instructions we present for Visual Web Developer also apply to Visual Studio2010.Thedatabaseexample(Section 20.8)alsorequiresSQLServer2008Express. You can download and install these tools from www.microsoft.com/express.
In the next chapter, we present several additional web-application development topics, including:
•	master pages to maintain a uniform look-and-feel across the Web Forms in a web application
•	creating password-protected websites with registration and login capabilities
•	 usingtheWeb Site Administration Tool tospecify whichpartsofawebsitearepass-word protected
710	Chapter20 WebAppDevelopmentwithASP.NETinC#


•	using ASP.NET AJAX to quickly and easily improve the user experience for your web applications, giving them responsiveness comparable to that of desktop ap-plications.


20.2 Web Basics
In this section, we discuss what occurs when a user requests a web page in a browser. In its simplest form, a web page is nothing more than an HTML (HyperText Markup Language) document (with the extension .htmlor .htm) that describes to a web browser the docu-ment’s content and how to format it.
HTML documents normally contain hyperlinks that link to different pages or to other partsofthesamepage.Whentheuserclicksahyperlink,awebserverlocatestherequested web page and sends it to the user’s web browser. Similarly, the user can type the address of a web page into the browser’s address field and press Enter to view the specified page.
Web development tools like Visual Web Developer typically use a “stricter” version of HTML called XHTML (Extensible HyperText Markup Language), which is based on XML. ASP.NET produces web pages as XHTML documents.

URIs and URLs
URIs (Uniform Resource Identifiers) identify resources on the Internet. URIs that start with http://are called URLs (Uniform Resource Locators). Common URLs refer to files, direc-tories or server-side code that performs tasks such as database lookups, Internet searches and business application processing. If you know the URL of a publicly available resource anywhere on the web, you can enter that URL into a web browser’s address field and the browser can access that resource.

Parts of a URL
A URL contains information that directs a browser to the resource that the user wishes to access. Web servers make such resources available to web clients.
Let’s examine the components of the URL

http://www.deitel.com/books/downloads.html
The http://indicates that the HyperText Transfer Protocol (HTTP) should be used to obtain the resource. HTTP is the web protocol that enables clients and servers to commu-nicate. Next in the URL is the server’s fully qualified hostname (www.deitel.com)—the name of the web server computer on which the resource resides. This computer is referred to as the host, because it houses and maintains resources. The hostname www.deitel.com is translated into an IP (Internet Protocol) address—a numerical value that uniquely identifies the server on the Internet. A Domain Name System (DNS) server maintains a databaseof hostnames and their corresponding IPaddresses, and performs the translations automatically.
The remainder of the URL (/books/downloads.html) specifies the resource’s loca-tion (/books) and name (downloads.html) on the web server. The location could repre-sent an actual directory on the web server’s file system. For security reasons, however, the location is typically a virtual directory. The web server translates the virtual directory into a real location on the server, thus hiding the resource’s true location.
20.3 MultitierApplicationArchitecture	711


Making a Request and Receiving a Response
When given a URL, a web browser uses HTTP to retrieve the web page found at that ad-dress. Figure 20.1 shows a web browser sending a request to a web server. Figure 20.2 shows the web server responding to that request.



a) Therequestis sentfromthe webclienttothe webserver




Webclient
Internet



Webserver
b) Afteritreceives therequest,the webserver searchesits systemforthe resource



Fig. 20.1  | Clientrequestingaresourcefromawebserver.









Webclient
Internet

Webserver
Theserver respondstothe requestwith theresource's contents



Fig. 20.2  | Clientreceivingaresponsefromthewebserver.

20.3 Multitier Application Architecture
Web-based applications are multitier applications (sometimes referred to as n-tier appli-cations). Multitier applications divide functionality into separate tiers (that is, logical groupings of functionality). Although tiers can be located on the same computer, the tiers of web-based applications commonly reside on separate computers for security and scal-ability. Figure 20.3 presents the basic architecture of a three-tier web-based application.

Information Tier
The information tier (also called the bottom tier) maintains the application’s data. This tier typically stores data in a relational database management system. For example, a retail store might have a database for storing product information, such as descriptions, prices and quantities in stock. Thesame database also might contain customer information, such as user names, billing addresses and credit card numbers. This tier can contain multiple databases, which together comprise the data needed for an application.
712	Chapter20 WebAppDevelopmentwithASP.NETinC#




Toptier (Clienttier)


Browser	Userinterface




XHTML



Middletier (Businesslogictier)

Businesslogic Webserver	implementedin
ASP.NET


LINQ


Bottomtier (Informationtier)


DBMS	Database



Fig. 20.3  | Three-tierarchitecture.


Business Logic
The middle tier implements business logic, controller logic and presentation logic to control interactions between the application’s clients and its data. The middle tier acts as an intermediary between data in the information tier and the application’s clients. The middle-tier controller logic processes client requests (such as requests to view a product catalog) and retrieves data from the database. The middle-tier presentation logic then pro-cesses data from the information tier and presents the content to the client. Web applica-tions typically present data to clients as web pages.
Business logic in the middle tier enforces business rules and ensures that data is reliable before the server application updates the database or presents the data to users. Business rulesdictatehowclientscan andcannot access application data, andhowapplicationspro-cess data. For example, a business rule in the middle tier of a retail store’s web-based appli-cation might ensure that all product quantities remain positive. A client request to set a negative quantity in the bottom tier’s product information database would be rejected by the middle tier’s business logic.


Client Tier
The client tier, or top tier, is the application’s user interface, which gathers input and dis-plays output. Users interact directly with the application through the user interface (typi-cally viewed in a web browser), keyboard and mouse. In response to user actions (for example, clicking a hyperlink), the client tier interacts with the middle tier to make re-quests and to retrieve data from the information tier. The client tier then displays to the user the data retrieved from the middle tier. The client tier never directly interacts with the information tier.
20.4 YourFirstASP.NETApplication   713

20.4 Your First ASP.NET Application
Our first example displays the web server’s time of day in a browser window (Fig. 20.4). When this application executes—that is, a web browser requests the application’s web page—the web server executes the application’s code, which gets the current time and dis-plays it in a Label. The web server then returns the result to the web browser that made the request, and the web browser renders the web page containing the time. We show this application executing in the Internet Explorer and Firefox web browsers to show you that the web page renders identically across browsers.





















Fig. 20.4  | WebTimewebapplicationrunninginInternetExplorerandFirefox.

Testing the Application in Your Default Web Browser
To test this application in your default web browser, perform the following steps:
1. Open Visual Web Developer.
2.  Select Open Web Site… from the File menu.
3.  In the Open Web Site dialog (Fig. 20.5), ensure that File System is selected, then navigate to this chapter’s examples, select the WebTimefolder and click the Open Button.
4. Select WebTime.aspxin the Solution Explorer, then type Ctrl + F5 to execute the web application.

Testing the Application in a Selected Web Browser Ifyouwishtoexecutetheapplicationinanotherwebbrowser,youcancopythewebpage’s address from your default browser’s address field and paste it into another browser’s ad-dress field, or you can perform the following steps:
714	Chapter20 WebAppDevelopmentwithASP.NETinC#





















Fig. 20.5  | Open Web Site dialog.

1.  In the Solution Explorer, right click WebTime.aspxand select Browse With… to display the Browse With dialog (Fig. 20.6).

















Fig. 20.6  | Selectinganotherwebbrowsertoexecutethewebapplication.

2.  From the Browsers list, select the browser in which you’d like to test the web ap-plication and click the Browse Button.
Ifthebrowseryouwishtouseisnotlisted,youcanusetheBrowseWith dialogtoadditems to or remove items from the list of web browsers.
20.4 YourFirstASP.NETApplication   715


20.4.1 Building the WebTimeApplication
Now that you’ve tested the application, let’s create it in Visual Web Developer.

Step 1: Creating the Web Site Project
Select File > New Web Site... to display the New Web Site dialog (Fig. 20.7). In the left col-umn of this dialog, ensure that Visual C# is selected, then select ASP.NET Empty Web Site in the middle column. At the bottom of the dialog you can specify the location and name of the web application.

















Fig. 20.7  | CreatinganASP.NET Web Site inVisualWebDeveloper.

The Web location: ComboBoxprovides the following options:
•	File System: Creates a new website for testing on your local computer. Such web-sites execute in Visual Web Developer’s built-in ASP.NET Development Server and can be accessed only by web browsers running on the same computer. You can later “publish” your website to a production web server for access via a local networkortheInternet.EachexampleinthischapterusestheFileSystem option, so select it now.
•	HTTP: Creates a new website on an IIS web server and uses HTTP to allow you to put your website’s files on the server. IIS is Microsoft’s software that is used to runproductionwebsites.Ifyouownawebsiteandhaveyourownwebserver,you might use this to build a new website directly on that server computer. You must be an Administrator on the computer running IIS to use this option.
•	FTP: Uses File Transfer Protocol (FTP) to allow you to put your website’s files on the server. The server administrator must first create the website on the server for you. FTP is commonly used by so-called “hosting providers” to allow website owners to share a server computer that runs many websites.
Change the name of the web application from WebSite1to WebTime, then click OK to cre-ate the website.
716	Chapter20 WebAppDevelopmentwithASP.NETinC#


Step 2: Adding a Web Form to the Website and Examining the Solution Explorer
A Web Form represents one page in a web application—we’ll often use the terms “page” and “Web Form” interchangeably. A Web Form contains a web application’s GUI. To create the WebTime.aspxWeb Form:
1.  Right click the project name in the Solution Explorer and select Add New Item... to display the Add New Item dialog (Fig. 20.8).


















Fig. 20.8  | AddinganewWeb Form tothewebsitewiththeAdd New Item dialog.

2.  In the left column, ensure that Visual C# is selected, then select Web Form in the middle column.
3. In the Name: TextBox, change the file name to WebTime.aspx, then click the Add Button.
After you add the Web Form, the IDE opens it in Source view by default (Fig. 20.9). This view displays the markup for the Web Form. As you become more familiar with ASP.NET and building web sites in general, you might use Source view to perform high precision adjustments to your design or to program in the JavaScript language that exe-cutes in web browsers. For the purposes of this chapter, we’ll keep things simple by working exclusively in Design mode. To switch to Design mode, you can click the Design Buttonat the bottom of the code editor window.

The Solution Explorer
TheSolution Explorer (Fig. 20.10)showsthecontentsofthewebsite.Weexpandedthenode forWebTime.aspxtoshowyouitscode-behind file WebTime.aspx.cs. VisualWebDevelop-er’s Solution Explorer contains several buttons that differ from Visual C# Express. The Copy Web Site button opens a dialog that allows you to move the files in this project to another location, such as a remote web server. This is useful if you’re developing the application on your local computer but want to make it available to the public from a different location. The ASP.NET Configuration button takes you to a web page called the Web Site Administra-
20.4 YourFirstASP.NETApplication   717




Source modeshowsonly theWebForm’smarkup

Split modeallowsyouto viewtheWebForm’smarkup anddesignatthesametime

Design modeallowsyouto buildaWebFormusing similartechniquestobuilding aWindowsForm




Fig. 20.9  | WebForminSource view.


View Code Nest Related Files

Refresh Properties

Code-behindfilethat containstheapplication’s businesslogic

View Designer
Copy Web Site


ASP.NET Configuration


ASPXpagerepresentsthe application’suserinterface


Fig. 20.10 | Solution Explorer windowforanEmpty Web Site projectafteraddingthe WebFormWebTime.aspx.

tion Tool, where you can manipulate various settings and security options for your applica-tion. The Nest Related Files button organizes each Web Form and its code-behind file.
If the ASPX file is not open in the IDE, you can open it in Design mode three ways:
•	double click it in the Solution Explorer then select the Design tab
•	select it in the Solution Explorer and click the View Designer (	) Button •	right click it in the Solution Explorer and select View Designer
To open the code-behind file in the code editor, you can •	double click it in the Solution Explorer
•	selecttheASPXfileintheSolutionExplorer,thenclicktheViewCode (	)Button •	right click the code-behind file in the Solution Explorer and select Open
The Toolbox
Figure 20.11 shows the Toolbox displayed in the IDE when the project loads. Part (a) dis-plays the beginning of the Standard list of web controls, and part (b) displays the remain-
718	Chapter20 WebAppDevelopmentwithASP.NETinC#


ing web controls and the list of other control groups. We discuss specific controls listed in Fig. 20.11 as they’re used throughout the chapter. Many of the controls have similar or identical names to the Windows Forms controls used in desktop applications.


a)	b)


















Fig. 20.11 | Toolbox inVisualWebDeveloper.

The Web Forms Designer
Figure 20.12showstheinitialWebForminDesign mode.Youcan draganddrop controls from the Toolbox onto the Web Form. You can also type at the current cursor location to add so-called static text to the web page. In response to such actions, the IDE generates the appropriate markup in the ASPX file.










Cursorappearsherebydefault	Cursor’scurrentlocationintheWebForm

Fig. 20.12 | Design modeoftheWebFormsDesigner.

Step 3: Changing the Title of the Page
Before designing the Web Form’s content, you’ll change its title to ASimpleWebFormEx-ample. This title will be displayed in the web browser’s title bar (see Fig. 20.4). It’s typi-
20.4 YourFirstASP.NETApplication   719


cally also used by search engines like Google and Bing when they index real websites for searching. Every page should have a title. To change the title:
1.  Ensure that the ASPX file is open in Design view.
2.  View the Web Form’s properties by selecting DOCUMENT, which represents the Web Form, from the drop-down list in the Properties window.
3.  ModifytheTitlepropertyintheProperties windowbysettingittoASimpleWeb FormExample.


Designing a Page
Designing a Web Form is similar to designing a Windows Form. To add controls to the page,drag-and-dropthemfromtheToolbox ontotheWebForminDesign view.TheWeb Form and each control are objects that have properties, methods and events. You can set these properties visually using the Properties window or programmatically in the code-be-hind file. You can also type text directly on a Web Form at the cursor location.
Controls andother elements are placed sequentially on a Web Form one after another in the order in which you drag-and-drop them onto the Web Form. The cursor indicates the insertion point in the page. If you want to position a control between existing text or controls, you can drop the control at a specific position between existing page elements. You can also rearrange controls with drag-and-drop actions in Design view. The positions of controls and other elements are relative to the Web Form’s upper-left corner. This type of layout is known as relative positioning and it allows the browser to move elements and resize them based on the size of the browser window. Relative positioning is the default, and we’ll use it throughout this chapter.
For precise control over the location and size of elements, you can use absolute posi-tioning in which controls are located exactly where you drop them on the Web Form. If you wish to use absolute positioning:
1. Select Tools > Options…., to display the Options dialog.
2.  If it isn’t checked already, check the Show all settings checkbox.
3.  Next, expand the HTML Designer > CSS Styling node and ensure that the check-boxlabeledChangepositioningtoabsoluteforcontrolsaddedusingToolbox,paste or drag and drop is selected.


Step 4: Adding Text and a Label
You’ll now add some text and a Labelto the Web Form. Perform the following steps to add the text:
1.  Ensure that the Web Form is open in Design mode. 2.  Type the following text at the current cursor location:
CurrenttimeontheWebserver:
3.  Selectthetextyoujusttyped,thenselectHeading2 fromtheBlockFormat Combo-Box(Fig. 20.13) to format this text as a heading that will appear in a larger bold font. In more complex pages, headings help you specify the relative importance of parts of that content—like sections in a book chapter.
720	Chapter20 WebAppDevelopmentwithASP.NETinC#



Block Format ComboBox

















Fig. 20.13 | ChangingthetexttoHeading 2 heading.

4.  Click to the right of the text you just typed and press the Enter key to start a new paragraph in the page. The Web Form should now appear as in Fig. 20.14.




Thecursoris positionedhereafter insertinganew paragraphby pressingEnter


Fig. 20.14 | WebTime.aspxafterinsertingtextandanewparagraph.

5. Next, drag a Labelcontrol from the Toolbox into the new paragraph or double click the Labelcontrol in the Toolbox to insert the Labelat the current cursor position.
6.  Using the Properties window, set the Label’s (ID)property to timeLabel. This specifies the variable name that will be used to programmatically change the Label’s Text.
7.  Because, the Label’s Textwill be set programmatically, delete the current value of the Label’s Textproperty. When a Labeldoes not contain text, its name is displayed in square brackets in Design view (Fig. 20.15) as a placeholder for de-sign and layout purposes. This text is not displayed at execution time.
20.4 YourFirstASP.NETApplication   721






Labelcontrol



Fig. 20.15 | WebTime.aspxafteraddingaLabel.

Step 5: Formatting the Label
Formatting in a web page is performed with CSS (Cascading Style Sheets). It’s easy to use CSS to format text and elements in a Web Form via the tools built into Visual Web De-veloper. In this example, we’d like to change the Label’s background color to black, its foreground color yellow and make its text size larger. To format the Label, perform the following steps:
1. Click the Labelin Design view to ensure that it’s selected.
2.  Select View > Other Windows > CSS Properties to display the CSS Properties win-dow at the left side of the IDE (Fig. 20.16).












Fig. 20.16 | CSS Properties window.

3.  Right click in the Applied Rules box and select New Style… to display the New Style dialog (Fig. 20.17).
4.  Type the new style’s name—.timeStyle—in the Selector: ComboBox. Styles that apply to specific elements must be named with a dot (.) preceding the name. Such a style is called a CSS class.
5.  Each item you can set in the New Style dialog is known as a CSS attribute. To change timeLabel’s foreground color, select the Font category from the Category list, then select the yellow color swatch for the color attribute.
6.  Next, change the font-size attribute to xx-large.
7.  To change timeLabel’s background color, select the Background category, then select the black color swatch for the background-color attribute.
722	Chapter20 WebAppDevelopmentwithASP.NETinC#



Newstyle’sname



Font categoryallowsyouto styleanelement’sfont

Background categoryallows youtospecifyanelement’s backgroundcoloror backgroundimage

Thenewstylewillbe appliedtothecurrently selectedelementinthepage

Previewofwhatthe stylewilllooklike




Fig. 20.17 | New Style dialog.

The New Style dialog should now appear as shown in Fig. 20.18. Click the OK Buttonto apply the style to the timeLabelsothat it appears as shown in Fig. 20.19. Also, notice that the Label’s CssClassproperty is now set to timeStylein the Properties window.





Boldcategory namesindicatethe categoriesinwhich CSSattribute valueshavebeen changed











Fig. 20.18 | New Style dialogafterchangingtheLabel’sstyle.
20.4 YourFirstASP.NETApplication   723











Fig. 20.19 | Design viewafterchangingtheLabel’sstyle.

Step 6: Adding Page Logic
Now that you’ve designed the GUI, you’ll write code in the code-behind file to obtain the server’s time and display it on the Label. Open WebTime.aspx.csby double clicking it in the Solution Explorer. In this example, you’ll add an event handler to the code-behind file to handle the Web Form’s Initevent, which occurs when the page is requested by a web browser. The event handler for this event—named Page_Init—initialize the page. The only initialization required for this example is to set the timeLabel’s Textproperty to the timeonthewebservercomputer.Thecode-behindfileinitallycontainsaPage_Loadevent handler. To create the Page_Initevent handler, simply rename Page_Loadas Page_Init. Then complete the event handler by inserting the following code in its body:

// display the server's current time in timeLabel timeLabel.Text = DateTime.Now.ToString("hh:mm:ss");

Step 7: Setting the Start Page and Running the Program
To ensure that WebTime.aspxloads when you execute this application, right click it in the Solution Explorer and select Set As Start Page. You can now run the program in one of sev-eralways. Atthe beginningof Fig. 20.4, youlearnedhow toviewthe Web Form by typing Ctrl + F5. You can also right click an ASPX file in the Solution Explorer and select View in Browser. Both of these techniques execute the ASP.NET Development Server, open your default web browserand load the page intothe browser, thus runningtheweb application. The development server stops when you exit Visual Web Developer.
If problems occur when running your application, you can run it in debug mode by selecting Debug > Start Debugging, by clicking the Start Debugging Button(	) or by typing F5 to view the web page in a web browser with debugging enabled. You cannot debug a web application unless debugging is explicitly enabled in the application’s Web.configfile—a file that is generated when you create an ASP.NET web application. This file stores the application’s configuration settings. You’ll rarely need to manually modify Web.config. The first time you select Debug > Start Debugging in a project, a dialogappearsandaskswhetheryouwanttheIDEtomodifytheWeb.configfiletoenable debugging. After you click OK, the IDE executes the application. You can stop debugging by selecting Debug > Stop Debugging.
Regardless of how you execute the web application, the IDE will compile the project beforeit executes. Infact, ASP.NET compilesyourwebpagewheneveritchanges between HTTP requests. For example, suppose you browse the page, then modify the ASPX file or add code to the code-behind file. When you reload the page, ASP.NET recompiles the
724	Chapter20 WebAppDevelopmentwithASP.NETinC#


page on the server before returning the response to the browser. This important behavior ensures that clients always see the latest version of the page. You can manually compile an entire website by selecting Build Web Site from the Debug menu in Visual Web Developer.

20.4.2 Examining WebTime.aspx’s Code-Behind File
Figure 20.20 presents the code-behind file WebTime.aspx.cs. Line 5 begins the declara-tion of class WebTime. In Visual C#, a class declaration can span multiple source-code files—theseparateportionsoftheclassdeclarationineachfileareknownaspartialclasses. Thepartialmodifierindicatesthatthecode-behindfileispartofalargerclass.LikeWin-dows Forms applications, the rest of the class’s code is generated for you based on your vi-sual interactions to create the application’s GUI in Design mode. That code is stored in other source code files as partial classes with the same name. The compiler assembles all the partial classes that have the same into a single class declaration.
Line 5 indicates that WebTimeinherits from class Pagein namespace System.Web.UI. This namespace contains classes and controls for building web-based applications. Class Pagerepresents the default capabilities of each page in a webapplication—allpages inherit directly or indirectly from this class.
Lines 8–12 define the Page_Initevent handler, which initializes the page in response to the page’s Initevent. The only initialization required for this page is to set the time-Label’s Textproperty to the time on the web server computer. The statement in line 11 retrieves the current time (DateTime.Now) and formatsit as hh:mm:ss. For example, 9AM is formatted as 09:00:00, and 2:30 PM is formatted as 02:30:00. As you’ll see, variable timeLabelrepresents an ASP.NET Labelcontrol. The ASP.NET controls are defined in namespace System.Web.UI.WebControls.

1  // Fig. 20.20: WebTime.aspx.cs
2  // Code-behind file for a page that displays the web server’s time. 3  using System;
4
5  public partial class WebTime : System.Web.UI.Page 6  {
7	// initializes the contents of the page
8	protected void Page_Init( object sender, EventArgs e ) 9	{
10	// display the server's current time in timeLabel
11	timeLabel.Text = DateTime.Now.ToString( "hh:mm:ss" ); 12     } // end method Page_Init
13  } // end class WebTime

Fig. 20.20 | Code-behindfileforapagethatdisplaysthewebserver’stime.

20.5 Standard Web Controls: Designing a Form
This section introduces some of the web controls located in the Standard section of the Toolbox (Fig. 20.11). Figure 20.21 summarizes the controls used in the next example.

A Form Gathering User Input
Figure 20.22 depicts a form for gathering user input. This example does not perform any tasks—that is, no action occurs when the user clicks Register. As an exercise, we ask you
20.5 StandardWebControls:DesigningaForm   725



Webcontrol

TextBox
Button
HyperLink
DropDownList
RadioButtonList
Image

Description

Gathers user input and displays text. Triggers an event when clicked. Displays a hyperlink.
Displays a drop-down list of choices from which a user can select an item. Groups radio buttons.
Displays images (for example, PNG, GIF and JPG).


Fig. 20.21 | Commonlyusedwebcontrols.






Heading 3 paragraph

Paragraphofplaintext Imagecontrol

Atablecontainingfour ImagesandfourTextBoxes

TextBoxcontrol


DropDownListcontrol
HyperLinkcontrol




RadioButtonListcontrol



Buttoncontrol



Fig. 20.22 | WebFormthatdemonstrateswebcontrols.

toprovide thefunctionality. Here we focus on the steps for adding these controlstoa Web Form and for setting their properties. Subsequent examples demonstrate how to handle the events of many of these controls. To execute this application:
726	Chapter20 WebAppDevelopmentwithASP.NETinC#


1.  Select Open Web Site… from the File menu.
2.  In the Open Web Site dialog, ensure that File System is selected, then navigate to thischapter’sexamples,selecttheWebControlsfolderandclicktheOpen Button.
3.  Select WebControls.aspxin the Solution Explorer, then type Ctrl + F5 to execute the web application in your default web browser.

Creating the Web Site
To begin, follow the steps in Section 20.4.1 to create an Empty Web Site named WebCon-trols, then add a Web Form named WebControls.aspxto the project. Set the docu-ment’s   Title property   to   "Web Controls Demonstration".   To   ensure   that WebControls.aspxloads when you execute this application, right click it in the Solution Explorer and select Set As Start Page.

Adding the Images to the Project
The images used in this example are located in the imagesfolder with this chapter’s exam-ples. Before you can display images in the Web Form, they must be added to your project. To add the imagesfolder to your project:
1.  Open Windows Explorer.
2.  Locate and open this chapter’s examples folder (ch20).
3.  Drag the imagesfolder from Windows Explorer into Visual Web Developer’s Solution Explorer window and drop the folder on the name of your project.
The IDE will automatically copy the folder and its contents into your project.

Adding Text and an Image to the Form
Next, you’ll begin creating the page. Perform the following steps:
1.  First create the page’s heading. At the current cursor position on the page, type the text "RegistrationForm", then use the Block Format ComboBoxin the IDE’s toolbar to change the text to Heading 3 format.
2.  Press Enter to start a new paragraph, then type the text "Pleasefillinall fieldsandclicktheRegisterbutton".
3.  Press Enter to start a new paragraph, then double click the Imagecontrol in the Toolbox. This control inserts an image into a web page, at the current cursor po-sition. Set the Image’s (ID)property to userInformationImage. The ImageUrl property specifies the location of the image to display. In the Properties window, click the ellipsis for the ImageUrlproperty to display the Select Image dialog. Se-lect the imagesfolder under Project folders: to display the list of images. Then select the image user.png.
4.  Click OK to display the image in Design view, then click to the right of the Image and press Enter to start a new paragraph.

Adding a Table to the Form
Form elements are often placed in tables for layout purposes—like the elements that rep-resent the first name, last name, e-mail and phone information in Fig. 20.22. Next, you’ll create a table with two rows and two columns in Design mode.
20.5 StandardWebControls:DesigningaForm   727


1.  Select Table > Insert Table to display the Insert Table dialog (Fig. 20.23). This di-alog allows you to configure the table’s options.
2. Under Size, ensure that the values of Rows and Columns are both 2—these are the default values.
3. Click OK to close the Insert Table dialog and create the table.
By default, the contents of a table cell are aligned vertically in the middle of the cell. We changed the vertical alignment of all cells in the table by setting the valignproperty to topin the Properties window. This causes the content in each table cell to align with the top of the cell. You can set the valignproperty for each table cell individually or by selecting all the cells in the table at once, then changing the valignproperty’s value.
























Fig. 20.23 | Insert Table dialog.

After creating the table, controls and text can be added to particular cells to create a neatly organized layout. Next, add Imageand TextBoxcontrols to each the four table cells as follows:
1. Click thetable cell in the first row and first column of the table, then double click the Imagecontrol in the Toolbox. Set its (ID)property to firstNameImageand set its ImageUrlproperty to the image fname.png.
2. Next, double click the TextBoxcontrol in the Toolbox. Set its (ID)property to firstNameTextBox. As in Windows Forms, a TextBoxcontrol allows you to ob-tain text from the user and display text to the user
728	Chapter20 WebAppDevelopmentwithASP.NETinC#


3.  Repeat this process in the first row and second column, but set the Image’s (ID) property to lastNameImageand its ImageUrlproperty to the image lname.png, and set the TextBox’s (ID)property to lastNameTextBox.
4.  Repeat Steps 1 and 2 in the second row and first column, but set the Image’s (ID) property to emailImageand its ImageUrlproperty to the image email.png, and set the TextBox’s (ID)property to emailTextBox.
5.  Repeat Steps 1 and 2 in the second row and second column, but set the Image’s (ID)property to phoneImageand its ImageUrlproperty to the image phone.png, and set the TextBox’s (ID)property to phoneTextBox.

Creating the Publications Section of the Page
This section contains an Image, some text, a DropDownListcontrol and a HyperLinkcon-trol. Perform the following steps to create this section:
1.  Click below the table, then use the techniques you’ve already learned in this sec-tion to add an Image named publicationsImage that displays the publica-tions.pngimage.
2.  Click to the right of the Image, then press Enter and type the text "Whichbook wouldyoulikeinformationabout?"in the new paragraph.
3.  Hold the Shift key and press Enter to create a new line in the current paragraph, then double click the DropDownListcontrol in the Toolbox. Set its (ID)property to booksDropDownList. This control is similar to the Windows Forms ComboBox control, but doesn’t allow users to type text. When a user clicks the drop-down list, it expands and displays a list from which the user can make a selection.
4. You can add items to the DropDownList using the ListItem Collection Editor, which you can access by clicking the ellipsis next to the DropDownList’s Items property in the Properties window, or by using the DropDownList Tasks smart-tag menu. To open this menu, click the small arrowhead that appears in the up-per-right corner of the control in Design mode (Fig. 20.24). Visual Web Devel-oper displays smart-tag menus for many ASP.NET controls to facilitate common tasks. Clicking Edit Items... in the DropDownList Tasks menu opens the ListItem Collection Editor, which allows you to add ListItemelements to the DropDown-List. Add items for "VisualBasic2010HowtoProgram", "VisualC#2010How toProgram", "JavaHowtoProgram"and "C++HowtoProgram"by clicking the Add Buttonfour times. For each item, select it, then set its Textproperty to one of the four book titles.
5.  Click to the right of the DropDownListand press Enter to start a new paragraph, then double click the HyperLinkcontrol in the Toolbox to add a hyperlink to the







Fig. 20.24 | DropDownList Tasks smart-tagmenu.
20.6 ValidationControls   729


web page. Set its (ID) property to booksHyperLink and its Text property to "Clickheretoviewmoreinformationaboutourbooks". Set the NavigateUrl propertytohttp://www.deitel.com.Thisspecifiestheresourceorwebpagethat willberequestedwhentheuserclickstheHyperLink.SettingtheTargetproperty to _blankspecifies that the requested web page should open in a new browser window. By default, HyperLinkcontrols cause pages to open in the same browser window.

Completing the Page
Next you’ll create the Operating System section of the page and the Register Button. This section containsa RadioButtonListcontrol, which providesa series of radio buttonsfrom which the user can select only one. The RadioButtonList Tasks smart-tag menu provides an Edit Items… link to open the ListItem Collection Editor so that you can create the items in the list. Perform the following steps:
1.  Click to the right of the HyperLinkcontrol and press Enter to create a new para-graph, then add an Imagenamed osImagethat displays the os.pngimage.
2.  Click to the right of the Imageand press Enter to create a new paragraph, then add a RadioButtonList. Set its (ID)property to osRadioButtonList. Use the ListItem Collection Editor to add the items shown in Fig. 20.22.
3.  Finally, click to the right of the RadioButtonListand press Enter to create a new paragraph, then add a Button. A Buttonweb control represents a button that triggers an action when clicked. Set its (ID)property to registerButtonand its Textproperty to Register. As stated earlier, clicking the Register button in this example does not do anything.
You can now execute the application (Ctrl + F5) to see the Web Form in your browser.

20.6 Validation Controls
This section introduces a different type of web control, called a validation control or val-idator, which determines whether the data in another web control is in the proper format. For example, validators can determine whether a user has provided information in a re-quired field or whether a zip-code field contains exactly five digits. Validators provide a mechanism for validating user input on the client. When the page is sent to the client, the validator is converted into JavaScript that performs the validation in the client web brows-er. JavaScript is a scripting language that enhances the functionality of web pages and is typically executed on the client. Unfortunately, some client browsers might not support scriptingortheusermightdisableit.Forthisreason,youshouldalwaysperformvalidation on the server. ASP.NET validation controls can function on the client, on the server or both.

Validating Input in a Web Form
The Web Form in Fig. 20.25 prompts the user to enter a name, e-mail address and phone number. A website could use a form like this to collect contact information from visitors. After the user enters any data, but before the data is sent to the web server, validators en-sure that the user entered a value in each field and that the e-mail address and phone-num-
730	Chapter20 WebAppDevelopmentwithASP.NETinC#


ber values are in an acceptable format. In this example, (555) 123-4567, 555-123-4567 and 123-4567 are all considered valid phone numbers. Once the data is submitted, the webserverrespondsby displaying amessagethat repeatsthesubmittedinformation.Areal business application would typically store the submitted data in a database or in a file on the server. We simply send the data back to the client to demonstrate that the server re-ceived the data. To execute this application:
1.  Select Open Web Site… from the File menu.
2.  In the Open Web Site dialog, ensure that File System is selected, then navigate to this chapter’s examples, select the Validationfolder and click the Open Button.
3.  Select Validation.aspxin the Solution Explorer, then type Ctrl + F5 to execute the web application in your default web browser.


a)InitialWebForm













b)WebFormaftertheuser pressestheSubmit Button withouthavingenteredanydata intheTextBoxes;each TextBoxisfollowedbyanerror messagethatwasdisplayedbya validationcontrol


RequiredFieldValidator controls








Fig. 20.25 | ValidatorsinaWebFormthatretrievesusercontactinformation.(Part1of2.)
20.6 ValidationControls   731



c)WebFormaftertheuserentersa name,aninvalide-mailaddressandan invalidphonenumberinthe TextBoxes,thenpressestheSubmit Button;thevalidationcontrolsdisplay errormessagesinresponsetotheinvalid e-mailandphonenumbervalues



RegularExpressionValidator controls





d)TheWebForm aftertheuserenters validvaluesforall threeTextBoxesand pressestheSubmit Button














Fig. 20.25 | ValidatorsinaWebFormthatretrievesusercontactinformation.(Part2of2.)

In the sample output:
•	Fig. 20.25(a) shows the initial Web Form
•	 Fig. 20.25(b) shows the result of submitting the form before typing any data in the TextBoxes
•	Fig. 20.25(c)shows theresultsafterenteringdata in each TextBox, but specifying an invalid e-mail address and invalid phone number
•	Fig. 20.25(d) shows the results after entering valid values for all three TextBoxes and submitting the form.
732	Chapter20 WebAppDevelopmentwithASP.NETinC#


Creating the Web Site
To begin, follow the steps in Section 20.4.1 to create an Empty Web Site named Valida-tion, then add a Web Form named Validation.aspxto the project. Set the document’s Title property to "Demonstrating Validation Controls". To ensure that Valida-tion.aspxloads when you execute this application, right click it in the Solution Explorer and select Set As Start Page.

Creating the GUI
To create the page, perform the following steps:
1.  Type "Pleasefilloutallthefieldsinthefollowingform:", then use the Block Format ComboBoxin the IDE’s toolbar to change the text to Heading 3 for-mat and press Enter to create a new paragraph.
2.  Insert a three row and two column table. You’ll add elements to the table mo-mentarily.
3.  Click below the table and add a Button. Set its (ID)property to submitButton and its Textproperty to Submit. Press Enter to create a new paragraph. By de-fault, a Buttoncontrol in a Web Form sends the contents of the form back to the server for processing.
4. Add a Label. Set its (ID)property to outputLabeland clear its Textproperty— you’ll set it programmatically when the user clicks the submitButton. Set the outputLabel’s Visibleproperty to false, so the Labeldoes not appear in the client’s browser when the page loads for the first time. You’ll programmatically display this Labelafter the user submits valid data.
Next you’ll add text and controls to the table you created in Step 2 above. Perform the following steps:
1.  In the left column, type the text "Name:"in the first row, "E-mail:"in the sec-ond row and "Phone:"in the third row.
2.  In the right column of the first row, add a TextBoxand set its (ID)property to nameTextBox.
3.  In the right column of the second row, add a TextBoxand set its (ID)property to emailTextBox. Then type the text "e.g.,email@domain.com"to the right of the TextBox.
4.  In the right column of the third row, add a TextBoxand set its (ID)property to phoneTextBox. Then type the text "e.g.,(555)555-1234"to the right of the TextBox.

Using RequiredFieldValidatorControls
We use three RequiredFieldValidatorcontrols (found in the Validation section of the Toolbox) to ensure that the name, e-mail address and phone number TextBoxes are not empty when the form is submitted. A RequiredFieldValidatormakes an input control a required field. If such a field is empty, validation fails. Add a RequiredFieldValidator as follows:
1.  Click to the right of the nameTextBoxin the table and press Enter to move to the next line.
20.6 ValidationControls   733


2.  Add a RequiredFieldValidator, set its (ID)to nameRequiredFieldValidator and set the ForeColorproperty to Red.
3.  Set the validator’s ControlToValidateproperty to nameTextBoxto indicate that this validator verifies the nameTextBox’s contents.
4. Set the validator’s ErrorMessageproperty to "Pleaseenteryourname". This is displayed on the Web Form only if the validation fails.
5.  Set the validator’s Displayproperty to Dynamic, so the validator occupies space on the Web Form only when validation fails. When this occurs, space is allocated dynamically, causing the controls below the validator to shift downward to ac-commodate the ErrorMessage, as seen in Fig. 20.25(a)–(c).
Repeat these steps to add two more RequiredFieldValidators in the second and third rows of the table. Set their (ID)properties to emailRequiredFieldValidatorand phone-RequiredFieldValidator, respectively, and set their ErrorMessageproperties to "Please enteryouremailaddress"and "Pleaseenteryourphonenumber", respectively.

Using RegularExpressionValidatorControls ThisexamplealsousestwoRegularExpressionValidatorcontrolstoensurethatthee-mail address and phone number entered by the user are in a valid format. Visual Web Developer providesseveralpredefinedregularexpressionsthatyoucansimplyselecttotakeadvantageof this powerful validation control. Add a RegularExpressionValidatoras follows:
1.  Clicktotherightof the emailRequiredFieldValidatorin thesecondrow of the table and add a RegularExpressionValidator, then set its (ID)to emailRegu-larExpressionValidatorand its ForeColorproperty to Red.
2.  Set the ControlToValidateproperty to emailTextBoxto indicate that this vali-dator verifies the emailTextBox’s contents.
3.  Set the validator’s ErrorMessageproperty to "Pleaseenterane-mailaddress inavalidformat".
4.  Set the validator’s Displayproperty to Dynamic, so the validator occupies space on the Web Form only when validation fails.
Repeat the preceding steps to add another RegularExpressionValidatorin the third row of the table. Set its (ID) property to phoneRegularExpressionValidator and its Er-rorMessageproperty to "Pleaseenteraphonenumberinavalidformat", respectively. A RegularExpressionValidator’s ValidationExpressionproperty specifies the reg-
ular expression that validates the ControlToValidate’s contents. Clicking the ellipsis next toproperty ValidationExpressionin the Properties window displays theRegular Expres-sion Editor dialog, which contains a list of Standard expressions for phone numbers, zip codes and other formatted information. For the emailRegularExpressionValidator, we selected the standard expression Internet e-mail address. If the user enters text in the emailTextBoxthat does not have the correct format and either clicks in a different text box or attempts to submit the form, the ErrorMessagetext is displayed in red.
For  the  phoneRegularExpressionValidator,  we  selected  U.S.  phone  number  to ensure that a phone number contains an optional three-digit area code either in paren-theses and followed by an optional space or without parentheses and followed by a required hyphen. After an optional area code, a phone number must contain three digits,
734	Chapter20 WebAppDevelopmentwithASP.NETinC#


a hyphen and another four digits. For example, (555)123-4567, 555-123-4567and 123-4567are all valid phone numbers.

Submitting the Web Form’s Contents to the Server
If all five validators are successful (that is, each TextBoxis filled in, and the e-mail address and phone number provided are valid), clicking the Submit button sends the form’s data to the server. As shown in Fig. 20.25(d), the server then responds by displaying the sub-mitted data in the outputLabel.

Examining the Code-Behind File for a Web Form That Receives User Input
Figure 20.26 shows the code-behind file for this application. Notice that this code-behind file does not contain any implementation related to the validators. We say more about this soon. In this example, we respond to the page’s Loadevent to process the data submitted by the user. Like the Initevent, the Loadevent occurs each time the page loads into a web browser—the difference is that on a postback, you cannot access the posted data in the controls. The event handler for this event is Page_Load(lines 8–33). The event handler for the Load event is created for you when you add a new Web Form. To complete the event handler, insert the code from Fig. 20.26.


1  // Fig. 20.26: Validation.aspx.cs
2  // Code-behind file for the form demonstrating validation controls. 3  using System;
4
5  public partial class Validation : System.Web.UI.Page 6  {
7	// Page_Load event handler executes when the page is loaded 8	protected void Page_Load( object sender, EventArgs e )
9	{
10	// if this is not the first time the page is loading 11	// (i.e., the user has already submitted form data) 12	if ( IsPostBack )
13	{
14	Validate(); // validate the form 15
16	// if the form is valid 17	if ( IsValid )
18	{
19	// retrieve the values submitted by the user 20	string name = nameTextBox.Text;
21	string email = emailTextBox.Text; 22	string phone = phoneTextBox.Text; 23
24	// show the the submitted values
25	outputLabel.Text = "Thank you for your submission<br/>" + 26                  "We received the following information:<br/>";
27	outputLabel.Text +=
28	String.Format( "Name: {0}{1}E-mail:{2}{1}Phone:{3}",
29	name, "<br/>", email, phone);

Fig. 20.26 | Code-behindfilefortheformdemonstratingvalidationcontrols.(Part1of2.)
20.7 SessionTracking   735


30	outputLabel.Visible = true; // display the output message 31            } // end if
32	} // end if
33	} // end method Page_Load
34  } // end class Validation

Fig. 20.26 | Code-behindfilefortheformdemonstratingvalidationcontrols.(Part2of2.)

Differentiating Between the First Request to a Page and a Postback
Web programmers using ASP.NET often design their web pages so that the current page reloads when the user submits the form; this enables the program to receive input, process it as necessary and display the results in the same page when it’s loaded the second time. These pages usually contain a form that, when submitted, sends the values of all the con-trols to the server and causes the current page to be requested again. This event is known as a postback. Line 12 uses the IsPostBackproperty of class Pageto determine whether the page is being loaded due to a postback. The first time that the web page is requested, IsPostBackis false, and the page displays only the form for user input. When the post-back occurs (from the user clicking Submit), IsPostBackis true.

Server-Side Web Form Validation
Server-side Web Form validation must be implemented programmatically. Line 14 calls the current Page’s Validatemethod to validate the information in the request. This vali-dates the information as specified by the validation controls in the Web Form. Line 17 uses the IsValidproperty of class Pageto check whether the validation succeeded. If this property is set to true(that is, validation succeeded and the Web Form is valid), then we display the Web Form’s information. Otherwise, the web page loads without any changes, except any validator that failed now displays its ErrorMessage.

Processing the Data Entered by the User
Lines 20–22 retrieve the values of nameTextBox, emailTextBoxand phoneTextBox. When data is posted to the web server, the data that the user entered is accessible to the web ap-plication through the web controls’ properties. Next, lines 25–29 set outputLabel’s Text to display a message that includes the name, e-mail and phone information that was sub-mitted to the server. In lines 25, 26 and 29, notice the use of <br/>rather than \nto start new lines in the outputLabel—<br/>is the markup for a line break in a web page. Line 30 sets the outputLabel’s Visibleproperty to true, so the user can see the thank-you message and submitted data when the page reloads in the client web browser.

20.7 Session Tracking
Originally, critics accused the Internet and e-business of failing to provide the customized service typically experienced in “brick-and-mortar” stores. To address this problem, busi-nesses established mechanisms by which they could personalize users’ browsing experienc-es, tailoring content to individual users. Businesses achieve this level of service by tracking each customer’s movement through the Internet and combining the collected data with information provided by the consumer, including billing information, personal preferenc-es, interests and hobbies.
736	Chapter20 WebAppDevelopmentwithASP.NETinC#


Personalization
Personalizationmakes it possible forbusinesses tocommunicate effectively withtheircus-tomers and also improves users’ ability to locate desired products and services. Companies that provide content of particular interest to users can establish relationships with custom-ers and build on those relationships over time. Furthermore, by targeting consumers with personal offers, recommendations, advertisements, promotions and services, businesses create customer loyalty. Websites can use sophisticated technology to allow visitors to cus-tomize home pages to suit their individual needs and preferences. Similarly, online shop-ping sites often store personal information for customers, tailoring notifications and special offers to their interests. Such services encourage customers to visit sites more fre-quently and make purchases more regularly.

Privacy
A trade-off exists between personalized business service and protection of privacy. Some consumers embrace tailored content, but others fear the possible adverse consequences if the info they provide to businesses is released or collected by tracking technologies. Con-sumers and privacy advocates ask: What if the business to which we give personal data sells or gives that information to another organization without our knowledge? What if we do not want our actions on the Internet—a supposedly anonymous medium—to be tracked and recorded by unknown parties? What if unauthorized parties gain access to sensitive privatedata,suchascredit-cardnumbersormedicalhistory?Thesearequestionsthatmust be addressed by programmers, consumers, businesses and lawmakers alike.

Recognizing Clients Toprovidepersonalizedservicestoconsumers,businessesmustbeabletorecognizeclients when they request information from a site. As we have discussed, the request/response sys-tem on which the web operates is facilitated by HTTP. Unfortunately, HTTP is a stateless protocol—it does not provide information that would enable web servers to maintain state information regarding particular clients. This means that web servers cannot determine whether a request comes from a particular client or whether the same or different clients generate a series of requests.
Tocircumvent this problem, sites can provide mechanisms by which they identify indi-vidual clients. A session represents a unique client on a website. If the client leaves a site and then returns later, the client will still be recognized as the same user. When the user closes the browser, the session typically ends. To help the server distinguish among clients, each client must identify itself to the server. Tracking individual clients is known as session tracking.Onepopularsession-trackingtechniqueusescookies(discussedinSection 20.7.1); anotherusesASP.NET’sHttpSessionStateobject(usedinSection 20.7.2).Additionalses-sion-tracking techniques are beyond this book’s scope.


20.7.1 Cookies
Cookies provide you with a tool for personalizing web pages. A cookie is a piece of data stored by web browsers in a small text file on the user’s computer. A cookie maintains in-formationabouttheclientduringandbetweenbrowsersessions.Thefirsttimeauservisits the website, the user’s computer might receive a cookie from the server; this cookie is then reactivated each time the user revisits that site. The collected information is intended to
20.7 SessionTracking   737


be an anonymous record containing data that is used to personalize the user’s future visits to the site. For example, cookies in a shopping application might store unique identifiers for users. When a user adds items to an online shopping cart or performs another task re-sulting in a request to the web server, the server receives a cookie containing the user’s unique identifier. The server then uses the unique identifier to locate the shopping cart and perform any necessary processing.
In addition to identifying users, cookies also can indicate users’ shopping preferences. When a Web Form receives a request from a client, the Web Form can examine the cookie(s) it sent to the client during previous communications, identify the user’s prefer-ences and immediately display products of interest to the client.
Every HTTP-based interaction between a client and a server includes a header con-taining information either about the request (when the communication is from the client to the server) or about the response (when the communication is from the server to the client). When a Web Form receives a request, the header includes information such as the request type and any cookies that have been sent previously from the server to be stored on the client machine. When the server formulates its response, the header information contains any cookies the server wants to store on the client computer and other informa-tion, such as the MIME type of the response.
The expiration date of a cookie determines how long the cookie remains on the client’s computer. If you do not set an expiration date for a cookie, the web browser main-tains the cookie for the duration of the browsing session. Otherwise, the web browser maintains the cookie until the expiration date occurs. Cookies are deleted when they expire.

Portability Tip 20.1
Users may disable cookies in their web browsers to help ensure their privacy. Such users will experience difficulty using web applications that depend on cookies to maintain state information.



20.7.2 Session Tracking with HttpSessionState
The next web application demonstrates session tracking using the .NET class Http-SessionState.Whenyouexecutethisapplication,theOptions.aspxpage(Fig. 20.27(a)), which is the application’s Start Page, allows the user to select a programming language from a group of radio buttons. [Note: You might need to right click Options.aspxin the Solution Explorer and select Set As Start Page before running this application.] When the userclicksSubmit,theselectionissenttothewebserverforprocessing.Thewebserveruses an HttpSessionStateobject to store the chosen language and the ISBN number for one of our books on that topic. Each user that visits the site has a unique HttpSessionState object, so the selections made by one user are maintained separately from all other users. After storing the selection, the server returns the page to the browser (Fig. 20.27(b)) and displays the user’s selection and some information about the user’s unique session (which we show just for demonstration purposes). The page also includes links that allow the user to choose between selecting another programming language or viewing the Recommenda-tions.aspxpage (Fig. 20.27(e)), which lists recommended books pertaining to the pro-gramming language(s) that the user selected previously. If the user clicks the link for book
738	Chapter20 WebAppDevelopmentwithASP.NETinC#


recommendations, the information stored in the user’s unique HttpSessionStateobject is read and used to form the list of recommendations. To test this application:
1.  Select Open Web Site… from the File menu.
2.  In the Open Web Site dialog, ensure that File System is selected, then navigate to this chapter’s examples, select the Sessionsfolder and click the Open Button.
3. Select Options.aspxin the Solution Explorer, then type Ctrl + F5 to execute the web application in your default web browser.

Creating the Web Site
To begin, follow the steps in Section 20.4.1 to create an Empty Web Site named Sessions, then add two Web Forms named Options.aspxand Recommendations.aspxto the proj-ect. Set the Options.aspxdocument’s Titleproperty to "Sessions"and the Recommen-dations.aspxdocument’s Titleproperty to "BookRecommendations". To ensure that Options.aspxis the first page to load for this application, right click it in the Solution Ex-plorer and select Set As Start Page.


a)Userselectsalanguagefrom theOptions.aspxpage, thenpressesSubmit tosend theselectiontotheserver











b)Options.aspxpageis updatedtohidethecontrolsfor selectingalanguageandto displaytheuser’sselection;the userclicksthehyperlinkto returntothelistoflanguages andmakeanotherselection









Fig. 20.27 | ASPXfilethatpresentsalistofprogramminglanguages.(Part1of2.)
20.7 SessionTracking   739



c)Userselectsanother languagefromthe Options.aspxpage,then pressesSubmit tosendthe selectiontotheserver











d)Options.aspxpageis updatedtohidethecontrolsfor selectingalanguageandto displaytheuser’sselection;the userclicksthehyperlinktogeta listofbookrecommendations









e)Recommendations.aspx displaysthelistof recommendedbooksbasedon theuser’sselections












Fig. 20.27 | ASPXfilethatpresentsalistofprogramminglanguages.(Part2of2.)
740	Chapter20 WebAppDevelopmentwithASP.NETinC#


20.7.3 Options.aspx: Selecting a Programming Language
The Options.aspxpage Fig. 20.27(a) contains the following controls arranged vertically:
1.  A Labelwith its (ID)property set to promptLabeland its Textproperty set to "Selectaprogramminglanguage:". We used the techniques shown in Step 5 of Section 20.4.1tocreateaCSSstyleforthislabelnamed.labelStyle,andsetthe style’s font-sizeattribute to largeand the font-weightattribute to bold.
2.  The user selects a programming language by clicking one of the radio buttons in aRadioButtonList.EachradiobuttonhasaTextpropertyandaValueproperty. The Textproperty is displayed next to the radio button and the Valueproperty represents a value that is sent to the server when the user selects that radio button and submits the form. In this example, we’ll use the Valueproperty to represent the ISBN for the recommended book. Create a RadioButtonListwith its (ID) property set to languageList. Use the ListItem Collection Editor to add five radio buttons withtheirTextpropertiesset to VisualBasic,VisualC#, C, C++andJa-va, and their Value properties set to 0-13-215213-4, 0-13-605322-X, 0-13-512356-2, 0-13-611726-0and 0-13-605306-8, respectively
3.  A Buttonwith its (ID)property set to submitButtonand its Textproperty set to Submit. In this example, we’ll handle this Button’s Clickevent. You can create its event handler by double clicking the Buttonin Design view.
4.  A Labelwith its (ID)property set to responseLabeland its Textproperty set to "Welcometo Sessions!". This Labelshould be placed immediately to the right of the Buttonso that the Labelappears at the top of the page when we hide the preceding controls on the page. Reuse the CSS style you created in Step 1 by set-ting this Label’s CssClassproperty to labelStyle.
5.  Two more Labels with their (ID)properties set to idLabeland timeoutLabel, respectively. Clear the text in each Label’s Textproperty—you’ll set these pro-grammatically with information about the current user’s session.
6. A HyperLinkwith its (ID)property set to languageLinkand its Textproperty set to "Clickheretochooseanotherlanguage". Set its NavigateUrlproperty byclickingtheellipsisnexttothepropertyintheProperties windowandselecting Options.aspxfrom the Select URL dialog.
7. A HyperLinkwith its (ID)property set to recommendationsLinkand its Text property set to "Clickheretogetbookrecommendations". Set its NavigateUrl propertybyclickingtheellipsisnexttothepropertyintheProperties windowand selecting Recommendations.aspxfrom the Select URL dialog.
8.  Initially, the controls in Steps 4–7 will not be displayed, so set each control’s Vis-ibleproperty to false.

SessionProperty of a Page
Every Web Form includes a user-specific HttpSessionStateobject, which is accessible through property Sessionof class Page. Throughout this section, we use this property to manipulate the current user’s HttpSessionStateobject. When a page is first requested, a unique HttpSessionStateobject is created by ASP.NET and assigned to the Page’s Ses-sionproperty.
20.7 SessionTracking   741


Code-Behind File for Options.aspx
Fig. 20.28 presents the code-behind file for the Options.aspxpage. When this page is re-quested, the Page_Loadevent handler (lines 10–40) executes before the response is sent to the client. Since the first request to a page is not a postback, the code in lines 16–39 does not execute the first time the page loads.


1  // Fig. 20.28: Options.aspx.cs
2  // Processes user's selection of a programming language by displaying 3  // links and writing information in a Session object.
4  using System; 5
6  public partial class Options : System.Web.UI.Page 7  {
8	// if postback, hide form and display links to make additional 9	// selections or view recommendations
10	protected void Page_Load( object sender, EventArgs e ) 11	{
12	if ( IsPostBack ) 13	{
14	// user has submitted information, so display message 15	// and appropriate hyperlinks
16	responseLabel.Visible = true; 17	idLabel.Visible = true;
18            timeoutLabel.Visible = true; 19            languageLink.Visible = true;
20	recommendationsLink.Visible = true; 21
22	// hide other controls used to make language selection 23	promptLabel.Visible = false;
24	languageList.Visible = false; 25	submitButton.Visible = false; 26
27	// if the user made a selection, display it in responseLabel 28	if ( languageList.SelectedItem != null )
29	responseLabel.Text += " You selected " + 30                  languageList.SelectedItem.Text;
31	else
32	responseLabel.Text += " You did not select a language."; 33
34	// display session ID
35	idLabel.Text = "Your unique session ID is: " + Session.SessionID; 36
37	// display the timeout
38	timeoutLabel.Text = "Timeout: " + Session.Timeout + " minutes."; 39         } // end if
40	} // end method Page_Load 41
42	// record the user's selection in the Session
43	protected void submitButton_Click( object sender, EventArgs e )
44	{

Fig. 20.28 | Processuser'sselectionofaprogramminglanguagebydisplayinglinksandwriting informationinanHttpSessionStateobject.(Part1of2.)
742	Chapter20 WebAppDevelopmentwithASP.NETinC#


45	// if the user made a selection
46	if ( languageList.SelectedItem != null ) 47            // add name/value pair to Session
48	Session.Add( languageList.SelectedItem.Text, 49               languageList.SelectedItem.Value );
50	} // end method submitButton_Click
51  } // end class Options

Fig. 20.28 | Processuser'sselectionofaprogramminglanguagebydisplayinglinksandwriting informationinanHttpSessionStateobject.(Part2of2.)

Postback Processing
When the user presses Submit, a postback occurs. The form is submitted to the server and Page_Loadexecutes. Lines 16–20 display the controls shown in Fig. 20.27(b) and lines 23–25 hide the controls shown in Fig. 20.27(a). Next, lines 28–32 ensure that the user selected a language and, if so, display a message in the responseLabelindicating the se-lection. Otherwise, the message "Youdidnotselectalanguage"is displayed.
The ASP.NET application contains information about the HttpSessionStateobject (property Sessionof the Pageobject) for the current client. The object’s SessionIDprop-erty (displayed in line 35) contains the unique session ID—a sequence of random letters and numbers. The first time a client connects to the web server, a unique session ID is cre-ated for that client and a temporary cookie is written to the client so the server can identify the client on subsequent requests. When the client makes additional requests, the client’s session ID from that temporary cookie is compared with the session IDs stored in the web server’s memory to retrieve the client’s HttpSessionState object. HttpSessionState property Timeout(displayed in line 38) specifies the maximum amount of time that an HttpSessionStateobject can be inactive before it’s discarded. By default, if the user does not interact with this web application for 20 minutes, theHttpSessionStateobject is dis-carded by the server and a new one will be created if the user interacts with the application again. Figure 20.29 lists some common HttpSessionStateproperties.


Properties

Count
IsNewSession

Keys
SessionID
Timeout

Description

Specifies the number of key/value pairs in the Sessionobject.
Indicates whether this is a new session (that is, whether the session was created during loading of this page).
Returns a collection containing the Sessionobject’s keys. Returns the session’s unique ID.
Specifies the maximum number of minutes during which a session can be inactive (that is, no requests are made) before the session expires. By default, this property is set to 20 minutes.


Fig. 20.29 | HttpSessionStateproperties.

Method submitButton_Click
In this example, we wish to store the user’s selection in an HttpSessionStateobject when the user clicks the Submit Button. The submitButton_Clickevent handler (lines 43–50)
20.7 SessionTracking   743


adds a key/value pair to the HttpSessionStateobject for the current user, specifying the language chosen and the ISBN number for a book on that language. The HttpSession-Stateobject is a dictionary—a data structure that stores key/value pairs. A program uses the key to store and retrieve the associated value in the dictionary.
The key/value pairs in an HttpSessionStateobject are often referred to as session items.They’replacedinanHttpSessionStateobjectbycallingitsAddmethod.Iftheuser made a selection (line 46), lines 48–49 get the selection and its corresponding value from the languageList by accessing its SelectedItem’s Text and Value properties, respec-tively, then call HttpSessionStatemethod Addto add this name/value pair as a session item in the HttpSessionStateobject (Session).
Iftheapplicationaddsasessionitemthathasthesamenameasanitempreviouslystored in the HttpSessionStateobject, the session item is replaced—session item names must be unique. Another common syntax for placing a session item in the HttpSessionStateobject is Session[Name]=Value. For example, we could have replaced lines 48–49 with

Session[ languageList.SelectedItem.Text ] = languageList.SelectedItem.Value

Software Engineering Observation 20.1
A Web Form should not use instance variables to maintain client state information, because each new request or postback is handled by a new instance of the page. Instead, maintain client state information in HttpSessionStateobjects, because such objects are specific to each client.

Software Engineering Observation 20.2
A benefit of using HttpSessionStateobjects (rather than cookies) is that they can store any type of object (not just Strings) as attribute values. This provides you with increased flexibility in determining the type of state information to maintain for clients.



20.7.4 Recommendations.aspx: Displaying Recommendations Based
on Session Values
After the postback of Options.aspx, the user may request book recommendations. The book-recommendations hyperlink forwards the user to the page Recommendations.aspx (Fig. 20.27(e)) to display the recommendations based on the user’s language selections. The page contains the following controls arranged vertically:
1.  ALabelwithits(ID)propertysettorecommendationsLabelanditsTextproperty set to "Recommendations". We created a CSS style for this label named .label-Style, and set the font-sizeattribute to x-largeand the font-weightattribute to bold. (See Step 5 in Section 20.4.1 for information on creating a CSS style.)
2.  A ListBoxwith its (ID)property set to booksListBox. We created a CSS style for this label named .listBoxStyle. In the Position category, we set the width attribute to 450pxand the heightattribute to 125px. The pxindicates that the measurement is in pixels.
3.  A HyperLinkwith its (ID)property set to languageLinkand its Textproperty set to "Clickheretochooseanotherlanguage". Set its NavigateUrlproperty
744	Chapter20 WebAppDevelopmentwithASP.NETinC#


byclickingtheellipsisnexttothepropertyintheProperties windowandselecting Options.aspxfrom the Select URL dialog. When the userclicks this link, theOp-tions.aspxpage will be reloaded. Requesting the page in this manner is not con-sidered a postback, so the original form in Fig. 20.27(a) will be displayed.

Code-Behind File for Recommendations.aspx
Figure 20.30 presents the code-behind file for Recommendations.aspx. Event handler Page_Init(lines 8–29) retrieves the session information. If a user has not selected a lan-guage in the Options.aspxpage, the HttpSessionStateobject’s Countproperty will be 0 (line 11). This property provides the number of session items contained in a HttpSes-sionStateobject. If the Countis 0, then we display the text No Recommendations (line 22), clear the ListBoxand hide it (lines 23–24), and update the Textof the HyperLink back to Options.aspx(line 27).

1  // Fig. 20.30: Recommendations.aspx.cs
2  // Creates book recommendations based on a Session object. 3  using System;
4
5  public partial class Recommendations : System.Web.UI.Page 6  {
7	// read Session items and populate ListBox with recommendations 8	protected void Page_Init( object sender, EventArgs e )
9	{
10	// determine whether Session contains any information 11	if ( Session.Count != 0 )
12	{
13	// display Session's name-value pairs
14	foreach ( string keyName in Session.Keys ) 15               booksListBox.Items.Add( keyName +
16	" How to Program. ISBN#: " + Session[ keyName ] ); 17         } // end if
18	else 19	{
20	// if there are no session items, no language was chosen, so 21	// display appropriate message and clear and hide booksListBox 22	recommendationsLabel.Text = "No Recommendations";
23	booksListBox.Items.Clear(); 24	booksListBox.Visible = false; 25
26	// modify languageLink because no language was selected 27	languageLink.Text = "Click here to choose a language"; 28         } // end else
29	} // end method Page_Init
30  } // end class Recommendations

Fig. 20.30 | Sessiondatausedtoprovidebookrecommendationstotheuser.

If the user chose at least one language, the loop in lines 14–16 iterates through the HttpSessionState object’s keys (line 14) by accessing the HttpSessionState’s Keys property, which returns a collection containing all the keys in the session. Lines 15–16 concatenate the keyName, the String"HowtoProgram.ISBN#:"and the key’s corre-
20.8 CaseStudy:Database-DrivenASP.NETGuestbook   745


sponding value, which is returned by Session(keyName). This Stringis the recommen-dation that is added to the ListBox.

20.8 Case Study: Database-Driven ASP.NET Guestbook
Many websites allow users to provide feedback about the website in a guestbook. Typical-ly, users click a link on the website’s home page to request the guestbook page. This page usually consists of a form that contains fields for the user’s name, e-mail address, message/ feedback and so on. Data submitted on the guestbook form is then stored in a database located on the server.
In this section, we create a guestbook Web Form application. The GUI (Fig. 20.31) contains a GridViewdata control, which displays all the entries in the guestbook in tabular format. This controlis locatedin theToolbox’s Data section. We explain howtocreateand configure this data control shortly. The GridViewdisplays abc in Design mode to indicate data that will be retrieved from a data source at runtime. You’ll learn how to create and configure the GridViewshortly.














GridView control






Fig. 20.31 | GuestbookapplicationGUIinDesign mode.

The Guestbook Database
The application stores the guestbook information in a SQL Server database called Guest-book.mdflocated on the web server. (We provide this database in the databasesfolder with this chapter’s examples.) The database contains a single table named Messages.

Testing the Application To test this application:
1.  Select Open Web Site… from the File menu.
746	Chapter20 WebAppDevelopmentwithASP.NETinC#


2.  In the Open Web Site dialog, ensure that File System is selected, then navigate to this chapter’s examples, select the Guestbookfolder and click the Open Button.
3. Select Guestbook.aspxin the Solution Explorer, then type Ctrl + F5 to execute the web application in your default web browser.
Figure 20.32(a) shows the user submitting a new entry. Figure 20.32(b) shows the new entry as the last row in the GridView.


a)Userenters dataforthe name,e-mailand message,then pressesSubmitto sendthedatato theserver












b)Serverstores thedatainthe database,then refreshesthe GridViewwith theupdateddata















Fig. 20.32 | SampleexecutionoftheGuestbook application.
20.8 CaseStudy:Database-DrivenASP.NETGuestbook   747


20.8.1 Building a Web Form that Displays Data from a Database
You’ll now build this GUI and set up the data binding between the GridViewcontrol and the database. We discuss the code-behind file in Section 20.8.2. To build the guestbook application, perform the following steps:

Step 1: Creating the Web Site
Tobegin,followthestepsinSection 20.4.1tocreateanEmptyWebSite namedGuestbook then add a Web Form named Guestbook.aspxto the project. Set the document’s Title property to "Guestbook". To ensure that Guestobook.aspxloads when you execute this application, right click it in the Solution Explorer and select Set As Start Page.

Step 2: Creating the Form for User Input
In Design mode, add the text Pleaseleaveamessageinourguestbook:, then use the Block Format ComboBoxin the IDE’s toolbar to change the text to Heading 3 format. Insert a tablewithfourrowsandtwocolumns,configured sothat thetextineachcellalignswiththe top of the cell. Place the appropriate text (see Fig. 20.31) in the top three cells in the table’s left column. Then place TextBoxes named nameTextBox, emailTextBoxand messageText-Boxin the top three table cells in the right column. Configure the TextBoxes as follows:
•	Set the nameTextBox’s width to 300px. •	Set the emailTextBox’s width to 300px.
•	 Set the messageTextBox’s width to 300pxand height to 100px. Also set this con-trol’s TextModeproperty to MultiLineso the user can type a message containing multiple lines of text.
Finally, add Buttons named submitButtonand clearButtonto the bottom-right table cell. Set the buttons’ Textproperties to Submitand Clear, respectively. We discuss the buttons’ event handlers when we present the code-behind file. You can create these event handlers now by double clicking each Buttonin Design view.

Step 3: Adding a GridViewControl to the Web Form
Add a GridViewnamed messagesGridViewthat will display the guestbook entries. This control appears in the Data section of the Toolbox. The colors for the GridVieware speci-fiedthroughtheAuto Format... linkintheGridViewTasks smart-tagmenuthatopenswhen you place the GridViewon the page. Clicking this link displays an AutoFormat dialog with severalchoices.Inthisexample,wechose Professional.WeshowhowtosettheGridView’s data source (that is, where it gets the data to display in its rows and columns) shortly.

Step 4: Adding a Database to an ASP.NET Web Application
To use a SQL Server Express database file in an ASP.NET web application, you must first add the file to the project’s App_Datafolder. For security reasons, this folder can be ac-cessed only by the web application on the server—clients cannot access this folder over a network. The web application interacts with the database on behalf of the client.
The Empty Web Site template does not create the App_Datafolder. To create it, right click the project’s name in the Solution Explorer, then select Add ASP.NET Folder > App_Data. Next, add the Guestbook.mdffile to the App_Datafolder. You can do this in one of two ways:
748	Chapter20 WebAppDevelopmentwithASP.NETinC#


•	Drag the file from Windows Explorer and drop it on the App_Datafolder.
•	 Right click the App_Datafolder in the Solution Explorer and select Add Existing Item… todisplaytheAddExistingItem dialog,thennavigatetothedatabasesfolder with this chapter’s examples, select the Guestbook.mdffile and click Add. [Note: Ensure that Data Files is selected in the ComboBoxabove or next to the Add Button in the dialog; otherwise, the database file will not be displayed in the list of files.]

Step 5: Creating the LINQ to SQL Classes
You’ll use LINQ to interact with the database. To create the LINQ to SQL classes for the Guestbookdatabase:
1.  Right click the project in the Solution Explorer and select Add New Item… to dis-play the Add New Item dialog.
2.  Inthedialog,selectLINQtoSQLClasses,enterGuestbook.dbmlastheName,and click Add. A dialog appears asking if you would like to put your new LINQ to SQL classes in the App_Codefolder; click Yes. The IDE will create an App_Code folder and place the LINQ to SQL classes information in that folder.
3.  In the Database Explorer window, drag the Guestbookdatabase’s Messagestable fromtheDatabaseExplorer ontotheObjectRelationalDesigner.Finally,saveyour project by selecting File > Save All.

Step 6: Binding the GridViewto the MessagesTable of the GuestbookDatabase You can now configure the GridViewto display the database’s data.
1.  IntheGridViewTasks smart-tagmenu,select<Newdatasource...>fromtheChoose Data Source ComboBoxto display the Data Source Configuration Wizard dialog.
2.  In this example, we use a LinqDataSourcecontrol that allows the application to interact with the Guestbook.mdfdatabase through LINQ. Select LINQ, then set the IDof the data source to messagesLinqDataSourceand click OK to begin the Configure Data Source wizard.
3.  In the Choose a Context Object screen, ensure that GuestbookDataContext is se-lected in the ComboBox, then click Next >.
4.  The Configure Data Selection screen (Fig. 20.33) allows you to specify which data the LinqDataSourceshould retrieve from the data context. Your choices on this page design a SelectLINQ query. The Table drop-down list identifies a table in the  data  context.  The  Guestbook data  context  contains  one  table  named Messages, which is selected by default. If you haven’t saved your project since cre-ating your LINQ to SQL classes (Step 5), the list of tables will not appear. In the Select pane, ensure that the checkbox marked with an asterisk (*) is selected to indicate that you want to retrieve all the columns in the Messagestable.
5.  Click the Advanced… button, then select the Enable the LinqDataSource to per-form automatic inserts CheckBoxand click OK. This configures the LinqData-Sourcecontrol to automatically insert new data into the database when new data is inserted in the data context. We discuss inserting new guestbook entries based on users’ form submissions shortly.
6.  Click Finish to complete the wizard.
20.8 CaseStudy:Database-DrivenASP.NETGuestbook   749





















Fig. 20.33 | ConfiguringthequeryusedbytheLinqDataSourcetoretrievedata.

A control named messagesLinqDataSourcenow appears on the Web Form directly below the GridView(Fig. 20.34). It’s represented in Design mode as a gray box containing its type and name. It will not appear on the web page—the gray box simply provides a way to manipulate the control visually through Design mode—similar to how the objects in the component tray are used in Design mode for a Windows Forms application.
The GridViewnow has column headers that correspond to the columns in the Mes-sagestable. The rows each contain either a number (which signifies an autoincremented column) or abc (which indicates string data). The actual data from the Guestbook.mdf database file will appear in these rows when you view the ASPX file in a web browser.

Step 7: Modifying the Columns of the Data Source Displayed in the GridView
It’s not necessary for site visitors to see the MessageIDcolumn when viewing past guest-book entries—this column is merely a unique primary key required by the Messagestable within the database. So, let’s modify the GridViewto prevent this column from displaying on the Web Form. We’ll also modify the column Message1 to read Message.
1. In the GridView Tasks smart tag menu, click Edit Columns to display the Fields dialog (Fig. 20.35).
2.  Select MessageID in the Selected fields pane, then click the	Button. This re-moves the MessageIDcolumn from the GridView.
3.  Next select Message1 in the Selected fields pane and change its HeaderText property to Message. The IDE renamed this field to prevent a naming conflict in the LINQ to SQL classes.
4.  Click OK to return to the main IDE window, then set the Widthproperty of the GridViewto 650px.
The GridViewshould now appear as shown in Fig. 20.31.
750	Chapter20 WebAppDevelopmentwithASP.NETinC#

















LinqDataSource control


Fig. 20.34 | Design modedisplayingLinqDataSourcecontrolforaGridView.



















Fig. 20.35 | RemovingtheMessageIDcolumnfromtheGridView.

20.8.2 Modifying the Code-Behind File for the Guestbook Application
Afterbuilding the Web Form andconfiguringthe data controls usedin this example, dou-ble click the Submit and Clear buttons in Design view to create their corresponding Click event handlers in the code-behind file (Fig. 20.36). The IDE generates empty event han-dlers, so we must add the appropriate code to make these buttons work properly. The
20.8 CaseStudy:Database-DrivenASP.NETGuestbook   751


event handler for clearButton(lines 37–42) clears each TextBoxby setting its Textprop-erty to an empty string. This resets the form for a new guestbook submission.


1  // Fig. 20.36: Guestbook.aspx.cs
2  // Code-behind file that defines event handlers for the guestbook. 3  using System;
4  using System.Collections.Specialized; // for class ListDictionary 5
6  public partial class Guestbook : System.Web.UI.Page 7  {
8	// Submit Button adds a new guestbook entry to the database,
9	// clears the form and displays the updated list of guestbook entries 10	protected void submitButton_Click( object sender, EventArgs e )
11	{
12	// create dictionary of parameters for inserting
13	ListDictionary insertParameters = new ListDictionary(); 14
15	// add current date and the user's name, e-mail address 16	// and message to dictionary of insert parameters
17	insertParameters.Add( "Date", DateTime.Now.ToShortDateString() ); 18	insertParameters.Add( "Name", nameTextBox.Text );
19	insertParameters.Add( "Email", emailTextBox.Text );
20	insertParameters.Add( "Message1", messageTextBox.Text ); 21
22	// execute an INSERT LINQ statement to add a new entry to the
23	// Messages table in the Guestbook data context that contains the 24	// current date and the user's name, e-mail address and message 25	messagesLinqDataSource.Insert( insertParameters );
26
27	// clear the TextBoxes
28	nameTextBox.Text = String.Empty; 29	emailTextBox.Text = String.Empty;
30	messageTextBox.Text = String.Empty; 31
32	// update the GridView with the new database table contents 33	messagesGridView.DataBind();
34	} // submitButton_Click 35
36	// Clear Button clears the Web Form's TextBoxes
37	protected void clearButton_Click( object sender, EventArgs e ) 38	{
39	nameTextBox.Text = String.Empty; 40	emailTextBox.Text = String.Empty;
41	messageTextBox.Text = String.Empty; 42     } // clearButton_Click
43  } // end class Guestbook

Fig. 20.36 | Code-behindfilefortheguestbookapplication.

Lines 10–34 contain submitButton’s event-handling code, which adds the user’s information to the Guestbookdatabase’s Messagestable. To use the values of the Text-Boxes on the Web Form as the parameter values inserted into the database, we must create a ListDictionaryof insert parameters that are key/value pairs.
752	Chapter20 WebAppDevelopmentwithASP.NETinC#


Line 13 creates a ListDictionary object—a set of key/value pairs that is imple-mented as a linked list and is intended for dictionaries that store 10 or fewer keys. Lines 17–20 use the ListDictionary’s Addmethod to store key/value pairs that represent each of the four insert parameters—the current date and the user’s name, e-mail address, and message. The keys must match the names of the columns of the Messagestable in the .dbmlfile. Invoking the LinqDataSourcemethod Insert(line 25) inserts the data in the data context, adding a row to the Messagestable and automatically updating the database. We pass the ListDictionaryobject as an argument to the Insertmethod to specify the insert parameters. After the data is inserted into the database, lines 28–30 clear the Text-Boxes, and line 33 invokes messagesGridView’s DataBindmethod to refresh the data that the GridViewdisplays. This causes messagesLinqDataSource(the GridView’s source) to execute its Selectcommand to obtain the Messagestable’s newly updated data.

20.9 Case Study Introduction: ASP.NET AJAX
In Chapter 21, you learn the difference between a traditional web application and an Ajax (Asynchronous  JavaScript  and  XML)  web  application.  You  also  learn how  to  use ASP.NET AJAX to quickly and easily improve the user experience for your web applica-tions, giving them responsiveness comparable to that of desktop applications. To demon-strate ASP.NET AJAX capabilities, you enhance the validation example by displaying the submitted form information without reloading the entire page. The only modifications to this web application appear in the Validation.aspxfile. You use Ajax-enabled controls to add this feature.

20.10  Case Study Introduction: Password-Protected
Books Database Application
In Chapter 21, we include a web application case study in which a user logs into a pass-word-protected website to view a list of publications by a selected author. The application consists of several pages and provides website registration and login capabilities. You’ll learn about ASP.NET master pages, which allow you to specify a common look-and-feel for all the pages in your app. We also introduce the Web Site Administration Tool and use it to configure the portions of the application that can be accessed only by users who are logged into the website.






Summary
Section 20.1 Introduction
•  ASP.NET technology is Microsoft’s technology for web-application development.
•  Web Form files have the file-name extension .aspxand contain the web page’s GUI. A Web Form file represents the web page that is sent to the client browser.
•  The file that contains the programming logic of a Web Form is called the code-behind file.
Summary   753


Section 20.2 Web Basics
•  URIs (Uniform Resource Identifiers) identify resources on the Internet. URIs that start with http://are called URLs (Uniform Resource Locators).
•  A URL contains information that directs a browser to the resource that the user wishes to access. Computers that run web server software make such resources available.
•  In a URL, the hostname is the name of the server on which the resource resides. This computer usually is referred to as the host, because it houses and maintains resources.
•  A hostname is translated into a unique IP address that identifies the server. This translation is performed by a domain-name system (DNS) server.
•  The remainder of a URL specifies the location and name of a requested resource. For security reasons,thelocationisnormallyavirtualdirectory.Theservertranslatesthevirtualdirectoryinto a real location on the server.
•  When given a URL, a web browser uses HTTP to retrieve the web page found at that address.

Section 20.3 Multitier Application Architecture
•  Multitier applications divide functionality into separate tiers—logical groupings of functional-ity—that commonly reside on separate computers for security and scalability.
•  The information tier (also called the bottom tier) maintains data pertaining to the application. This tier typically stores data in a relational database management system.
•  The middle tier implements business logic, controller logic and presentation logic to control in-teractions between the application’s clients and the application’s data. The middle tier acts as an intermediary between data in the information tier and the application’s clients.
•  Business logic in the middle tier enforces business rules and ensures that data is reliable before the server application updates the database or presents the data to users.
•  The client tier, or top tier, is the application’s user interface, which gathers input and displays output. Users interact directly with the application through the user interface (typically viewed in a web browser), keyboard and mouse. In response to user actions, the client tier interacts with the middle tier to make requests and to retrieve data from the information tier. The client tier then displays to the user the data retrieved from the middle tier.

Section 20.4.1 Building the WebTimeApplication
•  File System websites are created and tested on your local computer. Such websites execute in VisualWebDeveloper’sbuilt-inASP.NETDevelopmentServerandcanbeaccessedonlybyweb browsers running on the same computer. You can later “publish” your website to a production web server for access via a local network or the Internet.
•  HTTP websites are created and tested on an IIS web server and use HTTP to allow you to put your website’s files on the server. If you own a website and have your own web server computer, you might use this to build a new website directly on that server computer.
•  FTP websites useFile Transfer Protocol (FTP)to allow you toputyour website’s files on the serv-er. The server administrator must first create the website on the server for you. FTP is commonly usedbysocalled“hostingproviders”toallow websiteownerstoshareaservercomputerthatruns many websites.
•  A Web Form represents one page in a web application and contains a web application’s GUI.
•  You can view the Web Form’s properties by selecting DOCUMENTin the Properties window. The Titleproperty specifies the title that will be displayed in the web browser’s title bar when the page is loaded.
754	Chapter20 WebAppDevelopmentwithASP.NETinC#


•  Controls and other elements are placed sequentially on a Web Form one after another in the or-der in which you drag-and-drop them onto the Web Form. The cursor indicates the insertion point in the page. This type of layout is known as relative positioning. You can also use absolute positioning in which controls are located exactly where you drop them on the Web Form.
•  When a Labeldoes not contain text, its name is displayed in square brackets in Design view as a placeholder for design and layout purposes. This text is not displayed at execution time.
•  Formatting in a web page is performed with Cascading Style Sheets (CSS).
•  AWebForm’sIniteventoccurswhenthepageisrequestedbyawebbrowser.Theeventhandler for this event—named Page_Init—initialize the page.

Section 20.4.2 Examining WebTime.aspx’s Code-Behind File
•  A class declaration can span multiple source-code files—the separate portions of the class decla-ration in each file are known as partial classes. The partialmodifier indicates that the class in a particular file is part of a larger class.
•  Every Web Form class inherits from class Pagein namespace System.Web.UI. Class Pagerepre-sents the default capabilities of each page in a web application.
•  The ASP.NET controls are defined in namespace System.Web.UI.WebControls.

Section 20.5 Standard Web Controls: Designing a Form
•  An Imagecontrol’s ImageUrlproperty specifies the location of the image to display.
•  By default, the contents of a table cell are aligned vertically in the middle of the cell. You can change this with the cell’s valignproperty.
•  A TextBoxcontrol allows you to obtain text from the user and display text to the user.
•  A DropDownListcontrol is similar to the Windows Forms ComboBoxcontrol, but doesn’t allow users to type text. You can add items to the DropDownListusing the ListItem Collection Editor, which you can access by clicking the ellipsis next to the DropDownList’s Itemsproperty in the Properties window, or by using the DropDownList Tasks menu.
•  A HyperLinkcontrol adds a hyperlink to a Web Form. The NavigateUrlproperty specifies the resource or web page that will be requested when the user clicks the HyperLink.
•  A RadioButtonListcontrol provides a series of radio buttons from which the user can select only one. The RadioButtonList Tasks smart-tag menu provides an Edit Items… link to open the ListItem Collection Editor so that you can create the items in the list.
•  A Buttoncontrol triggers an action when clicked.

Section 20.6 Validation Controls
•  A validation control determines whetherthe data in another web control is in the proper format.
•  When the page is sent to the client, the validator is converted into JavaScriptthat performs the validation in the client web browser.
•  Some client browsers might not support scripting or the user might disable it. For this reason, you should always perform validation on the server.
•  A RequiredFieldValidatorcontrol ensures that its ControlToValidateis not empty when the form is submitted. The validator’s ErrorMessageproperty specifies what to display on the Web Formifthevalidationfails.When the validator’s Displayproperty is set to Dynamic, the validator occupies space on the Web Form only when validation fails.
•  A RegularExpressionValidatoruses a regular expression to ensure data entered by the user is in a validformat.VisualWeb Developerprovides severalpredefinedregular expressions that you can
Summary   755


simply select to validate e-mail addresses, phone numbers and more. A RegularExpressionVali-dator’s ValidationExpressionproperty specifies the regular expression to use for validation.
•  A Web Form’s Loadevent occurs each time the page loads into a web browser. The event handler for this event is Page_Load.
•  ASP.NET pages are often designed so that the current page reloads when the user submits the form; this enables the program to receive input, process it as necessary and display the results in the same page when it’s loaded the second time.
•  Submitting a web form is known as a postback. Class Page’s IsPostBackproperty returns trueif the page is being loaded due to a postback.
•  Server-sideWebFormvalidationmustbeimplementedprogrammatically.ClassPage’sValidate method validates the information in the request as specified by the Web Form’s validation con-trols. Class Page’s IsValidproperty returns trueif validation succeeded.

Section 20.7 Session Tracking
•  Personalization makes it possible for e-businesses to communicate effectively with their custom-ers and also improves users’ ability to locate desired products and services.
•  To provide personalized services to consumers, e-businesses must be able to recognize clients when they request information from a site.
•  HTTP is a stateless protocol—it does not provide information regarding particular clients. •  Tracking individual clients is known as session tracking.

Section 20.7.1 Cookies
•  A cookie is a piece of data stored in a small text file on the user’s computer. A cookie maintains information about the client during and between browser sessions.
•  The expiration date of a cookie determines how long the cookie remains on the client’s comput-er. If you do not set an expiration date for a cookie, the web browser maintains the cookie for the duration of the browsing session.

Section 20.7.2 Session Tracking with HttpSessionState •  Session tracking is implemented with class HttpSessionState.

Section 20.7.3 Options.aspx: Selecting a Programming Language
•  Each radio button in a RadioButtonListhas a Textproperty and a Valueproperty. The Text property is displayed next to the radio button and the Valueproperty represents a value that is sent to the server when the user selects that radio button and submits the form.
•  Every Web Form includes a user-specific HttpSessionStateobject, which is accessible through property Sessionof class Page.
•  HttpSessionStateproperty SessionIDcontains a client’s unique session ID. The first time a cli-ent connects to the web server, a unique session ID is created for that client and a temporary cookie is written to the client so the server can identify the client on subsequent requests. When the client makes additional requests, the client’s session ID from that temporary cookie is com-pared with the session IDs stored in the web server’s memory to retrieve the client’s HttpSes-sionStateobject.
•  HttpSessionState property Timeout specifies the maximum amount of time that an Http-SessionStateobject can be inactive before it’s discarded. Twenty minutes is the default.
•  The HttpSessionStateobject is a dictionary—a data structure that stores key/value pairs. A pro-gram uses the key to store and retrieve the associated value in the dictionary.
756	Chapter20 WebAppDevelopmentwithASP.NETinC#


•  The key/value pairs in an HttpSessionStateobject are often referred to as session items. They’re placed in an HttpSessionStateobject by calling its Addmethod. Another common syntax for placing a session item in the HttpSessionStateobject is Session(Key)=Value.
•  If an application adds a session item that has the same name as an item previously stored in the HttpSessionStateobject, the session item is replaced—session items names must be unique.

Section 20.7.4 Recommendations.aspx:Displaying Recommendations BasedonSes-sion Values
•  The Countproperty returns the number of session items stored in an HttpSessionStateobject.
•  HttpSessionState’s Keysproperty returns a collection containing all the keys in the session.

Section 20.8 Case Study: Database-Driven ASP.NET Guestbook
•  A GridViewdata control displays data in tabular format. This control is located in the Toolbox’s Data section.

Section 20.8.1 Building a Web Form that Displays Data from a Database
•  To use a SQL Server Express database file in an ASP.NET web application, you must first add the file to the project’s App_Datafolder. For security reasons, this folder can be accessed only by the web application on the server—clients cannot access this folder over a network. The web ap-plication interacts with the database on behalf of the client.
•  A LinqDataSourcecontrol allows a web application to interact with a database through LINQ.

Section 20.8.2 Modifying the Code-Behind File for the Guestbook Application
•  To insert data into a database using a LinqDataSource, you must create a ListDictionaryof in-sert parameters that are formatted as key/value pairs.
•  A ListDictionary’s Addmethod stores key/value pairs that represent each insert parameter. •  A GridView’s DataBindmethod refreshes the data that the GridViewdisplays.

Self-Review Exercises
20.1	 State whether each of the following is true or false. If false, explain why. a)  Web Form file names end in .aspx.
b)  App.configis a file that stores configuration settings for an ASP.NET web application. c)   A maximum of one validation control can be placed on a Web Form.
d)  A LinqDataSourcecontrol allows a web application to interact with a database.
20.2	Fill in the blanks in each of the following statements:
a)  Web applications contain three basic tiers:	,	, and	. b)  The	web control is similar to the ComboBoxWindows control.
c)   Acontrolwhichensures thatthe datain another controlis inthe correctformatis called a(n)	.
d)  A(n)	occurs when a page requests itself. e)   Every ASP.NET page inherits from class	.
f)   The	file contains the functionality for an ASP.NET page.

Answers to Self-Review Exercises
20.1	a) True. b) False. Web.configis the file that stores configuration settings for an ASP.NET web application. c) False. An unlimited number of validation controls can be placed on a Web Form. d) True.
Exercises   757


20.2	a) bottom (information), middle (business logic), top (client). b) DropDownList. c) valida-tor. d) postback. e) Page. f) code-behind.

Exercises
20.3	(WebTimeModification) Modify the WebTimeexample to contain drop-down lists that allow the user to modify such Labelproperties as BackColor, ForeColorand Font-Size. Configure these drop-down lists so that a postback occurs whenever the user makes a selection—to do this, set their AutoPostBackproperties to true. When the page reloads, it should reflect the specified changes to the properties of the Labeldisplaying the time.
20.4	(Page Hit Counter) Create an ASP.NET page that uses session tracking to keep track of how many times the client computer has visited the page. Set the HttpSessionStateobject’s Time-outproperty to 1440(the number of minutes in one day) to keep the session in effect for one day into the future. Display the number of page hits every time the page loads.
20.5	(Guestbook Application Modification) Add validation to the guestbook application in Section 20.8. Use validation controls to ensure that the user provides a name, a valid e-mail address and a message.
20.6	(Project: WebControlsModification) Modify the example of Section 20.5 to add function-ality to theRegister Button.When the userclicks the Button,validate all of theinput fields to ensure that the user has filled out the form completely, and entered a valid email address and phone num-ber. If any of the fields are not valid, appropriate messages should be displayed by validation con-trols. If the fields are all valid, direct the user to another page that displays a message indicating that the registration was successful followed by the registration information that was submitted from the form.
20.7	(Project: Web-Based Address Book) Using the techniques you learned in Section 20.8, cre-ate a web-based Address book. Display the address book’s contents in a GridView. Allow the user to search for entries with a particular last name.
21
… the challenges are for the designers of these applications: to forget what we think we know about the limitations of theWeb,andbegintoimaginea wider, richer range of possibilities. It’s going to be fun.
—Jesse James Garrett

If any man will draw up his case, and put his name at the foot of the first page, I will give himanimmediatereply.Where he compels me to turn over the sheet, he must wait my leisure.
—Lord Sandwich


WebAppDevelopmentwith ASP.NETinC#:ADeeper Look




Objectives Inthischapteryou’lllearn:
ÿ   TousetheWeb Site Administration Tool to modifywebapplication
configurationsettings.
ÿ   Torestrictaccesstopagesto
authenticatedusers.
ÿ   Tocreateauniformlook-and-feelforawebsiteusing
masterpages.
ÿ   TouseASP.NETAjaxto improvetheuserinteractivity
ofyourwebapplications.
21.1 Introduction   759



21.1  Introduction
21.2  CaseStudy:Password-Protected BooksDatabaseApplication
21.2.1 ExaminingtheASP.NETWebSite
Template
21.2.2 Test-DrivingtheCompleted
Application
21.2.3 ConfiguringtheWebsite
21.2.4 ModifyingtheDefault.aspxand
About.aspxPages
21.2.5 CreatingaContentPageThatOnly
AuthenticatedUsersCanAccess
21.2.6 LinkingfromtheDefault.aspx
PagetotheBooks.aspxPage


21.2.7 ModifyingtheMasterPage
(Site.master)
21.2.8 CustomizingthePassword-Protected
Books.aspxPage 21.3  ASP.NETAjax
21.3.1 TraditionalWebApplications 21.3.2 AjaxWebApplications
21.3.3 TestinganASP.NETAjaxApplication 21.3.4 TheASP.NETAjaxControlToolkit
21.3.5 UsingControlsfromtheAjaxControl
Toolkit


Summary | Self-Review Exercises | Answers to Self-Review Exercises | Exercises


21.1 Introduction
In Chapter 20, we introduced ASP.NET and web application development. In this chap-ter, we introduce several additional ASP.NET web-application development topics, in-cluding:
•	master pages to maintain a uniform look-and-feel across the Web Forms in a web application
•	creating a password-protected website with registration and login capabilities
•	 usingtheWeb Site Administration Tool tospecify whichpartsofawebsitearepass-word protected
•	using ASP.NET Ajax to quickly and easily improve the user experience for your web applications, giving them responsiveness comparable to that of desktop ap-plications.

21.2 Case Study: Password-Protected Books Database
Application
This case study presents a web application in which a user logs into a password-protected website to view a list of publications by a selected author. The application consists of sev-eral ASPX files. For this application, we’ll use the ASP.NET Web Site template, which is a starter kit for a small multi-page website. The template uses Microsoft’s recommended practices for organizing a website and separating the website’s style (look-and-feel) from its content. The default site has two primary pages (Home and About) and is pre-config-ured with login and registration capabilities. The template also specifies a common look-and-feel for all the pages in the website—a concept known as a master page.
We begin by examining the features of the default website that is created with the ASP.NET Web Site template. Next, we test drive the completed application to demonstrate the changes we made to the default website. Then, we provide step-by-step instructions to guide you through building the application.
760	Chapter21 WebAppDevelopmentwithASP.NETinC#:ADeeperLook


21.2.1 Examining the ASP.NET Web Site Template
To test the default website, begin by creating the website that you’ll customize in this case study. Perform the following steps:
1. Select File > New Web Site... to display the New Web Site dialog.
2. In the left column of the New Web Site dialog, ensure that Visual C# is selected, then select ASP.NET Web Site in the middle column.
3.  Choose a location for your website, name it Bug2Bugand click OK to create it. Fig. 21.1 shows the website’s contents in the Solution Explorer.




Accountfolderexpandedto showthedefaultpagesforlogin, registrationandchanging passwords



About page Defaulthomepage
Masterpagethatspecifiesthe site’slook-and-feel

Fig. 21.1  | ThedefaultASP.NET Web Site intheSolution Explorer.

Executing the Website
You can now execute the website. Select the Default.aspxpage in the Solution Explorer, then type Ctrl + F5 to display the default page shown in Fig. 21.2.



Navigationbarcontainslinkstothe Home andAbout pages

Youcancustomizethecontentofeachpage andthelook-and-feelofthewebsite

Clickthislinktolog intothewebsite













Fig. 21.2  | DefaultHome pageofawebsitecreatedwiththeASP.NET Web Site template.
21.2 CaseStudy:Password-ProtectedBooksDatabaseApplication   761


Navigation and Pages
The default ASP.NET Web Site contains a home page and an about page—so-called con-tent pages—that you’ll customize in subsequent sections. The navigation bar near the top of the page allows you to switch between these pages by clicking the link for the appropri-ate page. In Section 21.2.7, you’ll add another link to the navigation bar to allow users to browse book information.
As you navigate between the pages, notice that each page has the same look-and-feel. This is typical of professional websites. The site uses a master page and cascading style sheets (CSS) to achieve this. A master page defines common GUI elements that are dis-played by each page in a set of content pages. Just as C# classes can inherit instance vari-ables and methods from existing classes, content pages can inherit elements from master pages—this is a form of visual inheritance.

Login and Registration Support
Websites commonly provide “membership capabilities” that allow users to register at a website and log in. Often this gives users access to website customization capabilities or premium content. The default ASP.NET Web Site is pre-configured to support registration and login capabilities.
In the upper-right corner of each page is a Log In link. Click that link to display the Login page (Fig. 21.3). If you are already registered with the site, you can log in with your username and password. Otherwise, you can click the Register link to display the Register page (Fig. 21.4). For the purpose of this case study, we created an account with the user-name testuser1and the password testuser1. You do not need to be registered or logged into the default website to view the home and about pages.





Clickheretoregister
















Fig. 21.3  | Login page.
762	Chapter21 WebAppDevelopmentwithASP.NETinC#:ADeeperLook

























Fig. 21.4  | Register page.


21.2.2 Test-Driving the Completed Application
This example uses a technique known as forms authentication to protect a page so that only registered users who are logged into the website can access the page. Such users are knownasthesite’smembers.Authenticationisacrucialtoolforsitesthatallowonlymem-bers to enter the site or a portion of the site. In this application, website visitors must log in before they’re allowed to view the publications in the Booksdatabase.
Let’s open the completed Bug2Bug website and execute it so that you can see the authentication functionality in action. Perform the following steps:
1.  Close the application you created in Section 21.2.1—you’ll reopen this website so that you can customize it in Section 21.2.3.
2.  Select Open Web Site… from the File menu.
3.  In the Open Web Site dialog, ensure that File System is selected, then navigate to this chapter’s examples, select the Bug2Bugfolder and click the Open Button.
4. Select the Default.aspxpage then type Ctrl + F5 to execute the website.
The website appears as shown in Fig. 21.5. Notice that we modified the site’s master page so that the top of the page displays an image, the background color of the top of the page is white and the Log In link is black. Also, the navigation bar contains a link for the Books page that you’ll create later in this case study.
21.2 CaseStudy:Password-ProtectedBooksDatabaseApplication   763















Fig. 21.5  | Home pageforthecompletedBug2Bugwebsite.

Try to visit the Books page by clicking the Books link in the navigation bar. Because this page is password protected in the Bug2Bugwebsite, the website automatically redirects you to the Login page instead—you cannot view the Books page without logging in first. If you’ve not yet registered at the completed Bug2Bugwebsite, click the Register link to create a new account. If you have registered, log in now.
If you are logging in, when you click the Log In Buttonon the Log In page, the website attempts to validate your username and password by comparing them with the usernames and passwords that are stored in a database on the server—this database is created for you with the ASP.NET Web Site template. If there is a match, you are authenticated (that is, your identity is confirmed) and you’re redirected to the Books page (Fig. 21.6). If you’re registering for the first time, the server ensures that you’ve filled out the registration form properly and that your password is valid (at least 6 characters), then logs you in and redi-rects you to the Books page.

















Fig. 21.6  | Books.aspxdisplayingbooksbyHarveyDeitel(bydefault).
764	Chapter21 WebAppDevelopmentwithASP.NETinC#:ADeeperLook


The Books page provides a drop-down list of authors and a table containing the ISBNs, titles, edition numbers and copyright years of books in the database. By default, the page displays all the books by Harvey Deitel. Links appear at the bottom of the table that allow you to access additional pages of data—we configured the table to display only four rows of data at a time. When the user chooses an author, a postback occurs, and the page is updated to display information about books written by the selected author (Fig. 21.7).
















Fig. 21.7  | Books.aspxdisplayingbooksbyGregAyer.

Logging Out of the Website
When you’re logged in, the Log In link is replaced in the upper-right corner of each page (not shown in Figs. 21.6–21.7) with the message “Welcome username” where username is replaced with your log in name, and a Log Out link. When you click Log Out, the website redirects you to the home page (Fig. 21.5).

21.2.3 Configuring the Website
Nowthatyou’refamiliarwithhowthisapplicationbehaves,you’llmodifythedefaultweb-site you created in Section 21.2.1. Thanks to the rich functionality of the default website, you’ll have to writealmost no VisualC# codetocreatethis application. The ASP.NET Web Site template hides the details of authenticating users against a database of user names and passwords, displaying appropriate success or error messages and redirecting the user to the correct page based on the authentication results. We now discuss the steps you must per-form to create the password-protected books database application.

Step 1: Opening the Website
Open the default website that you created in Section 21.2.1.
1. Select Open Web Site… from the File menu.
2.  In the Open Web Site dialog, ensure that File System is selected, then navigate to the location where you created your version of the Bug2Bugwebsite and click the Open Button.
21.2 CaseStudy:Password-ProtectedBooksDatabaseApplication   765


Step 2: Setting Up Website Folders
For this website, you’ll create two new folders—one that will contain the image that is used on all the pages and one that will contain the password-protected page. Password-protected parts of your website are typically placed in a separate folder. As you’ll see short-ly, you can control access to specific folders in a website.
You can choose any name you like for these folders—we chose Imagesfor the folder that will contain the image and ProtectedContentfor the folder that will contain the password-protected Books page. To create the folders, perform the following steps:
1.  Create an Imagesfolder by right clicking the location of the website in the Solu-tion Explorer, selecting New Folder and typing the name Images.
2.  Create a ProtectedContentfolder by right clicking the location of the website in the Solution Explorer, selecting New Folder and typing the name ProtectedCon-tent.


Step 3: Importing the Website Header Image and the Database File Next,you’lladdanimagetotheImagesfolderandthedatabasefiletotheApp_Datafolder.
1.  In Windows Explorer, locate the folder containing this chapter’s examples.
2.  Drag the image bug2bug.pngfrom the imagesfolder in Windows Explorer into the Imagesfolder in the Solution Explorer to copy the image into the website.
3.  DragtheBooks.mdfdatabasefile from the databasesfolderinWindowsExplor-er to the project’s App_Datafolder. We show how to retrieve data from this data-base later in the section.


Step 4: Opening the Web Site Administration Tool
In this application, we want to ensure that only authenticated users are allowed to access Books.aspx(created in Section 21.2.5) to view the information in the database. Previous-ly, we created all of our ASPX pages in the web application’s root directory. By default, any website visitor (regardless of whether the visitor is authenticated) can view pages in the root directory. ASP.NET allows you torestrict access to particular folders of a website. We do not want to restrict access to the root of the website, however, because users won’t be able to view any pages of the website except the login and registration pages. To restrict access to the Books page, it must reside in a directory other than the root directory.
You’ll now configure the website to allow only authenticated users (that is, users who have logged in) to view the pages in the ProtectedContentfolder. Perform the following steps:
1.  Select Website > ASP.NET Configuration to open the Web Site Administration Tool in a web browser (Fig. 21.8). This tool allows you to configure various options that determine how your application behaves.
2.  Click either the Security link or the Security tab to open a web page in which you can set security options (Fig. 21.9), such as the type of authentication the appli-cation should use. By default, website users are authenticated by entering user-name and password information in a web form.
766	Chapter21 WebAppDevelopmentwithASP.NETinC#:ADeeperLook












Thiswillsay0 ifyou havenotyetcreatedan accounttotestthe website



Fig. 21.8  | Web Site Administration Tool forconfiguringawebapplication.







Thiswillsay0 if youhavenotyet createdan accounttotest thewebsite











Fig. 21.9  | Security pageoftheWeb Site Administration Tool.

Step 5: Configuring the Website’s Security Settings
Next, you’ll configure the ProtectedContentfolder to grant access only to authenticated users—anyone who attempts to access pages in this folder without first logging in will be redirected to the Login page. Perform the following steps:
21.2 CaseStudy:Password-ProtectedBooksDatabaseApplication   767


1.  Click the Create access rules link in the Access Rules column of the Web Site Administration  Tool   (Fig. 21.9)  to  view  the  Add  New  Access  Rule   page (Fig. 21.10). This page is used to create an access rule—a rule that grants or de-nies access to a particular directory for a specific user or group of users.























Fig. 21.10 | Add New Access Rule pageusedtoconfiguredirectoryaccess.

2.  Click the ProtectedContentdirectory in the left column of the page to identify the directory to which our access rule applies.
3.  In the middle column, select the radio button marked Anonymous users to spec-ify that the rule applies to users who have not been authenticated.
4.  Finally, select Deny in the Permission column to prevent unauthenticated users from accessing pages in the ProtectedContentdirectory, then click OK.
By default, unauthenticated (anonymous) users who attempt to load a page in the Pro-tectedContentdirectory are redirected to the Login.aspxpage so that they can identify themselves. Because we did not set up any access rules for the Bug2Bugroot directory, anonymous users may still access pages there.

21.2.4 Modifying the Default.aspxand About.aspxPages
We modified the content of the home (Default.aspx) and about (About.aspx) pages to replace the default content. To do so, perform the following steps:
1.  DoubleclickDefault.aspxin theSolution Explorer toopen it, then switchto De-sign view (Fig. 21.11). As you move the cursor over the page, you’ll notice that
768	Chapter21 WebAppDevelopmentwithASP.NETinC#:ADeeperLook


sometimes the cursor displays as	to indicate that you cannot edit the part of the page behind the cursor. Any part of a content page that is defined in a master page can be edited only in the master page.


Thiscursorindicatesapartofacontentpagethatcannot beeditedbecauseit’sinheritedfromamasterpage













Fig. 21.11 | Default.aspxpageinDesign view.

2. Changethetext"WelcometoASP.NET!"to"WelcometoOurPassword-Protect-edBookInformationSite". Notethat the text in this heading is actually format-ted as small caps text when the page is displayed in a web browser—all of the letters are displayed in uppercase, but the letters that would normally be lower-case are smaller than the first letter in each word.
3.  Select the text of the two paragraphs that remain in the page and replace them with "Tolearnmoreaboutourbooks,clickhereorclicktheBookstabin
thenavigationbarabove.YoumustbeloggedintoviewtheBookspage." In a later step, you’ll link the words "clickhere"to the Books page.
4.  Save and close the Default.aspxpage.
5.  Next, open About.aspxand switch to Design view.
6.  Change the text "Putcontenthere."to "ThisistheBug2Bugpassword-pro-tectedbookinformationdatabaseexample."
7.  Save and close the About.aspxpage.

21.2.5 Creating a Content Page That Only Authenticated Users Can
Access
We now create the Books.aspxfile in the ProtectedContentfolder—the folder for which we set an access rule denying access to anonymous users. If an unauthenticated user re-quests this file, the user will be redirected to Login.aspx. From there, the user can either log in or create a new account, both of which will authenticate the user, then redirect back to Books.aspx. To create the page, perform the following steps:
21.2 CaseStudy:Password-ProtectedBooksDatabaseApplication   769


1.  Right click the ProtectedContentfolder in the Solution Explorer and select Add New Item…. In the resulting dialog, select Web Form and specify the file name Books.aspx. Ensure that the CheckBoxSelect master page is checked to indicate that this Web Form should be created as a content page that references a master page, then click Add.
2. In the Select a Master Page dialog, select Site.masterand click OK. The IDE creates the file and opens it.
3. Switch to Design view, click in the page to select it, then select DOCUMENT from the ComboBoxin the Properties window.
4. Change the Titleproperty of the page to Books, then save and close the page You’ll customize this page and create its functionality shortly.

21.2.6 Linking from the Default.aspxPage to the Books.aspxPage
Next, you’ll add a hyperlink from the text "clickhere"in the Default.aspxpage to the Books.aspxpage. To do so, perform the following steps:
1. Open the Default.aspxpage and switch to Design view. 2.  Select the text "clickhere".
3.  Click the Convert to Hyperlink (	) Buttonon the toolbar at the top of Visual Web Developer to display the Hyperlink dialog. You can enter a URL here, or you can link to another page within the website.
4. Click the Browse… Buttonto display the Select Project Item dialog, which allows you to select another page in the website.
5.  In the left column, select the ProtectedContentdirectory.
6.  In the right column, select Books.aspx, then click OK to dismiss the Select Proj-ect Item dialog and click OK again to dismiss the Hyperlink dialog.

















Fig. 21.12 | SelectingtheBooks.aspxpagefromtheSelect Project Item dialog.
770	Chapter21 WebAppDevelopmentwithASP.NETinC#:ADeeperLook


Users can now click the click here link in the Default.aspx page to browse to the Books.aspxpage. If a user is not logged in, clicking this link will redirect the user to the Login page.

21.2.7 Modifying the Master Page (Site.master)
Next, you’llmodifythewebsite’s masterpage, whichdefinesthecommon elementswewant to appear on each page. A master page is like a base class in a visual inheritance hierarchy, and content pages are like derived classes. The master page contains placeholders for custom content created in each content page. The content pages visually inherit the master page’s content, then add content in the areas designated by the master page’s placeholders.
For example, it’s common to include a navigation bar (that is, a series of buttons or menus for navigating a website) on every page of a site. If a site encompasses a large number of pages, adding markup to create the navigation bar for each page can be time consuming. Moreover, if you subsequently modify the navigation bar, every page on the sitethatusesitmustbeupdated.Bycreatingamasterpage,youcanspecifythenavigation-bar in one file and have it appear on all the content pages. If the navigation bar changes, only the master page changes—any content pages that use it are updated the next time the page is requested.
Inthefinalversionofthiswebsite,wemodifiedthemasterpagetoincludetheBug2Bug logo in the header at the top of every page. We also changed the colors of some elements in the header to make them work better with the logo. In particular, we changed the back-ground color from a dark blue to white, and we changed the color of the text for the Log In andLogOut linkstoblack.ThecolorchangesrequireyoutomodifytheCSSstylesforsome of themasterpage’selements. Thesestylesaredefinedin thefileSite.css, whichislocated in the website’s Stylesfolder. You will not modify the CSS file directly. Instead, you’ll use the tools built into Visual Web Developer to perform these modifications.

Inserting an Imagein the Header
To display the logo, we’ll place an Imagecontrol in the header of the master page. Each content page based on this master page will include the logo. Perform the following steps to add the Image:
1.  Open Site.masterand switch to Design view.
2.  Delete the text MYASP.NETAPPLICATIONat the top of the page.
3.  In the Toolbox, double click Image to add an Imagecontrol where the text used to be.
4.  Edit the Imagecontrol’s ImageUrlproperty to point to the bug2bug.pngimage in the Imagesfolder.

Customizing the CSS Styles for the Master Page
Our logo image was designed to be displayed against a white background. To change the background color in the header at the top of the page, perform the following steps:
1.  Just below the Design view is a list of Buttons that show you where the cursor is currently located in the master page (Fig. 21.13). These Buttons also allow you to select specific elements in the page. Click the <div.header> Buttonto select the header portion of the page.
21.2 CaseStudy:Password-ProtectedBooksDatabaseApplication   771


i


Fig. 21.13 | ButtonsforselectingpartsofapageinDesign view.

2.  Select View > Other Windows > CSS Properties to display the CSS properties (at the left of the IDE) for the currently selected element (the header of the page).
3.  At the topof theCSS Properties window, clicktheSummary Buttontoshowonly the CSS properties that are currently set for the selected element.
4.  Change the backgroundproperty from #4b6c9e(the hexadecimal value for the current dark blue background) to whiteand press Enter.
5.  The Log In and Log Out links use white text in the default website. Now that the background of the header is white, we need to change the color of these links so they’ll be visible. In the upper-right corner of the master page click the HeadLog-inView control, which is where the Log In and Log Out links get displayed.
6. Below the Design view, click the <div.loginDisplay> Buttonto display the styles for the HeadLoginView in the CSS Properties window.
7.  Change the colorproperty from whiteto blackand press Enter.
8. Click inside the box below HeadLoginView. Then, below the Design view, click the <a#HeadingLoginStatus> Buttonto display the styles for the Log In/Log Out link in the CSS Properties window
9.  Change the colorproperty from whiteto blackand press Enter.
10. We chose to make some style changes directly in the Site.cssfile. On many websites, when youmovethemouse overa hyperlink, thecolor of the linkchang-es. Similarly, once you click a hyperlink, the hyperlink is often displayed in a dif-ferentcolorthenext timeyouvisit thepagetoindicatethatyou’vealreadyclicked that link duringa previous visit. The predefined styles in thiswebsiteset the color of the Log In link to white for both of these cases. To change these to black, open the Site.cssfile from the Stylesfolder in the Solution Explorer, then search for the following two styles:

.loginDisplay a:visited .loginDisplay a:hover
Change each style’s colorproperty from whiteto black. 11. Save the Site.masterand Site.cssfiles.
Adding a Books Link to the Navigation Bar
Currently the navigation bar has only Home and About links. Next, you’ll add a link to the Books page. Perform the following steps:
1.  In the master page, position the mouse over the navigation bar links, then open the smart-tag menu and click Edit Menu Items.
2.  In the Menu Item Editor dialog, click the Add a root item (	) Button.
3.  Set the new item’s Textproperty to Booksand use the up arrow Buttonto move the new item up so the order of the navigation bar items is Home, Booksand About.
772	Chapter21 WebAppDevelopmentwithASP.NETinC#:ADeeperLook


4. Set the new item’s NavigateUrlproperty to the Books.aspxpage in the Pro-tectedContentfolder.
5.  Click OK, then save Site.masterto complete the changes to the master page.

21.2.8 Customizing the Password-Protected Books.aspxPage
You are now ready to customize the Books.aspxpage to display the book information for a particular author.

Generating LINQ to SQL Classes Based on the Books.mdfDatabase TheBooks.aspxpagewillprovideaDropDownListcontainingauthors’namesandaGrid-Viewdisplaying information about books written by the author selected in the DropDown-List. A user will select an author from the DropDownListto cause the GridViewto display information about only the books written by the selected author.
To work with the Booksdatabase through LINQ, we use the same approach as in the Guestbook case study (Section 20.8). First you need to generate the LINQ to SQL classes based on the Books database, which is provided in the databases directory of this chapter’s examples folder. Name the file Books.dbml. When you drag the tables of the Books database  from  the  Database  Explorer  onto  the  Object  Relational  Designer  of Books.dbml, you’ll find that associations (represented by arrows) between the two tables are automatically generated (Fig. 21.14).









Fig. 21.14 | Object Relational Designer fortheBooksdatabase.

To obtain data from this data context, you’ll use two LinqDataSourcecontrols. In both cases, the LinqDataSourcecontrol’s built-in data selection functionality won’t be versatile enough, so the implementation will be slightly different than in Section 20.8. So, we’ll use a custom SelectLINQ statement as the query of a LinqDataSource.

Adding a DropDownListto Display the Authors’ First and Last Names
Now that we have created a BooksDataContextclass (one of the generated LINQ to SQL classes),weaddcontrols to Books.aspxthat willdisplay thedataon the web page. Wefirst add the DropDownListfrom which users can select an author.
1.  OpenBooks.aspxinDesign mode,thenaddthetextAuthor:andaDropDownList control named authorsDropDownListin the page’s editable content area (which has a white background). The DropDownListinitially displays the text Unbound.
2.  Next, we’ll bind the list to a data source, so the list displays the author informa-tion in the Authors table of the Books database. Because the Configure Data
21.2 CaseStudy:Password-ProtectedBooksDatabaseApplication   773


Source wizard allows us to create LinqDataSources with only simple Select LINQstatements,wecannotusethewizardhere.Instead,addaLinqDataSource object below the DropDownListnamed authorsLinqDataSource.
3. Open the smart-tag menu for the DropDownListand click Choose Data Source… to start the Data Source Configuration Wizard (Fig. 21.15). Select authorsLinq-DataSourcefrom the Select a data source drop-down list in the first screen of the wizard. Then, type Nameas the data field to display in the DropDownListand AuthorIDas the data field that will be submitted to the server when the user makes a selection. [Note: You must manually type  these  values in because authorsLinqDataSource does not yet have a defined Select query.] When authorsDropDownListisrenderedin a webbrowser, thelist itemswilldisplay the names of the authors, but the underlying values associated with each item will be theAuthorIDs of the authors. ClickOK tobindthe DropDownListtothespecified data.



















Fig. 21.15 | ChoosingadatasourceforaDropDownList.

4.  In the C# code-behind file (Books.aspx.cs), create an instance of BooksData-Contextnamed databaseas an instance variable.
5.  In the Design view of Books.aspx, double click authorsLinqDataSourceto cre-ate an event handler for its Selectingevent. This event occurs every time the LinqDataSourceselects data from its data context, and can be used to implement custom Select queries against the data context. To do so, assign the custom LINQ query to the Resultproperty of the event handler’s LinqDataSourceSe-lectEventArgsargument. The query results become the data source’s data. In this case, we must create a custom anonymous type in the Selectclause with properties Nameand AuthorIDthat contain the author’s full name and ID. The LINQ query is
774	Chapter21 WebAppDevelopmentwithASP.NETinC#:ADeeperLook


from author in database.Authors
select new { Name = author.FirstName + " " + author.LastName, author.AuthorID };
The limitations of the Configure Data Source wizard prevent us from using a cus-tom field such as Name(a combination of first name and last name, separated by a space) that isn’t one of the database table’s existing columns.
6. The last step in configuring the DropDownListon Books.aspxis to set the con-trol’s AutoPostBackproperty to True. This property indicates that a postback oc-curs each time the user selects an item in the DropDownList. As you’ll see shortly, this causes the page’s GridView(created in the next step) to display new data.

Creating a GridViewto Display the Selected Author’s Books
Wenow adda GridViewtoBooks.aspxfordisplaying thebookinformation bythe author selected in the authorsDropDownList.
1.  Add a GridViewnamed titlesGridViewbelow the other controls in the page’s content area.
2.  To bind the GridViewto data from the Booksdatabase, create a LinqDataSource named titlesLinqDataSourcebeneath the GridView.
3.  Select titlesLinqDataSourcefrom the Choose Data Source drop-down list in the GridView Tasks smart-tag menu. Because titlesLinqDataSourcehas no de-fined Selectquery, the GridViewwill not automatically be configured.
4.  To configure the columns of the GridViewto display the appropriate data, select Edit Columns… from the GridView Tasks smart-tag menu to display the Fields di-alog (Fig. 21.16).
5. Uncheck the Auto-generate fields box to indicate that you’ll manually define the fields to display.


















Fig. 21.16 | CreatingGridViewfieldsintheFields dialog.
21.2 CaseStudy:Password-ProtectedBooksDatabaseApplication   775


6.  Create four BoundFields with the HeaderTextISBN, Title, EditionNumberand Copyright, respectively.
7.  For the ISBNand CopyrightBoundFields, set the SortExpressionand Data-Fieldproperties to match the HeaderText. For the TitleBoundField, set the SortExpression and DataField properties to Title1 (the IDE renamed the Title column to Title1 to avoid a naming conflict with the table’s class— Title). For EditionNumber, set the SortExpressionand DataFieldto Edi-tionNumber—the name of the field in the database. The SortExpressionspeci-fies to sort by the associated data field when the user chooses to sort by the column. Shortly, we’ll enable sorting to allow users to sort this GridView. Click OK to close the Fields dialog.
8.  To specify the SelectLINQ query for obtaining the data, double click titles-LinqDataSourceto create its Selectingevent handler. Assign the custom LINQ querytotheLinqDataSourceSelectEventArgsargument’sResultproperty.Use the following LINQ query:

from book in database.AuthorISBNs where book.AuthorID ==
Convert.ToInt32( authorsDropDownList.SelectedValue ) select book.Title
9.  The GridViewneeds to update every time the user makes a new author selection. To implement this, double click the DropDownListto create an event handler for its SelectedIndexChangedevent. You can make the GridViewupdate by invok-ing its DataBindmethod.


Code-Behind File for the Books Page
Figure 21.17 shows the code for the completed code-behind file. Line 10 defines the data context object that is used in the LINQ queries. Lines 13–20 and 23–31 define the two LinqDataSource’s Selecting events. Lines 34–38 define the authorsDropDownList’s SelectedIndexChangedevent handler, which updates the GridView.

1  // Fig. 21.17: ProtectedContent_Books.aspx.cs
2  // Code-behind file for the password-protected Books page. 3  using System;
4  using System.Linq;
5  using System.Web.UI.WebControls; 6
7  public partial class ProtectedContent_Books : System.Web.UI.Page 8  {
9	// data context queried by data sources
10	BooksDataContext database = new BooksDataContext(); 11
12	// specify the Select query that creates a combined first and last name 13	protected void authorsLinqDataSource_Selecting( object sender,
14	LinqDataSourceSelectEventArgs e )
15	{

Fig. 21.17 | Code-behindfileforthepassword-protectedBooks page.(Part1of2.)
776	Chapter21 WebAppDevelopmentwithASP.NETinC#:ADeeperLook


16	e.Result =
17	from author in database.Authors
18	select new { Name = author.FirstName + " " + author.LastName, 19               author.AuthorID };
20	} // end method authorsLinqDataSource_Selecting 21
22	// specify the Select query that gets the specified author's books 23	protected void titlesLinqDataSource_Selecting( object sender,
24	LinqDataSourceSelectEventArgs e ) 25     {
26	e.Result =
27	from book in database.AuthorISBNs 28	where book.AuthorID ==
29	Convert.ToInt32( authorsDropDownList.SelectedValue ) 30            select book.Title;
31	} // end method titlesLinqDataSource_Selecting 32
33	// refresh the GridView when a different author is selected 34	protected void authorsDropDownList_SelectedIndexChanged(
35	object sender, EventArgs e ) 36     {
37	titlesGridView.DataBind(); // update the GridView
38	} // end method authorsDropDownList_SelectedIndexChanged
39  } // end class ProtectedContent_Books

Fig. 21.17 | Code-behindfileforthepassword-protectedBooks page.(Part2of2.)


Configuring the GridViewto Enable Sorting and Paging
Now that the GridViewis tied to a data source, we modify several of the control’s proper-ties to adjust its appearance and behavior.
1.  In Design view, use the GridView’s sizing handles to set the width to 580px.
2.  Next, in the GridView Tasks smart-tag menu, check Enable Sorting so that the column headings in the GridViewbecome hyperlinks that allow users to sort the data in the GridViewusing the sort expressions specified by each column. For ex-ample, clicking the Titlesheading in the web browser will cause the displayed data to appear sorted in alphabetical order. Clicking this heading a second time will cause the data to be sorted in reverse alphabetical order. ASP.NET hides the details required to achieve this functionality.
3.  Finally, in the GridView Tasks smart-tag menu, check Enable Paging. This causes the GridViewto split across multiple pages. The user can click the numbered links at the bottom of the GridViewcontrol to display a different page of data. Grid-View’sPageSizepropertydeterminesthenumberofentriesperpage.SetthePage-Sizeproperty to4using the Properties window sothat the GridViewdisplaysonly four books per page. This technique for displaying data makes the site more read-able and enables pages to load more quickly (because less data is displayed at one time). As with sorting data in a GridView, you do not need to add any code to achieve paging functionality. Figure 21.18 displays the completed Books.aspxfile in Design mode.
21.3 ASP.NETAjax   777



















Fig. 21.18 | CompletedBooks.aspxpageinDesign mode.

21.3 ASP.NET Ajax
In this section, you learn the difference between a traditional web application and an Ajax (Asynchronous  JavaScript  and  XML)  web  application.  You  also  learn how  to  use ASP.NET Ajax to quickly and easily improve the user experience for your web applica-tions. To demonstrate ASP.NET Ajax capabilities, you enhance the validation example of Section 20.6 by displaying the submitted form information without reloading the entire page. The only modifications to this web application appear in the Validation.aspxfile. You use Ajax-enabled controls to add this feature.

21.3.1 Traditional Web Applications
Figure 21.19 presents the typical interactions between the client and the server in a tradi-tional web application, such as one that uses a user registration form. The user first fills in the form’s fields, then submits the form (Fig. 21.19, Step 1). The browser generates a re-questtotheserver,whichreceivestherequestandprocessesit(Step2).Theservergenerates and sends a response containing the exact page that the browser renders (Step 3), which causes the browser to load the new page (Step 4) and temporarily makes the browser win-dow blank. The client waits for the server to respond and reloads the entire page with the data from the response (Step 4). While such a synchronous request is being processed on the server, the user cannot interact with the web page. Frequent long periods of waiting, due perhaps to Internet congestion, have led some users to refer to the World Wide Web as the “World Wide Wait.” If the user interacts with and submits another form, the pro-cess begins again (Steps 5–8).
This model was designed for a web of hypertext documents—what some people call the “brochure web.” As the web evolved into a full-scale applications platform, the model shown in Fig. 21.19 yielded “choppy” user experiences. Every full-page refresh required users to reload the full page. Users began to demand a more responsive model.
778	Chapter21 WebAppDevelopmentwithASP.NETinC#:ADeeperLook




2
Process request
Server




Request1


Generate response
3

Page2 Form

Form

6
Process request




Request2


Generate response
7

Page3 Form

Form



Page1	4	Page 1   Form                 reloading

Form
Client

Page2	8	Page	Page3 Form               reloading       Form

Form 5	Form


Fig. 21.19 | Traditionalwebapplicationreloadingthepageforeveryuserinteraction.

21.3.2 Ajax Web Applications
Ajax web applications add a layer between the client and the server to manage communi-cation between the two (Fig. 21.20). When the user interacts with the page, the client re-quests information from the server (Step 1). The request is intercepted by the ASP.NET Ajaxcontrolsandsenttotheserverasanasynchronousrequest(Step2)—theusercancon-tinue interacting with the application in the client browser while the server processes the request. Other user interactions could result in additional requests to the server (Steps 3
Server




Process request1

Generate response

Process request2

Generate response




5  data
2	Uassyenrcihnrtoenraocutisorneqinuietisattes

data 7
pPaargteiaulpdate 4



Requestobject
Callbackfunction Responseprocessing
Client


1	Page1	8 Update    Form        Update
Form
6	3



Requestobject
Callbackfunction Responseprocessing



Partial
pageupdate

Userinteractioninitiates
asynchronousrequest

Fig. 21.20 | Ajax-enabledwebapplicationinteractingwiththeserverasynchronously.
21.3 ASP.NETAjax   779


and 4). Once the server responds to the original request (Step 5), the ASP.NET Ajax con-trol that issued the request calls a client-side function to process the data returned by the server. This function—known as a callback function—uses partial-page updates (Step 6) to display the data in the existing web page without reloading the entire page. At the same time, the server may be responding to the second request (Step 7) and the client browser may be starting another partial-page update (Step 8). The callback function updates only a designated part of the page. Such partial-page updates help make web applications more responsive, making them feel more like desktop applications. The web application does not load a new page while the user interacts with it. In the following section, you use ASP.NET Ajax controls to enhance the Validation.aspxpage.

21.3.3 Testing an ASP.NET Ajax Application
To demonstrate ASP.NET Ajax capabilities we’ll enhance the Validation application from Section 20.6 by adding ASP.NET Ajax controls. There are no C# code modifications to this application—all of the changes occur in the .aspxfile.

Testing the Application in Your Default Web Browser
To test this application in your default web browser, perform the following steps:
1. Select Open Web Site… from the Visual Web Developer File menu.
2.  In the Open Web Site dialog, select File System, then navigate to this chapter’s ex-amples, select the ValidationAjaxfolder and click the Open Button.
3.  Select Validation.aspxin the Solution Explorer, then type Ctrl + F5 to execute the web application in your default web browser.
Figure 21.21 shows a sample execution of the enhanced application. In Fig. 21.21(a), we show the contact form split into two tabs via the TabContainerAjax control. You can switch between thetabs by clicking the title of eachtab. Fig. 21.21(b) showsa Validator-CalloutExtender control, which displays a validation error message in a callout that points to the controlin whichthevalidation erroroccurred, ratherthan as text in the page. Fig. 21.21(c) shows the updated page with the data the user submitted to the server.

a)Enteringanameonthe Name tabthenclickingthe Contact tab











Fig. 21.21 | ValidationapplicationenhancedbyASP.NETAjax.(Part1of2.)
780	Chapter21 WebAppDevelopmentwithASP.NETinC#:ADeeperLook



b)Enteringane-mailaddress inanincorrectformatand pressingtheTab keytomove tothenextinputfieldcauses acallouttoappearinforming theusertoenterane-mail addressinavalidformat









c)Afterfillingouttheform properlyandclickingtheSubmit button,thesubmitteddatais displayedatthebottomofthe pagewithapartialpageupdate















Fig. 21.21 | ValidationapplicationenhancedbyASP.NETAjax.(Part2of2.)

21.3.4 The ASP.NET Ajax Control Toolkit
You’llnoticethatthereisa tabofbasic AJAX Extensions controlsin theToolbox.Microsoft also provides the ASP.NET Ajax Control Toolkit as part of the ASP.NET Ajax Library:

ajax.codeplex.com
The toolkit contains many more Ajax-enabled, rich GUI controls. Click the Download Buttonto begin the download. The toolkit does not come with an installer, so you must extract the contents of the toolkit’s ZIP file to your hard drive. Note the location where you extracted the files as you’ll need this information to add the ASP.NET Ajax Controls to your Toolbox.
21.3 ASP.NETAjax   781


Adding the ASP.NET Ajax Controls to the Toolbox
You should add controls from the Ajax Control Toolkit to the Toolbox in Visual Web De-veloper (or in Visual Studio), so you can drag and drop controls onto your Web Forms. To do so, perform the following steps:
1. Open an existing website project or create a new website project. 2. Open an ASPX page from your project in Design mode.
3.  Right click inside the Toolbox and choose Add Tab, then type ASP.NETAjaxLi-braryin the new tab.
4.  Right click under the new ASP.NET Ajax Library tab and select Choose Items… to open the Choose Toolbox Items dialog.
5.  Click  the  Browse  Button then  locate  the  folder  where  you  extracted  the ASP.NET Ajax Control Toolkit. Select the file AjaxControlToolkit.dllthen click Open.
6.  Click OK toclose dialog. Thecontrols from the Ajax Control Toolkit now appear in the Toolbox’s ASP.NET Ajax Library tab.
7.  If the control names are not in alphabetical order, you can sort them alphabeti-cally, by right clicking in the list of Ajax Control Toolkit controls and selecting Sort Items Alphabetically.

21.3.5 Using Controls from the Ajax Control Toolkit
In this section, you’ll enhance the application you created in Section 20.6 by adding ASP.NET Ajax controls. The key control in every ASP.NET Ajax-enabled application is the ScriptManager(in the Toolbox’s AJAX Extensions tab), which manages the JavaScript client-side code (called scripts) that enable asynchronous Ajax functionality. A benefit of using ASP.NET Ajax is that you do not need to know JavaScript to be able to use these scripts. The ScriptManageris meant for use with the controls in the Toolbox’s AJAX Ex-tensions tab. There can be only one ScriptManagerper page.

ToolkitScriptManager
The Ajax Control Toolkit comes with an enhanced ScriptManager called the Tool-kitScriptManager, which manages the scripts for the ASP. NET Ajax Toolkit controls. This one should be used in any page with controls from the ASP. NET Ajax Toolkit.

Common Programming Error 21.1
Putting more than one ScriptManagerand/or ToolkitScriptManagercontrol on a Web Form causes the application to throw an InvalidOperationExceptionwhen the page is initialized.

Open the Validationwebsite you created in Section 20.6. Then drag a Toolkit-ScriptManagerfrom the ASP.NET Ajax Library tab in the Toolbox to the top of the page— a script manager must appear before any controls that use the scripts it manages.

Grouping Information in Tabs Using the TabContainerControl
The TabContainercontrol enables you to group information into tabs that are displayed only if they’re selected. The information in an unselected tab won’t be displayed until the
782	Chapter21 WebAppDevelopmentwithASP.NETinC#:ADeeperLook


user selects that tab. To demonstrate a TabContainercontrol, let’s split the form into two tabs—one in which the user can enter the name and one in which the user can enter the e-mail address and phone number. Perform the following steps:
1.  Click to the right of the text Please fill out all the fields in the following form: and press Enter to create a new paragraph.
2.  Drag a TabContainercontrol from the ASP.NET Ajax Library tab in the Toolbox into the new paragraph. This creates a container for hosting tabs. Set the TabCon-tainer’s Widthproperty to 450px.
3.  To add a tab, open the TabContainer Tasks smart-tag menu and select Add Tab Panel. This adds a TabPanelobject—representing a tab—to the TabContainer. Do this again to add a second tab.
4.  You must change each TabPanel’s HeaderTextproperty by editing the ASPX page’s markup. To do so, click the TabContainerto ensure that it’s selected, then switch to Split view in the design window. In the highlighted markup that corre-sponds  to  the  TabContainer,  locate  HeaderText="TabPanel1" and  change "TabPanel1" to  "Name",  then  locate  HeaderText="TabPanel2" and  change "TabPanel2"to "Contact". Switch back to Design view. In Design view, you can navigate between tabs by clicking the tab headers. You can drag-and-drop ele-ments into the tab as you would anywhere else.
5.  Click in the Name tab’s body, then insert a one row and two column table. Take the text and controls that are currently in the Name: row of the original table and move them to the table in the Name tab.
6.  SwitchtotheContact tab,clickinitsbody,theninsertatwo-row-by-two-column table. Take the text and controls that are currently in the E-mail: and Phone: rows of the original table and move them to the table in the Contact tab.
7.  Delete the original table that is currently below the TabContainer.

Partial-Page Updates Using the UpdatePanelControl
The UpdatePanelcontrol eliminates full-page refreshes by isolating a section of a page for a partial-page update. In this example, we’ll use a partial-page update to display the user’s information that is submitted to the server.
To implement a partial-page update, perform the following steps:
1.  Click to the left of the Submit Buttonand press Enter to create a new paragraph above it. Then click in the new paragraph and drag an UpdatePanelcontrol from the AJAX Extensions tab in the Toolbox to your form.
2.  Then, drag into the UpdatePanelthe control(s) to update and the control that triggers the update. For this example, drag the outputLabeland the submitBut-toninto the UpdatePanel.
3.  To specify when an UpdatePanel should update, you need to define an Up-datePanel trigger. Select the UpdatePanel, then click the ellipsis button next to the control’s Triggersproperty in the Properties window. In the UpdatePanel-Trigger Collection dialog that appears (Fig. 21.22), click Add to add an Async-PostBackTrigger.  Set  the  ControlID property  to  submitButton and  the
21.3 ASP.NETAjax   783


EventNameproperty to Click. Now, when the user clicks the Submit button, the UpdatePanelintercepts the request and makes an asynchronous request to the serverinstead. Then the response is insertedin theoutputLabelelement, and the UpdatePanelreloads the label to display the new text without refreshing the en-tire page. Click OK to close the dialog.



















Fig. 21.22 | CreatingatriggerforanUpdatePanel.

Adding Ajax Functionality to ASP.NET Validation Controls Using Ajax Extenders Several controls in the Ajax Control Toolkit are extenders—components that enhance the functionality of regular ASP.NET controls. In this example, we use ValidatorCallout-ExtendercontrolsthatenhancetheASP.NETvalidationcontrolsbydisplayingerrormes-sages in small yellow callouts next to the input fields, rather than as text in the page.
You can create a ValidatorCalloutExtender by opening any validator control’s smart-tag menu and clicking Add Extender…  to display the Extender Wizard  dialog (Fig. 21.23).  Next,  choose  ValidatorCalloutExtender from  the  list  of  available extenders. The extender’s IDis chosen based on the IDof the validation control you’re extending, but you can rename it if you like. Click OK to create the extender. Do this for each of the validation controls in this example.

Changing the Display Property of the Validation Controls
The ValidatorCalloutExtenders display error messages with a nicer look-and-feel, so we no longer need the validator controls to display these messages on their own. For this rea-son, set each validation control's Displayproperty to None.

Running the Application
When you run this application, the TabContainerwill display whichever tab was last dis-played in the ASPX page’s Design view. Ensure that the Name tab is displayed, then select Validation.aspxin the Solution Explorer and type Ctrl + F5 to execute the application.
784	Chapter21 WebAppDevelopmentwithASP.NETinC#:ADeeperLook
























Fig. 21.23 | CreatingacontrolextenderusingtheExtender Wizard.

Additional ASP.NET Information
The Ajax Control Toolkit contains many other extenders and independent controls. You can check them out at www.asp.net/ajax/ajaxcontroltoolkit/samples/. For more in-formation on ASP.NET Ajax, check out our ASP.NET Ajax Resource Center at

www.deitel.com/aspdotnetajax





Summary
Section 21.2 Case Study: Password-Protected Books Database Application
•  The ASP.NET Web Site template is a starter kit for a small multi-page website. The template uses Microsoft’s recommended practices for organizing a website and separating the website’s style (look-and-feel) from its content.

Section 21.2.1 Examining the ASP.NET Web Site Template
•  ThedefaultASP.NETWebSite containsahomepageandanaboutpage—so-calledcontentpages. The navigation bar near the top of the page allows you to switch between these pages by clicking the link for the appropriate page.
•  Amasterpagedefinescommonelementsthataredisplayedbyeachpageinasetofcontentpages. •  Content pages can inherit elements from master pages—this is a form of visual inheritance.
Summary   785


•  Websites commonly provide “membership capabilities” that allow users to register at a website and log in. The default ASP.NET Web Site is pre-configured to support registration and login ca-pabilities.

Section 21.2.2 Test-Driving the Completed Application
•  Forms authentication enables only registered users who are logged into the website to access a password-protected page or set of pages. Such users are known as the site’s members.
•  If you attempt to access a password-protected page without logging in, you’re automatically re-directed to the login page.
•  When you successfully log into the website you’re considered to be authenticated.
•  When you’re logged in, the Log In link is replaced in the upper-right corner of each page with the message “Welcome username,” where username is replaced with your log in name, and a Log Out link. When you click Log Out, the website redirects you to the home page.

Section 21.2.3 Configuring the Website
•  To create a folder in a website, right click the location of the website in the Solution Explorer, se-lect New Folder and type the folder name.
•  To restrict access to a page, you typically place it in a directory other than the website’s root.
•  The Web Site Administration Tool allows you to configure various options that determine how your application behaves.
•  Anaccessrulegrants ordenies access toa particulardirectory fora specific userorgroup ofusers.

Section 21.2.4 Modifying the Default.aspxand About.aspxPages
•  As you move the cursor over a content page, you’ll notice that sometimes the cursor displays as to indicate that you cannot edit the part of the page behind the cursor. Any part of a content
page that is defined in a master page can be edited only in the master page.

Section 21.2.5 Creating a Content Page That Only Authenticated Users Can Access
•  When you create a new Web Form that should inherit from a specific master page, ensure that the CheckBoxSelect master page is checked. Then, in the Select a Master Page dialog, select the ap-propriate master page and click OK.

Section 21.2.6 Linking from the Default.aspxPage to the Books.aspxPage
•  To convert text to a hyperlink, select the text then click the Convert to Hyperlink (	) Buttonon the toolbar at the top of Visual Web Developer to display the Hyperlink dialog. You can enter a URL here, or you can link to another page within the website.

Section 21.2.7 Modifying the Master Page (Site.master)
•  A master page is like a base class in a visual inheritance hierarchy, and content pages are like de-rived classes. The master page contains placeholders for custom content created in each content page. The content pages visually inherit the master page’s content, then add content in the areas designated by the master page’s placeholders.
•  The website’s styles are defined in the file Site.css, which is located in the site’s Stylesfolder.
•  SelectView>OtherWindows>CSSProperties todisplaytheCSSproperties(attheleftoftheIDE) for the currently selected element. At the top of the CSS Properties window, click the Summary Buttonto show only the CSS properties that are currently set for the selected element.
•  To add a link to the navigation bar in the master page, position the mouse over the navigation bar links then open the smart-tag menu and click Edit Menu Items. In the Menu Item Editor dialog,
786	Chapter21 WebAppDevelopmentwithASP.NETinC#:ADeeperLook


click the Addarootitem (	)Button.Setthenewitem’sTextproperty andusethearrowButtons to move the new item where it should appear in the navigation bar. Set the new item’s Navigate-Urlproperty to the appropriate page.

Section 21.2.8 Customizing the Password-Protected Books.aspxPage
•  The Configure Data Source wizard allows you to create LinqDataSourceswith only simple Select LINQ statements. Sometimes you must add a LinqDataSourceobject with a custom query.
•  A LinqDataSource’s Selectingevent occurs every time the LinqDataSourceselects data from its data context, and can be used to implement custom Selectqueries against the data context. To do so, assign the custom LINQ query to the Resultproperty of the event handler’s LinqData-SourceSelectEventArgsargument. The query results become the data source’s data.
•  Setting a DropDownList’s AutoPostBackproperty to Trueindicates that a postback occurs each time the user selects an item in the DropDownList.
•  You can configure the columns of a GridViewmanually by selecting Edit Columns… from the GridView Tasks smart-tag menu.
•  Checking Enable Sorting in the GridView Tasks smart-tag menu changes the column headings in the GridViewto hyperlinks that allow users to sort the data in the GridViewusing the sort expres-sions specified by each column.
•  Checking Enable Paging in the GridView Tasks smart-tag menu causes the GridViewto split across multiple pages. The user can click the numbered links at the bottom of the GridViewcontrol to displayadifferentpageofdata.GridView’sPageSizepropertydeterminesthenumberofentriesper page. This technique for displaying data makes the site more readable and enables pages to load more quickly (because less data is displayed at one time).

Section 21.3 ASP.NET Ajax
•  A traditional web application must make synchronous requests and must wait for a response, whereas an Ajax (Asynchronous JavaScript and XML) web applications can make asynchronous requests and do not need to wait for a response.
•  The key control in every ASP.NET Ajax-enabled application is the ScriptManager(in the Tool-box’s AJAX Extensions tab), which manages the JavaScript client-side code (called scripts) that en-able asynchronous Ajax functionality. A benefit of using ASP.NET Ajax is that you do not need to know JavaScript to be able to use these scripts.
•  TheScriptManagerismeantforusewiththecontrolsintheToolbox’sAJAXExtensions tab.There can be only one ScriptManagerper page.
•  TheAjaxControlToolkitcomeswithanenhancedversionoftheScriptManagercalledthe Tool-kitScriptManager, which manages all the scripts for the ASP. NET Ajax Toolkit controls. This one should be used in any ASPX page that contains controls from the ASP. NET Ajax Toolkit.
•  The TabContainercontrol enables you to group information into tabs that are displayed only if they’re selected. To add a tab, open the TabContainer Tasks smart-tag menu and select Add Tab Panel. This adds a TabPanelobject—representing a tab—to the TabContainer.
•  The UpdatePanelcontrol eliminates full-page refreshes by isolating a section of a page for a par-tial-page update.
•  To specify when an UpdatePanelshould update, you need to define an UpdatePanel trigger. Se-lect the UpdatePanel, then click the ellipsis button next to the control’s Triggersproperty in the Properties window. In the UpdatePanelTrigger Collection dialog that appears, click Add to add an AsyncPostBackTrigger. Set the ControlIDproperty to the control that triggers the update and the EventNameproperty to the event that is generated when the user interacts with the control.
Self-ReviewExercises   787


•  Several controls in the Ajax Control Toolkit are extenders—components that enhance the func-tionality of regular ASP.NET controls.
•  ValidatorCalloutExtendercontrols enhance the ASP.NET validation controls by displaying er-ror messages in small yellow callouts next to the input fields, rather than as text in the page.
•  You can create a ValidatorCalloutExtenderby opening any validator control’s smart-tag menu and clicking Add Extender… to display the Extender Wizard dialog. Next, choose ValidatorCall-outExtenderfrom the list of available extenders.


Self-Review Exercises
21.1	State whether each of the following is true or false. If false, explain why.
a)  An access rule grants or denies access to a particular directory fora specific useror group of users.
b)  When using controls from the Ajax Control Toolkit, you must include the ScriptMan-agercontrol at the top of the ASPX page.
c)   A master page is like a base class in a visual inheritance hierarchy, and content pages are like derived classes.
d)  A GridViewautomatically enables sorting and paging of its contents.
e)   Ajax web applications make synchronous requests and wait for responses.
21.2	Fill in the blanks in each of the following statements:
a)  A(n)	defines common GUI elements that are inherited by each page in a set of                 .
b)  The main difference between a traditional web application and an Ajax web application is that the latter supports	requests.
c)   The	template is a starter kit for a small multi-page website that uses Micro-soft’s recommended practices for organizing a website and separating the website’s style (look-and-feel) from its content.
d)  The	allows you to configure various options that determine how your appli-cation behaves.
e)   A LinqDataSource’s	event occurs every time the LinqDataSourceselects data from its data context, and can be used to implement custom Selectqueries against the data context.
f)   Setting a DropDownList’s	property to Trueindicates that a postback occurs each time the user selects an item in the DropDownList.
g)  Several controls in the Ajax Control Toolkit are	—components that enhance the functionality of regular ASP.NET controls.


Answers to Self-Review Exercises
21.1	a) True. b) False. The ToolkitScriptManagercontrol must be used for controls from the Ajax Control Toolkit. The ScriptManagercontrol can be used only for the controls in the Toolbox’s AJAX Extensions tab. c) True. d) False. Checking Enable Sorting in the GridView Tasks smart-tag menu changes the column headings in the GridViewto hyperlinks that allow users to sort the data in the GridView. Checking Enable Paging in the GridView Tasks smart-tag menu causes the GridView to split across multiple pages. e) False. That is what traditional web applications do. Ajax web appli-cations can make asynchronous requests and do not need to wait for responses.
21.2	a) master page, content pages. b) asynchronous. c) ASP.NET Web Site. d) Web Site Adminis-tration Tool. e) Selecting. f) AutoPostBack. g) extenders.
788	Chapter21 WebAppDevelopmentwithASP.NETinC#:ADeeperLook


Exercises
21.3	(Guestbook Application Modification) Add Ajax functionality to the Guestbookapplication in Exercise 20.5. Use control extenders to display error callouts when one of the user input fields is invalid.
21.4	(Guestbook Application Modification) Modify the Guestbookapplication in Exercise 21.3 to use a UpdatePanelso only the GridViewupdates when the user submits the form. Because only the UpdatePanelwill be updated, you cannot clear the user input fields in the Submit button’s Click event, so you can remove this functionality.
21.5	(Session Tracking Modification) Use the ASP.NET Web Site template thatyou learned about in this chapter to reimplement the session tracking example in Exercise 20.7.
WebServicesinC#	22
A client is to me a mere unit, a factor in a problem.
—Sir Arthur Conan Doyle

...ifthesimplestthingsofnature have a message that you understand, rejoice, for your soul is alive.
—Eleonora Duse


Objectives Inthischapteryou’lllearn:
ÿ   HowtocreateWCFweb
services.
ÿ   HowXML,JSON,XML-Based SimpleObjectAccess Protocol(SOAP)and RepresentationalState TransferArchitecture(REST)
enableWCFwebservices.
ÿ   Theelementsthatcomprise WCFwebservices,suchas servicereferences,service endpoints,servicecontracts
andservicebindings.
ÿ   Howtocreateaclientthat consumesaWCFweb
service.
ÿ   HowtouseWCFweb serviceswithWindowsand
webapplications.
ÿ   Howtousesessiontracking inWCFwebservicesto maintainstateinformation
fortheclient.
ÿ   Howtopassuser-defined
typestoaWCFwebservice.
790	Chapter22 WebServicesinC#



22.1  Introduction
22.2  WCFServicesBasics
22.3  SimpleObjectAccessProtocol (SOAP)
22.4  RepresentationalStateTransfer (REST)
22.5  JavaScriptObjectNotation(JSON) 22.6  PublishingandConsumingSOAP-
BasedWCFWebServices
22.6.1 CreatingaWCFWebService
22.6.2 Codeforthe WelcomeSOAPXMLService
22.6.3 BuildingaSOAPWCFWebService
22.6.4 Deployingthe WelcomeSOAPXMLService
22.6.5 CreatingaClienttoConsumethe WelcomeSOAPXMLService
22.6.6 Consumingthe WelcomeSOAPXMLService
22.7  PublishingandConsumingREST-BasedXMLWebServices
22.7.1 HTTPgetandpostRequests
22.7.2 CreatingaREST-BasedXMLWCF
WebService
22.7.3 ConsumingaREST-BasedXMLWCF
WebService
22.8  PublishingandConsumingREST-BasedJSONWebServices


22.8.1 CreatingaREST-BasedJSONWCF
WebService
22.8.2 ConsumingaREST-BasedJSONWCF
WebService
22.9  BlackjackWebService: Using SessionTrackinginaSOAP-Based WCFWebService
22.9.1 CreatingaBlackjackWebService
22.9.2 ConsumingtheBlackjackWeb
Service
22.10  AirlineReservationWebService: DatabaseAccessandInvokinga ServicefromASP.NET
22.11  EquationGenerator:ReturningUser-DefinedTypes
22.11.1 CreatingtheREST-BasedXML
EquationGeneratorWebService
22.11.2 ConsumingtheREST-BasedXML
EquationGeneratorWebService
22.11.3 CreatingtheREST-BasedJSONWCF
EquationGeneratorWebService
22.11.4 ConsumingtheREST-BasedJSON WCFEquationGeneratorWeb
Service 22.12  WebResources


Summary | Self-Review Exercises | Answers to Self-Review Exercises | Exercises


22.1 Introduction
This chapter introduces Windows Communication Foundation (WCF) services. WCF is a set of technologies for building distributed systems in which system components com-municate with one another over networks. In earlier versions of .NET, the various types of communication used different technologies and programming models. WCF uses a common framework for all communication between systems, so you need to learn only one programming model to use WCF.
ThischapterfocusesonWCFwebservices,whichpromotesoftwarereusabilityin dis-tributed systems that typically execute across the Internet. A web service is a class that allows its methods to be called by methods on other machines via common data formats andprotocols,suchasXML,JSON(Section 22.5)andHTTP.In.NET,theover-the-net-work method calls are commonly implemented through Simple Object Access Protocol (SOAP) or the Representational State Transfer (REST) architecture. SOAP is an XML-based protocol describing how to mark up requests and responses so that they can be sent via protocolssuchas HTTP. SOAPusesa standardizedXML-basedformat toenclosedata in a message that can be sent between a client and a server. REST is a network architecture
22.2 WCFServicesBasics   791


thatusestheweb’straditionalrequest/responsemechanismssuchasGETandPOSTrequests. REST-based systems do not require data to be wrapped in a special message format.
We build the WCF web services presented in this chapter in Visual Web Developer 2010Express,andwecreateclientapplicationsthatinvoketheseservicesusingbothVisual C# 2010 Express and Visual Web Developer 2010 Express. Full versions of Visual Studio 2010 include the functionality of both Express editions.
Requests to and responses from web services created with Visual Web Developer are typically transmitted via SOAP or REST, so any client capable of generating and pro-cessingSOAPorRESTmessagescaninteractwithawebservice,regardlessofthelanguage in which the web service is written. We say more about SOAP and REST in Section 22.3 and Section 22.4, respectively.

22.2 WCF Services Basics
Microsoft’s Windows Communication Foundation (WCF) was created as a single plat-form to encompass many existing communication technologies. WCF increases produc-tivity,becauseyoulearnonlyonestraightforwardprogrammingmodel.EachWCFservice has three key components—addresses, bindings and contracts (usually called the ABCs of a WCF service):
•	 An address represents the service’s location (also known as its endpoint), which includes the protocol (for example, HTTP) and network address (for example, www.deitel.com) used to access the service.
•	A binding specifies how a client communicates with the service (for example, SOAP, REST, and so on). Bindings can also specify other options, such as secu-rity constraints.
•	A contract is an interface representing the service’s methods and their return types. The service’s contract allows clients to interact with the service.
The machine on which the web service resides is referred to as a web service host. The client application that accesses the web service sends a method call over a network to the web service host, which processes the call and returns a response over the network to the application. This kind of distributed computing benefits systems in various ways. For example, an application without direct access to data on another system might be able to retrieve this data via a web service. Similarly, an application lacking the processing power necessary to perform specific computations could use a web service to take advantage of another system’s superior resources.

22.3 Simple Object Access Protocol (SOAP)
The Simple Object Access Protocol (SOAP) is a platform-independent protocol that uses XML to make remote procedure calls, typically over HTTP. Each request and response is packaged in a SOAP message—an XML message containing the information that a web service requires to process the message. SOAP messages are written in XML so that they’re computer readable, human readable and platform independent. Most firewalls—security barriers  that  restrict  communication  among  networks—allow  HTTP  traffic  to  pass through, so that clients can browse the Internet by sending requests to and receiving re-
792	Chapter22 WebServicesinC#


sponses from web servers. Thus, SOAP-based services can send and receive SOAP mes-sages over HTTP connections with few limitations.
SOAP supports an extensive set of types. The wire format used to transmit requests and responses must support all types passed between the applications. SOAP types include theprimitivetypes (forexample, int), as wellas DateTime, XmlNodeandothers. SOAPcan also transmit arrays of these types. In Section 22.11, you’ll see that you can also transmit user-defined types in SOAP messages.
WhenaprograminvokesamethodofaSOAPwebservice,therequestandallrelevant information are packaged in a SOAP message enclosed in a SOAP envelope and sent to the server on which the web service resides. When the web service receives this SOAP mes-sage, it parses the XML representing the message, then processes the message’s contents. The message specifies the method that the client wishes to execute and the arguments the client passed to that method. Next, the web service calls the method with the specified arguments (if any) and sends the response back to the client in another SOAP message. The client parses the response to retrieve the method’s result. In Section 22.6, you’ll build and consume a basic SOAP web service.


22.4 Representational State Transfer (REST)
Representational State Transfer (REST) refers to an architectural style for implementing web services. Such web services are often called RESTful web services. Though REST it-self is not a standard, RESTful web services are implemented using web standards. Each operation in a RESTful web service is identified by a unique URL. Thus, when the server receives a request, it immediately knows what operation to perform. Such web services can be used in a program or directly from a web browser. The results of a particular operation may be cached locally by the browser when the service is invoked with a GETrequest. This can make subsequent requests for the same operation faster by loading the result directly from the browser’s cache. Amazon’s web services (aws.amazon.com) are RESTful, as are many others.
RESTful web services are alternatives to those implemented with SOAP. Unlike SOAP-based web services, the request and response of REST services are not wrapped in envelopes. REST is also not limited to returning data in XML format. It can use a variety of formats, such as XML, JSON, HTML, plain text and media files. In Sections 22.7– 22.8, you’ll build and consume basic RESTful web services.


22.5 JavaScript Object Notation (JSON)
JavaScriptObjectNotation (JSON)isanalternativetoXML forrepresentingdata.JSON is a text-based data-interchange format used to represent objects in JavaScript as collec-tions of name/value pairs represented as Strings. It is commonly used in Ajax applica-tions.JSONisasimpleformatthatmakesobjectseasytoread,createandparse,andallows programs to transmit data efficiently across the Internet because it is much less verbose than XML. Each JSON object is represented as a list of property names and values con-tained in curly braces, in the following format:

{ propertyName1  : value1, propertyName2 : value2  }
22.6 PublishingandConsumingSOAP-BasedWCFWebServices   793


Arrays are represented in JSON with square brackets in the following format:

[ value1, value2, value3  ]
Each value in an array can be a string, a number, a JSON object, true, falseor null. To appreciate the simplicity of JSON data, examine this representation of an array of address-book entries

[ { first: 'Cheryl', last: 'Black' }, { first: 'James', last: 'Blue' }, { first: 'Mike', last: 'Brown' },
{ first: 'Meg', last: 'Gold' } ]
Many programming languages now support the JSON data format.


22.6 Publishing and Consuming SOAP-Based WCF Web
Services
This section presents our first example of publishing (enabling for client access) and con-suming (using) a web service. We begin with a SOAP-based web service.

22.6.1 Creating a WCF Web Service
To build a SOAP-based WCF web service in Visual Web Developer, you first create a project of type WCF Service. SOAP is the default protocol for WCF web services, so no specialconfiguration is requiredtocreatethem. VisualWebDeveloperthen generatesfiles for the WCF service code, an SVC file (Service.svc, which provides access to the ser-vice), and a Web.configfile (which specifies the service’s binding and behavior).
Visual Web Developer also generates code files for the WCF service class and any other code that is part of the WCF service implementation. In the service class, you define the methods that your WCF web service makes available to client applications.

22.6.2 Code for the WelcomeSOAPXMLService
Figures 22.1 and 22.2 present the code-behind files for the WelcomeSOAPXMLService WCF web service that you’ll build in Section 22.6.3. When creating services in Visual WebDeveloper,youworkalmostexclusivelyinthecode-behindfiles.Theserviceprovides a method that takes a name (represented as a string) as an argument and appends it to the welcome message that is returned to the client. We use a parameter in the method def-inition to demonstrate that a client can send data to a web service.
Figure 22.1 is the service’s interface, which describes the service’s contract—the set of methods and properties the client uses to access the service. The ServiceContractattri-bute (line 6) exposes a class that implements this interface as a WCF web service. The OperationContractattribute (line 10) exposes the Welcomemethod to clients for remote calls.Optionalparameterscanbeassignedtothesecontractstochangethedataformatand method behavior, as we’ll show in later examples.
Figure 22.2 defines the class that implements the interface declared as the Service-Contract.Lines7–12definethemethodWelcome, whichreturnsa stringwelcomingyou to WCF web services. Next, we build the web service from scratch.
794	Chapter22 WebServicesinC#


1  // Fig. 22.1: IWelcomeSOAPXMLService.cs
2  // WCF web service interface that returns a welcome message through SOAP 3  // protocol and XML data format.
4  using System.ServiceModel; 5
6  [ServiceContract]
7  public interface IWelcomeSOAPXMLService 8  {
9	// returns a welcome message 10	[OperationContract]
11	string Welcome( string yourName );
12  } // end interface IWelcomeSOAPXMLService

Fig. 22.1  | WCFweb-serviceinterfacethatreturnsawelcomemessagethroughSOAPprotocol andXMLformat.

1  // Fig. 22.2: WelcomeSOAPXMLService.cs
2  // WCF web service that returns a welcome message using SOAP protocol and 3  // XML data format.
4  public class WelcomeSOAPXMLService : IWelcomeSOAPXMLService 5  {
6	// returns a welcome message
7	public string Welcome( string yourName ) 8	{
9	return string.Format(
10	"Welcome to WCF Web Services with SOAP and XML, {0}!", 11	yourName );
12	} // end method Welcome
13  } // end class WelcomeSOAPXMLService

Fig. 22.2  | WCFwebservicethatreturnsawelcomemessagethroughtheSOAPprotocoland XMLformat.

22.6.3 Building a SOAP WCF Web Service
In the following steps, you create a WCF Service project for the WelcomeSOAPXMLService and test it using the built-in ASP.NET Development Server that comes with Visual Web Developer Express and Visual Studio.

Step 1: Creating the Project
To create a project of type WCF Service, select File > New Web Site… to display the New Web Site dialog (Fig. 22.3). Select the WCF Service template. Select File System from the Location drop-down list to indicate that the files should be placed on your local hard disk. By default, Visual Web Developer places files on the local machine in a directory named WCFService1. Rename this folder to WelcomeSOAPXMLService. We modified the default path as well. Click OK to create the project.

Step 2: Examining the Newly Created Project
After you create the project, the code-behind file Service.cs, which contains code for a simple web service, is displayed by default. If the code-behind file is not open, open it by double clicking the file in the App_Code directory listed in the Solution Explorer. By
22.6 PublishingandConsumingSOAP-BasedWCFWebServices   795




















Fig. 22.3  | CreatingaWCF Service inVisualWebDeveloper.

default, a new code-behind file implements an interface named IService. This interface (in the file IService.cs) is marked with the ServiceContractand OperationContract attributes. In addition, the IService.csfile defines a class named CompositeTypewith a DataContractattribute (discussed in Section 22.8). The interface contains two sample service methods named GetDataand GetDataUsingContract. The Service.cscontains the code that defines these methods.

Step 3: Modifying and Renaming the Code-Behind File
To create the WelcomeSOAPXMLServiceservice developed in this section, modify ISer-vice.csand Service.csby replacing the sample code provided by Visual Web Develop-er with the code from the IWelcomeSOAPXMLServiceand WelcomeSOAPXMLServicefiles (Figs. 22.1and22.2,respectively).Thenrenamethefilesto IWelcomeSOAPXMLService.cs and WelcomeSOAPXMLService.csby right clicking each file in the Solution Explorer and choosing Rename.

Step 4: Examining the SVC File
The Service.svcfile, when accessed through a web browser, provides information about the web service. However, if you open the SVC file on disk, it contains only

<%@ ServiceHost Language="C#" Debug="true" Service="Service" CodeBehind="~/App_Code/Service.cs" %>
to indicate the programming language in which the web service’s code-behind file is writ-ten, the Debugattribute (enables a page to be compiled for debugging), the name of the service and the code-behind file’s location. When you request the SVC page in a web browser, WCF uses this information to dynamically generate the WSDL document.
796	Chapter22 WebServicesinC#


Step 5: Modifying the SVC File
If you change the code-behind file name or the class name that defines the web service, you must modify the SVC file accordingly. Thus, after defining class WelcomeSOAPXMLService in the code-behind file WelcomeSOAPXMLService.cs, modify the SVC file as follows:

<%@ ServiceHost Language="C#" Debug="true" Service="WelcomeSOAPXMLService" CodeBehind="~/App_Code/WelcomeSOAPXMLService.cs" %>

22.6.4 Deploying the WelcomeSOAPXMLService
You can choose Build Web Site from the Build menu to ensure that the web service com-piles without errors. You can also test the web service directly from Visual Web Developer by selecting Start Debugging from the Debug menu. The first time you do this, the Debug-gingNotEnabled dialogappears.ClickOK if you wantto enabledebugging.Next,abrows-er  window  opens  and  displays  information  about  the  service.  This  information  is generated dynamically when the SVC file is requested. Figure 22.4 shows a web browser displaying the Service.svcfile for the WelcomeSOAPXMLServiceWCF web service.





























Fig. 22.4  | SVCfilerenderedinawebbrowser.
22.6 PublishingandConsumingSOAP-BasedWCFWebServices   797


Once the service is running, you can also access the SVC page from your browser by typing a URL of the following form in a web browser:

http://localhost:portNumber/virtualPath/Service.svc
(See the actual URL in Fig. 22.4.) By default, the ASP.NET Development Server assigns a random port number to each website it hosts. You can change this behavior by going to the Solution Explorer and clicking on the project name to view the Properties window (Fig. 22.5). Set the Use dynamic ports property to False and set the Port number property to the port number that you want to use, which can be any unused TCP port. Generally, you don’t do this for web services that will be deployed to a real web server. You can also change the service’s virtual path, perhaps to make the path shorter or more readable.












Fig. 22.5  | WCFwebserviceProperties window.

Web Services Description Language
To consume a web service, a client must determine the service’s functionality and how to use it. For this purpose, web services normally contain a service description. This is an XML document that conforms to the Web Service Description Language (WSDL)—an XML vocabulary that defines the methods a web service makes available and how clients interact with them. The WSDL document also specifies lower-level information that cli-ents might need, such as the required formats for requests and responses.
WSDL documents help applications determine how to interact with the web services described in the documents. When viewed in a web browser, an SVC file presents a link to the service’s WSDL document and information on using the utility svcutil.exeto generate test console applications. The svcutil.exetool is included with Visual Studio 2010 and Visual Web Developer. We do not use svcutil.exeto test our services, opting instead to build our own test applications. When a client requests the SVC file’s URL fol-lowed by ?wsdl, the server autogenerates the WSDL that describes the web service and returns the WSDL document. Copy the SVC URL (which ends with .svc) from the browser’s address field in Fig. 22.4, as you’ll need it in the next section to build the client application. Also, leave the web service running so the client can interact with it.

22.6.5 Creating a Client to Consume the WelcomeSOAPXMLService
Now that you’ve defined and deployed the web service, let’s consume it from a client ap-plication. A .NET web-service client can be any type of .NET application, such as a Win-
798	Chapter22 WebServicesinC#


dows application, a console application or a web application. You can enable a client application  to  consume  a  web  service  by  adding  a  service  reference  to  the  client. Figure 22.6 diagrams the parts of a client for a SOAP-based web service after a service ref-erence has been added. [Note: This section discusses building a client application in Visual C# 2010 Express, but the discussion also applies to Visual Web Developer 2010 Express.]


Client
Clientcode (webservice
consumer)





Servicereference



Proxy
class


WSDL
copy




Fig. 22.6  | .NETWCFweb-serviceclientafteraweb-servicereferencehasbeenadded.

An application that consumes a SOAP-based web service actually consists of two parts—a proxy class representing the web service and a client application that accesses the webservicevia a proxy object (that is, an instance oftheproxy class). Aproxy classhandles all the “plumbing” required for service method calls (that is, the networking details and the formation of SOAP messages). Whenever the client application calls a web service’s method, the application actually calls a corresponding method in the proxy class. This methodhasthesamenameandparametersasthewebservice’smethodthatisbeingcalled, but formats the call to be sent as a request in a SOAP message. The web service receives this request as a SOAP message, executes the method call and sends back the result as another SOAP message. When the client application receives the SOAP message con-taining the response, the proxy class deserializes it and returns the results as the return value of the web-service method that was called. Figure 22.7 depicts the interactions among the client code, proxy class and web service. The proxy class is not shown in the project unless you click the Show All Files button in the Solution Explorer.


Client


Client
code


Proxy
object


Network

SOAP web
service



Fig. 22.7  | Interactionbetweenaweb-serviceclientandaSOAPwebservice.
22.6 PublishingandConsumingSOAP-BasedWCFWebServices   799


Many aspects of web-service creation and consumption—such as generating WSDL filesandproxyclasses—arehandledbyVisualWebDeveloper,VisualC#2010andWCF. Although developers are relieved of the tedious process of creating these files, they can still modify the files if necessary. This is required only when developing advanced web ser-vices—none of our examples require modifications to these files.
We now create a client and generate a proxy class that allows the client to access the WelcomeSOAPXMLService web service. First create a Windows application named Wel-comeSOAPXMLClientin Visual C# 2010, then perform the following steps.

Step 1: Opening the Add Service Reference Dialog
Right click the project name in the Solution Explorer and select Add Service Reference… to display the Add Service Reference dialog.

Step 2: Specifying the Web Service’s Location
In the dialog, enter the URL of WelcomeSOAPXMLService’s .svcfile (that is, the URL you copiedfrom Fig. 22.4) in the Address field and click Go. When you specify the service you wantto consume, theIDEaccesses theweb service’sWSDL information andcopiesitinto a WSDL file that is stored in the client project’s ServiceReferencesfolder. This file is visible when you view all of your project’s files in the Solution Explorer. [Note: A copy of theWSDLfileprovidestheclientapplicationwithlocalaccesstothewebservice’sdescrip-tion. To ensure that the WSDL file is up to date, Visual C# 2010 provides an Update Ser-vice Reference option (available by right clicking the service reference in the Solution Explorer), which updates the files in the ServiceReferencesfolder.]
Many companies that provide web services simply distribute the exact URLs at which their web services can be accessed. The Add Service Reference dialog also allows you to search for services on your local machine or on the Internet.

Step 3: Renaming the Service Reference’s Namespace
IntheAddServiceReference dialog,renametheservicereference’snamespacebychanging the Namespace field to ServiceReference.

Step 4: Adding the Service Reference
Click the Ok button to add the service reference.

Step 5: Viewing the Service Reference in the Solution Explorer
The Solution Explorer should now contain a Service References folder with a node show-ing the namespace you specified in Step 3.

22.6.6 Consuming the WelcomeSOAPXMLService
Figure 22.8 uses the WelcomeSOAPXMLServiceservice to send a welcome message. You are already familiar with Visual C# applications that use Labels, TextBoxes and Buttons, so we focus our discussions on the web-services concepts in this chapter’s applications.
Line 11 defines a new ServiceReference.WelcomeSOAPXMLServiceClient proxy object named client. The event handler uses this object to call methods of the Welcome-SOAPXMLServiceweb service. Line 22 invokes the WelcomeSOAPXMLServiceweb service’s Welcomemethod. The call is made via the local proxy object client, which then commu-nicates with the web service on the client’s behalf. If you’re using the downloaded exam-
800	Chapter22 WebServicesinC#


1  // Fig. 22.8: WelcomeSOAPXML.cs
2  // Client that consumes the WelcomeSOAPXMLService. 3  using System;
4  using System.Windows.Forms; 5
6  namespace WelcomeSOAPXMLClient 7  {
8	public partial class WelcomeSOAPXML : Form 9	{
10	// declare a reference to web service
11	private ServiceReference.WelcomeSOAPXMLServiceClient client; 12
13	public WelcomeSOAPXML() 14	{
15	InitializeComponent();
16	client = new ServiceReference.WelcomeSOAPXMLServiceClient(); 17         } // end constructor
18
19	// creates welcome message from text input and web service 20	private void submitButton_Click( object sender, EventArgs e ) 21	{
22	MessageBox.Show( client.Welcome( textBox.Text ), "Welcome" ); 23         } // end method submitButton_Click
24	} // end class WelcomeSOAPXML
25  } // end namespace WelcomeSOAPXMLClient

a)Userinputsnameand clicksSubmit tosendit tothewebservice



b)Messagereturnedby thewebservice






Fig. 22.8  | ClientthatconsumestheWelcomeSOAPXMLService.


ples from this chapter, you may need to regenerate the proxy by removing the service reference,thenaddingitagain,becauseASP.NETDevelopmentServermayuseadifferent port number on your computer. To do so, right click ServiceReferencein the Service References folder in the Solution Explorer and select option Delete. Then follow the instructions in Section 22.6.5 to add the service reference to the project.
When the application runs, enter your name and click the Submit button. The appli-cation invokes the Welcomeservice method to perform the appropriate task and return the result, then displays the result in a MessageBox.
22.7 PublishingandConsumingREST-BasedXMLWebServices   801

22.7 Publishing and Consuming REST-Based XML Web
Services
Intheprevioussection,weusedaproxyobjecttopassdatatoandfromaWCFwebservice using the SOAP protocol. In this section, we access a WCF web service using the REST architecture. We modify the IWelcomeSOAPXMLServiceexample to return data in plain XML format. You can create a WCF Service project as you did in Section 22.6 to begin.

22.7.1 HTTP getand postRequests
The two most common HTTP request types (also known as request methods) are get and post. A getrequest typically gets (or retrieves) information from a server. Common uses of getrequests are to retrieve a document or an image, or to fetch search results based on a user-submitted search term. A postrequest typically posts (or sends) data to a server. Common uses of postrequests are to send form data or documents to a server.
An HTTP request often posts data to a server-side form handler that processes the data. For example, when a user performsa search orparticipates in a web-basedsurvey, the web server receives the information specified in the XHTML form as part of the request. Both types of requests can be used to send form data to a web server, yet each request type sends the information differently.
A getrequest sends information to the server in the URL. For example, in the fol-lowing URL

www.google.com/search?q=deitel
searchis the name of Google’s server-side form handler, qis the nameof a variable in Google’s search form and deitelis the search term. A ?separates the query string from the rest of the URL in a request. A name/value pair is passed to the server with the name and the value separated by an equals sign (=). If more than one name/value pair is submit-ted, each pair is separated by an ampersand (&). The server uses data passed in a query string to retrieve an appropriate resource from the server. The server then sends aresponse to the client. A getrequest may be initiated by submitting an XHTML form whose meth-odattribute is set to "get", or by typing the URL (possibly containing a query string) di-rectly into the browser’s address bar.
A postrequest sends form data as part of the HTTP message, not as part of the URL. A getrequest typically limits the query string (that is, everything to the right of the ?) to a specific number of characters. For example, Internet Explorer restricts the entire URL to no more than 2083 characters. Typically, large amounts of information should be sent using the postmethod. The postmethod is also sometimes preferred because it hides the submitted data from the user by embedding it in an HTTP message. If a form submits hidden input values along with user-submitted data, the postmethod might generate a URL like www.searchengine.com/search. The form data still reaches the server for pro-cessing, but the user does not see the exact information sent.

22.7.2 Creating a REST-Based XML WCF Web Service
Step 1: Adding the WebGet Attribute
IWelcomeRESTXMLService interface (Fig. 22.9) is a modified version of the IWelcome-SOAPXMLServiceinterface. The Welcomemethod’s WebGetattribute (line 12) maps a meth-
802	Chapter22 WebServicesinC#


od to a unique URL that can be accessed via an HTTP getoperation programmatically or in a web browser. To use the WebGetattribute, we import the System.ServiceModel.Web namespace (line 5). WebGet’s UriTemplateproperty (line 12) specifies the URI format that is used to invoke the method. You can access the Welcomemethod in a web browser by ap-pending text that matches the UriTemplatedefinition to the end of the service’s location, as in http://localhost:portNumber/WelcomeRESTXMLService/Service.svc/welcome/ Paul. WelcomeRESTXMLService(Fig. 22.10) is the class that implements the IWelcome-RESTXMLServiceinterface; it is similar to the WelcomeSOAPXMLServiceclass (Fig. 22.2).


1  // Fig. 22.9: IWelcomeRESTXMLService.cs
2  // WCF web service interface. A class that implements this interface
3  // returns a welcome message through REST architecture and XML data format 4  using System.ServiceModel;
5  using System.ServiceModel.Web; 6
7  [ServiceContract]
8  public interface IWelcomeRESTXMLService 9  {
10	// returns a welcome message 11	[OperationContract]
12	[WebGet( UriTemplate = "/welcome/{yourName}" )] 13	string Welcome( string yourName );
14  } // end interface IWelcomeRESTXMLService

Fig. 22.9  | WCFweb-serviceinterface.Aclassthatimplementsthisinterfacereturnsawelcome messagethroughRESTarchitectureandXMLdataformat.


1  // Fig. 22.10: WelcomeRESTXMLService.cs
2  // WCF web service that returns a welcome message using REST architecture 3  // and XML data format.
4  public class WelcomeRESTXMLService : IWelcomeRESTXMLService 5  {
6	// returns a welcome message
7	public string Welcome( string yourName ) 8	{
9	return string.Format( "Welcome to WCF Web Services" 10            + " with REST and XML, {0}!", yourName );
11	} // end method Welcome
12  } // end class WelcomeRESTXMLService

Fig. 22.10 | WCFwebservicethatreturnsawelcomemessageusingRESTarchitectureand XMLdataformat.


Step 2: Modifying the Web.configFile
Figure 22.11showspartofthedefaultWeb.configfilemodifiedtouseRESTarchitecture. The endpointBehaviorselement (lines 16–20) in the behaviorselement indicates that this web service endpoint will be accessed using the web programming model (REST).
22.7 PublishingandConsumingREST-BasedXMLWebServices   803


The nested webHttpelement specifies that clients communicate with this service using the standard HTTP request/response mechanism. The protocolMappingelement (lines 22– 24) in the system.serviceModelelement, changes the default protocol for communicat-ing with this web service (normally SOAP) to webHttpBinding, which is used for REST-based HTTP requests.


1  <system.serviceModel> 2	<behaviors>
3	<serviceBehaviors> 4            <behavior>
5	<!-- To avoid disclosing metadata information, set the 6                  value below to false and remove the metadata
7	endpoint above before deployment --> 8               <serviceMetadata httpGetEnabled="true"/>
9	<!-- To receive exception details in faults for debugging 10                  purposes, set the value below to true.  Set to false 11                  before deployment to avoid disclosing exception
12	information -->
13	<serviceDebug includeExceptionDetailInFaults="false"/> 14            </behavior>
15	</serviceBehaviors> 16	<endpointBehaviors> 17            <behavior>
18	<webHttp/> 19            </behavior>
20	</endpointBehaviors> 21     </behaviors>
22	<protocolMapping>
23	<add scheme="http" binding="webHttpBinding"/> 24     </protocolMapping>
25	<serviceHostingEnvironment multipleSiteBindingsEnabled="true"/>
26  </system.serviceModel>

Fig. 22.11 | WelcomeRESTXMLServiceWeb.configfile.

Figure 22.12 tests the WelcomeRESTXMLService’s Welcomemethod in a web browser. The URL specifies the location of the Service.svcfile and uses the URI template to invoke method Welcomewith the argument Bruce. The browser displays the XML data response from WelcomeRESTXMLService. Next, you’ll learn how to consume this service.









Fig. 22.12 | ResponsefromWelcomeRESTXMLServiceinXMLdataformat.
804	Chapter22 WebServicesinC#


22.7.3 Consuming a REST-Based XML WCF Web Service
Class WelcomeRESTXML (Fig. 22.13) uses the System.Net namespace’s WebClient class (line 13) to invoke the web service and receive its response. In lines 23–25, we register a handler for the WebClient’s DownloadStringCompletedevent.


1  // Fig. 22.13: WelcomeRESTXML.cs
2  // Client that consumes the WelcomeRESTXMLService. 3  using System;
4  using System.Net;
5  using System.Windows.Forms; 6  using System.Xml.Linq;
7
8  namespace WelcomeRESTXMLClient 9  {
10	public partial class WelcomeRESTXML : Form 11	{
12	// object to invoke the WelcomeRESTXMLService 13	private WebClient client = new WebClient(); 14
15	private XNamespace xmlNamespace = XNamespace.Get(
16	"http://schemas.microsoft.com/2003/10/Serialization/" ); 17
18	public WelcomeRESTXML() 19	{
20	InitializeComponent(); 21
22	// add DownloadStringCompleted event handler to WebClient 23	client.DownloadStringCompleted +=
24	new DownloadStringCompletedEventHandler( 25	client_DownloadStringCompleted );
26	} // end constructor 27
28	// get user input and pass it to the web service
29	private void submitButton_Click( object sender, EventArgs e ) 30	{
31	// send request to WelcomeRESTXMLService 32	client.DownloadStringAsync( new Uri(
33	"http://localhost:49429/WelcomeRESTXMLService/Service.svc/" + 34	"welcome/" + textBox.Text ) );
35	} // end method submitButton_Click 36
37	// process web service response
38	private void client_DownloadStringCompleted(
39	object sender, DownloadStringCompletedEventArgs e ) 40         {
41	// check if any error occurred in retrieving service data 42	if ( e.Error == null )
43	{
44	// parse the returned XML string (e.Result)
45	XDocument xmlResponse = XDocument.Parse( e.Result );
46

Fig. 22.13 | ClientthatconsumestheWelcomeRESTXMLService.(Part1of2.)
22.8 PublishingandConsumingREST-BasedJSONWebServices   805


47	// get the <string> element's value 48	MessageBox.Show( xmlResponse.Element(
49	xmlNamespace + "string" ).Value, "Welcome" ); 50            } // end if
51	} // end method client_DownloadStringCompleted 52     } // end class WelcomeRESTXML
53  } // end namespace WelcomeRESTXMLClient

a)Userinputsname	b)MessagesentfromWelcomeRESTXMLService







Fig. 22.13 | ClientthatconsumestheWelcomeRESTXMLService.(Part2of2.)

Inthisexample,weprocessthe WebClient’s DownloadStringCompletedevent,which occurs when the client receives the completed response from the web service. Lines 32–34 call the clientobject’s DownloadStringAsyncmethod to invoke the web service asyn-chronously. (There’s also a synchronous DownloadStringmethod that does not return until it receives the response.) The method’s argument (i.e., the URL to invoke the web service) must be specified as an object of class Uri. Class Uri’s constructor receives a stringrepresenting a uniform resource identifier. [Note: The URL’s port number must match the one issued to the web service by the ASP.NET Development Server.] When the call to the web service completes, the WebClientobject raises the DownloadStringCom-pletedevent. Its event handler has a parameter eof type DownloadStringCompleted-EventArgswhich contains the information returned by the web service. We can use this variable’s properties to get the returned XML document (e.Result) and any errors that may have occurred during the process (e.Error). We then parse the XML response using XDocument method Parse (line 45). In lines 15–16, we specify the XML message’s namespace (seen in Fig. 22.12), and use it to parse the service’s XML response to display our welcome stringin a MessageBox(lines 48–49).

22.8 Publishing and Consuming REST-Based JSON Web
Services
We now build a RESTful web service that returns data in JSON format.

22.8.1 Creating a REST-Based JSON WCF Web Service
By default, a web-service method with the WebGetattribute returns data in XML format. In Fig. 22.14, we modify the WelcomeRESTXMLServiceto return data in JSON format by set-ting  WebGet’s  ResponseFormat property  to  WebMessageFormat.Json (line  13).  (Web-MessageFormat.XML is the default value.) For JSON serialization to work properly, the objects being converted to JSON must have Publicproperties. This enables the JSON seri-alizationtocreatename/valuepairsrepresentingeachPublicpropertyanditscorresponding
806	Chapter22 WebServicesinC#


value. The previous examples return Stringobjects containing the responses. Even though Stringsareobjects,StringsdonothaveanyPublicpropertiesthatrepresenttheircontents. So, lines 19–25 define a TextMessageclass that encapsulates a Stringvalue and defines a Publicproperty Messageto access that value. The DataContractattribute (line 19) exposes the TextMessageclass to the client access. Similarly, the DataMember attribute (line 23) exposesa property of this class to the client. This property will appear in the JSON object as a name/value pair. Only DataMembers of a DataContractare serialized.


1  // Fig. 22.14: IWelcomeRESTJSONService.cs
2  // WCF web service interface that returns a welcome message through REST 3  // architecture and JSON format.
4  using System.Runtime.Serialization; 5  using System.ServiceModel;
6  using System.ServiceModel.Web; 7
8  [ServiceContract]
9  public interface IWelcomeRESTJSONService 10  {
11	// returns a welcome message 12	[OperationContract]
13	[WebGet( ResponseFormat = WebMessageFormat.Json, 14         UriTemplate = "/welcome/{yourName}" )]
15	TextMessage Welcome( string yourName ); 16  } // end interface IWelcomeRESTJSONService 17
18  // class to encapsulate a string to send in JSON format 19  [DataContract]
20  public class TextMessage 21  {
22	// automatic property message 23	[DataMember]
24	public string Message {get; set; }
25  } // end class TextMessage

Fig. 22.14 | WCFweb-serviceinterfacethatreturnsawelcomemessagethroughREST architectureandJSONformat.

Figure 22.15 shows the implementation of the interface of Fig. 22.14. The Welcome method (lines 7–15) returns a TextMessageobject, reflecting the changes we made to the interface class. This object is automatically serialized in JSON format (as a result of line 13 in Fig. 22.14) and sent to the client.


1  // Fig. 22.15: WelcomeRESTJSONService.cs
2  // WCF web service that returns a welcome message through REST 3  // architecture and JSON format.
4  public class WelcomeRESTJSONService : IWelcomeRESTJSONService
5  {

Fig. 22.15 | WCFwebservicethatreturnsawelcomemessagethroughRESTarchitectureand JSONformat.(Part1of2.)
22.8 PublishingandConsumingREST-BasedJSONWebServices   807


6	// returns a welcome message
7	public TextMessage Welcome( string yourName ) 8	{
9	// add welcome message to field of TextMessage object 10	TextMessage message = new TextMessage();
11	message.Message = string.Format(
12	"Welcome to WCF Web Services with REST and JSON, {0}!", 13	yourName );
14	return message;
15	} // end method Welcome
16  } // end class WelcomeRESTJSONService

Fig. 22.15 | WCFwebservicethatreturnsawelcomemessagethroughRESTarchitectureand JSONformat.(Part2of2.)

We can once again test the web service using a web browser, by accessing the Ser-vice.svc file (http://localhost:49745/WelcomeRESTJSONService/Service.svc) and appending the URI template (welcome/yourName) to the address. The response prompts you to download a file called yourName, which is a text file. If you save it to disk, the file will have the .jsonextension. This contains the JSONformatteddata. By opening the file in a text editor such as Notepad (Fig. 22.16), you can see the service response as a JSON object. Notice that the property named Messagehas the welcome message as its value.







Fig. 22.16 | ResponsefromWelcomeRESTJSONServiceinJSONdataformat.


22.8.2 Consuming a REST-Based JSON WCF Web Service
We mentioned earlier that all types passed to and from web services can be supported by REST. Custom types that are sent to or from a REST web service are converted to XML or JSON data format. This process is referred to as XML serialization or JSON serializa-tion, respectively. In Fig. 22.17, we consume the WelcomeRESTJSONServiceservice using an objectoftheSystem.Runtime.Serialization.Jsonlibrary’sDataContractJsonSeri-alizer class (lines 44–45). The TextMessage class (lines 57–61) maps the JSON re-sponse’s  fields  for  the  DataContractJsonSerializer to  deserialize.  We  add  the Serializableattribute (line 57) to the TextMessageclass to recognize it as a valid serial-izable object we can convert to and from JSON format. Also, this class on the client must havepublicdataorpropertiesthatmatchthepublicdataorpropertiesinthecorrespond-ing class from the web service. Since we want to convert the JSON response into a Text-Message object,   we   set   the   DataContractJsonSerializer’s   type   parameter   to TextMessage(line 45). In line 48, we use the System.Textnamespace’s Encoding.Uni-code.GetBytesmethod to convert the JSON response to a Unicode encoded byte array, andencapsulatethebytearrayina MemoryStreamobjectsowecanreaddatafromthearray
808	Chapter22 WebServicesinC#


using stream semantics. The bytes in the MemoryStreamobject are read by the DataCon-tractJsonSerializerand deserialized into a TextMessageobject (lines 47–48).


1  // Fig. 22.17: WelcomeRESTJSONForm.cs
2  // Client that consumes the WelcomeRESTJSONService. 3  using System;
4  using System.IO; 5  using System.Net;
6  using System.Runtime.Serialization.Json; 7  using System.Text;
8  using System.Windows.Forms; 9
10  namespace WelcomeRESTJSONClient 11  {
12	public partial class WelcomeRESTJSONForm : Form 13	{
14	// object to invoke the WelcomeRESTJSONService 15	private WebClient client = new WebClient();
16
17	public WelcomeRESTJSONForm() 18	{
19	InitializeComponent(); 20
21	// add DownloadStringCompleted event handler to WebClient 22	client.DownloadStringCompleted+=
23	new DownloadStringCompletedEventHandler( 24                  client_DownloadStringCompleted );
25	} // end constructor 26
27	// get user input and pass it to the web service
28	private void submitButton_Click( object sender, EventArgs e ) 29	{
30	// send request to WelcomeRESTJSONService 31	client.DownloadStringAsync( new Uri(
32	"http://localhost:49579/WelcomeRESTJSONService/Service.svc/" 33	+ "welcome/" + textBox.Text ) );
34	} // end method submitButton_Click 35
36	// process web service response
37	private void client_DownloadStringCompleted(
38	object sender, DownloadStringCompletedEventArgs e ) 39         {
40	// check if any error occurred in retrieving service data 41	if ( e.Error == null )
42	{
43	// deserialize response into a TextMessage object 44	DataContractJsonSerializer JSONSerializer =
45	new DataContractJsonSerializer( typeof( TextMessage ) ); 46               TextMessage message =
47	( TextMessage ) JSONSerializer.ReadObject( new
48	MemoryStream( Encoding.Unicode.GetBytes( e.Result ) ) );
49

Fig. 22.17 | ClientthatconsumestheWelcomeRESTJSONService.(Part1of2.)
22.9 UsingSessionTrackinginaSOAP-BasedWCFWebService   809


50	// display Message text
51	MessageBox.Show( message.Message, "Welcome" ); 52            } // end if
53	} // end method client_DownloadStringCompleted 54     } // end class WelcomeRESTJSONForm
55
56	// TextMessage class representing a JSON object 57	[Serializable]
58	public class TextMessage 59	{
60	public string Message; 61     } // end class TextMessage
62  } // end namespace WelcomeRESTJSONClient

a)Userinputsname	b)MessagesentfromWelcomeRESTJSONService







Fig. 22.17 | ClientthatconsumestheWelcomeRESTJSONService.(Part2of2.)

22.9 Blackjack Web Service: UsingSessionTrackingina
SOAP-Based WCF Web Service

In Chapter 20, we described the advantages of maintaining information about users to personalize their experiences. In particular, we discussed session tracking using HttpSes-sionStateobjects. Next, we incorporate session tracking into a SOAP-based WCF web service.
Suppose a client application needs to call several methods from the same web service, possibly several times each. In such a case, it can be beneficial for the web service to main-tain state information for the client. Session tracking eliminates the need for information about the client to be passed between the client and the web service multiple times. For example, a web service providing access to local restaurant reviews would benefit from storingtheclientuser’sstreetaddress.Oncetheuser’saddressisstoredinasessionvariable, web service methods can return personalized, localized results without requiring that the address be passed in each method call. This not only improves performance but also requires less effort on your part—less information is passed in each method call.

22.9.1 Creating a Blackjack Web Service
Web services store session information to provide more intuitive functionality. Our next example is a SOAP-based web service that assists programmers in developing a blackjack card game. The web service provides methods to deal a card and to evaluate a hand of cards. After presenting the web service, we use it to serve as the dealer for a game of black-jack. The blackjack web service creates a session variable to maintain a unique deck of cards for each client application. Several clients can use the service at the same time, but
810	Chapter22 WebServicesinC#


method calls made by a specific client use only the deck stored in that client’s session. Our example uses a simple subset of casino blackjack rules:
Two cards each are dealt to the dealer and the player. The player’s cards are dealt face up. Only the dealer’s first card is dealt face up. Each card has a value. A card numbered 2 through 10 is worth its face value. Jacks, queens and kings each count as 10. Aces can count as 1 or 11—whichever value is more beneficial to the player (as we’ll soon see). If the sum of the player’s two initial cards is 21 (that is, the player was dealt a card valued at 10 and an ace, which counts as 11 in this situation), the player has “blackjack” and immediately wins the game. Otherwise, the player can begin taking additional cards one at a time. These cards are dealt face up, and the player decides when to stop taking cards. If the player “busts” (that is, the sum of the player’s cards exceeds 21), the game is over, and the player loses. When the player is satisfied with the current set of cards, the player “stays” (that is, stops taking cards), and the dealer’s hidden card is revealed. If the dealer’s total is 16 or less, the dealer must take another card; otherwise, the dealer must stay. The dealer must continue to take cards until the sum of the dealer’s cards is greater than or equal to 17. If the dealer exceeds 21, the player wins. Otherwise, the hand with the higher point total wins. If the dealer and the player have the same point total, the game is a “push” (that is, a tie), and no one wins.
TheBlackjackWCFwebservice’sinterface(Fig. 22.18) usesaServiceContractwith theSessionModepropertysettoRequired(line5).Thismeanstheservicerequiressessions to execute correctly. By default, the SessionModeproperty is set to Allowed. It can also be set to NotAllowedto disable sessions.

1  // Fig. 22.18: IBlackjackService.cs
2  // Blackjack game WCF web service interface. 3  using System.ServiceModel;
4
5  [ServiceContract( SessionMode = SessionMode.Required )] 6  public interface IBlackjackService
7  {
8	// deals a card that has not been dealt 9	[OperationContract]
10	string DealCard(); 11
12	// creates and shuffle the deck 13	[OperationContract]
14	void Shuffle(); 15
16	// calculates value of a hand 17	[OperationContract]
18	int GetHandValue( string dealt );
19  } // end interface IBlackjackService

Fig. 22.18 | BlackjackgameWCFweb-serviceinterface.

The web-service class (Fig. 22.19) provides methods to deal a card, shuffle the deck and determine the point value of a hand. For this example, we want a separate object of the BlackjackServiceclass to handle each client session, so we can maintain a unique deck for each client. To do this, we must specify this behavior in the ServiceBehavior attribute (line 7). Setting the ServiceBehavior’s InstanceContextMode property to
22.9 UsingSessionTrackinginaSOAP-BasedWCFWebService   811


PerSessioncreatesanewinstanceoftheclassforeachsession.TheInstanceContextMode property can also be set to PerCallor Single. PerCalluses a new object of the web-ser-vice class to handle every method call to the service. Singleuses the same object of the web-service class to handle all calls to the service.

1  // Fig. 22.19: BlackjackService.cs 2  // Blackjack game WCF web service. 3  using System;
4  using System.Collections.Generic; 5  using System.ServiceModel;
6
7  [ServiceBehavior( InstanceContextMode = InstanceContextMode.PerSession )] 8  public class BlackjackService : IBlackjackService
9  {
10	// create persistent session deck of cards object 11	List< string > deck = new List< string >();
12
13	// deals card that has not yet been dealt 14	public string DealCard()
15	{
16	string card = deck[ 0 ]; // get first card 17	deck.RemoveAt( 0 ); // remove card from deck 18	return card;
19	} // end method DealCard 20
21	// creates and shuffles a deck of cards 22	public void Shuffle()
23	{
24	Random randomObject = new Random(); // generates random numbers 25
26	deck.Clear(); // clears deck for new game 27
28	// generate all possible cards
29	for ( int face = 1; face <= 13; face++ ) // loop through faces 30            for ( int suit = 0; suit <= 3; suit++ ) // loop through suits
31	deck.Add( face + " " + suit ); // add card (string) to deck 32
33	// shuffles deck by swapping each card with another card randomly 34	for ( int i = 0; i < deck.Count; i++ )
35	{
36	// get random index
37	int newIndex = randomObject.Next( deck.Count - 1 ); 38
39	// save current card in temporary variable 40	string temporary = deck[ i ];
41	deck[ i ] = deck[ newIndex ]; // copy randomly selected card 42
43	// copy current card back into deck 44	deck[ newIndex ] = temporary;
45	} // end for
46	} // end method Shuffle
47

Fig. 22.19 | BlackjackgameWCFwebservice.(Part1of2.)
812	Chapter22 WebServicesinC#


48	// computes value of hand
49	public int GetHandValue( string dealt ) 50	{
51	// split string containing all cards
52	string[] cards = dealt.Split( '\t' ); // get array of cards 53	int total = 0; // total value of cards in hand
54	int face; // face of the current card
55	int aceCount = 0; // number of aces in hand 56
57	// loop through the cards in the hand 58	foreach ( var card in cards )
59	{
60	// get face of card
61	face = Convert.ToInt32(
62	card.Substring( 0, card.IndexOf( ' ' ) ) ); 63
64	switch ( face ) 65	{
66	case 1: // if ace, increment aceCount 67                  ++aceCount;
68	break;
69	case 11: // if jack add 10 70	case 12: // if queen add 10 71	case 13: // if king add 10 72                  total += 10;
73	break;
74	default: // otherwise, add value of face 75                  total += face;
76	break;
77	} // end switch 78         } // end foreach 79
80	// if there are any aces, calculate optimum total 81	if ( aceCount > 0 )
82	{
83	// if it is possible to count one ace as 11, and the rest 84	// as 1 each, do so; otherwise, count all aces as 1 each 85	if ( total + 11 + aceCount - 1 <= 21 )
86	total += 11 + aceCount - 1; 87            else
88	total += aceCount; 89         } // end if
90
91	return total;
92	} // end method GetHandValue
93  } // end class BlackjackService

Fig. 22.19 | BlackjackgameWCFwebservice.(Part2of2.)


We represent each card as a stringconsisting of a digit (that is, 1–13) representing the card’s face (for example, ace through king), followed by a space and a digit (that is, 0– 3) representing the card’s suit (for example, clubs, diamonds, hearts or spades). For example, the jack of hearts is represented as "112", and the two of clubs as "20". After
22.9 UsingSessionTrackinginaSOAP-BasedWCFWebService   813


deploying the web service, we create a Windows Forms application that uses the Black-jackService’s methods to implement a blackjack game.

Method DealCard
Method DealCard(lines 14–19) removes a card from the deck and sends it to the client. Without using session tracking, the deck of cards would need to be passed back and forth with each method call. Using session state makes the method easy to call (it requires no arguments) and avoids the overhead of sending the deck over the network multiple times. This method manipulates the current user’s deck (the Listof strings defined at line 11). From the user’s deck, DealCardobtains the current top card (line 16), removes the
top card from the deck (line 17) and returns the card’s value as a string(line 18).

Method Shuffle
Method Shuffle(lines 22–46) fills and shuffles the Listrepresenting a deck of cards. Lines 29–31 generate strings in the form "face suit"to represent each card in a deck. Lines 34–45 shuffle the deck by swapping each card with a randomly selected other card.

Method GetHandValue
Method GetHandValue(lines 49–92) determines the total value of cards in a hand by try-ing to attain the highest score possible without going over 21. Recall that an ace can be counted as either 1 or 11, and all face cards count as 10.
Asyou’llseeinFig. 22.20,theclientapplicationmaintainsahandofcardsasastring inwhicheachcardisseparatedbyatabcharacter.Line52ofFig. 22.19tokenizesthehand of cards (represented by dealt) into individual cards by calling stringmethod Splitand passing to it the tab character. Splituses the delimiter characters to separate tokens in the string. Lines 58–78 count the value of each card. Lines 61–62 retrieve the first integer— the face—and use that value in the switchstatement (lines 64–77). If the card is an ace, the method increments variable aceCount(line 67). We discuss how this variable is used shortly. If the card is an 11, 12 or 13 (jack, queen orking), the method adds 10 to the total value of the hand (line 72). If the card is anything else, the method increases the total by that value (line 75).
Because an ace can represent 1 or 11, additional logic is requiredto process aces. Lines 81–89 process the aces after all the other cards. If a hand contains several aces, only one ace can be counted as 11 (if two aces each are counted as 11, the hand would have a losing value of at least 22). The condition in line 85 determines whether counting one ace as 11 and the rest as 1 results in a total that does not exceed 21. If this is possible, line 86 adjusts the total accordingly. Otherwise, line 88 adjusts the total, counting each ace as 1.
Method GetHandValuemaximizes the value of the current cards without exceeding 21. Imagine, for example, that the dealer has a 7 and receives an ace. The new total could beeither8or18.However,GetHandValuealwaysmaximizesthevalueofthecardswithout going over 21, so the new total is 18.

Modifying the web.configFile
To allow this web service to perform session tracking, you must modify the web.config file to include the following element in the system.serviceModelelement:s

<protocolMapping>
<add scheme="http" binding="wsHttpBinding"/> </protocolMapping>
814	Chapter22 WebServicesinC#


22.9.2 Consuming the Blackjack Web Service
We use our blackjack web service in a Windows application (Fig. 22.20). This application uses an instance of BlackjackServiceClient(declared in line 14 and created in line 48) to represent the dealer. The web service keeps track of the cards dealt to the player and the dealer. As in Section 22.6.5, you must add a service reference to your project so it can ac-cess the service. The images for this example are provided with the chapter’s examples.
Each player has 11 PictureBoxes—the maximum number of cards that can be dealt without exceeding 21 (that is, four aces, four twos and three threes). These PictureBoxes are placed in a List(lines 51–73), so we can index the Listduring the game to determine which PictureBoxshould display a particular card image. The images are located in the blackjack_imagesdirectory with this chapter’s examples. Drag this directory from Win-dows Explorer into your project. In the Solution Explorer, select all the files in that folder and set their Copy to Output Directory property to Copy if newer.

GameOverMethod
MethodGameOver(lines169–202)showsanappropriatemessageinthestatusPictureBox and displays the final point totals of both the dealer and the player. These values are ob-tained by calling the web service’s GetHandValuemethod in lines 194 and 196. Method GameOverreceives as an argument a member of the GameStatusenumeration (defined in lines 31–37). The enumeration represents whether the player tied, lost or won the game; its four members are PUSH, LOSE, WINand BLACKJACK.

1  // Fig. 22.20: Blackjack.cs
2  // Blackjack game that uses the BlackjackService web service. 3  using System;
4  using System.Drawing;
5  using System.Windows.Forms;
6  using System.Collections.Generic; 7  using System.Resources;
8
9  namespace BlackjackClient 10  {
11	public partial class Blackjack : Form 12	{
13	// reference to web service
14	private ServiceReference.BlackjackServiceClient dealer; 15
16	// string representing the dealer's cards 17	private string dealersCards;
18
19	// string representing the player's cards 20	private string playersCards;
21
22	// list of PictureBoxes for card images 23	private List< PictureBox > cardBoxes;
24         private int currentPlayerCard; // player's current card number 25         private int currentDealerCard; // dealer's current card number
26

Fig. 22.20 | BlackjackgamethatusestheBlackjackServicewebservice.(Part1of9.)
22.9 UsingSessionTrackinginaSOAP-BasedWCFWebService   815


27	private ResourceManager pictureLibrary =
28	BlackjackClient.Properties.Resources.ResourceManager; 29
30	// enum representing the possible game outcomes 31	public enum GameStatus
32	{
33	PUSH, // game ends in a tie 34	LOSE, // player loses
35	WIN, // player wins
36	BLACKJACK // player has blackjack 37         } // end enum GameStatus
38
39	public Blackjack() 40	{
41	InitializeComponent(); 42         } // end constructor
43
44	// sets up the game
45	private void Blackjack_Load( object sender, EventArgs e ) 46	{
47	// instantiate object allowing communication with web service 48	dealer = new ServiceReference.BlackjackServiceClient();
49
50	// put PictureBoxes into cardBoxes List
51	cardBoxes = new List<PictureBox>(); // create list 52	cardBoxes.Add( pictureBox1 );
53	cardBoxes.Add( pictureBox2 ); 54	cardBoxes.Add( pictureBox3 ); 55	cardBoxes.Add( pictureBox4 ); 56	cardBoxes.Add( pictureBox5 ); 57	cardBoxes.Add( pictureBox6 ); 58	cardBoxes.Add( pictureBox7 ); 59	cardBoxes.Add( pictureBox8 ); 60	cardBoxes.Add( pictureBox9 ); 61	cardBoxes.Add( pictureBox10 ); 62	cardBoxes.Add( pictureBox11 ); 63	cardBoxes.Add( pictureBox12 ); 64	cardBoxes.Add( pictureBox13 ); 65	cardBoxes.Add( pictureBox14 ); 66	cardBoxes.Add( pictureBox15 ); 67	cardBoxes.Add( pictureBox16 ); 68	cardBoxes.Add( pictureBox17 ); 69	cardBoxes.Add( pictureBox18 ); 70	cardBoxes.Add( pictureBox19 ); 71	cardBoxes.Add( pictureBox20 ); 72	cardBoxes.Add( pictureBox21 ); 73	cardBoxes.Add( pictureBox22 ); 74         } // end method Blackjack_Load
75
76	// deals cards to dealer while dealer's total is less than 17, 77	// then computes value of each hand and determines winner
78	private void DealerPlay()
79	{

Fig. 22.20 | BlackjackgamethatusestheBlackjackServicewebservice.(Part2of9.)
816	Chapter22 WebServicesinC#


80	// reveal dealer's second card
81	string[] cards = dealersCards.Split( '\t' ); 82	DisplayCard( 1, cards[1] );
83
84	string nextCard; 85
86	// while value of dealer's hand is below 17, 87	// dealer must take cards
88	while ( dealer.GetHandValue( dealersCards ) < 17 ) 89	{
90	nextCard = dealer.DealCard(); // deal new card
91	dealersCards += '\t' + nextCard; // add new card to hand 92
93	// update GUI to show new card
94	MessageBox.Show( "Dealer takes a card" ); 95	DisplayCard( currentDealerCard, nextCard ); 96	++currentDealerCard;
97	} // end while 98
99	int dealersTotal = dealer.GetHandValue( dealersCards ); 100	int playersTotal = dealer.GetHandValue( playersCards ); 101
102	// if dealer busted, player wins 103	if ( dealersTotal > 21 )
104	{
105	GameOver( GameStatus.WIN ); 106           } // end if
107	else 108	{
109              // if dealer and player have not exceeded 21, 110              // higher score wins; equal scores is a push.
111	if ( dealersTotal > playersTotal ) // player loses game 112                 GameOver( GameStatus.LOSE );
113	else if ( playersTotal > dealersTotal ) // player wins game 114                 GameOver( GameStatus.WIN );
115	else // player and dealer tie 116                 GameOver( GameStatus.PUSH ); 117           } // end else
118	} // end method DealerPlay 119
120	// displays card represented by cardValue in specified PictureBox 121	public void DisplayCard( int card, string cardValue )
122	{
123	// retrieve appropriate PictureBox
124	PictureBox displayBox = cardBoxes[ card ]; 125
126	// if string representing card is empty, 127	// set displayBox to display back of card 128	if ( string.IsNullOrEmpty( cardValue ) ) 129	{
130	displayBox.Image =
131	( Image ) pictureLibrary.GetObject( "cardback" );

Fig. 22.20 | BlackjackgamethatusestheBlackjackServicewebservice.(Part3of9.)
22.9 UsingSessionTrackinginaSOAP-BasedWCFWebService   817


132	return; 133           } // end if 134
135	// retrieve face value of card from cardValue 136	string face =
137	cardValue.Substring( 0, cardValue.IndexOf( ' ' ) ); 138
139	// retrieve the suit of the card from cardValue 140	string suit =
141	cardValue.Substring( cardValue.IndexOf( ' ' ) + 1 ); 142
143	char suitLetter; // suit letter used to form image file name 144
145	// determine the suit letter of the card 146	switch ( Convert.ToInt32( suit ) )
147	{
148	case 0: // clubs
149	suitLetter = 'c'; 150	break;
151	case 1: // diamonds 152                 suitLetter = 'd'; 153                 break;
154	case 2: // hearts 155                 suitLetter = 'h'; 156                 break;
157	default: // spades 158                 suitLetter = 's'; 159                 break;
160	} // end switch 161
162	// set displayBox to display appropriate image
163	displayBox.Image = ( Image ) pictureLibrary.GetObject( 164              "_" + face + suitLetter );
165	} // end method DisplayCard 166
167	// displays all player cards and shows 168	// appropriate game status message
169	public void GameOver( GameStatus winner ) 170	{
171	string[] cards = dealersCards.Split( '\t' ); 172
173	// display all the dealer's cards
174	for ( int i = 0; i < cards.Length; i++ ) 175              DisplayCard( i, cards[ i ] );
176
177	// display appropriate status image
178	if ( winner == GameStatus.PUSH ) // push 179              statusPictureBox.Image =
180	( Image ) pictureLibrary.GetObject( "tie" ); 181           else if ( winner == GameStatus.LOSE ) // player loses 182              statusPictureBox.Image =
183	( Image ) pictureLibrary.GetObject( "lose" );

Fig. 22.20 | BlackjackgamethatusestheBlackjackServicewebservice.(Part4of9.)
818	Chapter22 WebServicesinC#


184	else if ( winner == GameStatus.BLACKJACK ) 185              // player has blackjack
186	statusPictureBox.Image =
187	( Image ) pictureLibrary.GetObject( "blackjack" ); 188           else // player wins
189	statusPictureBox.Image =
190	( Image ) pictureLibrary.GetObject( "win" ); 191
192	// display final totals for dealer and player 193	dealerTotalLabel.Text =
194	"Dealer: " + dealer.GetHandValue( dealersCards ); 195           playerTotalLabel.Text =
196	"Player: " + dealer.GetHandValue( playersCards ); 197
198	// reset controls for new game 199	stayButton.Enabled = false; 200	hitButton.Enabled = false;
201	dealButton.Enabled = true; 202        } // end method GameOver
203
204	// deal two cards each to dealer and player
205	private void dealButton_Click( object sender, EventArgs e ) 206	{
207	string card; // stores a card temporarily until added to a hand 208
209	// clear card images
210	foreach ( PictureBox cardImage in cardBoxes ) 211              cardImage.Image = null;
212
213	statusPictureBox.Image = null; // clear status image
214	dealerTotalLabel.Text = string.Empty; // clear dealer total 215	playerTotalLabel.Text = string.Empty; // clear player total 216
217	// create a new, shuffled deck on the web service host 218	dealer.Shuffle();
219
220	// deal two cards to player
221	playersCards = dealer.DealCard(); // deal first card to player 222	DisplayCard( 11, playersCards ); // display card
223	card = dealer.DealCard(); // deal second card to player 224	DisplayCard( 12, card ); // update GUI to display new card
225	playersCards += '\t' + card; // add second card to player's hand 226
227	// deal two cards to dealer, only display face of first card 228	dealersCards = dealer.DealCard(); // deal first card to dealer 229	DisplayCard( 0, dealersCards ); // display card
230	card = dealer.DealCard(); // deal second card to dealer 231	DisplayCard( 1, string.Empty ); // display card face down
232	dealersCards += '\t' + card; // add second card to dealer's hand 233
234	stayButton.Enabled = true; // allow player to stay 235	hitButton.Enabled = true; // allow player to hit
236	dealButton.Enabled = false; // disable Deal Button

Fig. 22.20 | BlackjackgamethatusestheBlackjackServicewebservice.(Part5of9.)
22.9 UsingSessionTrackinginaSOAP-BasedWCFWebService   819


237
238	// determine the value of the two hands
239	int dealersTotal = dealer.GetHandValue( dealersCards ); 240	int playersTotal = dealer.GetHandValue( playersCards ); 241
242	// if hands equal 21, it is a push
243	if ( dealersTotal == playersTotal && dealersTotal == 21 ) 244              GameOver( GameStatus.PUSH );
245	else if ( dealersTotal == 21 ) // if dealer has 21, dealer wins 246              GameOver( GameStatus.LOSE );
247	else if ( playersTotal == 21 ) // player has blackjack 248              GameOver( GameStatus.BLACKJACK );
249
250	// next dealer card has index 2 in cardBoxes 251	currentDealerCard = 2;
252
253	// next player card has index 13 in cardBoxes 254	currentPlayerCard = 13;
255	} // end method dealButton 256
257	// deal another card to player
258	private void hitButton_Click( object sender, EventArgs e ) 259	{
260	string card = dealer.DealCard(); // deal new card
261	playersCards += '\t' + card; // add new card to player's hand 262
263	DisplayCard( currentPlayerCard, card ); // display card 264	++currentPlayerCard;
265
266	// determine the value of the player's hand
267	int total = dealer.GetHandValue( playersCards ); 268
269	// if player exceeds 21, house wins 270	if ( total > 21 )
271	GameOver( GameStatus.LOSE );
272	else if ( total == 21 ) // if player has 21, dealer's turn 273	{
274	hitButton.Enabled = false; 275	DealerPlay();
276	} // end if
277	} // end method hitButton_Click 278
279	// play the dealer's hand after the player chooses to stay 280	private void stayButton_Click( object sender, EventArgs e ) 281	{
282	stayButton.Enabled = false; // disable Stay Button 283	hitButton.Enabled = false; // disable Hit Button 284	dealButton.Enabled = true; // enable Deal Button
285	DealerPlay(); // player chose to stay, so play the dealer's hand 286        } // end method stayButton_Click
287	} // end class Blackjack
288 } // end namespace BlackjackClient

Fig. 22.20 | BlackjackgamethatusestheBlackjackServicewebservice.(Part6of9.)
820	Chapter22 WebServicesinC#



a)InitialcardsdealttotheplayerandthedealerwhentheuserpressestheDeal button.





















b)CardsaftertheplayerpressestheHitbuttononce,thentheStay button.Inthiscase,the playerwinsthegamewithahighertotalthanthedealer.





















Fig. 22.20 | BlackjackgamethatusestheBlackjackServicewebservice.(Part7of9.)
22.9 UsingSessionTrackinginaSOAP-BasedWCFWebService   821



c)CardsaftertheplayerpressestheHitbuttononce,thentheStay button.Inthiscase,the playerbusts(exceeds21)andthedealerwinsthegame.




















d)CardsaftertheplayerpressestheDealbutton.Inthiscase,theplayerwinswithBlackjack becausethefirsttwocardsareanaceandacardwithavalueof10(ajackinthiscase).





















Fig. 22.20 | BlackjackgamethatusestheBlackjackServicewebservice.(Part8of9.)
822	Chapter22 WebServicesinC#



e)CardsaftertheplayerpressestheStay button.Inthiscase,theplayeranddealerpush— theyhavethesamecardtotal.





















Fig. 22.20 | BlackjackgamethatusestheBlackjackServicewebservice.(Part9of9.)

dealButton_ClickMethod
When the player clicks the Deal button, the event handler (lines 205–255) clears the PictureBoxes and the Labels displaying the final point totals. Line 218 shuffles the deck by calling the web service’s Shufflemethod, then the player and dealer receive two cards each (returned by calls to the web service’s DealCardmethod in lines 221, 223, 228 and 230). Lines 239–240 evaluate both the dealer’s and player’s hands by calling the web ser-vice’sGetHandValuemethod.Iftheplayerandthedealerbothobtainscoresof21,thepro-gram calls method GameOver, passing GameStatus.PUSH. If only the player has 21 after the first two cards are dealt, the program passes GameStatus.BLACKJACKto method GameOver. If only the dealer has 21, the program passes GameStatus.LOSEto method GameOver.

hitButton_ClickMethod
If dealButton_Clickdoes not call GameOver, the player can take more cards by clicking the Hit button. The event handler for this button is in lines 258–277. Each time a player clicks Hit, the program deals the player one more card (line 260), displaying it in the GUI. Line 267 evaluates the player’s hand. If the player exceeds 21, the game is over, and the player loses. If the player has exactly 21, the player cannot take any more cards, and meth-od DealerPlay(lines 78–118) is called, causing the dealer to keep taking cards until the dealer’s hand has a value of 17 or more (lines 88–97). If the dealer exceeds 21, the player wins (line 105); otherwise, the values of the hands are compared, and GameOveris called with the appropriate argument (lines 111–116).
22.10 DatabaseAccessandInvokingaServicefromASP.NET	823


hitButton_ClickMethod
Clicking the Stay button indicates that a player does not want to be dealt another card. The event handler for this button (lines 280–286) disables the Hit and Stay buttons, then calls method DealerPlay.

DisplayCardMethod
Method DisplayCard(lines 121–165) updates the GUI to display a newly dealt card. The method takes as arguments an integer representing the index of the PictureBoxin the Listthat must have its image set, and a stringrepresenting the card. An empty string indicates that we wish to display the card face down. If method DisplayCardreceives a stringthat’s not empty, the program extracts the face and suit from the stringand uses thisinformationtofindthecorrectimage.Theswitchstatement(lines146–160)converts the number representing the suit to an intand assigns the appropriate character literal to suitLetter(cfor clubs, dfor diamonds, hfor hearts and sfor spades). The character in suitLetteris used to complete the image’s file name (lines 163–164).

22.10sAirline Reservation WebrService:.Database
Acces  and Invoking a Service f om ASP NET
Our prior examples accessed web services from Windows Forms applications. You can just as easily use web services in ASP.NET web applications. In fact, because web-based busi-nesses are becoming increasingly prevalent, it is common for web applications to consume web services. Figures 22.21 and 22.22 present the interface and class, respectively, for an airline reservation service that receives information regarding the type of seat a customer wishes to reserve, checks a database to see if such a seat is available and, if so, makes a res-ervation. Later in this section, we present an ASP.NET web application that allows a cus-tomer to specify a reservation request, then uses the airline reservation web service to attempt to execute the request. The code and database used in this example are provided with the chapter’s examples.

1  // Fig. 22.21: IReservationService.cs
2  // Airline reservation WCF web service interface. 3  using System.ServiceModel;
4
5  [ServiceContract]
6  public interface IReservationService 7  {
8	// reserves a seat 9	[OperationContract]
10	bool Reserve( string seatType, string classType );
11  } // end interface IReservationService

Fig. 22.21 | AirlinereservationWCFweb-serviceinterface.

1  // Fig. 22.22: ReservationService.cs
2  // Airline reservation WCF web service.
3  using System.Linq;

Fig. 22.22 | AirlinereservationWCFwebservice.(Part1of2.)
824	Chapter22 WebServicesinC#


4
5  public class ReservationService : IReservationService 6  {
7	// create ticketsDB object to access Tickets database
8	private TicketsDataContext ticketsDB = new TicketsDataContext(); 9
10	// checks database to determine whether matching seat is available 11	public bool Reserve( string seatType, string classType )
12	{
13	//  LINQ query to find seats matching the parameters 14	var result =
15	from seat in ticketsDB.Seats
16	where ( seat.Taken == false ) && ( seat.Type == seatType ) && 17               ( seat.Class == classType )
18	select seat; 19
20	// get first available seat
21	Seat firstAvailableSeat = result.FirstOrDefault(); 22
23	// if seat is available seats, mark it as taken 24	if ( firstAvailableSeat != null )
25	{
26	firstAvailableSeat.Taken = true; // mark the seat as taken 27	ticketsDB.SubmitChanges(); // update
28	return true; // seat was reserved 29         } // end if
30
31	return false; // no seat was reserved 32     } // end method Reserve
33  } // end class ReservationService

Fig. 22.22 | AirlinereservationWCFwebservice.(Part2of2.)


We added the Tickets.mdfdatabase and corresponding LINQ to SQL classes to create  a  DataContext object  (Fig. 22.22,  line  8)  for  our  ticket  reservation  system. Tickets.mdfdatabase contains the Seatstable with four columns—the seat number (1– 10), the seat type (Window, Middleor Aisle), the class (Economyor First) and a column containing either 1(true) or 0(false) to indicate whether the seat is taken.
This web service has a single method—Reserve(lines 11–32)—which searches a seat database(Tickets.mdf) tolocate a seat matchinga user’s request. If it finds an appropriate seat, Reserveupdates the database, makes the reservation and returns true; otherwise, no reservation is made, and the method returns false. The statements in lines 14–18 and lines 24–29, which query and update the database, use LINQ to SQL.
Reserve receives two parameters—a string representing the seat type (that is, Window, Middleor Aisle) and a stringrepresenting the class type (that is, Economyor First). Lines 15–18  retrieve the seat numbers of any available seats matching the requested seat and class type with the results of a query. Line 21 gets the first matching seat (or nullif there is not one). If there is a matching seat (line 24), the web service reserves that seat. Line 26 marks the seat as taken and line 27 submits the changes to the database. Method Reservereturns true(line 28) to indicate that the reservation was suc-
22.10 DatabaseAccessandInvokingaServicefromASP.NET	825


cessful. If there are no matching seats, Reservereturns false(line 31) to indicate that no seats matched the user’s request.

Creating a Web Form to Interact with the Airline Reservation Web Service
Figure 22.23showsanASP.NETpagethroughwhichuserscanselectseattypes.Thispage allows users to reserve a seat on the basis of its class (Economy or First) and location (Aisle, Middleor Window) in a row of seats. The page then uses the airline reservation web service to carry out user requests. If the database request is not successful, the user is in-structed to modify the request and try again. When you create this ASP.NET application, remember to add a service reference to the ReservationService.










Fig. 22.23 | ASPXfilethattakesreservationinformation.

This page defines two DropDownListobjects and a Button. One DropDownListdis-plays all the seat types from which users can select (Aisle, Middle, Window). The second provides choices for the class type. Users click the Button named reserveButton to submit requests after making selections from the DropDownLists. The page also defines an initially blank Labelnamed errorLabel, which displays an appropriate message if no seat matching the user’s selection is available. The code-behind file is shown in Fig. 22.24.


1  // Fig. 22.24: ReservationClient.aspx.cs 2  // ReservationClient code behind file.
3  using System; 4
5  public partial class ReservationClient : System.Web.UI.Page 6  {
7	// object of proxy type used to connect to ReservationService 8	private ServiceReference.ReservationServiceClient ticketAgent = 9         new ServiceReference.ReservationServiceClient();
10
11	// attempt to reserve the selected type of seat
12	protected void reserveButton_Click( object sender, EventArgs e ) 13	{
14	// if the ticket is reserved
15	if ( ticketAgent.Reserve( seatList.SelectedItem.Text, 16            classList.SelectedItem.Text ) )
17	{

Fig. 22.24 | ReservationClientcode-behindfile.(Part1of2.)
826	Chapter22 WebServicesinC#


18	// hide other controls
19	instructionsLabel.Visible = false; 20	seatList.Visible = false;
21	classList.Visible = false;
22	reserveButton.Visible = false; 23	errorLabel.Visible = false;
24
25	// display message indicating success
26	Response.Write( "Your reservation has been made. Thank you." ); 27         } // end if
28	else // service method returned false, so signal failure 29	{
30	// display message in the initially blank errorLabel
31	errorLabel.Text = "This type of seat is not available. " + 32               "Please modify your request and try again.";
33	} // end else
34	} // end method reserveButton_Click
35  } // end class ReservationClient

Fig. 22.24 | ReservationClientcode-behindfile.(Part2of2.)

Lines 8–9 of Fig. 22.24 creates a ReservationServiceClientproxy object. When the user clicks Reserve (Fig. 22.25(a)), the reserveButton_Clickevent handler (lines 12–34 of Fig. 22.24) executes, and the page reloads. The event handler calls the web service’s Reservemethodandpasses toit theselected seat andclass typeas arguments(lines 15–16). If Reservereturns true, the application hides the GUI controls and displays a message thanking the user for making a reservation (line 26); otherwise, the application notifies the user that the type of seat requested is not available and instructs the user to try again (lines

a)Selectingaseat








b)Seatisreservedsuccessfully









Fig. 22.25 | Ticketreservationweb-applicationsampleexecution.(Part1of2.)
22.11 EquationGenerator:ReturningUser-DefinedTypes   827


c)Attemptingtoreserveanotherseat









d)Noseatsmatchtherequestedtypeandclass










Fig. 22.25 | Ticketreservationweb-applicationsampleexecution.(Part2of2.)

31–32). You can use the techniques presented in Chapter 20 to build this ASP.NET Web Form. Figure 22.25 shows several user interactions with this web application.

22.11 Equation Generator: Returning User-Defined Types
With the exception of the WelcomeRESTJSONService(Fig. 22.15), the web services we’ve demonstrated all received and returned primitive-type instances. It is also possible to pro-cess instances of complete user-defined types in a web service. These types can be passed to or returned from web-service methods.
ThissectionpresentsanEquationGeneratorwebservicethatgeneratesrandomarith-metic equations of type Equation. The client is a math-tutoring application that inputs information about the mathematical question that the user wishes to attempt (addition, subtraction or multiplication) and the skill level of the user (1 specifies equations using numbers from 1 to 10, 2 specifies equations involving numbers from 10 to 100, and 3 specifies equations containing numbers from 100 to 1000). The web service then gener-ates anequationconsistingofrandomnumbers in theproperrange. The clientapplication receives the Equationand displays the sample question to the user.

Defining Class Equation
We define class Equationin Fig. 22.26. Lines 33–53 define a constructor that takes three arguments—two ints representing the left and right operands and a stringthat repre-sents the arithmetic operation to perform. The constructor sets the Equation’s properties, then calculates the appropriate result. The parameterless constructor (lines 26–30) calls the three-argument constructor (lines 33–53) and passes default values.
828	Chapter22 WebServicesinC#


1  // Fig. 22.26: Equation.cs
2  // Class Equation that contains information about an equation. 3  using System.Runtime.Serialization;
4
5  [DataContract]
6  public class Equation 7  {
8	// automatic property to access the left operand 9	[DataMember]
10	private int Left { get; set; } 11
12	// automatic property to access the right operand 13	[DataMember]
14	private int Right { get; set; } 15
16	// automatic property to access the result of applying 17	// an operation to the left and right operands
18	[DataMember]
19	private int Result { get; set; } 20
21	// automatic property to access the operation 22	[DataMember]
23	private string Operation { get; set; } 24
25	// required default constructor 26	public Equation()
27	: this( 0, 0, "add" ) 28     {
29	// empty body
30	} // end default constructor 31
32	// three-argument constructor for class Equation
33	public Equation( int leftValue, int rightValue, string type ) 34	{
35	Left = leftValue; 36	Right = rightValue; 37
38	switch ( type ) // perform appropriate operation 39	{
40	case "add": // addition 41               Result = Left + Right; 42               Operation = "+";
43	break;
44	case "subtract": // subtraction 45               Result = Left - Right;
46	Operation = "-"; 47	break;
48	case "multiply": // multiplication 49               Result = Left * Right;
50	Operation = "*"; 51	break;
52	} // end switch
53	} // end three-argument constructor

Fig. 22.26 | ClassEquationthatcontainsinformationaboutanequation.(Part1of2.)
22.11 EquationGenerator:ReturningUser-DefinedTypes   829


54
55	// return string representation of the Equation object 56	public override string ToString()
57	{
58	return string.Format( "{0} {1} {2} = {4}", Left, Operation, 59            Right, Result );
60	} // end method ToString 61
62	// property that returns a string representing left-hand side 63	[DataMember]
64	private string LeftHandSide 65	{
66	get 67	{
68	return string.Format( "{0} {1} {2}", Left, Operation, Right ); 69         } // end get
70	set 71	{
72	// empty body 73         } // end set
74	} // end property LeftHandSide 75
76	// property that returns a string representing right-hand side 77	[DataMember]
78	private string RightHandSide 79	{
80	get 81	{
82	return Result.ToString(); 83         } // end get
84	set 85	{
86	// empty body 87         } // end set
88	} // end property RightHandSide
89  } // end class Equation

Fig. 22.26 | ClassEquationthatcontainsinformationaboutanequation.(Part2of2.)


Class Equationdefines properties LeftHandSide(lines 64–74), RightHandSide(lines 78–88), Left(line 10), Right(line 14), Result(line 19) and Operation(line 23). The web service client does not need to modify the values of properties LeftHandSideand RightHandSide. However, a property can be serialized only if it has both a getand a set accessor—even if the setaccessor has an empty body. Each property is preceded by the DataMemberattribute to indicate that it should be serialized. LeftHandSide(lines 64–74) returns a stringrepresenting everything to the left of the equals (=) sign in the equation, and RightHandSide(lines 78–88) returns a stringrepresenting everything to the right of the equals (=) sign. Left(line 10) returns the intto the left of the operator (known as the left operand), and Right(lines 14) returns the intto the right of the operator (known as the right operand). Result(line 19) returns the solution to the equation, and Operation (line 23) returns the operator in the equation. The client in this case study does not use
830	Chapter22 WebServicesinC#


the RightHandSideproperty, but we included it in case future clients choose to use it. Method ToString(lines 56–60) returns a stringrepresentation of the equation.

22.11.1 Creating the REST-Based XML EquationGenerator Web Service
Figures 22.27 and 22.28 present the interface and class for the EquationGenerator-Serviceweb service, which creates random, customized Equations. This web service con-tains  only  method  GenerateEquation (lines  9–26  of  Fig. 22.28),  which  takes  two parameters—a stringrepresenting the mathematical operation ("add", "subtract"or "multiply") and a stringrepresenting the difficulty level. When line 25 of Fig. 22.28 re-turns the Equation, it is serialized as XML by default and sent to the client. We’ll do this with JSON as well in Section 22.11.3. Recall from Section 22.7.2 that you must modify the Web.configfile to enable REST support as well.

1  // Fig. 22.27: IEquationGeneratorService.cs
2  // WCF REST service interface to create random equations based on a 3  // specified operation and difficulty level.
4  using System.ServiceModel;
5  using System.ServiceModel.Web; 6
7  [ServiceContract]
8  public interface IEquationGeneratorService 9  {
10	// method to generate a math equation 11	[OperationContract]
12	[WebGet( UriTemplate = "equation/{operation}/{level}" )]
13	Equation GenerateEquation( string operation, string level );
14  } // end interface IEquationGeneratorService

Fig. 22.27 | WCFRESTserviceinterfacetocreaterandomequationsbasedonaspecified operationanddifficultylevel.

1  // Fig. 22.28: EquationGeneratorService.cs
2  // WCF REST service to create random equations based on a 3  // specified operation and difficulty level.
4  using System; 5
6  public class EquationGeneratorService : IEquationGeneratorService 7  {
8	// method to generate a math equation
9	public Equation GenerateEquation( string operation, string level ) 10	{
11	// calculate maximum and minimum number to be used 12	int maximum =
13	Convert.ToInt32( Math.Pow( 10, Convert.ToInt32( level ) ) ); 14         int minimum =
15	Convert.ToInt32( Math.Pow( 10, Convert.ToInt32( level ) - 1 ) );
16

Fig. 22.28 | WCFRESTservicetocreaterandomequationsbasedonaspecifiedoperationand difficultylevel.(Part1of2.)
22.11 EquationGenerator:ReturningUser-DefinedTypes   831


17	Random randomObject = new Random(); // generate random numbers 18
19	// create Equation consisting of two random 20	// numbers in the range minimum to maximum 21	Equation newEquation = new Equation(
22	randomObject.Next( minimum, maximum ),
23	randomObject.Next( minimum, maximum ), operation ); 24
25	return newEquation;
26	} // end method GenerateEquation
27  } // end class EquationGeneratorService

Fig. 22.28 | WCFRESTservicetocreaterandomequationsbasedonaspecifiedoperationand difficultylevel.(Part2of2.)

22.11.2 Consuming the REST-Based XML EquationGenerator Web
Service
The MathTutorapplication (Fig. 22.29) calls the EquationGeneratorweb service’s Gen-erateEquationmethod to create an Equationobject. The tutor then displays the left-hand side of the Equationand waits for user input.
Thedefaultsettingforthedifficultylevelis1,buttheusercanchangethisbychoosing a level from the RadioButtons in the GroupBoxlabeled Difficulty. Clicking any of the levels invokes the corresponding RadioButton’s CheckedChanged event handler (lines 112– 133), which sets integer levelto the level selected by the user. Although the default set-ting for the question type is Addition, the user also can change this by selecting one of the RadioButtons in the GroupBoxlabeled Operation. Doing so invokes the corresponding operation’s event handlers in lines 88–109, which assigns to stringoperationthe string corresponding to the user’s selection.

1  // Fig. 22.29: MathTutor.cs
2  // Math tutor using EquationGeneratorServiceXML to create equations. 3  using System;
4  using System.Net;
5  using System.Windows.Forms; 6  using System.Xml.Linq;
7
8  namespace MathTutorXML 9  {
10	public partial class MathTutor : Form 11	{
12	private string operation = "add"; // the default operation 13	private int level = 1; // the default difficulty level
14	private string leftHandSide; // the left side of the equation 15	private int result; // the answer
16	private XNamespace xmlNamespace =
17	XNamespace.Get( "http://schemas.datacontract.org/2004/07/" );
18

Fig. 22.29 | MathtutorusingEquationGeneratorServiceXMLtocreateequations.(Part1of 4.)
832	Chapter22 WebServicesinC#


19	// object used to invoke service
20	private WebClient service = new WebClient(); 21
22	public MathTutor() 23	{
24	InitializeComponent(); 25
26	// add DownloadStringCompleted event handler to WebClient 27	service.DownloadStringCompleted +=
28	new DownloadStringCompletedEventHandler( 29	service_DownloadStringCompleted );
30	} // end constructor 31
32	// generates new equation when user clicks button
33	private void generateButton_Click( object sender, EventArgs e ) 34	{
35	// send request to EquationGeneratorServiceXML 36	service.DownloadStringAsync( new Uri(
37	"http://localhost:49732/EquationGeneratorServiceXML" + 38	"/Service.svc/equation/" + operation + "/" + level ) ); 39         } // end method generateButton_Click
40
41	// process web service response
42	private void service_DownloadStringCompleted(
43	object sender, DownloadStringCompletedEventArgs e ) 44         {
45	// check if any errors occurred in retrieving service data 46	if ( e.Error == null )
47	{
48	// parse response and get LeftHandSide and Result values 49	XDocument xmlResponse = XDocument.Parse( e.Result );
50	leftHandSide = xmlResponse.Element(
51	xmlNamespace + "Equation" ).Element( 52	xmlNamespace + "LeftHandSide" ).Value;
53	result = Convert.ToInt32( xmlResponse.Element( 54                  xmlNamespace + "Equation" ).Element(
55	xmlNamespace + "Result" ).Value ); 56
57	// display left side of equation 58	questionLabel.Text = leftHandSide;
59	okButton.Enabled = true; // enable okButton
60	answerTextBox.Enabled = true; // enable answerTextBox 61            } // end if
62	} // end method client_DownloadStringCompleted 63
64	// check user's answer
65	private void okButton_Click( object sender, EventArgs e ) 66	{
67	if ( !string.IsNullOrEmpty( answerTextBox.Text ) )
68	{

Fig. 22.29 | MathtutorusingEquationGeneratorServiceXMLtocreateequations.(Part2of 4.)
22.11 EquationGenerator:ReturningUser-DefinedTypes   833


69	// get user's answer
70	int userAnswer = Convert.ToInt32( answerTextBox.Text ); 71
72	// determine whether user's answer is correct 73	if ( result == userAnswer )
74	{
75	questionLabel.Text = string.Empty; // clear question 76	answerTextBox.Clear(); // clear answer
77	okButton.Enabled = false; // disable OK button
78	MessageBox.Show( "Correct! Good job!", "Result" ); 79               } // end if
80	else 81	{
82	MessageBox.Show( "Incorrect. Try again.", "Result" ); 83               } // end else
84	} // end if
85	} // end method okButton_Click 86
87	// set the operation to addition
88	private void additionRadioButton_CheckedChanged( object sender, 89            EventArgs e )
90	{
91	if ( additionRadioButton.Checked ) 92               operation = "add";
93	} // end method additionRadioButton_CheckedChanged 94
95	// set the operation to subtraction
96	private void subtractionRadioButton_CheckedChanged( object sender, 97            EventArgs e )
98	{
99	if ( subtractionRadioButton.Checked ) 100              operation = "subtract";
101	} // end method subtractionRadioButton_CheckedChanged 102
103	// set the operation to multiplication
104	private void multiplicationRadioButton_CheckedChanged( 105           object sender, EventArgs e )
106	{
107	if ( multiplicationRadioButton.Checked ) 108              operation = "multiply";
109	} // end method multiplicationRadioButton_CheckedChanged 110
111	// set difficulty level to 1
112	private void levelOneRadioButton_CheckedChanged( object sender, 113           EventArgs e )
114	{
115	if ( levelOneRadioButton.Checked ) 116              level = 1;
117	} // end method levelOneRadioButton_CheckedChanged
118

Fig. 22.29 | MathtutorusingEquationGeneratorServiceXMLtocreateequations.(Part3of 4.)
834	Chapter22 WebServicesinC#


119	// set difficulty level to 2
120	private void levelTwoRadioButton_CheckedChanged( object sender, 121           EventArgs e )
122	{
123	if ( levelTwoRadioButton.Checked ) 124              level = 2;
125	} // end method levelTwoRadioButton_CheckedChanged 126
127	// set difficulty level to 3
128	private void levelThreeRadioButton_CheckedChanged( object sender, 129           EventArgs e )
130	{
131	if ( levelThreeRadioButton.Checked ) 132              level = 3;
133	} // end method levelThreeRadioButton_CheckedChanged 134     } // end class MathTutor
135 } // end namespace MathTutorXML

a)Generatingalevel1additionequation








b)Answeringthequestionincorrectly








c)Answeringthequestioncorrectly









Fig. 22.29 | MathtutorusingEquationGeneratorServiceXMLtocreateequations.(Part4of 4.)
22.11 EquationGenerator:ReturningUser-DefinedTypes   835


Line 20 defines the WebClientthat is used to invoke the web service. Event handler generateButton_Click (lines  33–39)  invokes  EquationGeneratorService method GenerateEquation (line 36–38) asynchronously using the web service’s UriTemplate specified at line 12 in Fig. 22.27. When the response arrives, the DownloadStringCom-pletedevent handler (lines 42–62) parses the XML response (line 49), uses XDocument’s Elementmethod to obtain the left side of the equation (lines 50–52) and stores the result (lines 53–55). We define the XML response’s namespace in lines 16–17 as an XNamespace to parse the XML response. Then, the handler displays the left-hand side of the equation in questionLabel(line 58) and enables okButtonso that the user can enter an answer. When the user clicks OK, okButton_Click(lines 65–85) checks whethertheuserprovided the correct answer.

22.11.3 Creating the REST-Based JSON WCF EquationGenerator
Web Service
You can set the web service to return JSON data instead of XML. Figure 22.30 is a mod-ified IEquationGeneratorService interface for a service that returns an Equation in JSON format. The ResponseFormatproperty (line 12) is added to the WebGetattribute and set to WebMessageFormat.Json. We don’t show the implementation of this interface here, because it is identical to that of Fig. 22.28. This shows how flexible WCF can be.

1  // Fig. 22.30: IEquationGeneratorService.cs
2  // WCF REST service interface to create random equations based on a 3  // specified operation and difficulty level.
4  using System.ServiceModel;
5  using System.ServiceModel.Web; 6
7  [ServiceContract]
8  public interface IEquationGeneratorService 9  {
10	// method to generate a math equation 11	[OperationContract]
12	[WebGet( ResponseFormat = WebMessageFormat.Json, 13         UriTemplate = "equation/{operation}/{level}" )]
14	Equation GenerateEquation( string operation, string level );
15  } // end interface IEquationGeneratorService

Fig. 22.30 | WCFRESTserviceinterfacetocreaterandomequationsbasedonaspecified operationanddifficultylevel.

22.11.4 Consuming the REST-Based JSON WCF EquationGenerator
Web Service
A modified MathTutorapplication (Fig. 22.31) accesses the URI of the EquationGenera-torweb service to get the JSON object (lines 35–37). We define a JSON representation of an Equationobject for the serializer in Fig. 22.32. The JSON object is deserialized us-ing the System.Runtime.Serialization.Jsonnamespace’s DataContractJsonSerial-izer(lines48–49)andconvertedintoan Equationobject.WeusetheLeftHandSidefield of the deserialized object (line 55) to display the left side of the equation and the Result field (line 67) to obtain the answer.
836	Chapter22 WebServicesinC#


1  // Fig. 22.31: MathTutorForm.cs
2  // Math tutor using EquationGeneratorServiceJSON to create equations. 3  using System;
4  using System.IO; 5  using System.Net;
6  using System.Runtime.Serialization.Json; 7  using System.Text;
8  using System.Windows.Forms; 9
10  namespace MathTutorJSON 11  {
12	public partial class MathTutorForm : Form 13	{
14	private string operation = "add"; // the default operation 15	private int level = 1; // the default difficulty level
16	private Equation currentEquation; // represents the Equation 17
18	// object used to invoke service
19	private WebClient service = new WebClient(); 20
21	public MathTutorForm() 22	{
23	InitializeComponent(); 24
25	// add DownloadStringCompleted event handler to WebClient 26	service.DownloadStringCompleted +=
27	new DownloadStringCompletedEventHandler( 28                  service_DownloadStringCompleted ); 29         } // end constructor
30
31	// generates new equation when user clicks button
32	private void generateButton_Click( object sender, EventArgs e ) 33	{
34	// send request to EquationGeneratorServiceJSON 35	service.DownloadStringAsync( new Uri(
36	"http://localhost:50238/EquationGeneratorServiceJSON" + 37	"/Service.svc/equation/" + operation + "/" + level ) ); 38         } // end method generateButton_Click
39
40	// process web service response
41	private void service_DownloadStringCompleted(
42	object sender, DownloadStringCompletedEventArgs e ) 43         {
44	// check if any errors occurred in retrieving service data 45	if ( e.Error == null )
46	{
47	// deserialize response into an Equation object 48	DataContractJsonSerializer JSONSerializer =
49	new DataContractJsonSerializer( typeof( Equation ) ); 50               currentEquation =
51	( Equation ) JSONSerializer.ReadObject( new
52	MemoryStream( Encoding.Unicode.GetBytes( e.Result ) ) );

Fig. 22.31 | MathtutorusingEquationGeneratorServiceJSON.(Part1of4.)
22.11 EquationGenerator:ReturningUser-DefinedTypes   837


53
54	// display left side of equation
55	questionLabel.Text = currentEquation.LeftHandSide; 56	okButton.Enabled = true; // enable okButton
57	answerTextBox.Enabled = true; // enable answerTextBox 58            } // end if
59	} // end method client_DownloadStringCompleted 60
61	// check user's answer
62	private void okButton_Click( object sender, EventArgs e ) 63	{
64	if ( !string.IsNullOrEmpty( answerTextBox.Text ) ) 65	{
66	// determine whether user's answer is correct 67	if ( currentEquation.Result ==
68	Convert.ToInt32( answerTextBox.Text ) ) 69               {
70	questionLabel.Text = string.Empty; // clear question 71	answerTextBox.Clear(); // clear answer
72	okButton.Enabled = false; // disable OK button
73	MessageBox.Show( "Correct! Good job!", "Result" ); 74               } // end if
75	else 76	{
77	MessageBox.Show( "Incorrect. Try again.", "Result" ); 78               } // end else
79	} // end if
80	} // end method okButton_Click 81
82	// set the operation to addition
83	private void additionRadioButton_CheckedChanged( object sender, 84            EventArgs e )
85	{
86	if ( additionRadioButton.Checked ) 87               operation = "add";
88	} // end method additionRadioButton_CheckedChanged 89
90	// set the operation to subtraction
91	private void subtractionRadioButton_CheckedChanged( object sender, 92            EventArgs e )
93	{
94	if ( subtractionRadioButton.Checked ) 95               operation = "subtract";
96	} // end method subtractionRadioButton_CheckedChanged 97
98	// set the operation to multiplication
99	private void multiplicationRadioButton_CheckedChanged( 100           object sender, EventArgs e )
101	{
102	if ( multiplicationRadioButton.Checked ) 103              operation = "multiply";
104	} // end method multiplicationRadioButton_CheckedChanged

Fig. 22.31 | MathtutorusingEquationGeneratorServiceJSON.(Part2of4.)
838	Chapter22 WebServicesinC#


105
106	// set difficulty level to 1
107	private void levelOneRadioButton_CheckedChanged( object sender, 108           EventArgs e )
109	{
110	if ( levelOneRadioButton.Checked ) 111              level = 1;
112	} // end method levelOneRadioButton_CheckedChanged 113
114	// set difficulty level to 2
115	private void levelTwoRadioButton_CheckedChanged( object sender, 116           EventArgs e )
117	{
118	if ( levelTwoRadioButton.Checked ) 119              level = 2;
120	} // end method levelTwoRadioButton_CheckedChanged 121
122	// set difficulty level to 3
123	private void levelThreeRadioButton_CheckedChanged( object sender, 124           EventArgs e )
125	{
126	if ( levelThreeRadioButton.Checked ) 127              level = 3;
128	} // end method levelThreeRadioButton_CheckedChanged 129     } // end class MathTutorForm
130 } // end namespace MathTutorJSON


a)Generatingalevel2multiplicationequation









b)Answeringthequestionincorrectly










Fig. 22.31 | MathtutorusingEquationGeneratorServiceJSON.(Part3of4.)
22.12 WebResources   839


c)Answeringthequestioncorrectly









Fig. 22.31 | MathtutorusingEquationGeneratorServiceJSON.(Part4of4.)

1  // Fig. 22.32: Equation.cs
2  // Equation class representing a JSON object. 3  using System;
4
5  namespace MathTutorJSON 6  {
7	[Serializable] 8	class Equation 9	{
10	public int Left = 0;
11	public string LeftHandSide = null; 12	public string Operation = null;
13	public int Result = 0; 14	public int Right = 0;
15	public string RightHandSide = null; 16     } // end class Equation
17  } // end namespace MathTutorJSON

Fig. 22.32 | EquationclassrepresentingaJSONobject.

22.12  Web Resources
To learn more about web services, check out our web services Resource Centers at:

www.deitel.com/WebServices/ www.deitel.com/RESTWebServices/
You’ll find articles, samples chapters and tutorials that discuss XML, web-services specifica-tions, SOAP, WSDL, UDDI, .NET web services, consuming XML web services and web-services architecture. You’ll learn how to build your own Yahoo! maps mashups and appli-cations that work with the Yahoo! Music Engine. You’ll find information about Amazon’s web services including the Amazon E-Commerce Service (ECS), Amazon historical pricing, Amazon Mechanical Turk, Amazon S3 (Simple Storage Service) and the Scalable Simple Queue Service (SQS). You’ll learn how to use web services from several other companies in-cludingeBay,GoogleandMicrosoft.You’llfindRESTwebservicesbestpracticesandguide-lines. You’ll also learn how to use REST web services with other technologies including SOAP, Rails, Windows Communication Foundation (WCF) and more. You can view the complete list of Deitel Resource Centers at www.deitel.com/ResourceCenters.html.
840	Chapter22 WebServicesinC#


Summary
Section 22.1 Introduction
•  WCF is a set of technologies for building distributed systems in which system components com-municate with one another over networks. WCF uses a common framework for all communica-tion between systems, so you need to learn only one programming model to use WCF.
•  WCF web services promote software reusability in distributed systems that typically execute across the Internet.
•  Simple Object Access Protocol (SOAP) is an XML-based protocol describing how to mark up requests and responses so that they can be sent via protocols such as HTTP. SOAP uses a stan-dardized XML-based format to enclose data in a message.
•  Representational State Transfer (REST) is a network architecture that uses the web’s traditional request/response mechanisms such as GETand POSTrequests. REST-based systems do not require data to be wrapped in a special message format.

Section 22.2 WCF Services Basics
•  WCF service has three key components—addresses, bindings and contracts.
•  An address represents the service’s location or endpoint, which includes the protocol and net-work address used to access the service.
•  A binding specifies how a client communicates with the service, such as through SOAP protocol or REST architecture. Bindings can also specify other options, such as security constraints.
•  A contract is an interface representing the service’s methods and their return types. The service’s contract allows clients to interact with the service.
•  The machine on which the web service resides is referred to as a web service host.

Section 22.3 Simple Object Access Protocol (SOAP)
•  The Simple Object Access Protocol (SOAP) is a platform-independent protocol that uses XML to make remote procedure calls, typically over HTTP.
•  Each request and response is packaged in a SOAP message—an XML message containing the in-formation that a web service requires to process the message.
•  SOAP messages arewritten in XML so thatthey’re computerreadable, human readableand plat-form independent.
•  SOAP supports an extensive set of types—the primitive types, as well as DateTime, XmlNodeand others. SOAP can also transmit arrays of these types.
•  When a program invokes a method of a SOAP web service, the request and all relevant informa-tion are packaged in a SOAP message enclosed in a SOAP envelope and sent to the server on which the web service resides.
•  When a web service receives a SOAP message, it parses the XML representing the message, then processes the message’s contents. The message specifies the method that the client wishes to ex-ecute and the arguments the client passed to that method.
•  After a web service parses a SOAP message, it calls the appropriate method with the specified ar-guments (if any), and sends the response back to the client in another SOAP message. The client parses the response to retrieve the method’s result.

Section 22.4 Representational State Transfer (REST)
•  RepresentationalStateTransfer(REST)referstoanarchitecturalstyleforimplementingwebser-vices. Such web services are often called RESTful web services. Though REST itself is not a stan-dard, RESTful web services are implemented using web standards.
Summary   841


•  Each operation in a RESTful web service is identified by a unique URL.
•  REST can return data in formats such as XML, JSON, HTML, plain text and media files.

Section 22.5 JavaScript Object Notation (JSON)
•  JavaScript Object Notation (JSON) is an alternative to XML for representing data.
•  JSON is a text-based data-interchange format used to represent objects in JavaScript as collec-tions of name/value pairs represented as strings.
•  JSON is a simple format that makes objects easy to read, create and parse, and allows programs to transmit data efficiently across the Internet because it is much less verbose than XML.
•  Each value in a JSON array can be a string, a number, a JSON object, true, falseor null.

Section 22.6 Publishing and Consuming SOAP-Based WCF Web Services •  Enabling a web service for client usage is also known as publishing the web service.
•  Using a web service is also known as consuming the web service.

Section 22.6.1 Creating a WCF Web Service
•  To create a SOAP-based WCF web service in Visual Web Developer, you first create a project of type WCF Service. SOAP is the default protocol for WCF web services, so no special configu-ration is required to create SOAP-based services.
•  Visual Web Developer automatically generates files for a WCF Service project, including an SVC file, which provides access to the service, and a Web.configfile, which specifies theservice’s bind-ing and behavior, and code files for the WCF service class and any other code that is part of the WCF service implementation. In the service class, you define the methods that your WCF web service makes available to client applications.

Section 22.6.2 Code for the WelcomeSOAPXMLService
•  Theserviceinterfacedescribestheservice’scontract—thesetofmethodsandpropertiestheclient uses to access the service.
•  The ServiceContractattribute exposes a class that implements the service interface as a WCF web service.
•  The OperationContractattribute exposes a method for remote calls.

Section 22.6.3 Building a SOAP WCF Web Service
•  By default, a new code-behind file implements an interface named IServicethat is marked with the ServiceContractand OperationContractattributes. In addition, the IService.csfile de-fines a class named CompositeTypewith a DataContractattribute. The interface contains two sample service methods named GetDataand GetDataUsingContract. The Service.csfile con-tains the code that defines these methods.
•  The Service.svc file, when accessed through a web browser, provides access to information about the web service.
•  When you display the SVC file in the Solution Explorer, you see the programming language in which the web service’s code-behind file is written, the Debugattribute, the name of the service and the code-behind file’s location.
•  If you change the code-behind file name or the class name that defines the web service, you must modify the SVC file accordingly.

Section 22.6.4 Deploying the WelcomeSOAPXMLService
•  You can choose Build Web Site from the Build menu to ensure that the web service compiles with-out errors. You can also test the web service directly from Visual Web Developer by selecting
842	Chapter22 WebServicesinC#


Start Without Debugging from the Debug menu. This opens a browser window that contains the SVC page. Once the service is running, you can also access the SVC page from your browser by typing the URL in a web browser.
•  By default, the ASP.NET Development Server assigns a random port number to each website it hosts. You can change this behavior by going to the Solution Explorer and clicking on the project name to view the Properties window. Set the Use dynamic ports property to False and specify the port number you want to use, which can be any unused TCP port. You can also change the ser-vice’s virtual path, perhaps to make the path shorter or more readable.
•  Web services normally contain a service description that conforms to the Web Service Descrip-tion Language (WSDL)—an XML vocabulary that defines the methods a web service makes available and how clients interact with them. WSDL documents help applications determine how to interact with the web services described in the documents.
•  When viewed in a web browser, an SVC file presents a link to the service’s WSDL file and infor-mation on using the utility svcutil.exeto generate test console applications.
•  When a client requests the WSDL URL, the server autogenerates the WSDL that describes the web service and returns the WSDL document.
•  Many aspects of web-service creation and consumption—such as generating WSDL files and proxy classes—are handled by Visual Web Developer, Visual C# 2010 and WCF.

Section 22.6.5 Creating a Client to Consume the WelcomeSOAPXMLService
•  An application that consumes a SOAP-based web service consists of a proxy class representing thewebserviceandaclientapplicationthataccessesthewebserviceviaaproxyobject.Theproxy object passes arguments from the client application to the web service as part of the web-service method call. When the method completes its task, the proxy object receives the result and parses it for the client application.
•  A proxy objectcommunicates withthewebserviceon the client’s behalf. The proxy objectis part of the client application, making web-service calls appear to interact with local objects.
•  To add a proxy class, right click the project name in the Solution Explorer and select Add Service Reference… to display the Add Service Reference dialog. In the dialog, enter the URL of the ser-vice’s .svcfile in the Address field. The tools will automatically use that URL to request the web service’s WSDL document. You can rename the service reference’s namespace by changing the Namespace field. Click the OK button to add the service reference.
•  AproxyobjecthandlesthenetworkingdetailsandtheformationofSOAPmessages.Wheneverthe client application calls a web method, the application actually calls a corresponding method in the proxyclass.Thismethodhasthesamenameandparametersasthewebmethodthatisbeingcalled, butformatsthecallto besentasa requestinaSOAP message.Thewebservicereceives this request as a SOAP message, executes the method call and sends back the result as another SOAP message. When the client application receives the SOAP message containing the response, the proxy class deserializes it and returns the results as the return value of the web method that was called.

Section 22.7.2 Creating a REST-Based XML WCF Web Service
•  WebGetmaps a method to a unique URL that can be accessed via an HTTP GEToperation.
•  WebGet’s UriTemplateproperty specifies the URI format that is used to invoke a method.
•  You can test a REST-based service method using a web browser by going to the Service.svcfile’s network address and appending to the address the URI template with the appropriate arguments.

Section 22.7.3 Consuming a REST-Based XML WCF Web Service •  The WebClientclass invokes a web service and receives its response.
Summary   843


•  WebClient’s DownloadStringAsync method invokes a web service asynchronously. The Down-loadStringCompletedevent occurs when the WebClientreceives the completed response from the web service.
•  If a service is invoked asynchronously, the application can continue executing and the user can continue interacting with it while waiting for a response from the web service. DownloadString-CompletedEventArgscontains the information returned by the web service. We can use this vari-able’s properties to get the returned XML document and any errors that may have occurred during the process.

Section 22.8.1 Creating a REST-Based JSON WCF Web Service
•  By default, a web-service method with the WebGetattribute returns data in XML format. To re-turn data in JSON format, set WebGet’s ResponseFormatproperty to WebMessageFormat.Json.
•  Objects being converted to JSON must have Publicproperties. This enables the JSON serializa-tion to create name/value pairs that represent each Publicproperty and its corresponding value.
•  The DataContractattribute exposes a class to the client access.
•  The DataMemberattribute exposes a property of this class to the client.
•  When we test the web service using a web browser, the response prompts you to download a text file containing the JSON formatted data. You can see the service response as a JSON object by opening the file in a text editor such as Notepad.

Section 22.8.2 Consuming a REST-Based JSON WCF Web Service •  XML serialization converts a custom type into XML data format.
•  JSON serialization converts a custom type into JSON data format.
•  The System.Runtime.Serialization.Jsonlibrary’s DataContractJsonSerializerclass serializes customtypes asJSON objects.TousetheSystem.Runtime.Serialization.Jsonlibrary,youmust include a reference to the System.ServiceModel.Webassembly in the project.
•  Attribute Serializableindicates that a class can be used in serialization.
•  A MemoryStreamobject is used to encapsulate the JSON object so we can read data from the byte array using stream semantics. The MemoryStreamobject is read by the DataContractJsonSerial-izerand then converted into a custom type.

Section 22.9 Blackjack Web Service: Using Session Tracking in a SOAP-Based WCF Web Service
•  Using session tracking eliminates the need for information about the client to be passed between the client and the web service multiple times.

Section 22.9.1 Creating a Blackjack Web Service
•  Web services store session information to provide more intuitive functionality.
•  A service’s interface uses a ServiceContractwith the SessionModeproperty set to Requiredto indicate that the service needs a session to run. The SessionModeproperty is Allowedby default and can also be set to NotAllowedto disable sessions.
•  Setting the ServiceBehavior’s InstanceContextModeproperty to PerSessioncreates a new in-stance of the class for each session. The InstanceContextModeproperty can also be set to PerCall or Single. PerCalluses a new object of the web-service class to handle every method call to the service. Singleuses the same object of the web-service class to handle all calls to the service.
844	Chapter22 WebServicesinC#


Section 22.10 Airline Reservation Web Service: Database Access and Invoking a Ser-vice from ASP.NET
•  You can add a database and corresponding LINQ to SQL classes to create a DataContextobject to support database operations of your web service.

Section 22.11 Equation Generator: Returning User-Defined Types
•  Instances of user-defined types can be passed to or returned from web-service methods.


Self-Review Exercises
22.1	State whether each of the following is true or false. If false, explain why.
a)  The purpose of a web service is to create objects of a class located on a web service host. This class then can be instantiated and used on the local machine.
b)  You must explicitly create the proxy class after you add a service reference for a SOAP-based service to a client application.
c)   A client application can invoke only those methods of a web service that are tagged with the OperationContractattribute.
d)  To enable session tracking in a web-service method, no action is required other than setting the SessionModeproperty to SessionMode.Requiredin the ServiceContractat-tribute.
e)   Operations in a REST web service are defined by their own unique URLs. f)   A SOAP-based web service can return data in JSON format.
g)  For a client application to deserialize a JSON object, the client must define a Serial-izableclass with public instance variables or properties that match those serialized by the web service.
22.2	Fill in the blanks for each of the following statements:
a)  A key difference between SOAP and REST is that SOAP messages have data wrapped in a(n)	.
b)  A WCF web service exposes its methods to clients by adding the	and attributes to the service interface.
c)   Web-service requests are typically transported over the Internet via the	pro-tocol.
d)  To return data in JSON format from a REST-based web service, the	prop-erty of the WebGetattribute is set to	.
e)		transforms an object into a format that can be sent between a web service and a client.
f)   To parse a HTTP response in XML data format, the client application must import the response’s	.


Answers to Self-Review Exercises
22.1	a) False. Web services are used to execute methods on web service hosts. The web service receives the arguments it needs to execute a particular method, executes the method and returns the result to the caller. b) False. The proxy class is created by Visual C# or Visual Web Developer when you add a Service Reference to your project. The proxy class itself is hidden from you. c) True. d) True. e) True. f) False. A SOAP web service implicitly returns data in XML format. g) True.
22.2	a) envelope.  b) ServiceContract,  OperationContract.  c) HTTP.  d) ResponseFormat, WebMessageFormat.Json. e) Serialization. f) namespace.
Exercises   845


Exercises
22.3	(Phone-Book WebService) CreateaREST-basedwebservicethatstoresphone-bookentries in a database (PhoneBook.mdf, which is provided in the examples directory for this chapter) and a client application that consumes this service. Give the client user the capability to enter a new con-tact (service method AddEntry) and to find contacts by last name (service method GetEntries). Pass only primitive types as arguments to the web service. Add a DataContextto the web-service project to enable the web service to interact with the database. The GetEntriesmethod should return an array of strings that contains the matching phone-book entries. Each stringin the array should consist of the last name, first name and phone number for one phone-book entry separated by com-mas. Build an ASP.NET client (Fig. 22.33) to interact with this web service. To use an asynchro-nous web request from an ASP.NET client, you must set the Asyncproperty to true by adding Async="true"to the .aspxpage directive. Since the AddEntrymethod accepts a request and does not return a response to the client, you can use WebClient’sOpenReadmethod to access the service method. You can use the ToArraymethod on the LINQ query to return an array containing LINQ query results.























Fig. 22.33 | Templatewebformforphonebookclient.

22.4	(Phone-Book Web Service Modification) Modify Exercise 22.3 so that it uses a class named PhoneBookEntryto represent a row in the database. The web service should return objects of type PhoneBookEntry in XML format for the GetEntries service method, and the client application should use XML document parsing to interpret the PhoneBookEntryobject.
22.5	(Phone-Book Web Service with JSON) Modify Exercise 22.4 so that the PhoneBookEntry class is passed to and from the web service as a JSON object. Use serialization to convert the JSON object into an object of type PhoneBookEntry.
846	Chapter22 WebServicesinC#


22.6	(Blackjack Modification) Modify the blackjack web-service example in Section 22.9 to in-cludeclass Card.Change service method DealCardso thatitreturns an objectof type Cardand mod-ify method GetHandValueto receive an array of Cards. Also modify the client application to keep track of what cards have been dealt by using Cardobjects. Your Cardclass should include properties for the face and suit of the card. [Note: When you create the Cardclass, be sure to add the Data-Contractattribute to the class and the DataMemberattribute to the properties. Also, in a SOAP-based service, you don’t need to define your own Cardclass on the client as well. The Cardclass will be exposed to the client through the service reference that you add to the client. If the service refer-ence is named ServiceReference, you’ll access the card type as ServiceReference.Card.]
22.7	(Airline Reservation Web-Service Modification) Modify the airline reservation web service inSection 22.10sothatitcontainstwoseparatemethods—onethatallowsuserstoviewallavailable seats, and another that allows users to reserve a particular seat that is currently available. Use an ob-ject of type Ticketto pass information to and from the web service. The web service must be able to handle cases in which two users view available seats, one reserves a seat and the second user tries to reserve the same seat, not knowing that it is now taken. The names of the methods that execute should be Reserveand GetAllAvailableSeats.




WebAppDevelopmentwith ASP.NETinVisualBasic

23
… the challenges are for the designers of these applications: to forget what we think we know about the limitations of theWeb,andbegintoimaginea wider, richer range of possibilities. It’s going to be fun.
—Jesse James Garrett

If any man will draw up his case, and put his name at the foot of the first page, I will give himanimmediatereply.Where he compels me to turn over the sheet, he must wait my leisure.
—Lord Sandwich


Objectives Inthischapteryou’lllearn:
ÿ   Webapplication
developmentusingASP.NET.
ÿ   Tohandletheeventsfroma
WebForm’scontrols.
ÿ   Tousevalidationcontrolsto ensurethatdataisinthe correctformatbeforeit’ssent
fromaclienttotheserver.
ÿ   Tomaintainuser-specific
information.
ÿ   Tocreateadata-drivenweb applicationusingASP.NET
andLINQtoSQL.
848	Chapter23 WebAppDevelopmentwithASP.NETinVisualBasic



23.1  Introduction 23.2  WebBasics
23.3  MultitierApplicationArchitecture
23.4  YourFirstASP.NETApplication
23.4.1 BuildingtheWebTimeApplication
23.4.2 ExaminingWebTime.aspx’sCode-
BehindFile
23.5  StandardWebControls:Designinga Form
23.6  ValidationControls
23.7  SessionTracking
23.7.1 Cookies
23.7.2 SessionTrackingwith HttpSessionState


23.7.3 Options.aspx:Selectinga
ProgrammingLanguage
23.7.4 Recommendations.aspx: DisplayingRecommendationsBased
onSessionValues
23.8  CaseStudy:Database-Driven ASP.NETGuestbook
23.8.1 BuildingaWebFormthatDisplays
DatafromaDatabase
23.8.2 ModifyingtheCode-BehindFilefor
theGuestbookApplication
23.9  OnlineCaseStudy:ASP.NETAJAX
23.10  OnlineCaseStudy:Password-ProtectedBooksDatabase Application


Summary | Self-Review Exercises | Answers to Self-Review Exercises | Exercises


23.1 Introduction
In this chapter, we introduce web-application development with Microsoft’s ASP.NET technology. Web-based applications create web content for web-browser clients.
We present several examples that demonstrate web-application development using Web Forms, web controls (also called ASP.NET server controls) and Visual Basic pro-gramming. WebForm files havethefile-nameextension.aspxandcontain the web page’s GUI. You customize Web Forms by adding web controls including labels, textboxes, images, buttons and other GUI components. The Web Form file represents the web page that is sent to the client browser. We often refer to Web Form files as ASPX files.
An ASPX file created in Visual Studio has a corresponding class written in a .NET language—we use Visual Basic in this book. This class contains event handlers, initializa-tion code, utility methods and other supporting code. The file that contains this class is called the code-behind file and provides the ASPX file’s programmatic implementation.
To develop the code and GUIs in this chapter, we used Microsoft’s Visual Web Developer 2010 Express—a free IDE designed for developing ASP.NET web applica-tions. The full version of Visual Studio 2010 includes the functionality of Visual Web Developer, so the instructions we present for Visual Web Developer also apply to Visual Studio2010.Thedatabaseexample(Section 23.8)alsorequiresSQLServer2008Express. See the Before You Begin section of the book for additional information on this software.
In Chapter 25 (online), we present several additional web-application development topics, including:
•	master pages to maintain a uniform look-and-feel across the Web Forms in a web application
•	creating password-protected websites with registration and login capabilities
•	 usingtheWeb Site Administration Tool tospecify whichpartsofawebsitearepass-word protected
23.2 WebBasics   849


•	using ASP.NET AJAX to quickly and easily improve the user experience for your web applications, giving them responsiveness comparable to that of desktop ap-plications.

23.2 Web Basics
In this section, we discuss what occurs when a user requests a web page in a browser. In its simplest form, a web page is nothing more than an HTML (HyperText Markup Language) document (with the extension .htmlor .htm) that describes to a web browser the docu-ment’s content and how to format it.
HTML documents normally contain hyperlinks that link to different pages or to other partsofthesamepage.Whentheuserclicksahyperlink,awebserverlocatestherequested web page and sends it to the user’s web browser. Similarly, the user can type the address of a web page into the browser’s address field and press Enter to view the specified page.
Web development tools like Visual Web Developer typically use a “stricter” version of HTML called XHTML (Extensible HyperText Markup Language). ASP.NET produces web pages as XHTML documents.

URIs and URLs
URIs (Uniform Resource Identifiers) identify resources on the Internet. URIs that start with http://are called URLs (Uniform Resource Locators). Common URLs refer to files, direc-tories or server-side code that performs tasks such as database lookups, Internet searches and business application processing. If you know the URL of a publicly available resource anywhere on the web, you can enter that URL into a web browser’s address field and the browser can access that resource.

Parts of a URL
A URL contains information that directs a browser to the resource that the user wishes to access. Web servers make such resources available to web clients. Popular web servers in-clude Microsoft’s Internet Information Services (IIS) and Apache’s HTTP Server.
Let’s examine the components of the URL

http://www.deitel.com/books/downloads.html
The http://indicates that the HyperText Transfer Protocol (HTTP) should be used to obtain the resource. HTTP is the web protocol that enables clients and servers to commu-nicate. Next in the URL is the server’s fully qualified hostname (www.deitel.com)—the name of the web server computer on which the resource resides. This computer is referred to as the host, because it houses and maintains resources. The hostname www.deitel.com is translated into an IP (Internet Protocol) address—a numerical value that uniquely identifies the server on the Internet. A Domain Name System (DNS) server maintains a databaseof hostnames and their corresponding IPaddresses, and performs the translations automatically.
The remainder of the URL (/books/downloads.html) specifies the resource’s loca-tion (/books) and name (downloads.html) on the web server. The location could repre-sent an actual directory on the web server’s file system. For security reasons, however, the location is typically a virtual directory. The web server translates the virtual directory into a real location on the server, thus hiding the resource’s true location.
850	Chapter23 WebAppDevelopmentwithASP.NETinVisualBasic


Making a Request and Receiving a Response
When given a URL, a web browser uses HTTP to retrieve and display the web page found at that address. Figure 23.1 shows a web browser sending a request to a web server. Figure 23.2 shows the web server responding to that request.



a) Therequestis sentfromthe webclienttothe webserver




Webclient
Internet



Webserver
b) Afteritreceives therequest,the webserver searchesits systemforthe resource



Fig. 23.1  | Clientrequestingaresourcefromawebserver.









Webclient
Internet

Webserver
Theserver respondstothe requestwith theresource's contents



Fig. 23.2  | Clientreceivingaresponsefromthewebserver.

23.3 Multitier Application Architecture
Web-based applications are multitier applications (sometimes referred to as n-tier appli-cations). Multitier applications divide functionality into separate tiers (that is, logical groupings of functionality). Although tiers can be located on the same computer, the tiers of web-based applications commonly reside on separate computers for security and scal-ability. Figure 23.3 presents the basic architecture of a three-tier web-based application.

Information Tier
The information tier (also called the bottom tier) maintains the application’s data. This tier typically stores data in a relational database management system. For example, a retail store might have a database for storing product information, such as descriptions, prices and quantities in stock. Thesame database also might contain customer information, such as user names, billing addresses and credit card numbers. This tier can contain multiple databases, which together comprise the data needed for an application.
23.3 MultitierApplicationArchitecture	851





Toptier (Clienttier)


Browser	Userinterface




XHTML



Middletier (Businesslogictier)

Businesslogic Webserver	implementedin
ASP.NET


LINQ


Bottomtier (Informationtier)


DBMS	Database



Fig. 23.3  | Three-tierarchitecture.

Business Logic
The middle tier implements business logic, controller logic and presentation logic to control interactions between the application’s clients and its data. The middle tier acts as an intermediary between data in the information tier and the application’s clients. The middle-tier controller logic processes client requests (such as requests to view a product catalog) and retrieves data from the database. The middle-tier presentation logic then pro-cesses data from the information tier and presents the content to the client. Web applica-tions typically present data to clients as web pages.
Business logic in the middle tier enforces business rules and ensures that data is reliable before the server application updates the database or presents the data to users. Business rulesdictatehowclientscan andcannot access application data, andhowapplicationspro-cess data. For example, a business rule in the middle tier of a retail store’s web-based appli-cation might ensure that all product quantities remain positive. A client request to set a negative quantity in the bottom tier’s product information database would be rejected by the middle tier’s business logic.

Client Tier
The client tier, or top tier, is the application’s user interface, which gathers input and dis-plays output. Users interact directly with the application through the user interface (typi-cally viewed in a web browser), keyboard and mouse. In response to user actions (for example, clicking a hyperlink), the client tier interacts with the middle tier to make re-quests and to retrieve data from the information tier. The client tier then displays to the user the data retrieved from the middle tier. The client tier never directly interacts with the information tier.
852	Chapter23 WebAppDevelopmentwithASP.NETinVisualBasic

23.4 Your First ASP.NET Application
Our first example displays the web server’s time of day in a browser window (Fig. 23.4). When this application executes—that is, a web browser requests the application’s web page—the web server executes the application’s code, which gets the current time and dis-plays it in a Label. The web server then returns the result to the web browser that made the request, and the web browser renders the web page containing the time. We show this application executing in the Internet Explorer and Firefox web browsers to show you that the web page renders identically in each.





















Fig. 23.4  | WebTimewebapplicationrunninginInternetExplorerandFirefox.

Testing the Application in Your Default Web Browser
To test this application in your default web browser, perform the following steps:
1. Open Visual Web Developer.
2.  Select Open Web Site… from the File menu.
3.  In the Open Web Site dialog (Fig. 23.5), ensure that File System is selected, then navigate to this chapter’s examples, select the WebTimefolder and click the Open Button.
4. Select WebTime.aspxin the Solution Explorer, then type Ctrl + F5 to execute the web application.

Testing the Application in a Selected Web Browser Ifyouwishtoexecutetheapplicationinanotherwebbrowser,youcancopythewebpage’s address from your default browser’s address field and paste it into another browser’s ad-dress field, or you can perform the following steps:
23.4 YourFirstASP.NETApplication   853





















Fig. 23.5  | Open Web Site dialog.

1.  In the Solution Explorer, right click WebTime.aspxand select Browse With… to display the Browse With dialog (Fig. 23.6).

















Fig. 23.6  | Selectinganotherwebbrowsertoexecutethewebapplication.

2.  From the Browsers list, select the browser in which you’d like to test the web ap-plication and click the Browse Button.
Ifthebrowseryouwishtouseisnotlisted,youcanusetheBrowseWith dialogtoadditems to or remove items from the list of web browsers.
854	Chapter23 WebAppDevelopmentwithASP.NETinVisualBasic


23.4.1 Building the WebTimeApplication
Now that you’ve tested the application, let’s create it in Visual Web Developer.

Step 1: Creating the Web Site Project
Select File > New Web Site... to display the New Web Site dialog (Fig. 23.7). In the left col-umn of this dialog, ensure that Visual Basic is selected, then select Empty Web Site in the middle column. At the bottom of the dialog you can specify the location and name of the web application.























Fig. 23.7  | CreatinganASP.NET Web Site inVisualWebDeveloper.

The Web location: ComboBoxprovides the following options:
•	File System: Creates a new website for testing on your local computer. Such web-sites execute in Visual Web Developer’s built-in ASP.NET Development Server and can be accessed only by web browsers running on the same computer. You can later “publish” your website to a production web server for access via a local networkortheInternet.EachexampleinthischapterusestheFileSystem option, so select it now.
•	HTTP: Creates a new website on an IIS web server and uses HTTP to allow you to put your website’s files on the server. IIS is Microsoft’s software that is used to runproductionwebsites.Ifyouownawebsiteandhaveyourownwebserver,you might use this to build a new website directly on that server computer. You must be an Administrator on the computer running IIS to use this option.
23.4 YourFirstASP.NETApplication   855


•	FTP: Uses File Transfer Protocol (FTP) to allow you to put your website’s files on the server. The server administrator must first create the website on the server for you. FTP is commonly used by so-called “hosting providers” to allow website owners to share a server computer that runs many websites.
Change the name of the web application from WebSite1to WebTime, then click the OK Buttonto create the website.

Step 2: Adding a Web Form to the Website and Examining the Solution Explorer
A Web Form represents one page in a web application—we’ll often use the terms “page” and “Web Form” interchangeably. A Web Form contains a web application’s GUI. To create the WebTime.aspxWeb Form:
1.  Right click the project name in the Solution Explorer and select Add New Item... to display the Add New Item dialog (Fig. 23.8).



















Fig. 23.8  | AddinganewWeb Form tothewebsitewiththeAdd New Item dialog.

2.  In the left column, ensure that Visual Basic is selected, then select Web Form in the middle column.
3. In the Name: TextBox, change the file name to WebTime.aspx, then click the Add Button.
After you add the Web Form, the IDE opens it in Source view by default (Fig. 23.9). This view displays the markup for the Web Form. As you become more familiar with ASP.NET and building web sites in general, you might use Source view to perform high precision adjustments to your design or to program in the JavaScript language that exe-cutes in web browsers. For the purposes of this chapter, we’ll keep things simple by working exclusively in Design mode. To switch to Design mode, you can click the Design Buttonat the bottom of the code editor window.
856	Chapter23 WebAppDevelopmentwithASP.NETinVisualBasic






Source modeshowsonly theWebForm’smarkup

Split modeallowsyouto viewtheWebForm’smarkup anddesignatthesametime

Design modeallowsyouto buildaWebFormusing similartechniquestobuilding aWindowsForm





Fig. 23.9  | WebForminSource view.

The Solution Explorer
The Solution Explorer (Fig. 23.10) shows the contents of the website. We expanded the node for WebTime.aspxto show you its code-behind file WebTime.aspx.vb. Visual Web Developer’s Solution Explorer contains several buttons that differ from Visual Basic Ex-press. The View Designer button allows you to open the Web Form in Design mode. The Copy Web Site button opens a dialog that allows you to move the files in this project to another location, such as a remote web server. This is useful if you’re developing the ap-plication on your local computer but want to make it available to the public from a differ-ent location. Finally, the ASP.NET Configuration button takes you to a web page called the Web Site Administration Tool, where you can manipulate various settings and security op-tions for your application.




View Code Nest Related Files

Refresh Properties

Code-behindfilethat containstheapplication’s businesslogic

View Designer
Copy Web Site


ASP.NET Configuration


ASPXpagerepresentsthe application’suserinterface



Fig. 23.10 | Solution Explorer windowforanEmpty Web Site project.
23.4 YourFirstASP.NETApplication   857


If the ASPX file is not open in the IDE, you can open it in Design mode three ways: •	double click it in the Solution Explorer
•	select it in the Solution Explorer and click the View Designer (	) Button •	right click it in the Solution Explorer and select View Designer
To open the code-behind file in the code editor, you can •	double click it in the Solution Explorer
•	selecttheASPXfileintheSolutionExplorer,thenclicktheViewCode (	)Button •	right click the code-behind file in the Solution Explorer and select Open
The Toolbox
Figure 23.11 shows the Toolbox displayed in the IDE when the project loads. Part (a) dis-plays the beginning of the Standard list of web controls, and part (b) displays the remain-ing web controls and the list of other control groups. We discuss specific controls listed in Fig. 23.11 as they’re used throughout the chapter. Many of the controls have similar or identical names to Windows Forms controls presented earlier in the book.



a)	b)


















Fig. 23.11 | Toolbox inVisualWebDeveloper.

The Web Forms Designer
Figure 23.12showstheinitialWebForminDesign mode.Youcan draganddrop controls from the Toolbox onto the Web Form. You can also type at the current cursor location to add so-called static text to the web page. In response to such actions, the IDE generates the appropriate markup in the ASPX file.
858	Chapter23 WebAppDevelopmentwithASP.NETinVisualBasic











Cursorappearsherebydefault	Cursor’scurrentlocationinthedocument


Fig. 23.12 | Design modeoftheWebFormsDesigner.

Step 3: Changing the Title of the Page
Before designing the Web Form’s content, you’ll change its title to ASimpleWebFormEx-ample. This title will be displayed in the web browser’s title bar (see Fig. 23.4). It’s typi-cally also used by search engines like Google and Bing when they index real websites for searching. Every page should have a title. To change the title:
1. Ensure that the ASPX file is open in Design view.
2. View the Web Form’s properties by selecting DOCUMENT, which represents the Web Form, from the drop-down list in the Properties window.
3.  ModifytheTitlepropertyintheProperties windowbysettingittoASimpleWeb FormExample.

Designing a Page
Designing a Web Form is similar to designing a Windows Form. To add controls to the page,drag-and-dropthemfromtheToolbox ontotheWebForminDesign view.TheWeb Form and each control are objects that have properties, methods and events. You can set these properties visually using the Properties window or programmatically in the code-be-hind file. You can also type text directly on a Web Form at the cursor location.
Controls andother elements are placed sequentially on a Web Form one after another in the order in which you drag-and-drop them onto the Web Form. The cursor indicates the insertion point in the page. If you want to position a control between existing text or controls, you can drop the control at a specific position between existing page elements. You can also rearrange controls with drag-and-drop actions in Design view. The positions of controls and other elements are relative to the Web Form’s upper-left corner. This type of layout is known as relative positioning and it allows the browser to move elements and resize them based on the size of the browser window. Relative positioning is the default, and we’ll use it throughout this chapter.
For precise control over the location and size of elements, you can use absolute posi-tioning in which controls are located exactly where you drop them on the Web Form. If you wish to use absolute positioning:
1. Select Tools > Options…., to display the Options dialog.
2.  If it isn’t checked already, check the Show all settings checkbox.
23.4 YourFirstASP.NETApplication   859


3.  Next, expand the HTML Designer > CSS Styling node and ensure that the check-boxlabeledChangepositioningtoabsoluteforcontrolsaddedusingToolbox,paste or drag and drop is selected.

Step 4: Adding Text and a Label
You’ll now add some text and a Labelto the Web Form. Perform the following steps to add the text:
1.  Ensure that the Web Form is open in Design mode. 2.  Type the following text at the current cursor location:
CurrenttimeontheWebserver:
3.  Selectthetextyoujusttyped,thenselectHeading2 fromtheBlockFormat Combo-Box(Fig. 23.13) to format this text as a heading that will appear in a larger bold font. In more complex pages, headings help you specify the relative importance of parts of that content—like sections in a book chapter.



Block Format ComboBox
















Fig. 23.13 | ChangingthetexttoHeading 2 heading.

4.  Click to the right of the text you just typed and press the Enter key to start a new paragraph in the page. The Web Form should now appear as in Fig. 23.14.
5. Next, drag a Labelcontrol from the Toolbox into the new paragraph or double click the Labelcontrol in the Toolbox to insert the Labelat the current cursor position.
6.  Using the Properties window, set the Label’s (ID)property to timeLabel. This specifies the variable name that will be used to programmatically change the Label’s Text.
860	Chapter23 WebAppDevelopmentwithASP.NETinVisualBasic





Thecursoris positionedhereafter insertinganew paragraphby pressingEnter


Fig. 23.14 | WebTime.aspxafterinsertingtextandanewparagraph.

7. Because the Label’s Textwill be set programmatically, delete the current value of the Label’s Textproperty. When a Labeldoes not contain text, its name is dis-played in square brackets in Design view (Fig. 23.15) as a placeholder for design and layout purposes. This text is not displayed at execution time.





Labelcontrol




Fig. 23.15 | WebTime.aspxafteraddingaLabel.

Step 5: Formatting the Label
Formatting in a web page is performed with CSS (Cascading Style Sheets). It’s easy to use CSS to format text and elements in a Web Form via the tools built into Visual Web De-veloper. In this example, we’d like to change the Label’s background color to black, its foreground color yellow and make its text size larger. To format the Label, perform the following steps:
1. Click the Labelin Design view to ensure that it’s selected.
2.  Select View > Other Windows > CSS Properties to display the CSS Properties win-dow at the left side of the IDE (Fig. 23.16).
3.  Right click in the Applied Rules box and select New Style… to display the New Style dialog (Fig. 23.17).
4.  Type the new style’s name—.timeStyle—in the Selector: ComboBox. Styles that apply to specific elements must be named with a dot (.) preceding the name. Such a style is called a CSS class.
5.  Each item you can set in the New Style dialog is known as a CSS attribute. To change timeLabel’s foreground color, select the Font category from the Category list, then select the yellow color swatch for the color attribute.
6.  Next, change the font-size attribute to xx-large.
23.4 YourFirstASP.NETApplication   861















Fig. 23.16 | CSS Properties window.


Thenewstylewillbeappliedtothe currentlyselectedelementinthepage

Newstyle’sname



Font categoryallowsyouto styleanelement’sfont

Background categoryallows youtospecifyanelement’s backgroundcoloror backgroundimage





Previewofwhatthe stylewilllooklike




Fig. 23.17 | New Style dialog.

7.  To change timeLabel’s background color, select the Background category, then select the black color swatch for the background-color attribute.
The New Style dialog should now appear as shown in Fig. 23.18. Click the OK Buttonto apply the style to the timeLabelsothat it appears as shown in Fig. 23.19. Also, notice that the Label’s CssClassproperty is now set to timeStylein the Properties window.
862	Chapter23 WebAppDevelopmentwithASP.NETinVisualBasic






Boldcategory namesindicatethe categoriesinwhich CSSattribute valueshavebeen changed











Fig. 23.18 | New Style dialogafterchangingtheLabel’sfontsize,foregroundcolorand backgroundcolor.











Fig. 23.19 | Design viewafterchangingtheLabel’sstyle.

Step 6: Adding Page Logic
Now that you’ve designed the GUI, you’ll write code in the code-behind file to obtain the server’s time and display it on the Label. First, open WebTime.aspx.vbby double clicking its node in the Solution Explorer. In this example, you’ll add an event handler to the code-behind file to handle the Web Form’s Initevent, which occurs when the page is first re-quested by a web browser. The event handler for this event—named Page_Init—initial-izethepage.TheonlyinitializationrequiredforthisexampleistosetthetimeLabel’sText property to the time on the web server computer. To create the Page_Initevent handler:
1.  Select (Page Events) from the left ComboBoxat the top of the code editor window. 2.  Select Init from the right ComboBoxat the top of the code editor window.
23.4 YourFirstASP.NETApplication   863


3.  Complete the event handler by inserting the following code in the Page_Init event handler:

' display the server's current time in timeLabel timeLabel.Text = DateTime.Now.ToString("hh:mm:ss")

Step 7: Setting the Start Page and Running the Program
To ensure that WebTime.aspxloads when you execute this application, right click it in the Solution Explorer and select Set As Start Page. You can now run the program in one of sev-eralways. Atthe beginningof Fig. 23.4, youlearnedhow toviewthe Web Form by typing Ctrl + F5 to run the application. You can also right click an ASPX file in the Solution Ex-plorer and select View in Browser. Both of these techniques execute the ASP.NET Devel-opment Server, open your default web browser and load the page into the browser, thus runningthewebapplication.ThedevelopmentserverstopswhenyouexitVisualWebDe-veloper.
If problems occur when running your application, you can run it in debug mode by selecting Debug > Start Debugging, by clicking the Start Debugging Button(	) or by typing F5 to view the web page in a web browser with debugging enabled. You cannot debug a web application unless debugging is explicitly enabled in the application’s Web.configfile—a file that is generated when you create an ASP.NET web application. This file stores the application’s configuration settings. You’ll rarely need to manually modify Web.config. The first time you select Debug > Start Debugging in a project, a dialogappearsandaskswhetheryouwanttheIDEtomodifytheWeb.configfiletoenable debugging. After you click OK, the IDE executes the application. You can stop debugging by selecting Debug > Stop Debugging.
Regardless of how you execute the web application, the IDE will compile the project beforeit executes. Infact, ASP.NET compilesyourwebpagewheneveritchanges between HTTP requests. For example, suppose you browse the page, then modify the ASPX file or add code to the code-behind file. When you reload the page, ASP.NET recompiles the page on the server before returning the response to the browser. This important behavior ensures that clients always see the latest version of the page. You can manually compile an entire website by selecting Build Web Site from the Debug menu in Visual Web Developer.


23.4.2 Examining WebTime.aspx’s Code-Behind File
Figure 23.20 presents the code-behind file WebTime.aspx.vb. Line 3 of Fig. 23.20 begins the declaration of class WebTime. In Visual Basic, a class declaration can span multiple source-code files—the separate portions of the class declaration in each file are known as partial classes. The Partialmodifier indicates that the code-behind file is part of a larger class. Like Windows Forms applications, the rest of the class’s code is generated for you based on your visual interactions to create the application’s GUI in Design mode. That codeisstoredinothersourcecodefiles as partialclasseswiththesamename.Thecompiler assembles all the partial classes that have the same into a single class declaration.
Line 4 indicates that WebTimeinherits from class Pagein namespace System.Web.UI. This namespace contains classes and controls for building web-based applications. Class Pagerepresents the default capabilities of each page in a webapplication—allpages inherit directly or indirectly from this class.
864	Chapter23 WebAppDevelopmentwithASP.NETinVisualBasic


1  ' Fig. 23.20: WebTime.aspx.vb
2  ' Code-behind file for a page that displays the current time. 3  Partial Class WebTime
4	Inherits System.Web.UI.Page 5
6	' initializes the contents of the page
7	Protected Sub Page_Init(ByVal sender As Object, _ 8         ByVal e As System.EventArgs) Handles Me.Init 9
10	' display the server's current time in timeLabel 11	timeLabel.Text = DateTime.Now.ToString("hh:mm:ss") 12     End Sub ' Page_Init
13  End Class ' WebTime

Fig. 23.20 | Code-behindfileforapagethatdisplaysthewebserver’stime.

Lines 7–12 define the Page_Initevent handler, which initializes the page in response to the page’s Initevent. The only initialization required for this page is to set the time-Label’s Textproperty to the time on the web server computer. The statement in line 11 retrieves the current time (DateTime.Now) and formatsit as hh:mm:ss. For example, 9AM is formatted as 09:00:00, and 2:30 PM is formatted as 02:30:00. As you’ll see, variable timeLabelrepresents an ASP.NET Labelcontrol. The ASP.NET controls are defined in namespace System.Web.UI.WebControls.

23.5 Standard Web Controls: Designing a Form
This section introduces some of the web controls located in the Standard section of the Toolbox (Fig. 23.11). Figure 23.21 summarizes the controls used in the next example.



Webcontrol

TextBox
Button
HyperLink
DropDownList

RadioButtonList
Image

Description

Gathers user input and displays text. Triggers an event when clicked. Displays a hyperlink.
Displays a drop-down list of choices from which a user can select an item.
Groups radio buttons.
Displays images (for example, PNG, GIF and JPG).


Fig. 23.21 | Commonlyusedwebcontrols.

A Form Gathering User Input
Figure 23.22 depicts a form for gathering user input. This example does not perform any tasks—that is, no action occurs when the user clicks Register. As an exercise, we ask you toprovide thefunctionality. Here we focus on the steps for adding these controlstoa Web Form and for setting their properties. Subsequent examples demonstrate how to handle the events of many of these controls. To execute this application:
23.5 StandardWebControls:DesigningaForm   865








Heading 3 paragraph

Paragraphofplaintext Imagecontrol

Atablecontainingfour ImagesandfourTextBoxes

TextBoxcontrol


DropDownListcontrol
HyperLinkcontrol




RadioButtonListcontrol



Buttoncontrol




Fig. 23.22 | WebFormthatdemonstrateswebcontrols.

1.  Select Open Web Site… from the File menu.
2.  In the Open Web Site dialog, ensure that File System is selected, then navigate to thischapter’sexamples,selecttheWebControlsfolderandclicktheOpen Button.
3.  Select WebControls.aspxin the Solution Explorer, then type Ctrl + F5 to execute the web application in your default web browser.

Create the Web Site
To begin, follow the steps in Section 23.4.1 to create an Empty Web Site named WebCon-trols, then add a Web Form named WebControls.aspxtothe project. Set the document’s Title property to "Web Controls Demonstration". To ensure that WebControls.aspx loads when you execute this application, right click it in the Solution Explorer and select Set As Start Page.
866	Chapter23 WebAppDevelopmentwithASP.NETinVisualBasic


Adding the Images to the Project
The images used in this example are located in the imagesfolder with this chapter’s exam-ples. Before you can display images in the Web Form, they must be added to your project. To add the imagesfolder to your project:
1.  Open Windows Explorer.
2.  Locate and open this chapter’s examples folder (ch23).
3.  Drag the imagesfolder from Windows Explorer into Visual Web Developer’s Solution Explorer window and drop the folder on the name of your project.
The IDE will automatically copy the folder and its contents into your project.


Adding Text and an Image to the Form
Next, you’ll begin creating the page. Perform the following steps:
1.  First create the page’s heading. At the current cursor position on the page, type the text "RegistrationForm", then use the Block Format ComboBoxin the IDE’s toolbar to change the text to Heading 3 format.
2.  Press Enter to start a new paragraph, then type the text "Pleasefillinall fieldsandclicktheRegisterbutton".
3.  Press Enter to start a new paragraph, then double click the Imagecontrol in the Toolbox. This control inserts an image into a web page, at the current cursor po-sition. Set the Image’s (ID)property to userInformationImage. The ImageUrl property specifies the location of the image to display. In the Properties window, click the ellipsis for the ImageUrlproperty to display the Select Image dialog. Se-lect the imagesfolder under Project folders: to display the list of images. Then select the image user.png.
4.  Click OK to display the image in Design view, then click to the right of the Image and press Enter to start a new paragraph.


Adding a Table to the Form
Form elements are often placed in tables for layout purposes—like the elements that rep-resent the first name, last name, e-mail and phone information in Fig. 23.22. Next, you’ll create a table with two rows and two columns in Design mode.
1.  Select Table > Insert Table to display the Insert Table dialog (Fig. 23.23). This di-alog allows you to configure the table’s options.
2.  Under Size, ensure that the values of Rows and Columns are both 2—these are the default values.
3.  Click OK to close the Insert Table dialog and create the table.
By default, the contents of a table cell are aligned vertically in the middle of the cell. We changed the vertical alignment of all cells in the table by setting the valignproperty to topin the Properties window. This causes the content in each table cell to align with the top of the cell. You can set the valignproperty for each table cell individually or by selecting all the cells in the table at once, then changing the valignproperty’s value.
23.5 StandardWebControls:DesigningaForm   867



























Fig. 23.23 | Insert Table dialog.

After creating the table, controls and text can be added to particular cells to create a neatly organized layout. Next, add Imageand TextBoxcontrols to each the four table cells as follows:
1. Click thetable cell in the first row and first column of the table, then double click the Imagecontrol in the Toolbox. Set its (ID)property to firstNameImageand set its ImageUrlproperty to the image fname.png.
2. Next, double click the TextBoxcontrol in the Toolbox. Set its (ID)property to firstNameTextBox. As in Windows Forms, a TextBoxcontrol allows you to ob-tain text from the user and display text to the user
3. Repeat this process in the first row and second column, but set the Image’s (ID) property to lastNameImageand its ImageUrlproperty to the image lname.png, and set the TextBox’s (ID)property to lastNameTextBox.
4.  Repeat Steps 1 and 2 in the second row and first column, but set the Image’s (ID) property to emailImageand its ImageUrlproperty to the image email.png, and set the TextBox’s (ID)property to emailTextBox.
5.  Repeat Steps 1 and 2 in the second row and second column, but set the Image’s (ID)property to phoneImageand its ImageUrlproperty to the image phone.png, and set the TextBox’s (ID)property to phoneTextBox.
868	Chapter23 WebAppDevelopmentwithASP.NETinVisualBasic


Creating the Publications Section of the Page
This section contains an Image, some text, a DropDownListcontrol and a HyperLinkcon-trol. Perform the following steps to create this section:
1.  Click below the table, then use the techniques you’ve already learned in this sec-tion to add an Image named publicationsImage that displays the publica-tions.pngimage.
2.  Click to the right of the Image, then press Enter and type the text "Whichbook wouldyoulikeinformationabout?"in the new paragraph.
3.  Hold the Shift key and press Enter to create a new line in the current paragraph, then double click the DropDownListcontrol in the Toolbox. Set its (ID)property to booksDropDownList. This control is similar to the Windows Forms ComboBox control, but doesn’t allow users to type text. When a user clicks the drop-down list, it expands and displays a list from which the user can make a selection.
4. You can add items to the DropDownList using the ListItem Collection Editor, which you can access by clicking the ellipsis next to the DropDownList’s Items property in the Properties window, or by using the DropDownList Tasks smart-tag menu. To open this menu, click the small arrowhead that appears in the up-per-right corner of the control in Design mode (Fig. 23.24). Visual Web Devel-oper displays smart-tag menus for many ASP.NET controls to facilitate common tasks. Clicking Edit Items... in the DropDownList Tasks menu opens the ListItem Collection Editor, which allows you to add ListItemelements to the DropDown-List. Add items for "VisualBasic2010HowtoProgram", "VisualC#2008How toProgram", "JavaHowtoProgram"and "C++HowtoProgram"by clicking the Add Buttonfour times. For each item, select it, then set its Textproperty to one of the four book titles.






Fig. 23.24 | DropDownList Tasks smart-tagmenu.

5.  Click to the right of the DropDownListand press Enter to start a new paragraph, then double click the HyperLinkcontrol in the Toolbox to add a hyperlink to the webpage.Setits(ID)propertytobooksHyperLinkanditsTextpropertyto"Click heretoviewmoreinformationaboutourbooks". Set the NavigateUrlproperty tohttp://www.deitel.com. This specifiestheresourceorwebpage that willbere-questedwhentheuserclickstheHyperLink.SettingtheTargetpropertyto_blank specifiesthattherequestedwebpageshouldopeninanewbrowserwindow.Byde-fault, HyperLinkcontrols cause pages to open in the same browser window.

Completing the Page
Next you’ll create the Operating System section of the page and the Register Button. This section containsa RadioButtonListcontrol, which providesa series of radio buttonsfrom
23.6 ValidationControls   869


which the user can select only one. The RadioButtonList Tasks smart-tag menu provides an Edit Items… link to open the ListItem Collection Editor so that you can create the items in the list. Perform the following steps:
1.  Click to the right of the HyperLinkcontrol and press Enter to create a new para-graph, then add an Imagenamed osImagethat displays the os.pngimage.
2.  Click to the right of the Imageand press Enter to create a new paragraph, then add a RadioButtonList. Set its (ID)property to osRadioButtonList. Use the ListItem Collection Editor to add the items shown in Fig. 23.22.
3.  Finally, click to the right of the RadioButtonListand press Enter to create a new paragraph, then add a Button. A Buttonweb control represents a button that triggers an action when clicked. Set its (ID)property to registerButtonand its Textproperty to Register. As stated earlier, clicking the Register button in this example does not do anything.
You can now execute the application (Ctrl + F5) to see the Web Form in your browser.


23.6 Validation Controls
This section introduces a different type of web control, called a validation control or vali-dator, which determines whether the data in another web control is in the proper format. For example, validators can determine whether a user has provided information in a re-quired field or whether a zip-code field contains exactly five digits. Validators provide a mechanism for validating user input on the client. When the page is sent to the client, the validatorisconvertedintoJavaScriptthatperformsthevalidationintheclientwebbrowser. JavaScript is a scripting language that enhances the functionality of web pages and is typi-cally executed on the client. Unfortunately, some client browsers might not support script-ing or the user might disable it. For this reason, you should always perform validation on the server. ASP.NET validation controls can function on the client, on the server or both.

Validating Input in a Web Form
The Web Form in Fig. 23.25 prompts the user to enter a name, e-mail address and phone number. A website could use a form like this to collect contact information from visitors. After the user enters any data, but before the data is sent to the web server, validators en-sure that the user entered a value in each field and that the e-mail address and phone-num-ber values are in an acceptable format. In this example, (555) 123-4567, 555-123-4567 and 123-4567 are all considered valid phone numbers. Once the data is submitted, the webserverrespondsby displaying amessagethat repeatsthesubmittedinformation.Areal business application would typically store the submitted data in a database or in a file on the server. We simply send the data back to the client to demonstrate that the server re-ceived the data. To execute this application:
1.  Select Open Web Site… from the File menu.
2.  In the Open Web Site dialog, ensure that File System is selected, then navigate to this chapter’s examples, select the Validationfolder and click the Open Button.
3.  Select Validation.aspxin the Solution Explorer, then type Ctrl + F5 to execute the web application in your default web browser.
870	Chapter23 WebAppDevelopmentwithASP.NETinVisualBasic


In the sample output:
•	Fig. 23.25(a) shows the initial Web Form
•	 Fig. 23.25(b) shows the result of submitting the form before typing any data in the TextBoxes
•	Fig. 23.25(c)shows theresultsafterenteringdata in each TextBox, but specifying an invalid e-mail address and invalid phone number
•	Fig. 23.25(d) shows the results after entering valid values for all three TextBoxes and submitting the form.



a)InitialWebForm















b)WebFormaftertheuser pressestheSubmit Button withouthavingenteredanydata intheTextBoxes;each TextBoxisfollowedbyanerror messagethatwasdisplayedbya validationcontrol


RequiredFieldValidator controls









Fig. 23.25 | ValidatorsinaWebFormthatretrievesusercontactinformation.(Part1of2.)
23.6 ValidationControls   871



c)WebFormaftertheuserentersa name,aninvalide-mailaddressandan invalidphonenumberinthe TextBoxes,thenpressestheSubmit Button;thevalidationcontrolsdisplay errormessagesinresponsetotheinvalid e-mailandphonenumbervalues



RegularExpressionValidator controls







d)TheWebForm aftertheuserenters validvaluesforall threeTextBoxes andpressesthe Submit Button















Fig. 23.25 | ValidatorsinaWebFormthatretrievesusercontactinformation.(Part2of2.)


Creating the Web Site
To begin, follow the steps in Section 23.4.1 to create an Empty Web Site named Valida-tion, then add a Web Form named Validation.aspxto the project. Set the document’s Title property to "Demonstrating Validation Controls". To ensure that Valida-tion.aspxloads when you execute this application, right click it in the Solution Explorer and select Set As Start Page.
872	Chapter23 WebAppDevelopmentwithASP.NETinVisualBasic


Creating the GUI
To create the page, perform the following steps:
1.  Type "Pleasefilloutallthefieldsinthefollowingform:", then use the Block Format ComboBoxin the IDE’s toolbar to change the text to Heading 3 for-mat and press Enter to create a new paragraph.
2.  Insert a three row and two column table. You’ll add elements to the table mo-mentarily.
3.  Click below the table and add a Button. Set its (ID)property to submitButton and its Textproperty to Submit. Press Enter to create a new paragraph. By de-fault, a Buttoncontrol in a Web Form sends the contents of the form back to the server for processing.
4. Add a Label. Set its (ID)property to outputLabeland clear its Textproperty— you’ll set it programmatically when the user clicks the submitButton. Set the outputLabel’s Visibleproperty to False, so the Labeldoes not appear in the client’s browser when the page loads for the first time. You’ll programmatically display this Labelafter the user submits valid data.
Next you’ll add text and controls to the table you created in Step 2 above. Perform the following steps:
1.  In the left column, type the text "Name:"in the first row, "E-mail:"in the sec-ond row and "Phone:"in the row column.
2.  In the right column of the first row, add a TextBoxand set its (ID)property to nameTextBox.
3.  In the right column of the second row, add a TextBoxand set its (ID)property to emailTextBox. Then type the text "e.g.,email@domain.com"to the right of the TextBox.
4.  In the right column of the third row, add a TextBoxand set its (ID)property to phoneTextBox. Then type the text "e.g.,(555)555-1234"to the right of the TextBox.

Using RequiredFieldValidatorControls
We use three RequiredFieldValidatorcontrols (found in the Validation section of the Toolbox) to ensure that the name, e-mail address and phone number TextBoxes are not empty when the form is submitted. A RequiredFieldValidatormakes an input control a required field. If such a field is empty, validation fails. Add a RequiredFieldValidator as follows:
1.  Click to the right of the nameTextBoxin the table and press Enter to move to the next line.
2. Add a RequiredFieldValidator, set its (ID)to nameRequiredFieldValidator and set the ForeColorproperty to Red.
3.  Set the validator’s ControlToValidateproperty to nameTextBoxto indicate that this validator verifies the nameTextBox’s contents.
4. Set the validator’s ErrorMessageproperty to "Pleaseenteryourname". This is displayed on the Web Form only if the validation fails.
23.6 ValidationControls   873


5.  Set the validator’s Displayproperty to Dynamic, so the validator occupies space on the Web Form only when validation fails. When this occurs, space is allocated dynamically, causing the controls below the validator to shift downward to ac-commodate the ErrorMessage, as seen in Fig. 23.25(a)–(c).
Repeat these steps to add two more RequiredFieldValidators in the second and third rows of the table. Set their (ID)properties to emailRequiredFieldValidatorand phone-RequiredFieldValidator, respectively, and set their ErrorMessageproperties to "Please enteryouremailaddress"and "Pleaseenteryourphonenumber", respectively.

Using RegularExpressionValidatorControls
This example also uses two RegularExpressionValidatorcontrols to ensure that the e-mail address and phone number entered by the user are in a valid format. Regular expres-sions are beyond the scope of this book; however, Visual Web Developer provides several predefined regular expressions that you can simply select to take advantage of this powerful validation control. Add a RegularExpressionValidatoras follows:
1.  Clicktotherightof the emailRequiredFieldValidatorin thesecondrow of the table and add a RegularExpressionValidator, then set its (ID)to emailRegu-larExpressionValidatorand its ForeColorproperty to Red.
2.  Set the ControlToValidateproperty to emailTextBoxto indicate that this vali-dator verifies the emailTextBox’s contents.
3.  Set the validator’s ErrorMessageproperty to "Pleaseenterane-mailaddress inavalidformat".
4.  Set the validator’s Displayproperty to Dynamic, so the validator occupies space on the Web Form only when validation fails.
Repeat the preceding steps to add another RegularExpressionValidatorin the third row of the table. Set its (ID)property to phoneRequiredFieldValidatorand its ErrorMes-sageproperty to "Pleaseenteraphonenumberinavalidformat", respectively.
A RegularExpressionValidator’s ValidationExpressionproperty specifies the reg-ular expression that validates the ControlToValidate’s contents. Clicking the ellipsis next toproperty ValidationExpressionin the Properties window displays theRegular Expres-sion Editor dialog, which contains a list of Standard expressions for phone numbers, zip codes and other formatted information. For the emailRegularExpressionValidator, we selected the standard expression Internet e-mail address. If the user enters text in the emailTextBoxthat does not have the correct format and either clicks in a different text box or attempts to submit the form, the ErrorMessagetext is displayed in red.
For  the  phoneRegularExpressionValidator,  we  selected  U.S.  phone  number  to ensure that a phone number contains an optional three-digit area code either in paren-theses and followed by an optional space or without parentheses and followed by a required hyphen. After an optional area code, a phone number must contain three digits, a hyphen and another four digits. For example, (555)123-4567, 555-123-4567and 123-4567are all valid phone numbers.

Submitting the Web Form’s Contents to the Server
If all five validators are successful (that is, each TextBoxis filled in, and the e-mail address and phone number provided are valid), clicking the Submit button sends the form’s data
874	Chapter23 WebAppDevelopmentwithASP.NETinVisualBasic


to the server. As shown in Fig. 23.25(d), the server then responds by displaying the sub-mitted data in the outputLabel.


Examining the Code-Behind File for a Web Form That Receives User Input
Figure 23.26 shows the code-behind file for this application. Notice that this code-behind file does not contain any implementation related to the validators. We say more about this soon. In this example, we respond to the page’s Loadevent to process the data submitted by the user. This event occurs each time the page loads into a web browser—as opposed to the Initevent, which executes only the first time the page is requested by the user. The event handler for this event is Page_Load(lines 7–30). To create the event handler, open Validation.aspx.vbin the code editor and perform the following steps:
1.  Select (Page Events) from the left ComboBoxat the top of the code editor window. 2.  Select Load from the right ComboBoxat the top of the code editor window.
3.  Complete the event handler by inserting the code from Fig. 23.26.


1  ' Fig. 23.26: Validation.aspx.vb
2  ' Code-behind file for the form demonstrating validation controls. 3  Partial Class Validation
4	Inherits System.Web.UI.Page 5
6	' Page_Load event handler executes when the page is loaded 7	Protected Sub Page_Load(ByVal sender As Object,
8	ByVal e As System.EventArgs) Handles Me.Load 9
10	' if this is not the first time the page is loading 11	' (i.e., the user has already submitted form data) 12	If IsPostBack Then
13	Validate() ' validate the form 14
15	If IsValid Then
16	' retrieve the values submitted by the user 17	Dim name As String = nameTextBox.Text
18	Dim email As String = emailTextBox.Text 19	Dim phone As String = phoneTextBox.Text 20
21	' create a table indicating the submitted values
22	outputLabel.Text = "Thank you for your submission<br/>" & 23                  "We received the following information:<br/>"
24	outputLabel.Text &=
25	String.Format("Name: {0}{1}E-mail:{2}{1}Phone:{3}", 26                     name, "<br/>", email, phone)
27	outputLabel.Visible = True ' display the output message 28            End If
29	End If
30	End Sub ' Page_Load
31  End Class ' Validation

Fig. 23.26 | Code-behindfileforaWebFormthatobtainsauser’scontactinformation.
23.7 SessionTracking   875


Differentiating Between the First Request to a Page and a Postback
Web programmers using ASP.NET often design their web pages so that the current page reloads when the user submits the form; this enables the program to receive input, process it as necessary and display the results in the same page when it’s loaded the second time. These pages usually contain a form that, when submitted, sends the values of all the con-trols to the server and causes the current page to be requested again. This event is known as a postback. Line 12 uses the IsPostBackproperty of class Pageto determine whether the page is being loaded due to a postback. The first time that the web page is requested, IsPostBackis False, and the page displays only the form for user input. When the post-back occurs (from the user clicking Submit), IsPostBackis True.

Server-Side Web Form Validation
Server-side Web Form validation must be implemented programmatically. Line 13 calls the current Page’s Validatemethod to validate the information in the request. This vali-dates the information as specified by the validation controls in the Web Form. Line 15 uses the IsValidproperty of class Pageto check whether the validation succeeded. If this property is set to True(that is, validation succeeded and the Web Form is valid), then we display the Web Form’s information. Otherwise, the web page loads without any changes, except any validator that failed now displays its ErrorMessage.

Processing the Data Entered by the User
Lines 17–19 retrieve the values of nameTextBox, emailTextBoxand phoneTextBox. When data is posted to the web server, the data that the user entered is accessible to the web ap-plication through the web controls’ properties. Next, lines 22–27 set outputLabel’s Text to display a message that includes the name, e-mail and phone information that was sub-mitted to the server. In lines 22, 23 and 26, notice the use of <br/>rather than vbCrLfto start new lines in the outputLabel—<br/>is the markup for a line break in a web page. Line 27 sets the outputLabel’s Visibleproperty to True, so the user can see the thank-you message and submitted data when the page reloads in the client web browser.

23.7 Session Tracking
Originally, critics accused the Internet and business of failing to provide the customized service typically experienced in “brick-and-mortar” stores. To address this problem, busi-nesses established mechanisms by which they could personalize users’ browsing experienc-es, tailoring content to individual users. Businesses achieve this level of service by tracking each customer’s movement through the Internet and combining the collected data with information provided by the consumer, including billing information, personal preferenc-es, interests and hobbies.

Personalization
Personalizationmakes it possible forbusinesses tocommunicate effectively withtheircus-tomers and also improves users’ ability to locate desired products and services. Companies that provide content of particular interest to users can establish relationships with custom-ers and build on those relationships over time. Furthermore, by targeting consumers with personal offers, recommendations, advertisements, promotions and services, businesses create customer loyalty. Websites can use sophisticated technology to allow visitors to cus-
876	Chapter23 WebAppDevelopmentwithASP.NETinVisualBasic


tomize home pages to suit their individual needs and preferences. Similarly, online shop-ping sites often store personal information for customers, tailoring notifications and special offers to their interests. Such services encourage customers to visit sites more fre-quently and make purchases more regularly.

Privacy
A trade-off exists between personalized business service and protection of privacy. Some consumers embrace tailored content, but others fear the possible adverse consequences if the info they provide to businesses is released or collected by tracking technologies. Con-sumers and privacy advocates ask: What if the business to which we give personal data sells or gives that information to another organization without our knowledge? What if we do not want our actions on the Internet—a supposedly anonymous medium—to be tracked and recorded by unknown parties? What if unauthorized parties gain access to sensitive privatedata,suchascredit-cardnumbersormedicalhistory?Thesearequestionsthatmust be addressed by programmers, consumers, businesses and lawmakers alike.

Recognizing Clients Toprovidepersonalizedservicestoconsumers,businessesmustbeabletorecognizeclients when they request information from a site. As we have discussed, the request/response sys-tem on which the web operates is facilitated by HTTP. Unfortunately, HTTP is a stateless protocol—it does not provide information that would enable web servers to maintain state information regarding particular clients. This means that web servers cannot determine whether a request comes from a particular client or whether the same or different clients generate a series of requests.
Tocircumvent this problem, sites can provide mechanisms by which they identify indi-vidual clients. A session represents a unique client on a website. If the client leaves a site and then returns later, the client will still be recognized as the same user. When the user closes the browser, the session ends. To help the server distinguish among clients, each client must identify itself to the server. Tracking individual clients is known as session tracking. One popular session-tracking technique uses cookies (discussed in Section 23.7.1); another uses ASP.NET’s HttpSessionStateobject (used in Section 23.7.2). Additional session-tracking techniques are beyond this book’s scope.


23.7.1 Cookies
Cookies provide you with a tool for personalizing web pages. A cookie is a piece of data stored by web browsers in a small text file on the user’s computer. A cookie maintains in-formationabouttheclientduringandbetweenbrowsersessions.Thefirsttimeauservisits the website, the user’s computer might receive a cookie from the server; this cookie is then reactivated each time the user revisits that site. The collected information is intended to be an anonymous record containing data that is used to personalize the user’s future visits to the site. For example, cookies in a shopping application might store unique identifiers for users. When a user adds items to an online shopping cart or performs another task re-sulting in a request to the web server, the server receives a cookie containing the user’s unique identifier. The server then uses the unique identifier to locate the shopping cart and perform any necessary processing.
23.7 SessionTracking   877


In addition to identifying users, cookies also can indicate users’ shopping preferences. When a Web Form receives a request from a client, the Web Form can examine the cookie(s) it sent to the client during previous communications, identify the user’s prefer-ences and immediately display products of interest to the client.
Every HTTP-based interaction between a client and a server includes a header con-taining information either about the request (when the communication is from the client to the server) or about the response (when the communication is from the server to the client). When a Web Form receives a request, the header includes information such as the request type and any cookies that have been sent previously from the server to be stored on the client machine. When the server formulates its response, the header information contains any cookies the server wants to store on the client computer and other informa-tion, such as the MIME type of the response.
The expiration date of a cookie determines how long the cookie remains on the client’s computer. If you do not set an expiration date for a cookie, the web browser main-tains the cookie for the duration of the browsing session. Otherwise, the web browser maintains the cookie until the expiration date occurs. Cookies are deleted when they expire.

Portability Tip 23.1
Users may disable cookies in their web browsers to help ensure their privacy. Such users will experience difficulty using web applications that depend on cookies to maintain state information.

23.7.2 Session Tracking with HttpSessionState
The next web application demonstrates session tracking using the .NET class Http-SessionState.   When   you   execute   this   application,   the   Options.aspx  page (Fig. 23.27(a)), which is the application’s Start Page, allows the user to select a program-ming language from a group of radio buttons. When the user clicks Submit, the selection is sent to the web server for processing. The web server uses an HttpSessionStateobject to store the chosen language and the ISBN number for one of our books on that topic. Eachuser that visits thesitehas a uniqueHttpSessionStateobject, sothe selections made by one user are maintained separately from all other users. After storing the selection, the server returns the page to the browser (Fig. 23.27(b)) and displays the user’s selection and some information about the user’s unique session (which we show just for demonstration purposes). The page also includes links that allow the user to choose between selecting an-other programming language or viewing the Recommendations.aspxpage (Fig. 23.27(e)), which lists recommended books pertaining to the programming language(s) that the user selected previously. If the user clicks the link for book recommendations, the information stored in the user’s unique HttpSessionStateobject is read and used to form the list of recommendations. To test this application:
1.  Select Open Web Site… from the File menu.
2.  In the Open Web Site dialog, ensure that File System is selected, then navigate to this chapter’s examples, select the Sessionsfolder and click the Open Button.
3. Select Options.aspxin the Solution Explorer, then type Ctrl + F5 to execute the web application in your default web browser.
878	Chapter23 WebAppDevelopmentwithASP.NETinVisualBasic


a)Userselectsalanguagefrom theOptions.aspxpage, thenpressesSubmit tosend theselectiontotheserver












b)Options.aspxpageis updatedtohidethecontrolsfor selectingalanguageandto displaytheuser’sselection;the userclicksthehyperlinkto returntothelistoflanguages andmakeanotherselection










c)Userselectsanother languagefromthe Options.aspxpage,then pressesSubmit tosendthe selectiontotheserver











Fig. 23.27 | ASPXfilethatpresentsalistofprogramminglanguages.(Part1of2.)
23.7 SessionTracking   879


d)Options.aspxpageis updatedtohidethecontrolsfor selectingalanguageandto displaytheuser’sselection;the userclicksthehyperlinktogeta listofbookrecommendations









e)Recommendations.aspx displaysthelistof recommendedbooksbasedon theuser’sselections












Fig. 23.27 | ASPXfilethatpresentsalistofprogramminglanguages.(Part2of2.)

Creating the Web Site
To begin, follow the steps in Section 23.4.1 to create an Empty Web Site named Sessions, then add two Web Forms named Options.aspxand Recommendations.aspxto the proj-ect. Set the Options.aspxdocument’s Titleproperty to "Sessions"and the Recommen-dations.aspxdocument’s Titleproperty to "BookRecommendations". To ensure that Options.aspxis the first page to load for this application, right click it in the Solution Ex-plorer and select Set As Start Page.

23.7.3 Options.aspx: Selecting a Programming Language
The Options.aspxpage Fig. 23.27(a) contains the following controls arranged vertically:
1. A Labelwith its (ID)property set to promptLabeland its Textproperty set to "Selectaprogramminglanguage:". We used the techniques shown in Step 5 of Section 23.4.1tocreateaCSSstyleforthislabelnamed.labelStyle,andsetthe style’s font-sizeattribute to largeand the font-weightattribute to bold.
880	Chapter23 WebAppDevelopmentwithASP.NETinVisualBasic


2.  The user selects a programming language by clicking one of the radio buttons in aRadioButtonList.EachradiobuttonhasaTextpropertyandaValueproperty. The Textproperty is displayed next to the radio button and the Valueproperty represents a value that is sent to the server when the user selects that radio button and submits the form. In this example, we’ll use the Valueproperty to represent the ISBN for the recommended book.
Create a RadioButtonListwith its (ID)property set to languageList. Use the ListItem Collection Editor to add five radio buttons with their Textproperties set to VisualBasic, VisualC#, C, C++and Java, and their Valueproperties set to 0-13-215213-4, 0-13-605322-X, 0-13-512356-2, 0-13-611726-0and 0-13-605306-8, respectively
3.  A Buttonwith its (ID)property set to submitButtonand its Textproperty set to Submit. In this example, we’ll handle this Button’s Clickevent. You can create its event handler by double clicking the Buttonin Design view.
4.  A Labelwith its (ID)property set to responseLabeland its Textproperty set to "Welcometo Sessions!". This Labelshould be placed immediately to the right of the Buttonso that the Labelappears at the top of the page when we hide the preceding controls on the page. Reuse the CSS style you created in Step 1 by set-ting this Label’s CssClassproperty to labelStyle.
5.  Two more Labels with their (ID)properties set to idLabeland timeoutLabel, respectively. Clear the text in each Label’s Textproperty—you’ll set these pro-grammatically with information about the current user’s session.
6. A HyperLinkwith its (ID)property set to languageLinkand its Textproperty set to "Clickheretochooseanotherlanguage". Set its NavigateUrlproperty byclickingtheellipsisnexttothepropertyintheProperties windowandselecting Options.aspxfrom the Select URL dialog.
7. A HyperLinkwith its (ID)property set to recommendationsLinkand its Text property set to "Clickheretogetbookrecommendations". Set its NavigateUrl propertybyclickingtheellipsisnexttothepropertyintheProperties windowand selecting Recommendations.aspxfrom the Select URL dialog.
8.  Initially, the controls in Steps 4–7 will not be displayed, so set each control’s Vis-ibleproperty to False.

SessionProperty of a Page
Every Web Form includes a user-specific HttpSessionStateobject, which is accessible through property Sessionof class Page. Throughout this section, we use this property to manipulate the current user’s HttpSessionStateobject. When a page is first requested, a unique HttpSessionStateobject is created by ASP.NET and assigned to the Page’s Ses-sionproperty.

Code-Behind File for Options.aspx
Fig. 23.28 presents the code-behind file for the Options.aspxpage. When this page is re-quested, the Page_Loadevent handler (lines 9–40) executes before the response is sent to the client. Since the first request to a page is not a postback, the code in lines 12–39 does not execute the first time the page loads.
23.7 SessionTracking   881


Postback Processing
When the user presses Submit, a postback occurs. The form is submitted to the server and the  Page_Load event  handler  executes.  Lines  15–19  display  the  controls  shown  in Fig. 23.27(b) and lines 22–24 hide the controls shown in Fig. 23.27(a). Next, lines 27– 32 ensure that the user selected a language and, if so, display a message in the response-Labelindicating the selection. Otherwise, the message "Youdidnotselectalanguage" is displayed.


1  ' Fig. 23.28: Options.aspx.vb
2  ' Process user's selection of a programming language by displaying 3  ' links and writing information in an HttpSessionState object.
4  Partial Class Options
5	Inherits System.Web.UI.Page 6
7	' if postback, hide form and display links to make additional 8	' selections or view recommendations
9	Protected Sub Page_Load(ByVal sender As Object, 10         ByVal e As System.EventArgs) Handles Me.Load 11
12	If IsPostBack Then
13	' user has submitted information, so display message 14	' and appropriate hyperlinks
15	responseLabel.Visible = True 16	idLabel.Visible = True
17            timeoutLabel.Visible = True 18            languageLink.Visible = True
19	recommendationsLink.Visible = True 20
21	' hide other controls used to make language selection 22	promptLabel.Visible = False
23	languageList.Visible = False 24	submitButton.Visible = False 25
26	' if the user made a selection, display it in responseLabel 27	If languageList.SelectedItem IsNot Nothing Then
28	responseLabel.Text &= " You selected " & 29                  languageList.SelectedItem.Text
30	Else
31	responseLabel.Text &= "You did not select a language." 32            End If
33
34	' display session ID
35	idLabel.Text = "Your unique session ID is: " & Session.SessionID 36
37	' display the timeout
38	timeoutLabel.Text = "Timeout: " & Session.Timeout & " minutes." 39         End If
40	End Sub ' Page_Load
41

Fig. 23.28 | Processuser'sselectionofaprogramminglanguagebydisplayinglinksandwriting informationinanHttpSessionStateobject.(Part1of2.)
882	Chapter23 WebAppDevelopmentwithASP.NETinVisualBasic


42	' record the user's selection in the Session
43	Protected Sub submitButton_Click(ByVal sender As Object, 44         ByVal e As System.EventArgs) Handles submitButton.Click 45
46	' if the user made a selection
47	If languageList.SelectedItem IsNot Nothing Then 48            ' add name/value pair to Session
49	Session.Add(languageList.SelectedItem.Text, 50               languageList.SelectedItem.Value)
51	End If
52	End Sub ' submitButton_Click
53  End Class ' Options

Fig. 23.28 | Processuser'sselectionofaprogramminglanguagebydisplayinglinksandwriting informationinanHttpSessionStateobject.(Part2of2.)

The ASP.NET application contains information about the HttpSessionStateobject (Session) for the current client. Property SessionID(displayed in line 35) contains the unique session ID—a sequence of random letters and numbers. The first time a client connects to the web server, a unique session ID is created for that client and a temporary cookie is written to the client so the server can identify the client on subsequent requests. When the client makes additional requests, the client’s session ID from that temporary cookie is compared with the session IDs stored in the web server’s memory to retrieve the client’s HttpSessionStateobject. HttpSessionStateproperty Timeout(displayed in line 38) specifies the maximum amount of time that an HttpSessionStateobject can be inac-tive before it’s discarded. By default, if the user does not interact with this web application for 20 minutes, the HttpSessionStateobject is discarded by the server and a new one will be createdif the user interacts with theapplication again. Figure 23.29lists some common HttpSessionStateproperties.



Properties

Count
IsNewSession

Keys
SessionID
Timeout

Description

Specifies the number of key/value pairs in the Sessionobject.
Indicates whether this is a new session (that is, whether the session was created during loading of this page).
Returns a collection containing the Sessionobject’s keys. Returns the session’s unique ID.
Specifies the maximum number of minutes during which a session can be inactive (that is, no requests are made) before the session expires. By default, this property is set to 20 minutes.


Fig. 23.29 | HttpSessionStateproperties.

Method submitButton_Click
In this example, we wish to store the user’s selection in an HttpSessionStateobject when the user clicks the Submit Button. The submitButton_Clickevent handler (lines 43–52) adds a key/value pair to the HttpSessionStateobject for the current user, specifying the
23.7 SessionTracking   883


language chosen and the ISBN number for a book on that language. The HttpSession-Stateobject is a dictionary—a data structure that stores key/value pairs. A program uses the key to store and retrieve the associated value in the dictionary.
The key/value pairs in an HttpSessionStateobject are often referred to as session items.They’replacedinanHttpSessionStateobjectbycallingitsAddmethod.Iftheuser made a selection (line 47), lines 49–50 get the selection and its corresponding value from the languageList by accessing its SelectedItem’s Text and Value properties, respec-tively, then call HttpSessionStatemethod Addto add this name/value pair as a session item in the HttpSessionStateobject (Session).
If the application adds a session item that has the same name as an item previously stored in the HttpSessionStateobject, the session item is replaced—the names in session items must be unique. Another common syntax for placing a session item in the HttpSes-sionStateobject is Session(Name)=Value. For example, we could have replaced lines 49–50 with

Session(languageList.SelectedItem.Text) = languageList.SelectedItem.Value

Software Engineering Observation 23.1
A Web Form should not use instance variables to maintain client state information, because each new request or postback is handled by a new instance of the page. Instead, maintain client state information in HttpSessionStateobjects, because such objects are specific to each client.

Software Engineering Observation 23.2
A   benefit   of   using   HttpSessionState objects   (rather   than   cookies)   is   that HttpSessionState objects can store any type of object (not just Strings) as attribute values. This provides you with increased flexibility in determining the type of state information to maintain for clients.


23.7.4 Recommendations.aspx: Displaying Recommendations Based
on Session Values
After the postback of Options.aspx, the user may request book recommendations. The book-recommendations hyperlink forwards the user to the page Recommendations.aspx (Fig. 23.27(e)) to display the recommendations based on the user’s language selections. The page contains the following controls arranged vertically:
1.  A Labelwith its (ID)property set to recommendationsLabeland its Textprop-erty set to "Recommendations:". We created a CSS style for this label named .labelStyle, and set the font-sizeattribute to x-largeand the font-weight attribute to bold. (See Step 5 in Section 23.4.1 for information on creating a CSS style.)
2.  A ListBoxwith its (ID)property set to booksListBox. We created a CSS style for this label named .listBoxStyle. In the Position category, we set the width attribute to 450pxand the heightattribute to 125px. The pxindicates that the measurement is in pixels.
884	Chapter23 WebAppDevelopmentwithASP.NETinVisualBasic


3.  A HyperLinkwith its (ID)property set to languageLinkand its Textproperty set to "Clickheretochooseanotherlanguage". Set its NavigateUrlproperty byclickingtheellipsisnexttothepropertyintheProperties windowandselecting Options.aspxfrom the Select URL dialog. When the userclicks this link, theOp-tions.aspxpage will be reloaded. Requesting the page in this manner is not con-sidered a postback, so the original form in Fig. 23.27(a) will be displayed.

Code-Behind File for Recommendations.aspx
Figure 23.30 presents the code-behind file for Recommendations.aspx. Event handler Page_Init(lines 7–27) retrieves the session information. If a user has not selected a lan-guage in the Options.aspxpage, the HttpSessionStateobject’s Countproperty will be 0 (line 11). This property provides the number of session items contained in a HttpSes-sionStateobject. If the Countis 0, then we display the text No Recommendations (line 20), clear the ListBoxand hide it (lines 21–22), and update the Textof the HyperLink back to Options.aspx(line 25).

1  ' Fig. 23.30: Recommendations.aspx.vb
2  ' Creates book recommendations based on a Session object. 3  Partial Class Recommendations
4	Inherits System.Web.UI.Page 5
6	' read Session items and populate ListBox with any book recommendations 7	Protected Sub Page_Init(ByVal sender As Object,
8	ByVal e As System.EventArgs) Handles Me.Init 9
10	' determine whether Session contains any information 11	If Session.Count <> 0 Then
12	For Each keyName In Session.Keys
13	' use keyName to display one of Session's name/value pairs 14	booksListBox.Items.Add(keyName &
15	" How to Program. ISBN#: " & Session(keyName)) 16            Next
17	Else
18	' if there are no session items, no language was chosen, so 19	' display appropriate message and clear and hide booksListBox 20	recommendationsLabel.Text = "No Recommendations"
21	booksListBox.Items.Clear() 22	booksListBox.Visible = False 23
24	' modify languageLink because no language was selected 25	languageLink.Text = "Click here to choose a language" 26         End If
27	End Sub ' Page_Init
28  End Class ' Recommendations

Fig. 23.30 | Sessiondatausedtoprovidebookrecommendationstotheuser.

If the user chose at least one language, the loop in lines 12–16 iterates through the HttpSessionState object’s keys (line 12) by accessing the HttpSessionState’s Keys property, which returns a collection containing all the keys in the session. Lines 14–15 concatenate the keyName, the String"HowtoProgram.ISBN#:"and the key’s corre-
23.8 CaseStudy:Database-DrivenASP.NETGuestbook   885


sponding value, which is returned by Session(keyName). This Stringis the recommen-dation that is added to the ListBox.

23.8 Case Study: Database-Driven ASP.NET Guestbook
Many websites allow users to provide feedback about the website in a guestbook. Typical-ly, users click a link on the website’s home page to request the guestbook page. This page usually consists of a form that contains fields for the user’s name, e-mail address, message/ feedback and so on. Data submitted on the guestbook form is then stored in a database located on the server.
In this section, we create a guestbook Web Form application. The GUI (Fig. 23.31) contains a GridViewdata control, which displays all the entries in the guestbook in tabular format. This controlis locatedin theToolbox’s Data section. We explain howtocreateand configure this data control shortly. The GridViewdisplays abc in Design mode to indicate data that will be retrieved from a data source at runtime. You’ll learn how to create and configure the GridViewshortly.













GridView control






Fig. 23.31 | GuestbookapplicationGUIinDesign mode.

The Guestbook Database
The application stores the guestbook information in a SQL Server database called Guest-book.mdflocated on the web server. (We provide this database in the databasesfolder with this chapter’s examples.) The database contains a single table named Messages.

Testing the Application To test this application:
1.  Select Open Web Site… from the File menu.
886	Chapter23 WebAppDevelopmentwithASP.NETinVisualBasic


2. In the Open Web Site dialog, ensure that File System is selected, then navigate to this chapter’s examples, select the Guestbookfolder and click the Open Button.
3. Select Guestbook.aspxin the Solution Explorer, then type Ctrl + F5 to execute the web application in your default web browser.
Figure 23.32(a)showstheusersubmittinganewentry.Figure 23.32(b)showsthenewen-try as the last row in the GridView.


a)Userenters dataforthe name,e-mailand message,then pressesSubmit tosendthedata totheserver












b)Serverstores thedatainthe database,then refreshesthe GridViewwith theupdateddata















Fig. 23.32 | SampleexecutionoftheGuestbook application.
23.8 CaseStudy:Database-DrivenASP.NETGuestbook   887


23.8.1 Building a Web Form that Displays Data from a Database
We now explain how to build this GUI and set up the data binding between the GridView control and the database. We discuss the code-behind file in Section 23.8.2. To build the guestbook application, perform the following steps:

Step 1: Creating the Web Site
Tobegin,followthestepsinSection 23.4.1tocreateanEmptyWebSite namedGuestbook then add a Web Form named Guestbook.aspxto the project. Set the document’s Title property to "Guestbook". To ensure that Guestobook.aspxloads when you execute this application, right click it in the Solution Explorer and select Set As Start Page.

Step 2: Creating the Form for User Input
In Design mode, add the text Pleaseleaveamessageinourguestbook:, then use the Block Format ComboBoxin the IDE’s toolbar to change the text to Heading 3 format. Insert a table with four rows and two columns, configured so that the text in each cell aligns with the top of the cell. Place the appropriate text (see Fig. 23.31) in the top three cells in the table’s left column. Then place TextBoxes named nameTextBox, emailTextBoxand mes-sageTextBoxin the top three table cells in the right column. Configure the TextBoxes as follows:
•	Set the nameTextBox’s width to 300px. •	Set the emailTextBox’s width to 300px.
•	 Set the messageTextBox’s width to 300pxand height to 100px. Also set this con-trol’s TextModeproperty to MultiLineso the user can type a message containing multiple lines of text.
Finally, add Buttons named submitButtonand clearButtonto the bottom-right table cell. Set the buttons’ Textproperties to Submitand Clear, respectively. We discuss the buttons’ event handlers when we present the code-behind file. You can create these event handlers now by double clicking each Buttonin Design view.

Step 3: Adding a GridViewControl to the Web Form
Add a GridViewnamed messagesGridViewthat will display the guestbook entries. This control appears in the Data section of the Toolbox. The colors for the GridVieware speci-fiedthroughtheAuto Format... linkintheGridViewTasks smart-tagmenuthatopenswhen you place the GridViewon the page. Clicking this link displays an AutoFormat dialog with severalchoices.Inthisexample,wechose Professional.WeshowhowtosettheGridView’s data source (that is, where it gets the data to display in its rows and columns) shortly.

Step 4: Adding a Database to an ASP.NET Web Application
To use a SQL Server Express database file in an ASP.NET web application, you must first add the file to the project’s App_Datafolder. For security reasons, this folder can be ac-cessed only by the web application on the server—clients cannot access this folder over a network. The web application interacts with the database on behalf of the client.
The Empty Web Site template does not create the App_Datafolder. To create it, right click the project’s name in the Solution Explorer, then select Add ASP.NET Folder >
888	Chapter23 WebAppDevelopmentwithASP.NETinVisualBasic


App_Data. Next, add the Guestbook.mdffile to the App_Datafolder. You can do this in one of two ways:
•	Drag the file from Windows Explorer and drop it on the App_Datafolder.
•	 Right click the App_Datafolder in the Solution Explorer and select Add Existing Item… to display the Add Existing Item dialog, then navigate to the databases fold-er with this chapter’s examples, select the Guestbook.mdf file and click Add. [Note: Ensure that Data Files is selected in the ComboBoxabove or next to the Add Buttonin the dialog; otherwise, the database file will not be displayed in the list of files.]


Step 5: Creating the LINQ to SQL Classes
You’ll use LINQ to interact with the database. To create the LINQ to SQL classes for the Guestbookdatabase:
1.  Right click the project in the Solution Explorer and select Add New Item… to dis-play the Add New Item dialog.
2.  Inthedialog,selectLINQtoSQLClasses,enterGuestbook.dbmlastheName,and click Add. A dialog appears asking if you would like to put your new LINQ to SQL classes in the App_Codefolder; click Yes. The IDE will create an App_Code folder and place the LINQ to SQL classes information in that folder.
3.  In the Database Explorer window, drag the Guestbookdatabase’s Messagestable fromtheDatabaseExplorer ontotheObjectRelationalDesigner.Finally,saveyour project by selecting File > Save All.


Step 6: Binding the GridViewto the MessagesTable of the GuestbookDatabase You can now configure the GridViewto display the database’s data.
1.  Open the GridView Tasks smart-tag menu, then select <New data source...> from the Choose Data Source ComboBoxto display the Data Source Configuration Wiz-ard dialog.
2.  In this example, we use a LinqDataSourcecontrol that allows the application to interact with the Guestbook.mdfdatabase through LINQ. Select LINQ, then set the IDof the data source to messagesLinqDataSourceand click OK to begin the Configure Data Source wizard.
3.  In the Choose a Context Object screen, ensure that GuestbookDataContext is se-lected in the ComboBox, then click Next >.
4.  The Configure Data Selection screen (Fig. 23.33) allows you to specify which data the LinqDataSourceshould retrieve from the data context. Your choices on this page design a SelectLINQ query. The Table drop-down list identifies a table in the data context. The Guestbookdata context contains one table named Messag-es, which is selected by default. If you haven’t saved your projectsince creating your LINQ to SQL classes (Step 5), the list of tables will not appear. In the Select pane, ensure that the checkbox marked with an asterisk (*) is selected to indicate that you want to retrieve all the columns in the Messagestable.
23.8 CaseStudy:Database-DrivenASP.NETGuestbook   889





















Fig. 23.33 | ConfiguringthequeryusedbytheLinqDataSourcetoretrievedata.

5.  Click the Advanced… button, then select the Enable the LinqDataSource to per-form automatic inserts CheckBoxand click OK. This configures the LinqData-Sourcecontrol to automatically insert new data into the database when new data is inserted in the data context. We discuss inserting new guestbook entries based on users’ form submissions shortly.
6.  Click Finish to complete the wizard.
A control named messagesLinqDataSourcenow appears on the Web Form directly below the GridView(Fig. 23.34). This control is represented in Design mode as a gray box containing its type and name. It will not appear on the web page—the gray box simply provides a way to manipulate the control visually through Design mode—similar to how the objects in the component tray are used in Design mode for a Windows Forms appli-cation.
The GridViewnow has column headers that correspond to the columns in the Mes-sagestable. The rows each contain either a number (which signifies an autoincremented column) or abc (which indicates string data). The actual data from the Guestbook.mdf database file will appear in these rows when you view the ASPX file in a web browser.

Step 7: Modifying the Columns of the Data Source Displayed in the GridView
It’s not necessary for site visitors to see the MessageIDcolumn when viewing past guest-book entries—this column is merely a unique primary key required by the Messagestable within the database. So, let’s modify the GridViewto prevent this column from displaying on the Web Form.
1.  In the GridView Tasks smart tag menu, click Edit Columns to display the Fields dialog (Fig. 23.35).
890	Chapter23 WebAppDevelopmentwithASP.NETinVisualBasic

















LinqDataSource control


Fig. 23.34 | Design modedisplayingLinqDataSourcecontrolforaGridView.


















Fig. 23.35 | RemovingtheMessageIDcolumnfromtheGridView.

2. Select MessageID in the Selected fields pane, then click the	Button. This re-moves the MessageIDcolumn from the GridView.
3.  Click OK to return to the main IDE window, then set the Widthproperty of the GridViewto 650px.
The GridViewshould now appear as shown in Fig. 23.31.
23.8 CaseStudy:Database-DrivenASP.NETGuestbook   891


23.8.2 Modifying the Code-Behind File for the Guestbook Application
Afterbuilding the Web Form andconfiguringthe data controls usedin this example, dou-ble click the Submit and Clear buttons in Design view to create their corresponding Click event handlers in the code-behind file (Fig. 23.36). The IDE generates empty event han-dlers, so we must add the appropriate code to make these buttons work properly. The event handler for clearButton(lines 36–41) clears each TextBoxby setting its Textprop-erty to an empty string. This resets the form for a new guestbook submission.


1  ' Fig. 23.36: Guestbook.aspx.vb
2  ' Code-behind file that defines event handlers for the guestbook. 3  Partial Class Guestbook
4	Inherits System.Web.UI.Page 5
6	' Submit Button adds a new guestbook entry to the database,
7	' clears the form and displays the updated list of guestbook entries 8	Protected Sub submitButton_Click(ByVal sender As Object, _
9	ByVal e As System.EventArgs) Handles submitButton.Click 10
11	' create dictionary of parameters for inserting 12	Dim insertParameters As New ListDictionary()
13
14	’ add current date and the user's name, e-mail address and message 15	’ to dictionary of insert parameters
16	insertParameters.Add("Date", Date.Now.ToShortDateString()) 17	insertParameters.Add("Name", nameTextBox.Text)
18	insertParameters.Add("Email", emailTextBox.Text)
19	insertParameters.Add("Message", messageTextBox.Text) 20
21	' execute an INSERT LINQ statement to add a new entry to the
22	' Messages table in the Guestbook data context that contains the 23	' current date and the user's name, e-mail address and message 24	messagesLinqDataSource.Insert(insertParameters)
25
26	' clear the TextBoxes
27	nameTextBox.Text = String.Empty 28	emailTextBox.Text = String.Empty
29	messageTextBox.Text = String.Empty 30
31	' update the GridView with the new database table contents 32	messagesGridView.DataBind()
33	End Sub ' submitButton_Click 34
35	' Clear Button clears the Web Form's TextBoxes
36	Protected Sub clearButton_Click(ByVal sender As Object, _ 37         ByVal e As System.EventArgs) Handles clearButton.Click 38         nameTextBox.Text = String.Empty
39	emailTextBox.Text = String.Empty 40	messageTextBox.Text = String.Empty 41     End Sub ' clearButton_Click
42  End Class ' Guestbook

Fig. 23.36 | Code-behindfilefortheguestbookapplication.
892	Chapter23 WebAppDevelopmentwithASP.NETinVisualBasic


Lines 8–33 contain submitButton’s event-handling code, which adds the user’s infor-mation to the Guestbookdatabase’s Messagestable. To use the values of the TextBoxes on the Web Form as the parameter values inserted into the database, we must create a List-Dictionaryof insert parameters that are key/value pairs.
Line 12 creates a ListDictionaryobject. Lines 16–19 used the ListDictionary’s Addmethod to store key/value pairs that represent each of the four insert parameters—the current date and the user’s name, e-mail address, and message. Invoking the LinqData-Sourcemethod Insert(line 24) inserts the data in the data context, adding a row to the Messagestable and automatically updating the database. We pass the ListDictionary objectasanargumenttotheInsertmethodtospecifytheinsertparameters.Afterthedata is inserted into the database, lines 27–29 clear the TextBoxes, and line 32 invokes messag-esGridView’sDataBindmethod torefreshthedata thatthe GridViewdisplays.Thiscauses messagesLinqDataSource (the GridView’s source) to execute its Select command to obtain the Messagestable’s newly updated data.

23.9 Online Case Study: ASP.NET AJAX
In Chapter 24 (online), you learn the difference between a traditional web application and an Ajax (Asynchronous JavaScript and XML) web application. You also learn how to use ASP.NET AJAX to quickly and easily improve the user experience for your web applica-tions, giving them responsiveness comparable to that of desktop applications. To demon-strate ASP.NET AJAX capabilities, you enhance the validation example by displaying the submitted form information without reloading the entire page. The only modifications to this web application appear in Validation.aspxfile. You use Ajax-enabled controls to add this feature.

23.10  Online Case Study: Password-Protected Books
Database Application
In Chapter 24 (online), we include a web application case study in which a user logs into a password-protected website to view a list of publications by a selected author. The appli-cation consists of several pages and provides website registration and login capabilities. You’ll learn about ASP.NET master pages, which allow you to specify a common look-and-feel for all the pages in your app. We also introduce the Web Site Administration Tool and use it to configure the portions of the application that can be accessed only by users who are logged into the website.



Summary
Section 23.1 Introduction
•  ASP.NET technology is Microsoft’s technology for web-application development.
•  Web Form files have the file-name extension .aspxand contain the web page’s GUI. A Web Form file represents the web page that is sent to the client browser.
•  The file that contains the programming logic of a Web Form is called the code-behind file.
Summary   893


Section 23.2 Web Basics
•  URIs (Uniform Resource Identifiers) identify documents on the Internet. URIs that start with http://are called URLs (Uniform Resource Locators).
•  A URL contains information that directs a browser to the resource that the user wishes to access. Computers that run web server software make such resources available.
•  In a URL, the hostname is the name of the server on which the resource resides. This computer usually is referred to as the host, because it houses and maintains resources.
•  A hostname is translated into a unique IP address that identifies the server. This translation is performed by a domain-name system (DNS) server.
•  The remainder of a URL specifies the location and name of a requested resource. For security reasons,thelocationisnormallyavirtualdirectory.Theservertranslatesthevirtualdirectoryinto a real location on the server.
•  When given a URL, a web browser performs uses HTTP to retrieve and display the web page found at that address.

Section 23.3 Multitier Application Architecture
•  Multitier applications divide functionality into separate tiers—logical groupings of functional-ity—that commonly reside on separate computers for security and scalability.
•  The information tier (also called the bottom tier) maintains data pertaining to the application. This tier typically stores data in a relational database management system.
•  The middle tier implements business logic, controller logic and presentation logic to control in-teractions between the application’s clients and the application’s data. The middle tier acts as an intermediary between data in the information tier and the application’s clients.
•  Business logic in the middle tier enforces business rules and ensures that data is reliable before the server application updates the database or presents the data to users.
•  The client tier, or top tier, is the application’s user interface, which gathers input and displays output. Users interact directly with the application through the user interface (typically viewed in a web browser), keyboard and mouse. In response to user actions, the client tier interacts with the middle tier to make requests and to retrieve data from the information tier. The client tier then displays to the user the data retrieved from the middle tier.

Section 23.4.1 Building the WebTimeApplication
•  File System websites are created and tested on your local computer. Such websites execute in Vi-sual Web Developer’s built-in ASP.NET Development Server and can be accessed only by web browsers running on the same computer. You can later “publish” your website to a production web server for access via a local network or the Internet.
•  HTTP websites are created and tested on an IIS web server and use HTTP to allow you to put your website’s files on the server. If you own a website and have your own web server computer, you might use this to build a new website directly on that server computer.
•  FTP websites useFile Transfer Protocol (FTP)to allow you toputyour website’s files on the serv-er. The server administrator must first create the website on the server for you. FTP is commonly usedbysocalled“hostingproviders”toallow websiteownerstoshareaservercomputerthatruns many websites.
•  A Web Form represents one page in a web application and contains a web application’s GUI.
•  You can view the Web Form’s properties by selecting DOCUMENTin the Properties window. The Titleproperty specifies the title that will be displayed in the web browser’s title bar when the page is loaded.
894	Chapter23 WebAppDevelopmentwithASP.NETinVisualBasic


•  Controls and other elements are placed sequentially on a Web Form one after another in the or-der in which you drag-and-drop them onto the Web Form. The cursor indicates the insertion point in the page. This type of layout is known as relative positioning. You can also use absolute positioning in which controls are located exactly where you drop them on the Web Form.
•  When a Labeldoes not contain text, its name is displayed in square brackets in Design view as a placeholder for design and layout purposes. This text is not displayed at execution time.
•  Formatting in a web page is performed with Cascading Style Sheets (CSS).
•  A Web Form’s Initevent occurs when the page is first requested by a web browser. The event handler for this event—named Page_Init—initialize the page.

Section 23.4.2 Examining WebTime.aspx’s Code-Behind File
•  A class declaration can span multiple source-code files—the separate portions of the class decla-ration in each file are known as partial classes. The Partialmodifier indicates that the class in a particular file is part of a larger class.
•  Every Web Form class inherits from class Pagein namespace System.Web.UI. Class Pagerepre-sents the default capabilities of each page in a web application.
•  The ASP.NET controls are defined in namespace System.Web.UI.WebControls.

Section 23.5 Standard Web Controls: Designing a Form
•  An Imagecontrol’s ImageUrlproperty specifies the location of the image to display.
•  By default, the contents of a table cell are aligned vertically in the middle of the cell. You can change this with the cell’s valignproperty.
•  A TextBoxcontrol allows you to obtain text from the user and display text to the user.
•  A DropDownListcontrol is similar to the Windows Forms ComboBoxcontrol, but doesn’t allow users to type text. You can add items to the DropDownListusing the ListItem Collection Editor, which you can access by clicking the ellipsis next to the DropDownList’s Itemsproperty in the Properties window, or by using the DropDownList Tasks menu.
•  A HyperLinkcontrol adds a hyperlink to a Web Form. The NavigateUrlproperty specifies the resource or web page that will be requested when the user clicks the HyperLink.
•  A RadioButtonListcontrol provides a series of radio buttons from which the user can select only one. The RadioButtonList Tasks smart-tag menu provides an Edit Items… link to open the ListItem Collection Editor so that you can create the items in the list.
•  A Buttoncontrol triggers an action when clicked.

Section 23.6 Validation Controls
•  A validation control determines whetherthe data in another web control is in the proper format.
•  When the page is sent to the client, the validator is converted into JavaScriptthat performs the validation in the client web browser.
•  Some client browsers might not support scripting or the user might disable it. For this reason, you should always perform validation on the server.
•  A RequiredFieldValidatorcontrol ensures that its ControlToValidateis not empty when the form is submitted. The validator’s ErrorMessageproperty specifies what to display on the Web Formifthevalidationfails.When the validator’s Displayproperty is set to Dynamic, the validator occupies space on the Web Form only when validation fails.
•  A RegularExpressionValidatoruses a regular expression to ensure data entered by the user is in a validformat.VisualWeb Developerprovides severalpredefinedregular expressions that you can
Summary   895


simply select to validate e-mail addresses, phone numbers and more. A RegularExpressionVali-dator’s ValidationExpressionproperty specifies the regular expression to use for validation.
•  A Web Form’s Loadevent occurs each time the page loads into a web browser. The event handler for this event is Page_Load.
•  ASP.NET pages are often designed so that the current page reloads when the user submits the form; this enables the program to receive input, process it as necessary and display the results in the same page when it’s loaded the second time.
•  Submitting a web form is known as a postback. Class Page’s IsPostBackproperty returns Trueif the page is being loaded due to a postback.
•  Server-sideWebFormvalidationmustbeimplementedprogrammatically.ClassPage’sValidate method validates the information in the request as specified by the Web Form’s validation con-trols. Class Page’s IsValidproperty returns Trueif validation succeeded.

Section 23.7 Session Tracking
•  Personalization makes it possible for e-businesses to communicate effectively with their custom-ers and also improves users’ ability to locate desired products and services.
•  To provide personalized services to consumers, e-businesses must be able to recognize clients when they request information from a site.
•  HTTP is a stateless protocol—it does not provide information regarding particular clients. •  Tracking individual clients is known as session tracking.

Section 23.7.1 Cookies
•  A cookie is a piece of data stored in a small text file on the user’s computer. A cookie maintains information about the client during and between browser sessions.
•  The expiration date of a cookie determines how long the cookie remains on the client’s comput-er. If you do not set an expiration date for a cookie, the web browser maintains the cookie for the duration of the browsing session.

Section 23.7.2 Session Tracking with HttpSessionState •  Session tracking is implemented with class HttpSessionState.

Section 23.7.3 Options.aspx: Selecting a Programming Language
•  Each radio button in a RadioButtonListhas a Textproperty and a Valueproperty. The Text property is displayed next to the radio button and the Valueproperty represents a value that is sent to the server when the user selects that radio button and submits the form.
•  Every Web Form includes a user-specific HttpSessionStateobject, which is accessible through property Sessionof class Page.
•  HttpSessionStateproperty SessionIDcontains a client’s unique session ID. The first time a cli-ent connects to the web server, a unique session ID is created for that client and a temporary cookie is written to the client so the server can identify the client on subsequent requests. When the client makes additional requests, the client’s session ID from that temporary cookie is com-pared with the session IDs stored in the web server’s memory to retrieve the client’s HttpSes-sionStateobject.
•  HttpSessionState property Timeout specifies the maximum amount of time that an Http-SessionStateobject can be inactive before it’s discarded. Twenty minutes is the default.
•  The HttpSessionStateobject is a dictionary—a data structure that stores key/value pairs. A pro-gram uses the key to store and retrieve the associated value in the dictionary.
896	Chapter23 WebAppDevelopmentwithASP.NETinVisualBasic


•  The key/value pairs in an HttpSessionStateobject are often referred to as session items. They’re placed in an HttpSessionStateobject by calling its Addmethod. Another common syntax for placing a session item in the HttpSessionStateobject is Session(Name)=Value.
•  If an application adds a session item that has the same name as an item previously stored in the HttpSessionStateobject, the session item is replaced—session items names must be unique.

Section 23.7.4 Recommendations.aspx:Displaying Recommendations BasedonSes-sion Values
•  The Countproperty returns the number of session items stored in an HttpSessionStateobject.
•  HttpSessionState’s Keysproperty returns a collection containing all the keys in the session.

Section 23.8 Case Study: Database-Driven ASP.NET Guestbook
•  A GridViewdata control displays data in tabular format. This control is located in the Toolbox’s Data section.

Section 23.8.1 Building a Web Form that Displays Data from a Database
•  To use a SQL Server Express database file in an ASP.NET web application, you must first add the file to the project’s App_Datafolder. For security reasons, this folder can be accessed only by the web application on the server—clients cannot access this folder over a network. The web ap-plication interacts with the database on behalf of the client.
•  A LinqDataSourcecontrol allows a web application to interact with a database through LINQ.

Section 23.8.2 Modifying the Code-Behind File for the Guestbook Application
•  To insert data into a database using a LinqDataSource, you must create a ListDictionaryof in-sert parameters that are formatted as key/value pairs.
•  A ListDictionary’s Addmethod stores key/value pairs that represent each insert parameter. •  A GridView’s DataBindmethod refreshes the data that the GridViewdisplays.

Self-Review Exercises
23.1	 State whether each of the following is true or false. If false, explain why. a)  Web Form file names end in .aspx.
b)  App.configis a file that stores configuration settings for an ASP.NET web application. c)   A maximum of one validation control can be placed on a Web Form.
d)  A LinqDataSourcecontrol allows a web application to interact with a database.
23.2	Fill in the blanks in each of the following statements:
a)  Web applications contain three basic tiers:	,	, and	. b)  The	web control is similar to the ComboBoxWindows control.
c)   Acontrolwhichensures thatthe datain another controlis inthe correctformatis called a(n)	.
d)  A(n)	occurs when a page requests itself. e)   Every ASP.NET page inherits from class	.
f)   The	file contains the functionality for an ASP.NET page.

Answers to Self-Review Exercises
23.1	a) True. b) False. Web.configis the file that stores configuration settings for an ASP.NET web application. c) False. An unlimited number of validation controls can be placed on a Web Form. d) True.
Exercises   897


23.2	a) bottom (information), middle (business logic), top (client). b) DropDownList. c) valida-tor. d) postback. e) Page. f) code-behind.

Exercises
23.3	(WebTimeModification)ModifytheWebTimeexampleinSection 23.4tocontaindrop-down lists that allow the user to modify such Labelproperties as BackColor, ForeColorand Font-Size. Configure these drop-down lists so that a postback occurs whenever the user makes a selection. When the page reloads, it should reflect the specified changes to the properties of the Labeldisplay-ing the time.
23.4	(Page Hit Counter) Create an ASP.NET page that uses session tracking to keep track of how many times the client computer has visited the page. Set the HttpSessionobject’s Timeout property to DateTime.Now.AddDays(1)to keep the session in effect for one day into the future. Dis-play the number of page hits every time the page loads.
23.5	(Guestbook Application Modification) Add validation to the guestbook application in Section 23.8. Use validation controls to ensure that the user provides a name, a valid e-mail address and a message.
23.6	(WebControlsModification)ModifytheexampleofSection 23.5toaddfunctionalitytothe Register Button. When the user clicks the Button, validate all of the input fields to ensure that the user has filled out the form completely, and entered a valid email address and phone number. If any of the fields are not valid, appropriate messages should be displayed by validation controls. If the fields are all valid, direct the user to another page that displays a message indicating that the regis-tration was successful followed by the registration information that was submitted from the form.
23.7	(Project: Web-Based Address Book) Using the techniques you learned in Section 23.8, cre-ate a web-based Address book. Display the address book’s contents in a GridView. Allow the user to search for entries with a particular last name.
A HTMLSpecialCharacters



ThetableofFig. A.1showsmanycommonlyusedXHTMLspecialcharacters—calledchar-acter entity references by the World Wide Web Consortium. For a complete list of charac-ter entity references, see the site www.w3.org/TR/REC-html40/sgml/entities.html.



Character

non-breaking space §
© ® ¼ ½ ¾ à á â ã å ç è
é

XHTMLencoding

&#160;
&#167;
&#169;
&#174;
&#188;
&#189;
&#190;
&#224;
&#225;
&#226;
&#227;
&#229;
&#231;
&#232;
&#233;

Character

ê ì í î ñ ò ó ô õ ÷ ù ú û •
™

XHTMLencoding

&#234;
&#236;
&#237;
&#238;
&#241;
&#242;
&#243;
&#244;
&#245;
&#247;
&#249;
&#250;
&#251;
&#8226;
&#8482;

Fig. A.1 | XHTMLspecialcharacters.
B HTMLColors



Colors may be specified by using a standard name (such as aqua) or a hexadecimal RGB value (such as #00FFFFfor aqua). Of the six hexadecimal digits in an RGB value, the first two represent the amount of red in the color, the middle two represent the amount of green in the color, andthe last tworepresent the amount of blue in thecolor. For example, blackis the absence of color and is defined by #000000, whereas whiteis the maximum amount of red, green and blue and is defined by #FFFFFF. Pure redis #FF0000, pure green (which the standard calls lime) is #00FF00and pure blueis #00FFFF. Note that greenin the standard is defined as #008000. Figure 4.2 contains the HTML standard color set. Figure B.1 contains the HTML extended color set.



Colorname

aliceblue
antiquewhite
aquamarine
azure
beige
bisque
blanchedalmond
blueviolet
brown
burlywood
cadetblue
chartreuse
chocolate
coral
cornflowerblue
cornsilk
crimson

Value

#F0F8FF
#FAEBD7
#7FFFD4
#F0FFFF
#F5F5DC
#FFE4C4
#FFEBCD
#8A2BE2
#A52A2A
#DEB887
#5F9EA0
#7FFF00
#D2691E
#FF7F50
#6495ED
#FFF8DC
#DC143C

Colorname

cyan
darkblue
darkcyan
darkgoldenrod
darkgray
darkgreen
darkkhaki
darkmagenta
darkolivegreen
darkorange
darkorchid
darkred
darksalmon
darkseagreen
darkslateblue
darkslategray
darkturquoise

Value

#00FFFF
#00008B
#008B8B
#B8860B
#A9A9A9
#006400
#BDB76B
#8B008B
#556B2F
#FF8C00
#9932CC
#8B0000
#E9967A
#8FBC8F
#483D8B
#2F4F4F
#00CED1


Fig. B.1 | HTMLextendedcolorsandhexadecimalRGBvalues.(Part1of3.)
900	AppendixB HTMLColors



Colorname

darkviolet
deeppink
deepskyblue
dimgray
dodgerblue
firebrick
floralwhite
forestgreen
gainsboro
ghostwhite
gold
goldenrod
greenyellow
honeydew
hotpink
indianred
indigo
ivory
khaki
lavender
lavenderblush
lawngreen
lemonchiffon
lightblue
lightcoral
lightcyan
lightgoldenrodyellow
lightgreen
lightgrey
lightpink
lightsalmon
lightseagreen
lightskyblue
lightslategray
lightsteelblue
lightyellow
limegreen

Value

#9400D3
#FF1493
#00BFFF
#696969
#1E90FF
#B22222
#FFFAF0
#228B22
#DCDCDC
#F8F8FF
#FFD700
#DAA520
#ADFF2F
#F0FFF0
#FF69B4
#CD5C5C
#4B0082
#FFFFF0
#F0E68C
#E6E6FA
#FFF0F5
#7CFC00
#FFFACD
#ADD8E6
#F08080
#E0FFFF
#FAFAD2
#90EE90
#D3D3D3
#FFB6C1
#FFA07A
#20B2AA
#87CEFA
#778899
#B0C4DE
#FFFFE0
#32CD32

Colorname

linen
magenta
mediumaquamarine
mediumblue
mediumorchid
mediumpurple
mediumseagreen
mediumslateblue
mediumspringgreen
mediumturquoise
mediumvioletred
midnightblue
mintcream
mistyrose
moccasin
navajowhite
oldlace
olivedrab
orange
orangered
orchid
palegoldenrod
palegreen
paleturquoise
palevioletred
papayawhip
peachpuff
peru
pink
plum
powderblue
rosybrown
royalblue
saddlebrown
salmon
sandybrown
seagreen

Value

#FAF0E6
#FF00FF
#66CDAA
#0000CD
#BA55D3
#9370DB
#3CB371
#7B68EE
#00FA9A
#48D1CC
#C71585
#191970
#F5FFFA
#FFE4E1
#FFE4B5
#FFDEAD
#FDF5E6
#6B8E23
#FFA500
#FF4500
#DA70D6
#EEE8AA
#98FB98
#AFEEEE
#DB7093
#FFEFD5
#FFDAB9
#CD853F
#FFC0CB
#DDA0DD
#B0E0E6
#BC8F8F
#4169E1
#8B4513
#FA8072
#F4A460
#2E8B57


Fig. B.1 | HTMLextendedcolorsandhexadecimalRGBvalues.(Part2of3.)
HTMLColors   901



Colorname

seashell
sienna
skyblue
slateblue
slategray
snow
springgreen
steelblue

Value

#FFF5EE
#A0522D
#87CEEB
#6A5ACD
#708090
#FFFAFA
#00FF7F
#4682B4

Colorname

tan
thistle
tomato
turquoise
violet
wheat
whitesmoke
yellowgreen

Value

#D2B48C
#D8BFD8
#FF6347
#40E0D0
#EE82EE
#F5DEB3
#F5F5F5
#9ACD32


Fig. B.1 | HTMLextendedcolorsandhexadecimalRGBvalues.(Part3of3.)
C JavaScriptOperatorPrecedenceChart



This  appendix  contains  the  operator  precedence  chart  for  JavaScript/ECMAScript (Fig. C.1).Theoperatorsareshownindecreasingorderofprecedencefromtoptobottom.



Operator

. [] ()
++ ---
~ !
delete new typeof void
* / %
+ -+
<< >> >>>
< <= > >=
instanceof

Type

member access array indexing function calls
increment decrement unary minus
bitwise complement logical NOT
deletes an array element or object property creates a new object
returns the data type of its argument prevents an expression from returning a value
multiplication division modulus
addition subtraction
string concatenation
left shift
right shift with sign extension right shift with zero extension
less than
less than or equal greater than
greater than or equal type comparison

Associativity

left to right


right to left








left to right


left to right


left to right


left to right


Fig. C.1 | JavaScript/ECMAScriptoperatorprecedenceandassociativity.(Part1of2.)
JavaScriptOperatorPrecedenceChart   903



Operator

== != === !==
&
^
|
&&
||
?:
= += -=
*= /= %= &= ^= |= <<= >>=
>>>=

Type

equals
does not equal
strict equals (no type conversions allowed)
strict does not equal (no type conversions allowed)
bitwise AND bitwise XOR bitwise OR logical AND logical OR conditional
assignment
addition assignment subtraction assignment multiplication assignment division assignment modulus assignment bitwise AND assignment
bitwise exclusive OR assignment bitwise inclusive OR assignment bitwise left shift assignment
bitwise right shift with sign extension assignment bitwise right shift with zero extension assignment

Associativity

left to right



left to right left to right left to right left to right left to right right to left
right to left


Fig. C.1 | JavaScript/ECMAScriptoperatorprecedenceandassociativity.(Part2of2.)
D ASCIICharacterSet



InFig. D.1,thedigitsattheleftofthetablearetheleftdigitsofthedecimalequivalent (0–127) of the character code, and the digits at the top of the table are the right digits of the character code—e.g., the character code for “F” is 70, and the character code for “&” is 38.
Most users of this book are interested in the ASCII character set used to represent English characters on many computers. The ASCII character set is a subset of the Unicode character set used by scripting languages to represent characters from most of the world’s languages. For more information on the Unicode character set, see Appendix F.


ASCIIcharacterset


0	1 0	nul   soh 1          nl    vt 2	dc4   nak 3          rs    us 4           (	) 5           2	3 6           <	= 7           F	G 8           P	Q 9           Z	[
10          d     e 11          n     o
12	x	y

2           3           4 stx   etx   eot
ff    cr    so syn   etb   can sp     !     " *     +     , 4     5     6 >     ?     @ H     I     J R     S     T \     ]     ^ f     g     h p     q     r
z	{	|

5           6           7           8           9 enq   ack   bel    bs    ht
si    dle   dc1   dc2   dc3 em    sub   esc    fs    gs #     $     %     &     ‘ -     .     /     0     1 7     8     9     :     ; A     B     C     D     E K     L     M     N     O U     V     W     X     Y _     ’     a     b     c i     j     k     l     m s     t     u     v     w
}	~	del

Fig. D.1 | ASCIIcharacterset.




Index



Symbols
-range separator 680
-subtraction operator 200 --operator 239, 240 ^metacharacter 680
_SQL wildcard character 625, 626 :hoverpseudo-class 163
:nth-childselectors 171
!logical NOT or logical negation operator 268, 270, 273
!=not equal to operator 203, 677 !==strict does not equal operator 206 ?PHP quantifier 681
?:conditional operator 220 .PHP concatenation operator 670 .PHP metacharacter 680
’single quote 680 "double quote 667 []for array indexing 674
[]for bracket expressions 680 {m,n}quantifier 680 {n,}quantifier 680 {n}quantifier 680
@XPath attribute symbol 542 *multiplication 546 *multiplication operator 200 *quantifier 680, 681
*SQL wildcard character 624 */ending comment delimiter 667 */multiline comment delimiter 195 *=multiplication assignment operator
239, 670
/division operator 200 /forward slash in end tags 513 /XPath root selector 542
/*beginning comment delimiter 667 /*multiline comment delimiter 195 //single-line comment 667 /=division assignment operator 239 \escape character 687
\’single quote escape sequence 192 \"double-quote escape sequence 192 \\backslash escape sequence 192 \nnewline escape sequence 192 \ttab escape sequence 192 &&logical AND operator 268, 269 %operator 200, 201
%SQL wildcard character 625 %=operator 239
+addition operator 198, 200 +quantifier 681
+string concatenation 196 ++increment operator 238 <less than operator 677
<!--…-->XML comment tags 516


<?and ?>XML processing instruction delimiters 540
<?php ?> PHP script delimiters 666 <=less than or equal to operator 203, 677 <>angle brackets for XML elements 513 =assignment operator 195
-=subtraction assignment operator 239 ==is equal to operator 203, 677 ===strict equals operator 206
=>PHP associative array operator 677 >greater than operator 677
>=greater than or equal to operator 203, 677
||logical OR operator 268, 270 $for PHP variables 666 $metacharacter 680
$$notation for variable variables 700

Numerics
15 Puzzle exercise 509 404 error 44

A
a(anchor) element 43 hrefattribute 43, 67 hrefproperty 411
abbreviating assignment expressions 238 abortevent 441
abortmethod of the XMLHttpRequest object 583
abs362
absolute addressing (XPath) 542 absoluteattribute value (position)
118
absolute positioning 117, 117, 118, 719, 858
absolute-length measurement 114, 135 abstraction 377
Acceptrequest header 597 access rule in ASP.NET 767 action 187, 215
actionattribute of a formelement 60, 685
action symbol 216
action/decision model of programming 219
Adaptive Path 577
add a database to a project 646 Add Connection dialog 646 Addmethod of class
HttpSessionState743, 883 addColorStopmethod of canvas459,
460
addEventListenermethod of a DOM node 290, 424


addition 201
addition assignment operator (+=) 238 addition operator (+) 198, 200 addition script 197
address in memory 339 address of a WCF service 791 advertisement 736, 875
Airline Reservation Web Service Modification exercise 846
Ajax 19
Ajax (Asynchronous JavaScript and XML) 21, 572, 574, 577, 752, 892
Ajax(AsynchronousJavascriptandXML) 777
toolkits 572
web application 574, 752, 777, 892 alertdialog 191, 289
alertmethod of windowobject 191 algebraic equation marked up with
MathML and displayed in the Amaya browser 535
algorithm 215, 231
allXML Schema element 533 alphabetical order 379 altattribute of imgelement 47 Alt key 429
alternate background colors 382 altKeyproperty of an eventobject 429 Amazon 3
Amazon EC2 (Amazon Elastic Compute Cloud) 5
Amazon Simple StorageService(Amazon S3) 5
AMBER Alert 4
Analog Clock exercise 508 ancestor element 111 ancestor node 547
anchor 43
anchorscollection of the document object 409
and 325
AND(in SQL) 631 Android 27
Android Market 27 app 20
Market 27
operating system 25, 27, 35 smartphone 27, 35
angle bracket (<>) for XML elements 513 animation 159, 508
frame-by-frame 489 Animation exercise 508 animation property161, 164 animation-delayproperty 161
animation-directionproperty 161 animation-durationproperty 161
906	Index



animation-iteration-count property 161
animation-nameproperty 161 animation-play-stateproperty 161 animation-timing-function
property 161
anonymous function 418, 436 anonymous type 641 Anyextension method of interface
IEnumerable<T>641 Apache Derby 656
Apache HTTP Server 13, 606, 611, 849 Apache Software Foundation 26, 611 API (application programming interface)
445
appendChildmethod of a DOM node 406
appendChildmethod of a Node559 appendChildmethod of the document
object 587 Apple 3
App Store 27 Apple Inc. 26
Apple Macintosh 26 Apple TV 6
application programming interface (API) 445
Apps
Favorite Twitter Searches 379, 381
arcmethod of canvas450 architecture of participation 18 arcs in canvas450
argument 188, 280, 281, 361 arial110
arithmetic assignment operators:+=, -=, *=, /=and %=239
arithmetic calculation 200 arithmetic mean (average) 202 arithmetic operator 200 ARPANET 11
array 674 elements 325 index 325 name 325
position number 325 zeroth element 325
array data structure 325 arrayfunction 676 array manipulation 674
Arrayobject 279, 327, 330, 331 indexOfmethod 344 joinmethod 341 lastIndexOfmethod 344 lengthproperty 325, 329, 334 sortmethod 343, 343
array of strings containing the token 370 Array with 12 elements 326
arrow 224 articleelement 96
article.xmldisplayed by Internet Explorer 517
askeyword 677 ascendingmodifier of a LINQ
orderbyclause 636 ascending order 546
ASCin SQL 626, 627

ASCII (American Standard Code for Information Interchange) character set 24
ASCII character set 343 appendix 904
asideelement 96 ASP.NET 573, 709, 848
AJAX 752, 892 Ajax 777
Ajax Control Toolkit 780 ASP.NET Web Site template 759 Development Server 715, 794, 854 login 752, 892
membership capabilities 761 Page_Initevent handler 863 registration 752, 892
server control 709, 848
start page 723, 726, 732, 738, 747, 863, 865, 871, 879, 887
validation control 729, 869 ASP.NET Web Site template 759 aspect-ratiomedia feature 130 ASPX file 709, 848
ASPX file that takes reservation information 825
.aspxfilename extension 709, 848 assembler 27
assembly language 27
assign a value to a variable 196 assignment 195, 196
assignment operator 195, 202, 241 assignment operator =associates right to
left 207
associate from left to right 206, 241 associate from right to left 201, 207, 241 associative array 676
associativity of operators 201, 207, 241, 271
asterisk (*) indicates multiplication 200 asterisk (*) occurrence indicator 525 asterisk (*) SQL wildcard character 624 Asynchronous JavaScript and XML
(Ajax) 572
asynchronous page updates (Ajax) 577 asynchronous request 574, 778 AsyncPostBackTriggerclass 782 ATTLISTattribute-list declaration
(DTD) 525 Attrobject 558 attribute 40, 46
in the UML 31 of a class 29
of an object 31 attributeelement 533 attribute in XML 520 attribute-list declaration 525 attribute node 542
attribute selector 382 attribute value in XML 520 attributes (data) 188
attributesproperty of a Node558 audioelement 279, 301, 484
endedevent 303 playmethod 303 preloadattribute 301
audio/mpegMIME type 301 audio/oggMIME type 301 authenticating a user 763 author 111

author style 133
author style overriding user style 134 authorISBNtable of booksdatabase
620, 621
authorstable of booksdatabase 620 autocompleteattribute 87 autofocusattribute 80 autoincremented 620, 630
Automatic Jigsaw Puzzle Generator exercise 508
AutoPostBackproperty of a DropDownListASP.NET control 774
average calculation 229

B
background-attachmentproperty 121
Background Audio exercise 508 background color 146 background-colorproperty 120 background colors
alternate 382 backgroundproperty 150 background-imageproperty 120, 121 background-originproperty 154 background-positionproperty 121,
154
background-repeatproperty 121 backslash (\) escape character 192 bandwidth 12
base 309
base 2 logarithm of e 362 baseattribute of element extension
533
base case 310 base e 362
base of a natural logarithm 362 base type (XML Schema) 533 basic HTML colors 430
beginPathmethod of canvas448, 457 behavior
of a class 29 behaviors (methods) 188 Berners-Lee, Tim 12
bevellineJoinof canvas448 Bezier curve in canvas456
bezierCurveTomethod of canvas456 binary digit (bit) 24
binary format 309
binary operator 196, 200, 270 binding of a WCF service 791 BindingNavigatorclass 650 BindingSourceclass 650
DataSourceproperty 652 EndEditmethod 652 MoveFirstmethod 654
bit 10
bit (binary digit) 24 BlackBerry OS 25 blackjack 809
Blackjack game WCF web service 811 Blackjack Web Service Modification
exercise 846 blink speed 507
block 205, 222, 234, 308 block dimension 120 blockdisplay value 130
Index   907



block-level element 125, 120 blogging 19
blurevent 433 blur radius 143, 146
bodyelement 40, 281 body of a for257 body of a loop 224, 256
bodyproperty of the documentobject 412
body section 40 <body>tag 187
boldvalue(font-weightproperty) 110 boldervalue (font-weightproperty)
110 booksdatabase 620
table relationships 622 boolean expression 218 Booleanobject 376, 377 border 123
borderattribute of canvas447 borderattribute of tableelement 54 border properties 125
border-box154
border-collapseCSS property 258 border-collapseproperty 427 border-colorproperty 124, 125 border-imageproperty 156
border-image-repeatproperty 158 border-image-sliceproperty 158,
159
border-image-source157, 159 border-left-colorproperty 125 border-radiusproperty 144 Borders of block-level elements 124 border-styleproperty 124, 125 border-top-styleproperty 125 border-widthproperty 124, 125 boss function/worker function 280 bottommargin 118, 121
bottom tier 16, 610, 711, 850 box model 123
Box model for block-level elements 124 box shadow 146
box-orientproperty 168 box-reflectproperty 155 box-shadowproperty 146 br(line break) element 57 braces ({}) 222
bracket expressions 680
brackets that enclose subscript of an array 326
braillemedia type 127 breakstatement 263
breakstatement ina forstatement266, 273
bricks-and-mortar store 735, 875 Brin, Sergey 19
browser 7
browser prefix 151 browser request 58 browser window 12 bubbling 429
BuildWebSitecommandinVisualWeb Developer 724, 863
building blocks 215
building-block approach to creating programs 31
built-in data types 532
business letter marked up as XML 518

business logic 17, 610, 686, 712, 851 business publications 31
business rule 17, 610, 686, 712, 851 buttlineCapof canvas449, 450 ButtonASP.NET web control 729, 869 buttoninputelement 289
byte 24

C
C programming language 28, 38 C# programming language 28
C++ programming language 28, 38 cache 16, 609
calculation 200
calculus expression marked up with MathML and displayed in the Amaya browser 536
callback function 574, 582, 779 called function 280
caller 280
Calling Attention to an Image exercise 508
calling function 280 Cancel button 198
cancel event bubbling 438, 440 cancelBubbleproperty of an event
object 429, 438, 440 Cannon Game app 482 canvaselement 445
3D 499
addColorStop method 459, 460 arc 450
arcmethod 450 arcs 450
beginPathmethod 448, 457 bevellineJoin448
Bezier curve 456 bezierCurveTomethod 456 borderattribute 447 buttlineCap449 canvasID447
circle 450 clearRectmethod 471 closePathmethod 450 compositing 479
context object 447 create a canvas447
createLinearGradientmethod 457
createPatternmethod 467 createRadialGradientmethod
459 drawImagemethod 461 ellipses 468
fallback text 447 fillmethod 467
fillRectmethod 447, 460, 477 fillStyleattribute 447, 460, 474 fillTextmethod 475 fontattribute 474 getElementByIdmethod 447 getImageDatamethod 466 globalAlphaattribute 477 globalCompositeOperationat-
tribute 479
image manipulation 463 lineCapattribute 449 lineJoin448

canvaselement (cont.) lines 448 lineTomethod 448
lineWidthattribute 447, 448 miterlineJoin448, 450 moveTomethod 448, 457 paths 448 putImageDatamethod 467 quadratic curve 454
quadraticCurveTomethod 454 rectangle 446
resize a canvasto fill the window 476
restoremethod 496, 498 rotatemethod 470, 471 roundlineJoin448, 450 savemethod 496, 498 scalemethod 469 shadowBlurattribute 452, 453 shadowColorattribute 452, 454 shadowOffsetXattribute 452, 454 shadowOffsetYattribute 452, 454 squarelineCap450
state of the canvas496 strokemethod 450 strokeRectmethod 447 strokeStyleattribute 447 strokeStylemethod 450 subpath 448 textAlignattribute 475 textBaselineattribute 475 transformmethod 472, 472 transformation matrix 468, 470 transformations 468 translatemethod 468, 470
captionelement (table) 54 caret metacharacter (^) 680 cascade 111
Cascading Style Sheets (CSS) 7, 18, 721, 860
Cascading Style Sheets 3 (CSS3) 7, 106 caselabel 263, 263, 272
case sensitive 189, 194
cases in which switchcaseswould run together 263
casting 669 catchblock 581 catchclause 581 catchkeyword 581
CDATAkeyword (DTD) 525 ceilmethod 362
center horizontally 121
centervalue (background-position property) 121
centervalue (text-alignproperty) 123
centralized control 11 chance 286 changeevent 441 character 24, 363
set 24
character classes 681 character data in XML 525
character entity reference 49, 526 character entity references 898 character-processing capabilities 363
character-processing methods of String object 365, 366
charAt365
908	Index



charAtmethod of Stringobject 363, 365
charCodeAtmethod of Stringobject 364, 365, 366
checkbox inputelement 64 checkedattribute 65
Chemical Markup Language (CML) 538 child 111, 396
child element 517, 520 child node (DOM tree) 547
childNodesproperty of a Node558 children (DOM tree) 547
Choose Data Source dialog 646 Cisco 3
class 30
instance variable 31 Partial863 partial724
partial class 724, 863 class24 classattribute 111, 113
class-average problem 225, 230 class-average program with counter-
controlled repetition 225 Classes
BindingNavigator650 BindingSource650, 652 DataContext644, 648 DataContractJsonSerializer
807, 807 DataGridView645 DownloadStringCompletedE-
ventArgs805 DropDownList728, 774, 868 GridView776 HttpSessionState737,742,743,
744, 877, 882, 883, 884 Image726, 866 List(OfT)814 ListDictionary751, 892
Page724, 735, 740, 863, 875, 880 Uri805
WebClient804 classified listings 12
clearmethod of the localStorage object 384
clearmethod of the sessionStorage object 384
clearIntervalmethod of the window object 413, 418
clearRectmethod of canvas471 click event 290
clickevent 289, 302, 440, 441 Clientinteractingwithwebserver.Step1:
The GETrequest 607 Clientinteractingwithwebserver.Step2:
The HTTP response 608 client of an object 188 client-side scripting 17, 611 Client that consumes the
WelcomeRESTXMLService804 Client that consumes
WelcomeSOAPXMLService800 client tier 17, 35, 610, 712, 851 clientXproperty of an eventobject
429
clientYproperty of an eventobject 429
clock 508

close a dialog 191 closePathmethod of canvas450 cloud computing 5
cm(centimeter) 114
CML (Chemical Markup Language) 513 code-behind file 709, 848
Code-behind file for a page that updates the time every minute 864
coin tossing 286 collaboration 18 collection 409
collection initializers 643 collective intelligence 19 collision detection 489, 492 colon (:) 107, 110
color 145 colorinputelement 80, 80 color manipulation 447
color name 107
color picker control 80 colorproperty 107
Coloring Black-and-White Photographs and Images exercise 510
color-stop148, 150 colsattribute (table) 61 colspanattribute 57 column 347, 619, 619, 620
column number in a result set 624 column-countproperty 171, 177 column-gapproperty 171, 177 column-ruleproperty 171, 177 ComboBoxcontrol
SelectedIndexChangedevent handler 654
comma 375
comma operator 257 comma-separated list 206
comma-separated list of variable names 194
comment 39
Common Programming Errors overview xxvi
CommonJS 7 community 18 comparator function 343
comparison operators 677 compiler 27
complex content in XML Schema 532 complexTypeXML Schema element
531 component 29
component tray 650 compositing in canvas479
compound assignment operator 238 compound interest 258
computer-assistedinstruction(CAI)322, 322
concatmethod 364 concatenation 363 concatenation operator (.) 670 concatenation operator (+) 364 condition 202, 268
condition is false 202 condition is true 202
conditional AND (&&) operator 641 conditional expression 220 conditional operator (?:) 220, 241
confirmmethod of the windowobject 437

confusing equality operator ==with assignment operator =202
connect to a database 645, 646 connector symbol 216 constant 361
constructor 373, 376, 377 consuming a web service 793 container element 517
containing block-level element 118 content 534
contentattribute of metaelement 67, 68, 72
Content MathML 534 content networks 19 content of a document 6
content page in ASP.NET 761 content-box154
context node (XPath) 546 context object of a canvas447
continuestatement 266, 267, 273 continuestatement in a forstatement
267, 268
contract of a WCF service 791 control statement 252
control structure 216 control variable 254
controller logic 17, 610, 712, 851 controlling expression of a switch263 Controls
BindingNavigator650 Button729, 869 DataGridView645 DropDownList728, 868 HyperLink728, 868 Image726, 866 LinqDataSource748, 888 RadioButtonList729, 868
RegularExpressionValidator 733, 873
RequiredFieldValidator732, 733, 872, 873
ScriptManager781 TabContainer781 ToolkitScriptManager781 ValidatorCalloutExtender783
controlsattribute of the video element 305
control-statement nesting 218 control-statement stacking 218 ControlToValidateproperty of an
ASP.NET validation control 733, 872, 873
convert to an integer 199
converting strings to all uppercase or lowercase letters 363
cookie 378, 691, 736, 737, 876, 877 deletion 737, 877
expiration 737, 877 expiration date 737, 877 header 737, 877
$_COOKIEsuperglobal 682, 693, 694 coordinate system 445 CoordinatedUniversalTime(UTC)371,
376
coordinates (0, 0) 446
coordinates of mouse cursor inside client area 429
&copy;entity reference 51 cosmethod 362
Index   909



cosine 362
count downward 256 Countextension method of interface
IEnumerable<T>641 countfunction 674 Countproperty of class
HttpSessionState742, 744, 884 Countproperty of HttpSessionState
class 882 counter 225
counter-controlled repetition 225, 225, 233, 234, 252, 253, 254, 266
with the forstatement 254 Courierfont 110
CraigsList (www.craigslist.org) 12, 20
craps 296
Craps game simulation 296 create 486
create properties on an Objects 486 createAttributemethod 559 createElementmethod (XML DOM)
559 createElementmethod of the
documentobject 405, 428, 587 createLinearGradientmethod of
canvas457 createPatternmethod ofcanvas467 createRadialGradientmethod of
canvas459 createTextNodemethod (XML
DOM) 559 createTextNodemethod of the
documentobject 405, 419 Creating a WCF Service in Visual Web
Developer 795 Critterfont 110
cross-site scripting (XSS) 578 Crossword exercise 509 crossword puzzle generator 394
CSS (Cascading Style Sheets) 18, 572 attribute 721, 860
border-collapseproperty 258 class 721, 860
comment 115
drop-down menu 130 property 107
rule 109 selector 109
CSS3 (Cascading Style Sheets 3) 7, 38, 40, 106
CSS3 (Cascasind Style Sheets 3) 7 CSS3 attribute selector 382
CSS3 selectors
:first-child382 :nth-child382
Ctrl key 429
ctrlKeyproperty of an eventobject 429, 429
curly brace ({}) 110 cursivefont 110 cursor 192

D
dangling-else problem 222 dashedvalue(border-styleproperty)
125 data 188

data binding 645 data cells 56
data hierarchy 23
datamethod of a Textnode 560 data source 635
Data Source Configuration Wizard 648
Data Sources window 649 data tier 16, 610
database 25, 38, 618, 623 add to a project 646 connection 646 handle 688
PHP 687
saving changes in LINQ to SQL 652 schema 644
table 618
Database Explorer window 646 database management system (DBMS)
618
DataBindmethod of a GridView752, 892
DataContextclass 644, 648 SubmitChangesmethod 644, 652
DataContractattribute 806 DataContractJsonSerializerclass
807 DataGridViewclass 645 datalistelement 90
DataMemberattribute 806, 829 DataSourceproperty
BindingSourceclass 652 data-typeattribute (XPath) 546 date and time control 82
date and time manipulations 371 date control 82
date inputtype 82 date manipulation 279
Dateobject 203, 371, 376, 391 Dateobject methods 371 Dateobject’s get methods for the local
time zone 373
Dateobject’s set methods for the local time zone 375
Date.parse375, 376 Date.UTC375, 376 datetime inputtype 82 DateTimestructure
Nowproperty 724, 864 datetime-local inputtype 82 dblclickevent 441
debug a web application in Visual Web Developer 723, 863
decimal digit 24 decision making 261
decision symbol 217, 218 declaration 193, 194 declaration block 162 declarative programming 635
declare variables in the parameter list of a function 282
decoration 113
decreasing order of precedence 206 decrement 252
decrement operator (--) 239 dedicated communications line 11 deep indentation 221
default action for an event 438

defaultcase in a switchstatement 263, 295
default namespace 523
default namespaces demonstration 523 default string to display a text field 195 deferred execution 643 definefunction 670
definite repetition 225 delelement 51
DELETESQL statement 623, 631 delimiter 369
delimiter string 370 Dell 3
&delta;entity reference (MathML) 537 descendant elements 111
descendant node 547 descendingmodifier of a LINQ
orderbyclause 636 descending sort (DESC) 626, 627 destructive read in 200 detailselement 96, 101
device-aspect-ratiomedia feature 130
device-heightmedia feature 130 device-widthmedia feature 130 dialog 191
dialog boxes 191 diamondsymbol217,218,219,224,256 dictionary 743, 883
diefunction 687, 688
differences between preincrementing and postincrementing 240
digit 363
Digital Clock exercise 507 digital divide 4
disabledpropertyof aninputelement 302
disabling event bubbling 438, 440 disc (bullet for unordered lists) 51, 52 disk 3
dismiss (or hide) a dialog 191 displayCSS property
inline-blockvalue 382 displayproperty 130, 132 Displayproperty of an ASP.NET
validation control 733, 873 displaying the cookie’s contents 694 displaying the MailingListdatabase
701
Distinctextension method of interface IEnumerable<T>641
distributed computing 791 divelement 120
divide and conquer 279, 285 division 201
division by zero 230 division operator (/) 200
DNS (Domain Name System) server 13, 607, 710, 849
do…whilerepetition statement 217, 264, 265, 266
flowchart 266
Dockproperty of class Control650 DOCTYPEelement 39 DOCTYPEparts 519
document 6, 377 content 6 structure 6
910	Index



DOCUMENT(representing a Web Form in theVisualWebDeveloperProperties window) 719
Documentobject 558 documentobject 188, 198, 290
anchorscollection 409 appendChildmethod 587 bodyproperty 412 createElementmethod 405, 428,
587
createTextNodemethod 405, 419 formscollection 409 getElementByIdmethod 290,
396, 404, 582 getElementsByTagNamemethod
587 imagescollection 409
linkscollection 409, 410 setAttributemethod 587 writemethod 189
documentobjectmethodsandproperties 378
Document Object Model (DOM) 188, 396, 572
innerHtmlproperty 582 tree 547
DOCUMENTproperty of a Web Form 858 document root 542
document type declaration 39 Document Type Definition (DTD) 514,
519, 524
for a business letter 524 document.writelnmethod 240 Dojo Ajax library 572
dollar amount 260 dollar sign ($) 194
dollar-sign metacharacter 680
DOM (Document Object Model) 572 tree 547
DOM API (Application Programming Interface) 548
DOM collection itemmethod 411 lengthproperty 410 namedItemmethod 411
DOM element getAttributemethod 404 setAttributemethod 291, 404
DOM node 396 addEventListenermethod 290,
290, 424 appendChildmethod 406 firstChildproperty 557 innerHTMLproperty 295, 303 insertBeforemethod 406 lastChildproperty 558 nextSiblingproperty 557 nodeNameproperty 557 nodeTypeproperty 557 nodeValueproperty 557 parentNodeproperty 406, 558 removeChildmethod 407, 419 removeEventListenermethod
425 replaceChildmethod 407
DOM parser 547 DOM tree 396
domain name system (DNS) server 13, 607, 710, 849

dot(.)foraccessingobjectpropertiesand methods 361
dottedvalue(border-styleproperty) 125
double click 441 doubledata type 667 double equals 202
double quotation mark (") 187, 192, 520 double-selection structure 217, 235 doublevalue(border-styleproperty)
125
Dougherty, Dale 18 downloadable fonts 166 downloading 13
DownloadStringCompletedEventAr gsclass 805
draw text on a canvas474 drawImagemethod of canvas461 DropDownListASP.NET web control
728, 868
DTD (Document Type Definition) 514, 519
.dtdfilename extension 519 DTD repository 524 dummy value 228
Dynamic Audio and Graphical Kaleidoscope exercise 508
dynamic form using PHP 695 dynamic style 411, 412 dynamic web pages 192

E
Eastern Standard Time 376 eBay 3
EBNF (Extended Backus-Naur Form) grammar 524
Eclipse Foundation 26 ECMA International 7, 186 ECMAScript 7, 186 ECMAScript standard
(www.ecma-internation-al.org/publications/stan-dards/ECMA-262.htm) 186
electronic mail 11 element (XML) 513
Element dimensions and text alignment 122
ELEMENTelement type declaration (DTD) 525
element gains the focus 433 element loses focus 433
element name restrictions (XML) 516 Elementobject 558
element of chance 286 element type declaration 525
elementXML Schema element 530 Elements
audio279, 301 source301, 305 video279, 304, 305
elements 40
elements of an array 325, 674 em(M-height of font) 114, 135 emelement 110 emmeasurement for text size 135 emacs text editor 38
e-mail 5, 44
e-mail anchor 44

email inputtype 83
embedded style sheet 108, 109, 110 embedded system 26 Employeeclass with FirstName,
LastNameand MonthlySalary properties 638
employee identification number 24 empty array 329
empty body 188 empty element 520
EMPTYkeyword (DTD) 526 empty statement 206, 223 empty string 271, 273, 363, 366
en.wikipedia.org/wiki/EBNF525 Enable Paging setting for an ASP.NET
GridView776
Enable Sorting setting for an ASP.NET GridView776
encapsulation 31 end of a script 188
“end of data entry” 228 end tag 40, 513
endedevent of an audioelement 303 EndEditmethod of class
BindingSource652 ending angle 450
ending index 370
endpoint (of a WCF service) 791, 840 endpointBehaviorselement in
web.config802 Englishlike abbreviations 27 entity
&amp;526 &gt;526 &lt;526
entity reference (MathML) 537 entityreference&InvisibleTimes;lin
MathML 536
entity-relationship diagram 622 $_ENVsuperglobal 682 environment variable 682
equal priority 201
equality and relational operators 203 equality operator 268, 269, 273 equality operators 202, 677
equality operators and Strings 363 equals equals 202
Eratosthenes 358 e-reader device 27 error 404 44 error message 189
Errorproperty of DownloadStringCompletedEvent Args805
ErrorMessagepropertyofanASP.NET validation control 733, 872, 873
escape character 192, 630 escape sequence 192, 687
EST for Eastern Standard Time 376 evaluatemethod of a Firefox 2 XML
document object 563 event 290
event bubbling 429, 438, 440 event-driven programming 290 event handler 290, 424
event handling 289 event model 423 eventobject 425, 428
altKeyproperty 429
Index   911



eventobject (cont.) cancelBubbleproperty 429, 438 clientXproperty 429 clientYproperty 429 ctrlKeyproperty 429 keyCodeproperty 429 screenXproperty 429 screenYproperty 429 shiftKeyproperty 429 targetproperty (FF) 429, 433 typeproperty 429
events
abort 441 blur433 change441 click441 dblclick441 focus433, 441 inline model 425 keydown441 keypress441 load 423 load441 mousedown441
mousemove425, 428, 441 mouseout429, 441, 577 mouseover429, 433, 441, 577 mouseup441
onkeyup441 reset436, 441 resize441 select441 submit436 traditional model 425 unload441
ex(“x-height” of the font) 114 exvalue 252
exception 581 exception handler 581 exception handling 581 expmethod 362
expiration date of a cookie 737, 877 exponentiation 201
expression marked up with MathML and displayed in the Amaya browser 535
extend an XML Schema data type 533 Extended Backus-Naur Form (EBNF)
grammar 524 extender 783
eXtensible Business Reporting Language (XBRL) 534
eXtensible HyperText Markup Language (XHTML) 7, 710, 849
eXtensible Hypertext Markup Language (XHTML) 513
eXtensible Markup Language (XML) 18, 797
eXtensible Stylesheet Language (XSL) 515, 523, 538
eXtensible User Interface Language (XUL) 534, 538
extension 18, 611 extensionelement
baseattribute 533 extension method 641
extensionXML Schema element 533 external DTD 519
external style sheet 114, 114

F
Facebook 3, 12, 19, 22, 26, 29 Factorial 311
Fahrenheit temperature 321 false 202
false218 fantasyfonts 110 fatal logic error 223
Favorite Twitter Searches app 379, 381
FBLM (Flexible Box Layout Module) 168
field 24
field of a class 24 15 puzzle 420
figcaptionelement 96 figureelement 96
file 24
file transfer protocol (FTP) 5 fillmethod of canvas467 fillRectmethod of canvas447, 460 fillStyleattribute of canvas447,
460, 474
fillTextmethod of canvas475 filter a collection using LINQ 635 final value of the control variable 252,
254, 256 Firefox
DOM Inspector add-on 396 firewall 791
Fireworks Designer exercise 509 :first-childCSS3 selector 382 Firstextension method of interface
IEnumerable<T>641 first program in JavaScript 187 first refinement 229
firstChildproperty of a DOM node 557
firstChildproperty of a Node558 #FIXEDkeyword (DTD) 525 Fixedsysfont 110
flag value 228
Flexible Box Layout Module (FBLM) 168 Flickr 12
floatproperty 125 Floating elements 126 floating-point number 228 floor362, 389
floormethod of the Mathobject 286, 295
Floor Planner exercise 509
flow text around divelement 125 flowchart 216, 266
flowcharting JavaScript’s sequence statement 216
flowcharting the do…whilerepetition statement 266
flowcharting the double-selection if…elsestatement 220
flowchartingtheforrepetitionstatement 256
flowcharting the single-selection if statement 219
flowcharting the whilerepetition statement 224
flowlines 216 focus 83, 433
focusevent 433, 441 fontattribute of canvas474


font-familyproperty 110 font manipulation 447
font-sizeproperty 107, 110, 252 font-styleproperty 122
font-weightproperty 110 @font-facerule 166, 168 footerelement 98
forrepetition statement 217, 253, 255 forrepetition statement flowchart 256 forstatement 674
forstatement header 254 for…inrepetition statement 217, 334,
334, 350, 351 foreachstatement 677 foreign key 621, 623 form 58, 289 formelement 60
actionattribute 60 optionelement 65
form field 433
form GUI component 195 form handler 60
Form includingradio buttons and adrop-down list 90
form resets 441
form to query a MySQL database 687 form validation 686
formatting percentages 295 formnovalidateattribute 82 forms 38
forms authentication 762 formscollectionof thedocumentobject
409
forward slash character (/) 47 forward slash character (/) in end tags
513, 542
Foursquare 3, 12, 22, 29 &frac14;entity reference 51 fractional parts of dollars 260 frame-by-frame animation 489 fromclause of a LINQ query 635 FROMSQL clause 623
fromCharCodemethod of the String object 364, 365, 366
FTP (file transfer protocol) 5 function 198, 279
function (or local) scope 306 function body 283
function call 280, 281 function-call operator 281 function parameter 282 function parseInt198 futura110

G
G.I.M.P. 45 gambling casino 286
game of craps 296, 304 Game of Pool exercise 509 game playing 286
game programming 6 games
Call of Duty 2: games Modern Warfare 6
Farmville 6 Mafia Wars 6 social gaming 6
Garrett, Jesse James 577
912	Index



gathering data to be written as a cookie 692
GDI+ coordinate system 446 generating LINQ to SQL classes 647
GeneratingMazesRandomlyexercise509 generic font family 110
genevafont 110
Geography Markup Language (GML) 538
georgiafont 110 GETHTTP request 14, 608
GETmethod of the XMLHttpRequest object 583
getrequest (HTTP) 801 get request type 60 $_GETsuperglobal 682, 685
getAllResponseHeadersmethod of the XMLHttpRequestobject 583
getAttributemethod of a DOM element 404
getAttributemethod of an Element 559
getAttributeNodemethod of an Element559
getDatemethod of the Dateobject 371 getDaymethod of the Dateobject 371 getDocumentElementmethod 559 getElementByIdmethod of the
documentobject290,396,404,447, 557, 582
getElementsByTagNamemethodofthe documentobject 559, 587
getFullYearmethod of the Date object 371, 373
getHoursmethod of the Dateobject 371
getImageDatamethod of canvas466 getItemmethod of the localStorage
object 382 getItemmethod of the
sessionStorageobject 382 getMillisecondsmethod of the Date
object 371
getMinutesmethod of the Dateobject 371
getMonthmethod of the Dateobject 371
getResponseHeadermethod of the XMLHttpRequestobject 583
gets 202
gets the value of 202 getSecondsmethod of the Dateobject
371
getTimemethod of the Dateobject 372 getTimeZonemethod of the Date
object 373 getTimezoneOffsetmethod of the
Dateobject 372 gettypefunction 669
getUTCDatemethod of the Dateobject 371
getUTCDaymethod of the Dateobject 371
getUTCFullYearmethod of the Date object 371
getUTCHoursmethod of the Date object 371
getUTCMilliSecondsmethod of the Dateobject 371

getUTCMinutesmethod of the Date object 371
getUTCMonthmethod of the Date object 371
getUTCSecondsmethod of the Date object 371
global functions 308 Globalobject 309
Global Positioning System (GPS) 5 global scope 306
global variable 306 globalAlphaattribute of canvas477 globalCompositeOperationattribute
of canvas479 $GLOBALSsuperglobal 682
GML (Geography Markup Language) 538
GML website (www.opengis.org) 538 GMT (Greenwich Mean Time) 371, 376 Good Programming Practices overview
xxvi
Google 3, 19, 19, 20 Goggles 20 Maps 20
TV 6
Google web fonts 167 Gosling, James 28 gotoelimination 216 gotostatement 216
GPS (Global Positioning System) 5 gradient 148
direction 150 gradient-line150 linear 148
radial 151 gradient line 148 gradient-line150
graphical representation of an algorithm 216
Graphical User Interface (GUI) 26 grayscale 463
Greenwich Mean Time (GMT) 371, 376 GridViewASP.NET data control 745,
885 GridViewclass
DataBindmethod 752, 892 groovevalue(border-styleproperty)
125
GROUP BY623 grouping element 120 Groupon 3, 12, 22
Guestbook Application Modification exercise 757, 897
guestbook on a website 745, 885 GUI (Grahical User Interface) 26 GUI component 195

H
h1-h6heading elements 41 handheldmedia type 127
handle an event in a child element 438 hardware 27
<head>tag 187 headelement 40, 109 head section 40 header cell 56 headerelement 96 heading element 265

heading elements 41 heightattribute of imgelement 46 heightmedia feature 130 heightproperty 123
Hewlett Packard 3 hex 51 hexadecimal 309
hexadecimal code 80 hexadecimal value 51 hidden input 61
hiddenvalue(border-styleproperty) 125
hide global variable names 306 hiding of implementation details 280 hierarchy 516
high-level language 27
high-precision floating-point value 228 horizontal coordinate 446
horizontal positioning 121 horizontal rule 51, 51 horizontal tab 192
Horse Race exercise 509 host 13, 607, 710, 849 hostname 13, 607, 710, 849 hours since midnight 371 HousingMaps.com
(www.housingmaps.com) 20 hoverpseudo-class 114, 130 hovering 432
<hr>element (horizontal rule) 51 hrefattribute of aelement 43, 67 hrefproperty of an anode 411
HSL (hue, saturation and lightness) 146 HSL (hue, saturation, lightness, alpha)
146
.htm(HTML5 filename extension) 38 .html(HTML5 filename extension) 38 HTML (HyperText Markup Language)
12, 13, 606, 710, 849
HTML (Hypertext Markup Language) 18
colors 430 comment 39
comment delimiters 39 documents 38
form 58, 289 htmlelement 40 HTML5 38, 77 HTML5 Elements
audio279, 301 audioelement 484 inputtypes 77 source301, 305 video279, 304, 305
HTML5 Test 7
HTTP (HyperText Transfer Protocol) 12, 13, 606, 607, 710, 736, 849, 876
being used with firewalls 791 header 15, 608
method 14, 608
request type 15, 15, 609, 801 http://12 http://www.w3.org/2001/
XMLSchema(XML Schema URI) 529 HTTPS (HyperText Transfer Protocol
Secure) 12 https://12
HttpSessionStateclass 737, 742, 743, 744, 877, 882, 883, 884
Index   913



HttpSessionStateclass (cont.) Addmethod 743, 883 Countproperty 742 Countsproperty 882 IsNewSessionproperty 742, 882 Keysproperty 742, 744, 882, 884 SessionIDproperty 742, 882 Timeoutproperty 742, 882
hue 146
Human Genome Project 4 hyperlink 13, 42
HyperLinkASP.NET web control 728, 868
HyperText Markup Language (HTML) 12, 13, 606, 710, 849
HyperText Transfer Protocol (HTTP) 12, 13, 15, 606, 607, 609, 710, 736, 801, 849, 876
HyperText Transfer Protocol Secure (HTTPS) 12

I
IBM 3 idattribute 120
idCSS selector 110 identifier 194
identifier element (MathML) 536 IEnumerable(OfT)interface 644 IEnumerable<T>interface 637
Anyextension method 641 Countextension method 641 Distinctextension method 641 Firstextension method 641
ifselection statement 217, 218, 219, 222
ifsingle-selection statement 202, 261 if…elsedouble-selection statement
217, 219, 238, 261 IIS Express
install 614
IIS Express (Internet Information Services Express) 606
ImageASP.NET web control 726, 866 image format 45
image hyperlink 48
image manipulation in canvas463 Imageobject 432
srcproperty 433 imagescollection of the document
object 409
images in Web pages 45 ImageUrlproperty of an Imageweb
control 726, 866 imgelement 46, 47, 48, 118
altattribute 47 heightattribute 46 srcattribute 291
imperative programming 635 implicit conversions
prevent 206
implicitly typed local variable 635, 637, 642
#IMPLIEDkeyword (DTD) 525 in(inches) 114
increment 252
increment control variable 252, 256 increment expression 255 increment operator (++) 239

indefinite repetition 229
indent statement in body of ifstatement 205
index 363
index in an array 325 index value 690 index.html44
indexOfmethod of an Arrayobject 344 indexOfmethod of the Stringobject
364, 366, 366, 367, 390
indices for the characters in a string 365 infer a local variable’s type 635
infinite loop 224, 234, 266 infinity symbol 623 information hiding 31
information tier 16, 610, 711, 850 inherit a style 111
inheritance 31
Inheritance in style sheets 112 Initevent of a Web Form 723, 862 Initevent of an ASP.NET web page
724, 864 initial value 252
initial value of control variable 252, 256 initialization 255
initialization phase 230 initialize 227
initializer list 330
initializer method for an object 373 Initializing the elements of an array 332 Inkscape 45
inline-level element 120 inline model (events) 425 inline scripting 187 inline style 106, 110
inline styles override any other styles 106 inline-block430
inline-blockvalue for the display CSS property 382
inner forstatement 350 INNERJOINSQL clause 623, 628 innerHtmlproperty (DOM) 582 innerHTMLproperty of a DOM node
295, 303 inputelement 60, 80, 345
button289 disabledproperty 302 maxlengthattribute 61 nameattribute 61 radiotype 64
inputtype autocompleteelement 87 date82
datetime82 datetime-local82
default para font>85 email83
month84 number84 search85 tel86 time86 url87 week87
INSERTSQL statement 623, 629 insertBeforemethod of aDOMnode
406
insertBeforemethod of a Node558

insetvalue (border-styleproperty) 125
install IIS Express 614 install WebMatrix 614 instance 30
instance variable 31 InstanceContextModeproperty of
ServiceBehaviorattribute 810 instant message 5
&int;entity reference (MathML) 537 integer667
integers 196
integral symbol (MathML) 536 Intel 3
IntelliSense 635, 644, 660
interaction between a web service client and a web service 798
interest rate 258 interface 618 Interface Builder 26 Interfaces
IEnumerable644 IEnumerable<T>637 IQueryable644
internal hyperlink 67 internal linking 38, 65 internal pointer 676 Internet 10, 11
Internet Explorer browser 151 Internet Information Services (IIS) 13,
849
Internet Information Services Express (IIS Express) 606, 614
Internet Protocol (IP) 11
Internet Server Application Program Interface (ISAPI) 18, 611
Internet telephony 12 Internet TV 6 interpolation 667, 680 interpret 187
interpret <body>196 interpret <head>196 interpreter 28 interval timer 487 invoked 280
inward offset 158 iOS 25
IP (Internet Protocol) 11
IP address 11, 13, 607, 710, 849 iPhone 20, 23
iPod Touch 27, 33 IPv6 11
IQueryableinterface 644
ISAPI (Internet Server Application Program Interface) 18, 611
isFinitefunction 304, 309 isNaN377
isNaNfunction 309 IsNewSessionproperty of class
HttpSessionState742, 882 IsPostBackpropertyofclassPage735,
875
issetfunction 695, 695 IsValidpropertyofclassPage735,875 italicvalue (font-styleproperty)
122
itemmethod of a DOM collection 411 itemmethod of a NodeList559 iterating throughthe array’s elements 330
914	Index



iteration of the loop 252, 254 iteration through an array 676 iterative solution 310
iTunes 6

J
Java DB 656
Java programming language 27, 28, 35, 38
Java Script Object Notation (JSON) 385 JavaScript 2, 7, 17, 28, 29, 40, 572, 611,
729, 869 events 423
interpreter 186 keywords 217 libraries 2, 8
link to a document 327 Object486
sever side 7 JavaScript library
jQuery 8
JavaScript Object Notation (JSON) 587, 792
JavaScript reserved words 217 JavaScript scripting language 186 JavaServer Faces (JSF) 573
Jaxer 7
Jobs, Steve 26
joinmethod of an Arrayobject 341 joining database tables 621, 628 JPEG (Joint Photographic Experts
Group) 45 jQuery 2
jQuery JavaScript Library 8 .jsfile name extension 327
JSON (JavaScript Object Notation) 587, 792
JSON serialization 807

K kernel 25
keyfunction 676
keymethod of the localStorage object 382
keymethod of the sessionStorage object 382
key-value pair 378, 743, 883 keyCodeproperty of an eventobject
429 keydownevent 441
@keyframesrule 161, 162, 165 keypressevent 441
Keysproperty of HttpSessionState class 742, 744, 882, 884
keyupevent 441 keyword 193, 217 Keywords
catch581 Partial863 partial724 try581 var635
keywords 217 keywords in PHP 672

L
Language Integrated Query (LINQ) 635 largerelative font size 110
larger 362
largerrelative font size 110 lastChildproperty of a DOM node
558
lastChildproperty of a Node558 lastIndexOfmethod of an
Arrayobject 344 lastIndexOfmethod of the String
object 364, 366, 368, 390 LaTeX software package 534 layer overlapping elements 118 leftmargin 118, 121
leftvalue (text-alignproperty) 123 left-hand-side expression 241
legacy code 51
lengthmethod of a Textnode 560 lengthproperty of a DOM collection
410
lengthproperty of a NodeList559 lengthproperty of an Array325 lengthproperty of an Arrayobject
325, 329, 334
lengthproperty of the localStorage object 382
lengthproperty of the sessionStorageobject 382
Lerdorf, Rasmus (PHP creator) 665 letclause of a LINQ query 643 letter 24, 363
letters 194
li(list item) element 51 library
JavaScript 8
lightervalue(font-weightproperty) 110
lightness 146
lightweight business models 21 LIKEoperator (SQL) 625 LIKESQL clause 626, 627 limericks 390
line break 57 linear gradient 148
color-stop148 gradient-line150
lineCapattribute of canvas449 lineJoinattribute in canvas448 line-throughvalue (text-
decoration) 113 lineTomethod of canvas448 lineWidthattribute in canvas448 lineWidthattribute of canvas447 link a script to a document 327 linkelement 115
linking external style sheets 114, 115 links 42 linkscollectionofthedocumentobject
409, 410
LINQ (Language Integrated Query) 635 anonymous type 641 ascendingmodifier 636
deferred execution 643 descendingmodifier 636 fromclause 635 letclause 643
LINQ to Objects 635 orderbyclause 636


LINQ (Language Integrated Query) (cont.)
query expression 635 range variable 635 selectclause 636 whereclause 636
LINQ to Objects 635 using a List<T>642
using an array of Employeeobjects 638
LINQ to SQL
data binding 645 DataContextclass 644, 648 Designer 644
generating classes 647 Object data source 648
savingchangesbacktoadatabase 652 LINQ to SQL classes
generating 647 LinqDataSourceASP.NET data
control 748, 888 Linux 7, 25, 612
Linux operating system 25, 26 list 263
list item 51
List(Of T)class 814 ListDictionaryclass 751, 892 listen for events 290
list-style-typeCSS property 263 literal characters 680
Load event 734 loadevent 290, 423, 441
Loadevent of an ASP.NET web page 734, 874
local 306
local time zone method 371 local variable 285, 308
local variable names 306 local web servers 611 localhost611 localStorageobject
clearmethod 384 getItemmethod 382 keymethod 382 lengthproperty 382 removeItemmethod 385 setItemmethod 382, 385
localStorageproperty of the window object 378, 381, 382
location in memory 193, 199 location-based services 19 log362
Logproperty of a data context 654 LOG10E362
logarithm 362
logic error 198, 200, 223, 230
logical AND (&&) operator 268, 269, 270 logical negation (!) operator 268, 270,
273, 273
logical NOT (!) operator 268 logical operator 268, 269, 271, 273
logical OR (||) operator 268, 269, 270, 273
login (ASP.NET) 752, 892 loop 223
loop-continuation condition 252, 255, 256, 264, 266, 272
loop-continuation test 265, 267, 273 loop counter 252
Index   915



loopback address 611 loosely typed 667
loosely typed language 200 lose focus 441
lowercase letter 24, 189, 194 &lt;special character 49, 51 lvalue 241

M
m-by-n array 347
Mac OS X 25, 27, 612 machine language 27 Macintosh 26 mailto:URL 44
manual frame-by-frame animation 489 many-to-many relationship 623 margin 123
marginproperty (block-level elements) 127
margin-bottomproperty 127 margin-leftproperty 127 margin-rightproperty 127
marginsforindividualsidesofanelement 127
margin-topproperty 127 markelement 98
markup in XML 512, 515 markup language 6, 38 mashups 20
master page in ASP.NET 761 master pages 752, 892 matchattribute 542 Mathmethod round389 Mathobject 271, 273, 361, 361
floormethod 286, 295 maxmethod 285 powmethod 279 randommethod 286, 295
Mathobject methods 361 Math tutor using
EquationGeneratorServiceXML to create equations 831
Math.E362 Math.LN10362 Math.LN2362 Math.LOG10E362 Math.LOG2E362 Math.PI362, 451 Math.random357 Math.sqrt361 Math.SQRT1_2362 Math.SQRT2362
mathematical calculation 279, 361 mathematical constant 361 Mathematical Markup Language
(MathML) 534 MathML 513, 534
.mmlfilename extension 535 &delta;entity reference 537 &int;entity reference 537 entity reference 537
entity reference &Invisible-Times;536
identifier element 536 integral symbol 536 mfracelement 536 mielement 536 mnelement 535

MathML (cont.) moelement 535 mrowelement 537 msqrtelement 537 msubsupelement 537 msupelement 536 square-root symbol 536
symbolic representation 536 Matsumoto, Yukihiro “Matz” 29 max362
maxattribute 84, 85
maxmethod of the Mathobject 285 max-device-width174 maximumfunction 283, 285 maxlengthattribute of inputelement
61
maxOccursXML Schema attribute 531 Maze Generator and Walker exercise 508 Maze Traversal Using Recursive
Backtracking exercise 508 Mazes of Any Size exercise 509 mean (average) 202
media feature 130 media query 130, 173
@media-rule 174 @media rule 174 @media screenrule 168
media type 127, 128, 130, 139 mediumrelative font size 110 mediumvalue 125
membership capabilities (ASP.NET) 761 memory 3
merge records from tables 628 message dialog 289
message window 13 meta 38 metaelement 67, 69
contentattribute 67, 68, 72 nameattribute 67
metacharacters 680 meterelement 97
method 30, 188, 198, 279, 309 method="get"60 method="post"60, 685 methodattribute 60
method call 31 method prompt198 method UTC376 method writeln198
metric conversion program 393 mfracMathML element 536 miMathML element 536 microblogging 12, 22 Microsoft 3
Image Cup 35 Microsoft Bing 19
middle tier 16, 610, 712, 851 MIME (Multipurpose Internet Mail
Extensions) 15, 109, 115, 138, 608, 737, 877
MIME types audio/mpeg301 audio/ogg301 video/mp4305 video/webm305
minattribute 84, 85 minInclusiveXML Schema element
533
minOccursXML Schema attribute 531

miterlineJoinof canvas448, 450 mm(millimeters) 114
.mmlfilename extension for MathML documents 535
mnelement 537 mnMathML element 535 moMathML element 535 mobile check-in 12 module 18, 279, 611 monetization 19 monospace110
month inputtype 84 Moore’s Law 3 Motorola 3
mouse button pressed down 441 mouse button released 441 mouse cursor 191, 191
mouse cursor over an element 114 mouse pointer 192 mousedownevent 441 mousemoveevent 425, 428, 441 mouseout433
mouseoutevent 429, 433, 441, 577 mouseoverevent 429, 433, 441, 577 mouseupevent 441 MoveFirstmethod of class
BindingSource654 moveTomethod of canvas448, 457 moving the mouse 423
Mozilla browsers 151 Mozilla Foundation 26 Mozilla project 538 mrowMathML element 537
msqrtMathML element 537 msubsupelement 537 msubsupMathML element 537 msupMathML element 536 multicolumn layout 171 multidimensional array 347 multiline comment 194, 667 multiple background images 153 multiple conditions 268 multiple-selection structure 264 multiple-selection statement 217
multiplication assignment operator (*=) 670
multiplication operator (*) 200 Multipurpose Internet Mail Extensions
(MIME) 15, 608, 737, 877 type 109, 115, 138
multitier application 16, 610, 711, 850 MySQL 632, 634, 665, 687
Community Edition 632 user account 633
MySQL reference manual 632 mysql_closefunction 690 mysql_connectfunction 688 mysql_errorfunction 690 mysql_fetch_rowfunction 690 mysql_num_rowsfunction 690 mysql_queryfunction 690 mysql_real_escape_stringfunction
700 mysql_select_dbfunction 688

N
n-tier application 16, 610, 711, 850 nameattribute (XPath) 546
916	Index



nameattribute of inputelement 61 nameattribute of metaelement 67 namenode-set function 546
name of a variable 199 name of an array 325 name of an attribute 40
nameproperty of an Attrobject 560 nameXML Schema attribute 530 named constant 670 namedItemmethod of a DOM
collection 411 namespace 521
System.Linq635 System.Web.UI724, 863 System.Web.UI.WebControls
724, 864
namespace prefix 521, 523, 533 naming collision 521
NaN309, 364, 366, 377 NaN(not a number) 198, 228 natural logarithm 362 navelement 96
NavigateUrlproperty of a HyperLink control 729, 868
navigation bar on a website 770 &nbsp;entity reference 557 nested element 40, 516
nested forstatement 351 nested for…instatement 350
nested ifor if…elsestatement 268 nested ifstatement 205, 222
nested if…elsestatements 220 nested list 52, 114
.NET WCF web service client after web service reference has been added 798
network of networks 11 newDateobject 373 newoperator 203, 327, 330, 373 newline character (\n) 192 nextfunction 676
NeXT Inc. 26
nextSiblingproperty of a DOM node 557
nextSiblingproperty of a Node558 NeXTSTEP operating system 26
no-repeatproperty 121 node (DOM tree) 547 Nodeobject 558, 558 Nodeobject methods 558 node-set function 546 node set of an xsl
for-each element 542 Node.js 7 NodeListobject 558, 559
NodeListobject methods 559 nodeNameproperty of a DOM node 557 nodeNameproperty of a Node558 nodeTypeproperty of a DOM node 557 nodeTypeproperty of a Node558 nodeValueproperty of a DOM node
557
nodeValueproperty of a Node558 nonbreaking space (&nbsp;) 557 non-validating XML parser 514
nonevalue (border-styleproperty) 125
nonevalue (font-styleproperty) 122 nonfatal logic error 223

normalvalue (font-weightproperty) 110
not a number (NaN) 198 not a number (NaN) 228 Notepad text editor 38
:nth-childCSS3 selector 382 null195, 200
number inputtype 84 Numberobject 198, 260, 376
toFixedmethod 260 Number.MAX_VALUE377 Number.MIN_VALUE377 Number.NaN377 Number.NEGATIVE_INFINITY309,
377 Number.POSITIVE_INFINITY309,
377
numbered list 263
numeric character reference 51 Nutrition Information XML Document
exercise 570
Nutrition Information XML Schema exercise 570
Nutrition Information XSL Style Sheet exercise 570

O
O’Reilly Media 18 object 29, 188, 309, 361 Object(JavaScript) 486
create properties 486 object (or instance) 31 Object data source 648 object hierarchy 396
object-orientedprogramming(OOP)26, 28
Object Relational Designer window 647
object wrappers 376 Objective-C 26
Objective-C programming language 28 obliquevalue (font-styleproperty)
122
obtaining user input through forms 685 occurrence indicator 525
octal 309
Odersky, Martin 29 off-by-one error 254 offline access 378 offset155
OK button 191 olelement 52, 70 ONclause 628
One-Armed Bandit exercise 509 One Laptop Per Child (OLPC) 4 one-to-many relationship 623
onloadattribute of an HTML5 element 425
onloadproperty of an HTML5 element 425
onmouseoverevent 432 onReadyStateChangeproperty of the
XMLHttpRequestobject 582 opacity 162
Open Handset Alliance 27 openmethod of the XMLHttpRequest
object 556, 583
open source 25, 27, 612, 632, 665

open source software 19, 21 open technology 512 OpenGIS Consortium 538 Opera browser 151 operand 196
operating system 25, 27 OperationContractattribute 793,
795
operator precedence 201 operator precedence chart 673 operators
!(logical NOT or logical negation) operator 268
!==206
&&(logical AND) operator 268 ===206
||(logical OR) operator 268 conditional AND, &&641 function-call operator 281 new327
operators of equal priority 201 optionelement (form) 65 orderattribute 546
ORDERBYSQL clause 623, 626, 627 order in which actions are executed 215 orderbyclause of a LINQ query 636
ascendingmodifier 636 descendingmodifier 636
ordered list 52 ordering of records 623
orientationmedia feature 130 OS X 27
outsetvalue(border-styleproperty) 125
oval symbol 216 overflow171
overflow boundaries 123 overflowproperty 123 overlinevalue (text-decoration)
113

P
pelement 40 packet 11
packet switching 11 padding 123
padding-bottomproperty 127 paddingforindividualsidesofanelement
127
padding-leftproperty 127 paddingproperty (block-level elements)
127
padding-rightproperty 127 padding-topproperty 127
Pageclass 724, 735, 740, 863, 875, 880 Sessionproperty 740, 880
Page Hit Counter exercise 757, 897 Page_Initeventhandler723,724,862,
864
Page_Initevent handler (ASP.NET) 863
Page_Loadevent handler 734, 874 Page, Larry 19
PageSizeproperty of a GridView ASP.NET control 776
paragraph element 40 parent 396
parent element 111, 517
Index   917



parent node 547
parent/child relationships between data 516
parentheses 269
parentheses in JavaScript 201 parentNodeproperty of a DOM node
406, 558
parentNodeproperty of a Node558 parse375, 376
parsed character data 525 parseFloatfunction 228, 280, 285,
309
parseIntfunction 198, 228, 285, 309 radix 199
parser 514
partial class 724, 863 Partialmodifier 863 partialmodifier 724 partial page update 574, 779 pass-by-reference 339
pass-by-value 339 passing arrays 342
Passing arrays and individual array elements to functions 342
passwordinput 64 paths in canvas448 pattern matching 625 pattern of 1s and 0s 24
pc(picas—1 pc= 12 pt) 114 #PCDATAkeyword (DTD) 525 PDML (Product Data Markup
Language) 534, 534 PerCallsetting of
InstanceContextModeproperty 811
percent (%) SQL wildcard character 625 percent sign (%) remainder operator 200 percentage 114
formatting 295
Perl-compatible regular expressions 678 PerSession setting of
InstanceContextMode property 811
persistent cookie 691 personalization 736, 875
Phone Book Web Service exercise 845 Phone Book Web Service Modification
exercise 845 photo sharing 12
Photoshop Express 45 PHP 28, 29, 573
PHP (PHP: Hypertext Preprocessor) 665 .phpextension 666
PHP: Hypertext Preprocessor (PHP) 665 PI362
PI (processing instruction) 540 picture element (pixel) 114
Pig Latin 390 pixel 46
place holder in an initializer list 330 placeholderattribute 83 placeholdertext 83
playmethod of an audioelement 303 plus sign (+) occurrence indicator 525 PM 376
PNG (Portable Network Graphics) 45 Portability Tips overview xxvi Portable Network Graphics (PNG) 45 position number 325

positionproperty 116 postrequest (HTTP) 801 postrequest type 685
post request type 60 $_POSTsuperglobal 682, 685
postbackeventofanASP.NETpage735, 875
postdecrement operator 239 postincrement operator 239, 241 powmethod of Mathobject 260, 272,
279, 362 power 362 preelement 192
precedence 201, 227, 241
precedence and associativity of operators 207, 241, 271
precedence chart 201
Precedence of arithmetic operators 201 predecrement operator 239, 239 predicate 624, 636
prefix 151
-moz-151 -ms-151 -o-151
-webkit-151 preg_matchfunction 678, 680 preg_replacefunction 681 preincrement operator 239, 241 preloadattribute of the audioelement
301
preloading images 432 prepackaged function 279 presentation 534
presentation logic 17, 610, 712, 851 Presentation MathML 534
press a key 441 pressing keys 423
prevent implicit conversions 206 previousSiblingproperty of a Node
558
primary key 619, 623 prime 321
prime integer 358 principal 258 printfunction 667
printmedia type 127, 128, 130 printing dates in various formats 391 printingonelinewithseparatestatements
190 priority 201
privacy protection 736, 876 probability 286
procedure 215
processing instruction (PI) 540 processing instruction target 540 processing instruction value 540 processing phase 230
processor 514
Product Data Markup Language (PDML) 534
program 186 program control 215
program development tools 231 programmer-defined function 279
maximum283 square281
projection 642 prolog (XML) 516 promotion 736, 875

prompt 195
prompt box used on a welcome screen 193
promptdialog 192, 195, 196, 198, 285, 289
promptmethod of windowobject 195 prompt to a user 195
properties of the Mathobject 362 properties separated by a semicolon 107 Properties window 719, 858
protocol 59 protocolMappingelement in
web.config803
proxy class for a web service 798 pseudo-class 113
pseudocode 215, 231
pseudocode for examination-results problem 236
pseudocode If statement 218 pseudocode If…Else statement 220 pt(points) 110, 114 ptmeasurement for text size 133 publishing a web service 793
putImageDatamethod of canvas467 Python programming language 29

Q
quadratic curve in canvas454 quadraticCurveTomethod of canvas
454
qualified name 629 quantifier 680
query 618, 619, 635
query expression (LINQ) 635 query string 15, 609, 801
querying a database and displaying the results 688
question mark (?) occurrence indicator 525
quirks mode 39 quotation mark (’) 187

R
radial gradient 151
radial-gradientproperty 151 radians 450, 501
radioinput type 64 RadioButtonListASP.NET web
control 729, 868 radix 309, 377
radix of function parseInt199 Random image generation using arrays
338
random image generator 287
Random Interimage Transition exercise 508
randommethod of the Mathobject 286, 286, 295
Randomly Erasing an Image exercise 507 range inputtype 85
range variable of a LINQ query 635 “raw” Ajax 572
RDBMS (relational database management system) 16, 610, 632
ReactionTime/ReactionPrecisionTester exercise 510
readability 39
918	Index



readyStateproperty of the XMLHttpRequestobject 582
readystatechangeproperty of the XMLHttpRequestobject 582
recognizing clients 736, 876 record 24
rectangle symbol 216, 224 recursion 309
Recursion Exercises
Generating Mazes Randomly 509 Maze Traversal Using Recursive
Backtracking 508 Mazes of Any Size 509
recursion step 310 recursive base case 310 recursive call 310 recursive descent 546 recursive function 309
redundant parentheses 202 refinement 229, 235 reflection 155
registering an event handler 290, 424 registration (ASP.NET) 752, 892 regular expression 678, 678
regular expressions in PHP 678 RegularExpressionValidator
ASP.NETvalidationcontrol733,873 reinventing the wheel 31
relational database 618
relational database management system (RDBMS) 16, 610, 632, 711, 850
relational database table 618
relational operator 202, 203, 268, 269, 273, 677
strings 363
relationship between documents 115 relative addressing (XPath) 542 relative-length measurement 114, 123,
135
relative path 46
relative positioning 118, 719, 858 relative positioning of elements 119 relativevalue (positionproperty)
118
release a key 441
reload an entire web page 573 remainder 201
remainder after division 201 remainder operator (%) 200 remote web servers 611 removeAttributemethod of an
Element559 removeChildmethod of a DOM node
407, 419
removeChildmethod of a Node559 removeEventListenermethod of a
DOM node 425 removeItemmethod of the
localStorageobject 385 removeItemmethod of the
sessionStorageobject 385 render a webpage 38
repeatvalue (background-repeat property) 121
repeat-xvalue (background-repeat property) 121
repeat-yvalue (background-repeat property) 121
repeating infinitely 228

repetition statement 230
repetition structure 216, 223, 224, 265, 266
replacemethod of the Stringobject 364
replaceChildmethod of aDOMnode 407
replaceChildmethod of a Node559 Representational State Transfer (REST)
790, 792
request method 15, 609, 801 #REQUIREDkeyword (DTD) 525 requiredattribute 84 RequiredFieldValidatorASP.NET
validation control 732, 733, 872, 873 Research Information Exchange Markup
Language (RIXML) 538 reserved words 217 resetevent 436, 441 resetfunction 676 resetinput 61 resizeevent 441 resolution 446
resources 38
responding to user interaction 423 ResponseFormatproperty of the WebGetattribute 805, 835
responseTextproperty of the XMLHttpRequestobject 582
responseXMLproperty of the XMLHttpRequestobject 582
RESTful web services 792 restoremethod of canvas496, 498 restriction on built-in XML Schema data
type 532, 533 result 624 Resultproperty of
DownloadStringCompletedEvent Args805
Resultproperty of LinqDataSourceSelect EventArgsclass 773
result tree (XSLT) 539 return 280
return by reference 339 returnstatement 282, 283
return value of an event handler 438 reusability 285
reusable software components 29 reuse 30
RGB 145
RGB to grayscale 467 RGBA 145
Rich Internet Applications (RIAs) 19, 572, 572
ridgevalue (border-styleproperty) 125
rightmargin 118, 121 rightvalue(text-alignproperty)123 Ritchie, Dennis 28 RIXML(ResearchInformationExchange
Markup Language) 538
RIXML website (www.rixml.org) 538 robot 5
rolling a six-sided die 286 rollover effect 429, 432 rollover images 429
root element (XML) 513, 516, 519 root node 397, 547

rotate an image 163
rotatemethod of canvas470, 471 rotatetransformation function 163 Rotating Images exercise 510
round 362
roundlineJoinof canvas448, 450 rounded corners 144
row 347, 619, 622, 623, 624, 625, 626, 629, 630
row objects 644 rowsattribute (textarea) 61 rows to be retrieved 623 rowspanattribute (tr) 57 Ruby on Rails 29
Ruby programming language 29 rule in CSS 162
Rule of Entity Integrity 622 Rule of Referential Integrity 621

S
Salesforce 12
same origin policy (SOP) 578 sans-seriffonts 110 saturation 146
save data on the iPhone 379 savemethod of canvas496, 498 saving changes back to a database in
LINQ to SQL 652 savings account 258
Scala programming language 29 Scalable Vector Graphics (SVG) 534 scalars (scalar quantities) 340 scalemethod of canvas469 scaletransformation function 164 scaling factor 286, 296
scaling the range of random numbers 286 schema 514, 526
schemaelement 529
schema invalid document 528 schema repository 524
schema valid XML document 528 schema-valid XML document describing
a list of books 528 scope 306
scope rules 306 scoping 306
Scoping example 306
screen coordinate system 429 screenmedia type 127 screen resolution 114
screenXproperty of an eventobject 429
screenYproperty of an eventobject 429
<script>tag 187 script 40, 186
link to a document 327 script development tools 231 scriptfont 110
script interpreter 189 scripting host 17, 611
scripting language 28, 186, 187 script-level variables 306 ScriptManagercontrol 781 scroll up or down the screen 120
scrollvalue (background-position property) 122
scrollvalue (overflowproperty) 123
Index   919



Scrolling Image Marquee exercise 508 Scrolling Marquee Sign exercise 508 scrolling the browser window 121 search engine 40, 67
search engine optimization (SEO) 67, 67 search field 85
search inputtype 85
second refinement 229, 230, 236 secondary storage 3 sectionelement 96
sectioning elements articleelement 96 asideelement 96 detailselement 96, 101 figcaptionelement 96 figureelement 96 footerelement 98 headerelement 96 meterelement 97 navelement 96 sectionelement 96 summaryelement 96, 103 wbrelement 98
selectattribute (XPath) 546 selectattribute of xsl:for-each
element 542
selectclause of a LINQ query 636 selectelement 65
selectevent 441
SELECTSQL keyword 624, 625, 626, 627
selectedattribute 65 SelectedIndexChangedevent handler
ComboBoxclass 654 selecting data from a table 619
Selectingevent of LinqDataSource ASP.NET data control 773
selection criteria 624 selection structure 216
selectNodes method of MSXML563 selector 109, 111, 162, 165, 170
self validation 81
self-documenting 194 Semantic Web 19
semicolon (;) 107, 110, 188, 190, 194 semicolon on line by itself 206 semicolon resulting logic error 205 send a message to an object 31 sendmethod of the XMLHttpRequest
object 556, 583
sentinel value 228, 230, 234
sentinel-controlled repetition 230, 231, 233
sentinel-controlled repetition to calculate a class average 232
separation of structure from content 106 separator 341
sequence structure 216, 229 sequential execution 215 Serializableattribute 807 serialization 807
seriffonts 110 server 3
server response 16, 609, 801
server-side form handler 15, 609, 801 server-side script 17, 611 $_SERVERsupergloball 682
server-side form handler 15, 609, 801

server-side JavaScript 7 CommonJS 7 Jaxer 7
Node.js 7
server-side proxy 578
service description for a web service 797 Service references
addingaservicereferencetoaproject in Visual C# 2010 Express 799
Service.svc 793 ServiceBehaviorattribute 810 ServiceContractattribute 793, 795 session 736, 876
session cookie 691 session item 743, 883
SessionpropertyofPageclass740,880 session tracking 736, 737, 876, 877
in web services 809 SessionIDproperty of
HttpSessionStateclass 742, 882 SessionModeproperty of
ServiceContractattribute 810 sessionStorageobject
clearmethod 384 getItemmethod 382 keymethod 382 lengthproperty 382 removeItemmethod 385 setItemmethod 382, 385
sessionStorageproperty of the windowobject 379, 379, 381, 382
SETSQL clause 631 setAttributemethod of a DOM
element 291, 404 setAttributemethod of an Element
559 setAttributemethod of the
documentobject 587 setAttributeNodemethod of an
Element559 setcookiefunction 691 setDate372 setFullYear372, 375 setHours372
setIntervalmethod of the window object 417, 424
setItemmethod of the localStorage object 382, 385
setItemmethod of the sessionStorageobject 382, 385
setMilliSeconds372 setMinutes372 setMonth372
setRequestHeadermethod of the XMLHttpRequestobject 583
setSeconds372 setTime372 settypefunction 667, 669 setUTCDate372 setUTCFullYear372 setUTCHours372 setUTCMilliseconds372 setUTCMinutes372 setUTCMonth372 setUTCSeconds372
shadowBlurattribute 452, 453 shadowBlurattribute of canvas452 shadowColorattribute of canvas452,
454

shadowOffsetXattribute 452, 454 shadowOffsetXattribute of canvas
452 shadowOffsetYattribute 454
shadowOffsetYattribute of canvas 452
Shakespeare 391 Shift key 429
shift the range of numbers 286
shifted and scaled random integers 286 shifting value 296
shiftKeyproperty of an eventobject 429
short-circuit evaluation 270 shorthand assignments of borders 127 Shuffleboard exercise 509
sibling node 547 siblings 396, 517 side effect 339
Sieve of Eratosthenes 358 signal value 228
simple condition 268
simple content in XML Schema 532 simple drawing program 426
Simple Object Access Protocol (SOAP) 790, 792
simple PHP program 666 simple type 532
simpleContentXML Schema element 533
simpleTypeXML Schema element 533 simulation and game playing 286 sinmethod 362
singlequote (’) 188, 194, 196,520, 625, 667
Single setting of InstanceContextModeproperty 811
single-entry/single-exit control statement 218
single-entry/single-exit structure 219 single-selection ifstatement 217, 218 Site.css770
sizeattribute (input) 61 skew 164
skinning 114 Skype 12
slicemethod of the Stringobject 364 slider control 85
small circle symbol 216, 224 smallrelative font size 110 smaller value 362
smart tag menu 653, 728, 868 smartphone 27
SMIL (Synchronized Multimedia Integration Language) 538
SMIL website (www.w3.org/ AudioVideo) 538
SOAP (Simple Object Access Protocol) 790, 791, 792
envelope 792 message 791
social commerce 12, 22 social networking 12, 18, 19 software development 19
Software Engineering Observations overview xxvi
software reusability 285 software reuse 31
920	Index



solidvalue (border-styleproperty) 125
Some common escape sequences 192 Some useful global arrays. 682 sortmethod of an Arrayobject 343,
343
Sorting an array with sort344 sorting data 343
sorting in XSL 546
Sorting XSLT Modification exercise 570 sourceelement 301, 305
source string 364 source tree (XSLT) 539 SourceForge 26
spanas a generic grouping element 120 spanelement 120
special character 49, 51, 363, 680 Special Section: Advanced String-Manipulation Exercises 391
special symbol 24 specificity 112, 130 speech device 54 speechmedia type 127 speech synthesizer 47 spell checker 393 spinner control 82, 84 split 369
split369
splitmethod of the Stringobject 364 splitting a statement in the middle of an
identifier 194
SQL 618, 619, 623, 624, 630 DELETEstatement 623, 631 FROMclause 623
GROUP BY623 INNERJOINclause 623, 628 INSERTstatement 623, 629 LIKEclause 626
ONclause 628
ORDERBYclause 623, 626, 627 SELECTquery 624, 625, 626, 627 SETclause 631
UPDATEstatement 623 VALUESclause 630 WHEREclause 624
.sql634
SQL keyword 623 SQL script 634
SQL Server Express 646 sqrt362 SQRT1_2362 SQRT2362
square brackets []325 square root 361
square-root symbol (MathML) 536 srcattribute 46, 48
srcattribute of an imgelement 291 srcattribute of the scriptelement 327 srcproperty of an Imageobject 433 stacked control structures 231
standards mode 39
start page for a web application 723, 726, 732, 738, 747, 863, 865, 871, 879, 887
start tag 40, 513, 520 starting angle 450 starting index 370
StartsWithmethod of class string 643

stateless protocol 736, 876 statement 188
statement terminator 188 statusproperty of the
XMLHttpRequestobject 582 statusTextproperty of the
XMLHttpRequest582 stepattribute 84 StepStone 26
straight-line form 201 strcmpfunction 677
strict does not equal (!==) operator 206 strict equals (===) operator 206
string 187
string assigned to a variable in a declaration 363
stringclass StartsWithmethod 643 ToUppermethod 643
string comparison 343
string concatenation 196, 227 string constants 363 stringdata type 667
string literal 187, 363 string manipulation 279
Stringmethod split390 Stringobject 363, 363, 365
charAtmethod 363, 365 charCodeAtmethod 364, 365, 366 fromCharCodemethod 364, 365,
366
indexOfmethod 364, 366, 367, 390
lastIndexOfmethod 364, 366, 368, 390
replacemethod 364 slicemethod 364 splitmethod 364 substrmethod 364 substringmethod 364 toLowerCasemethod 364 toUpperCasemethod 364
Stringobject methods 363 string representation 229
string representation of the number 377 stringXML Schema data type 531 string’s length366
string-concatenation operator (+) 364 strokemethod of canvas450 strokeRectmethod of canvas447 strokeStyleattribute of canvas447 strokeStylemethod of canvas450 strongelement 43
Stroustrup, Bjarne 28 structure of a document 6, 106
structured programming 215, 216 Structured Query Language (SQL) 618,
619, 623 styleattribute 106, 252 style class 110, 111
style sheet 115, 517 stylesheetstart tag 541 subelement 51
sub initializer list 348 submit441 submitevent 436, 441 submitinput 61
SubmitChangesmethod of a LINQ to SQL DataContext644, 652

subpath in canvas448 subscript 51
substrmethod of the Stringobject 364
substring 369
substringmethod of the String object 364
substrings of a string 363 subtraction 201
subtraction operator (-) 200 sumfunction (XSL) 546 summaryattributeof atableelement54 summaryelement 96, 103
Summation with for257 supelement 51 superglobal array 682 superscript 51
SVC file 793 svcutil.exe797
SVG (Scalable Vector Graphics) 498, 534
switchmultiple-selection statement 263, 264, 272, 263
symbolic representation (MathML) 536 Synchronized Multimedia Integration
Language (SMIL) 538 synchronous request 573, 777 syntax error 189, 241 SYSTEMkeyword in XML 519 System.Linqnamespace 635
System.Runtime.Serialization. Json807
System.Web.UInamespace 724, 863 System.Web.UI.WebControls
namespace 724, 864

T
tab 192
Tab key 433 tab stop 192
TabContainerAjax Control Toolkit control 781
table 618 table body 56
table column heading 260 table data 56
tabledata cells 56 tableelement 54, 259
borderattribute 54 captionelement 54 summaryattribute 54
table foot 56 table head 56
table head element 56 tableHTML5 element 38
table of event object properties 429 table row 56
tablet computer 27 TabPanelclass 782 tagging 19
tagNameproperty of an Element559 tahomafont 110
tanmethod 362 tangent 362
targetproperty(FF)ofaneventobject 429, 433
TargetpropertyofaHyperLinkcontrol 729, 868
Index   921



targetproperty of an eventobject 429 targetNamespaceXML Schema
attribute 530
tbody(table body) element 56
TCP (Transmission Control Protocol) 11 TCP/IP 11
TcX 632 tdelement 56
technical publications 31 tel inputtype 86
telephone number as a string 390 terminate a loop 227, 230 termination phase 230 terminator 188
ternary operator 220
TeX software package 534 text analysis 391
Textand Commentmethods 560 text area 41, 61
text-decorationproperty 113 text editor 38
text field 61 text file 547
Text Flasher exercise 507 textinput 61
textnode-set function 546 Textobject 558, 560
text shadow 143 text stroke 153
text-alignproperty 123 textAlignattribute of canvas475 textareaelement 61 textBaselineattribute of canvas475 TextBoxASP.NET web control 727,
867
TextEdittext editor 38 text-indentproperty 122 text-only browser 47
text-shadowproperty 143 text-strokeproperty 153 tfoot(table foot) element 56
th(table header column) element 56, 260
theadelement 56 thickborder width 125 thinborder width 125 thiskeyword 598
three-tier web application 16, 610
tier in a multitier application 16, 610, 711, 850
tile an image only horizontally 121
tile an image vertically and horizontally 121
tile the image only vertically 121 tiling no-repeat121
tiling of the background image 121 time 203
timeelement 96, 103 timefunction 691 time inputtype 86 time manipulation 279 Timeoutproperty of
HttpSessionStateclass 742, 882 timer 423
timesnewromanfont 110 title bar 40
title bar of a dialog 191 titleelement 40 titleof a document 40

Titleproperty of a Web Form 719, 858 titlestableof booksdatabase620,621 toFixedmethod of Numberobject 260 tokenization 369
tokenize a string 369 tokenizing 363 tokens 369, 390
tokens in reverse order 390 toLocaleString372, 373 toLowerCase365, 365, 366 toLowerCasemethod of the String
object 364 Toolbox 719, 858
ToolkitScriptManagercontrol 781 top 229, 235
topmargin 118, 121
top tier 17, 610, 712, 851
top-down,stepwiserefinement229,234, 235
Tortoise and the Hare 358 toString372, 377
total 227
ToUppermethod of class string643 toUpperCase365, 365, 366 toUpperCasemethod of the String
object 364 toUTCString372, 373 tr(table row) element 56 tracking customers 735, 875 traditional model (events) 425 traditional web application 573 transfer of control 216
transformmethod of canvas472 transformproperty 162, 163, 164 transformation functions 163
rotate163 scale164
transformation matrix in  canvas468, 470
transformations in canvas468 transformations in CSS3 162 transitionproperty 162, 165 transitions in CSS3 162
transition-timing-function165, 184
translatemethod of canvas468, 470 translation 27
translator program 27
Transmission Control Protocol (TCP) 11 transparency 162
traverse an array 348
traversing an XML document using the XML DOM 548
tree structure 518
tree structure for the document article.xmlof Fig. 14.2 548
trigger of UpdatePanelASP.NET Ajax Extensions control 782
trigonometric cosine 362 true 202
true218 truncate 228 trust 19
truth table 269
truth table for the &&logical AND operator 269
truth table for the ||(logical OR) operator 270

truth table for the logical negation operator 271
tryblock 581 trykeyword 581 Turtle Graphics 357
tutorials for WebMatrix 614 24-hour clock format 376 Twitter 3, 12, 19, 22, 29
search 379
search operators 379 tweet 22
two-dimensional array representation of a maze 509
347, 348 type 109
typeattribute 60, 187 typeattributeinaprocessinginstruction
540
type casting 669 type conversion 668
type of a variable 199
typeproperty of an eventobject 429 typeXML Schema attribute 530
type-ahead 588

U
ul(unordered list) element 51 unary operator 239, 270, 273
decrement (--) 239 increment (++) 239
unboundedvalue 531, 531 undefined 200
underlinevalue (text-decoration) 113
underscore (_) SQL wildcard character 625, 626
Unicode 363, 365 Unicode character set 24 Unicode value 365, 366
Uniform Resource Identifier (URI) 13, 522, 606, 710, 849
UniformResourceLocator(URL)12,13, 522, 606, 710, 849
Uniform Resource Name (URN) 522 unique session ID of an ASP.NET client
742, 882 UNIX 7 unloadevent 441
unnecessary parentheses 202 unordered list 51
unordered list element (ul) 51 UPDATESQL statement 623, 631 UpdatePanelASP.NET Ajax
Extensions control 782 UpdatePaneltrigger 782 up-down control 82
upper-left corner of a GUI component 445
uppercase letters 189, 194 Uri805
URI (Uniform Resource Identifier) 13, 522, 606, 710, 849
UriTemplateproperty of WebGet attribute 802
URL (Uniform Resource Locator) 12, 13, 522, 606, 606, 710, 849
url inputtype 87 url(fileLocation)120
922	Index



URN (Uniform Resource Name) 522 user 111
user account (MySQL) 633 user agent 111
user-defined types in web services 827 user input 58
user interaction 423
user interface 17, 35, 610, 712, 851 user style sheet 132
User style sheet applied with em measurement 136
User style sheet applied with pt measurement 135
User style sheet in Internet Explorer 7 134
user styles 133, 134, 135 user-defined types 532 user-generated content 19
using equality and relational operators 203
Using inline styles 107
using PHP’s arithmetic operators 670 Using the breakstatement in a for
statement 266
Using the continuestatement in a for statement 268
Using the do…whilerepetition statement 265
using the string-comparison operators 677
Using the switchmultiple-selection statement 261
using XPath to locate nodes in an XML document 560, 562
UTC(CoordinatedUniversalTime)371, 373, 376

V
valid XML document 514, 524 Validateproperty of Pageclass 735,
875
validating XML parser 514 validation 81
validation control 729, 869 validation service 41 validation tools 198
error messages 198 warning messages 198
ValidationExpressionproperty of a RegularExpressionValidator control 733, 873
validator 729, 869 validator.w3.org41 validator.w3.org/#validate-by-
upload41 ValidatorCalloutExtendercontrol
783 valueattribute 61, 84 value of a variable 199
value of an array element 326 value of an attribute 40 valueproperty 345
valueproperty of an Attrobject 560 valuepropertyofaninputelement345 valueOf372
VALUESSQL clause 630, 630 van Rossum, Guido 29 varkeyword 193, 282, 635

variable 193 variable name 193
variable variables 700
variables defined in body of a function 303
various markup languages derived from XML 538
vendor prefix 148, 151, 151 -moz-151
-ms-151 -o-151 tools 151
-webkit-151 verdana110 versionattribute (XSL) 541 versionin xmldeclaration 515
vertical and horizontal positioning 121 vertical coordinate 446
vitext editor 38 videoelement 279, 304, 305
controlsattribute 305 video sharing 12 video/mp4MIME type 305 video/webmMIME type 305 virtual box 118
virtual directory 14, 607, 710, 849 Visibleproperty of an ASP.NET web
control 732, 872
Visual Basic programming language 28 Visual C# programming language 28, 28 Visual C++ programming language 28 visual inheritance 761
Visual Web Developer
WCF Web Service project 794 VisualWebDeveloper2010Express709,
848
vocabulary (XML) 513 VoiceXML 513, 538
www.voicexml.org538 void element 47, 57
VoIP (Voice over IP 22

W
W3C (WorldWideWeb Consortium)8, 18, 18, 512
W3C home page (www.w3.org) 18 W3C Recommendation 18 wbrelement 98
WCF
DataContractattribute 806 DataMemberattribute 806 OperationContractattribute 793 ResponseFormatproperty of the
WebGetattribute 805 Serializableattribute 807 ServiceContractattribute 793 UriTemplateproperty of WebGet
attribute 802 WebGetattribute 801
WCF REST service to create random equations based on a specified operation and difficulty level 830
WCF service class 793
WCF service endpoint 791, 840
WCF web service interface that returns a welcome message through SOAP protocol and XML format 794

WCF Web Service project in Visual Web Developer 794
WCF Web Service project type 793 WCF web service that returns a welcome
message through the SOAP protocol and XML format 794
Web 1.0 18
Web 2.0 12, 18, 18, 19 web application
Ajax 574 traditional 573
Web application development 709, 848 web control 709, 848
Web Form 709, 716, 737, 743, 848, 855, 877, 883
Initevent 723, 862 Loadevent 734
web page 6
web server 13, 38, 58, 606, 607, 691, 710, 710, 849
web service 20, 21, 790
Web Service Description Language (WSDL) 797
web service host 791
Web Site Administration Tool 765 web storage 378
Web.config file 793 Web.configASP.NET configuration
file 723, 863
web-based application 7, 19 WebClient804
DownloadStringAsyncmethod 805
DownloadStringCompletedevent 805
WebGetattribute 801
webHttp Web.config property803 webHttpBinding Web.config
binding setting 803 WebKit broswers 151
-webkit-box-reflectproperty 155 WebMatrix 614
install 614 tutorials 614
WebMessageFormat.Json setting of ResponseFormatproperty 805, 835
WebMessageFormat.Xml setting of ResponseFormatproperty 805
WebTimeModification exercise 757, 897 webtop 577
week control 87 week inputtype 87
well-formed XML document 514 whereclause of a LINQ query 636 WHERESQL clause 623, 624, 626, 627,
631, 632
whilerepetition statement 217, 224, 230, 231, 238
while statement 681
white-space character 369, 376, 218, 376 white-space characters in strings 187 widthattribute 46
widthmedia feature 130 widthproperty 123 width-to-height ratio 47 Wikipedia 12, 19, 29
windowobject 191, 198, 413 clearIntervalmethod 413, 418 confirmmethod 437
Index   923



windowobject (cont.) localStorageproperty 378, 381,
382 sessionStorageproperty 379,
379, 381, 382 setIntervalmethod 417, 424
windowobject’s promptmethod 195 window.promptmethod 261 Windows 25
Windows Communication Foundation (WCF) 790
Windows operating system 25 Windows Phone 7 25
wire format 792
Wireless Markup Language (WML) 534 WML (Wireless Markup Language) 534 word equivalent of a check amount 393 World Community Grid 4
“World Wide Wait” 573 World Wide Web (WWW) 12
WorldWide Web Consortium (W3C) 8, 18, 18, 512
Wozniak, Steve 26
writemethod of the documentobject 189
writelnmethod 188, 189 writing a cookie to the client 693 WSDL (Web Service Description
Language) 797, 799
www.ecma-international.org/ publications/standards/ECMA-262.htm(ECMAScript standard) 186
www.garshol.priv.no/download/ text/bnf.html525
www.oasis-open.org524 www.opengis.org538 www.rixml.org538 www.voicexml.org538 www.w3.org18 www.w3.org/2001/XMLSchema530 www.w3.org/AudioVideo538 www.w3.org/Math537 www.w3.org/XML/Schema527 www.w3schools.com/schema/
default.asp527 www.xml.org524 www.zend.com665

X
x-axis 446
x-coordinate 446
x-largerelative font size 110 x-smallrelative font size 110 Xalan XSLT processor 540 XAMPP 633, 665, 687, 695
XBRL (Extensible Business Reporting Language) 513, 534
XeroxPARC(PaloAltoResearchCenter) 26
XHR (abbreviation for XMLHttpRequest) 572
XML 572 attribute 520
attribute value 520 child element 517 container element 517 declaration 515, 518

element 513 empty element 520 end tag 513 markup 515
node 518
parent element 517 prolog 516
root 518
root element 513 start tag 513 vocabulary 513
XML (eXtensible Markup Language) 18, 512, 797
XML document containing book information 543
XML Document Object Model 547 XML document that describes various
sports 539, 563
XML document using the laptop element defined in computer.xsd 533
XML DOM 548, 552
XML element name requirements 516 .xmlfile extension 513
XML instance document 532, 533 xmlnamespace prefix 521
XML namespaces demonstration 521 XML parser 514
XML Path Language (XPath) 538, 560 XML processor 514
XML Resource Center (www.deitel.com/XML/) 558
XML Schema 523, 527, 531 complex types 531 simple types 531
XML Schema document defining simple and complex types 532
XML Schema document for book.xml 528
XML Schema URI (http:// www.w3.org/2001/XMLSchema) 529, 529
XML used to mark up an article 515 XML vocabularies
Chemical Markup Language (CML) 538
Extensible User Interface Language (XUL) 538
Geography Markup Language (GML) 538
Research Information Exchange Markup Language (RIXML) 538
Synchronized Multimedia Integra-tion Language (SMIL) 538
VoiceXML 538
XML Working Group of the W3C 512 XMLHttpRequest
openmethod 556 sendmethod 556
XMLHttpRequestobject556, 572, 577, 578, 581, 600, 602
abortmethod 583 GETmethod 583
getAllResponseHeadersmethod 583
getResponseHeadermethod 583 onReadyStateChangeproperty
582 openmethod 583

properties and methods 582 readyStateproperty 582 readystatechangeproperty 582 responseTextproperty 582 responseXMLproperty 582 sendmethod 583 setRequestHeadermethod 583 statusproperty 582 statusTextproperty 582
xmlnsattribute in XML 522 XNamespaceclass 835 XPath 539
XPath (XML Path Language) 538, 560 XPath expression 560 XPathResultobject 563 .xsdfilename extension 528
XSL (Extensible Stylesheet Language) 515, 523, 538
XSL document that transforms sorting.xmlinto XHTML 543
.xslfilename extension 540
XSL-FO (XSL Formatting Objects) 538 XSL Formatting Objects (XSL-FO) 538 XSL style sheet 539, 546
XSL template 542 xsltemplate element 542
XSL Transformations (XSLT) 538 XSL variable 546
xsl:for-eachelement 542 xsl:outputelement 541 xsl:value-ofelement 542 XSLT (XSL Transformations) 538 XSLT processor 540
XSLTthatcreateselementsandattributes in an XHTML document 540
XSS 578
XSS (cross-site scripting) 578 XUL (Extensible User Interface
Language) 534, 538
xx-largerelative font size 110 xx-smallrelative font size 110

Y
y-axis 446
y-coordinate 446 Yahoo! 3
YouTube 12, 19, 23 Yukihiro 29

Z
z-indexproperty 118 Zend Engine 665
Zend Technologies (www.zend.com) 665
zeroth element of an array 325 Zynga 6

WebAppDevelopmentwith ASP.NETinVB:ADeeper Look

24
… the challenges are for the designers of these applications: to forget what we think we know about the limitations of theWeb,andbegintoimaginea wider, richer range of possibilities. It’s going to be fun.
—Jesse James Garrett

If any man will draw up his case, and put his name at the foot of the first page, I will give himanimmediatereply.Where he compels me to turn over the sheet, he must wait my leisure.
—Lord Sandwich


Objectives Inthischapteryou’lllearn:
ÿ   Webapplication
developmentusingASP.NET.
ÿ   Tohandletheeventsfroma
WebForm’scontrols.
ÿ   Tousevalidationcontrolsto ensurethatdataisinthe correctformatbeforeit’ssent
fromaclienttotheserver.
ÿ   Tomaintainuser-specific
information.
ÿ   Tocreateadata-drivenweb applicationusingASP.NET
andLINQtoSQL.
24-2   Chapter24 WebAppDevelopmentwithASP.NETinVB:ADeeperLook



24.1  Introduction
24.2  CaseStudy:Password-Protected BooksDatabaseApplication
24.2.1 ExaminingtheASP.NETWebSite
Template
24.2.2 Test-DrivingtheCompleted
Application
24.2.3 ConfiguringtheWebsite
24.2.4 ModifyingtheDefault.aspxand
About.aspxPages
24.2.5 CreatingaContentPageThatOnly
AuthenticatedUsersCanAccess
24.2.6 LinkingfromtheDefault.aspx
PagetotheBooks.aspxPage


24.2.7 ModifyingtheMasterPage
(Site.master)
24.2.8 CustomizingthePassword-Protected
Books.aspxPage 24.3  ASP.NETAjax
24.3.1 TraditionalWebApplications 24.3.2 AjaxWebApplications
24.3.3 TestinganASP.NETAjaxApplication 24.3.4 TheASP.NETAjaxControlToolkit
24.3.5 UsingControlsfromtheAjaxControl
Toolkit


Summary | Self-Review Exercises | Answers to Self-Review Exercises | Exercises


24.1 Introduction
In Chapter 23, we introduced ASP.NET and web application development with Visual Basic. Inthis chapter, we introduce several additional ASP.NET web-application develop-ment topics, including:
•	master pages to maintain a uniform look-and-feel across the Web Forms in a web application
•	creating a password-protected website with registration and login capabilities
•	 usingtheWeb Site Administration Tool tospecify whichpartsofawebsitearepass-word protected
•	using ASP.NET Ajax to quickly and easily improve the user experience for your web applications, giving them responsiveness comparable to that of desktop ap-plications.

24.2 Case Study: Password-Protected Books Database
Application
This case study presents a web application in which a user logs into a password-protected website to view a list of publications by a selected author. The application consists of sev-eral ASPX files. For this application, we’ll use the ASP.NET Web Site template, which is a starter kit for a small multi-page website. The template uses Microsoft’s recommended practices for organizing a website and separating the website’s style (look-and-feel) from its content. The default site has two primary pages (Home and About) and is pre-config-ured with login and registration capabilities. The template also specifies a common look-and-feel for all the pages in the website—a concept known as a master page.
We begin by examining the features of the default website that is created with the ASP.NET Web Site template. Next, we test drive the completed application to demonstrate the changes we made to the default website. Then, we provide step-by-step instructions to guide you through building the application.
24.2 CaseStudy:Password-ProtectedBooksDatabaseApplication	24-3


24.2.1 Examining the ASP.NET Web Site Template
To test the default website, begin by creating the website that you’ll customize in this case study. Perform the following steps:
1. Select File > New Web Site... to display the New Web Site dialog.
2. In the left column of the New Web Site dialog, ensure that Visual Basic is selected, then select ASP.NET Web Site in the middle column.
3.  Choose a location for your website, name it Bug2Bugand click OK to create it. Fig. 24.1 shows the website’s contents in the Solution Explorer.



Accountfolderexpandedto showthedefaultpagesforlogin, registrationandchanging passwords



About page Defaulthomepage
Masterpagethatspecifiesthe site’slookandfeel


Fig. 24.1  | ThedefaultASP.NET Web Site intheSolution Explorer.

Executing the Website
You can now execute the website. Select the Default.aspxpage in the Solution Explorer, then type Ctrl + F5 to display the default page shown in Fig. 24.2.


Navigationbarcontainslinkstothe Home andAbout pages

Youcancustomizethecontentofeachpage andthelook-and-feelofthewebsite

Clickthislinktolog intothewebsite














Fig. 24.2  | DefaultHome pageofawebsitecreatedwiththeASP.NET Web Site template.
24-4   Chapter24 WebAppDevelopmentwithASP.NETinVB:ADeeperLook


Navigation and Pages
The default ASP.NET Web Site contains a home page and an about page—so-called con-tent pages—that you’ll customize in subsequent sections. The navigation bar near the top of the page allows you to switch between these pages by clicking the link for the appropri-ate page. In Section 24.2.3, you’ll add another link to the navigation bar to allow users to browse book information.
As you navigate between the pages, notice that each page has the same look-and-feel. This is typical of professional websites. The site uses a master page and cascading style sheets (CSS) to achieve this. A master page defines common GUI elements that are inher-ited by each page in a set of content pages. Just as Visual Basic classes can inherit instance variables and methods from existing classes, content pages can inherit elements from master pages—this is a form of visual inheritance.

Login and Registration Support
Websites commonly provide “membership capabilities” that allow users to register at a website and log in. Often this gives users access to website customization capabilities or premium content. The default ASP.NET Web Site is pre-configured to support registration and login capabilities.
In the upper-right corner of each page is a Log In link. Click that link to display the Login page (Fig. 24.3). If you are already registered with the site, you can log in with your username and password. Otherwise, you can click the Register link to display the Register page (Fig. 24.4). For the purpose of this case study, we created an account with the user-name testuser1and the password testuser1. You do not need to be registered or logged in to the default website to view the home and about pages.





Clickheretoregister
















Fig. 24.3  | Login page.
24.2 CaseStudy:Password-ProtectedBooksDatabaseApplication	24-5


























Fig. 24.4  | Register page.

24.2.2 Test-Driving the Completed Application
This example uses a technique known as forms authentication to protect a page so that only registered users who are logged in to the website can access the page. Such users are knownasthesite’smembers.Authenticationisacrucialtoolforsitesthatallowonlymem-bers to enter the site or a portion of the site. In this application, website visitors must log in before they’re allowed to view the publications in the Booksdatabase.
Let’s open the completed Bug2Bug website and execute it so that you can see the authentication functionality in action. Perform the following steps:
1.  Close the application you created in Fig. 24.2.1—you’ll reopen this website so that you can customize it in Section 24.2.3.
2.  Select Open Web Site… from the File menu.
3.  In the Open Web Site dialog, ensure that File System is selected, then navigate to this chapter’s examples, select the Bug2Bugfolder and click the Open Button.
4. Select the Default.aspxpage then type Ctrl + F5 to execute the website.
The website appears as shown in Fig. 24.5. Notice that we modified the site’s master page so that the top of the page displays an image, the background color of the top of the page is white and the Log In link is black. Also, the navigation bar contains a link for the Books page that you’ll create later in this case study.
24-6   Chapter24 WebAppDevelopmentwithASP.NETinVB:ADeeperLook















Fig. 24.5  | Home pageforthecompletedBug2Bugwebsite.

Try to visit the Books page by clicking the Books link in the navigation bar. Because this page is password protected in the Bug2Bugwebsite, the website automatically redirects you to the Login page instead—you cannot view the Books page without logging in first. If you’ve not yet registered at the completed Bug2Bugwebsite, click the Register link to create a new account. If you have registered, log in now.
If you are logging in, when you click the Log In Buttonon the Log In page, the website attempts to validate your username and password by comparing them with the usernames and passwords that are stored in a database on the server—this database is created for you with the ASP.NET Web Site template. If there is a match, you are authenticated (that is, your identity is confirmed) and you’re redirected to the Books page (Fig. 24.6). If you’re registering for the first time, the server ensures that you’ve filled out the registration form properly and that your password is valid (at least 6 characters), then logs you in and redi-rects you to the Books page.

















Fig. 24.6  | Books.aspxdisplayingbooksbyHarveyDeitel(bydefault).
24.2 CaseStudy:Password-ProtectedBooksDatabaseApplication	24-7


The Books page provides a drop-down list of authors and a table containing the ISBNs, titles, edition numbers and copyright years of books in the database. By default, the page displays all the books by Harvey Deitel. Links appear at the bottom of the table that allow you to access additional pages of data—we configured the table to display only four rows of data at a time. When the user chooses an author, a postback occurs, and the page is updated to display information about books written by the selected author (Fig. 24.7).
















Fig. 24.7  | Books.aspxdisplayingbooksbyGregAyer.

Logging Out of the Website
When you’re logged in, the Log In link is replaced in the upper-right corner of each page (not shown in Figs. 24.6–24.7) with the message “Welcome username,” where username is replaced with your log in name, and a Log Out link. When you click Log Out, the website redirects you to the home page (Fig. 24.5).

24.2.3 Configuring the Website
Nowthatyou’refamiliarwithhowthisapplicationbehaves,you’llmodifythedefaultweb-site you created in Section 24.2.1. Thanks to the rich functionality of the default website, you’ll have to write almost no Visual Basic code to create this application. The ASP.NET Web Site template hides the details of authenticating users against a database of user names and passwords, displaying appropriate success or error messages and redirecting the user to the correct page based on the authentication results. We now discuss the steps you must perform to create the password-protected books database application.

Step 1: Opening the Website
Open the default website that you created in Section 24.2.1.
1. Select Open Web Site… from the File menu.
2.  In the Open Web Site dialog, ensure that File System is selected, then navigate to the location where you created your version of the Bug2Bugwebsite and click the Open Button.
24-8   Chapter24 WebAppDevelopmentwithASP.NETinVB:ADeeperLook


Step 2: Setting Up Website Folders
For this website, you’ll create two new folders—one that will contain the image that is used on all the pages and one that will contain the password-protected page. Password-protected parts of your website are typically placed in a separate folder. As you’ll see short-ly, you can control access to specific folders in a website.
You can choose any name you like for these folders—we chose Imagesfor the folder that will contain the image and ProtectedContentfor the folder that will contain the password-protected Books page. To create the folders, perform the following steps:
1.  Create an Imagesfolder by right clicking the location of the website in the Solu-tion Explorer, selecting New Folder and typing the name Images.
2.  Create a ProtectedContentfolder by right clicking the location of the website in the Solution Explorer, selecting New Folder and typing the name ProtectedCon-tent.


Step 3: Importing the Website Header Image and the Database File Next,you’lladdanimagetotheImagesfolderandthedatabasefiletotheApp_Datafolder.
1.  In Windows Explorer, locate the folder containing this chapter’s examples.
2.  Drag the image bug2bug.pngfrom the imagesfolder in Windows Explorer into the Imagesfolder in the Solution Explorer to copy the image into the website.
3.  DragtheBooks.mdfdatabasefile from the databasesfolderinWindowsExplor-er to the project’s App_Datafolder. We show how to retrieve data from this data-base later in the section.


Step 4: Opening the Web Site Administration Tool
In this application, we want to ensure that only authenticated users are allowed to access Books.aspx(created in Section 24.2.5) to view the information in the database. Previous-ly, we created all of our ASPX pages in the web application’s root directory. By default, any website visitor (regardless of whether the visitor is authenticated) can view pages in the root directory. ASP.NET allows you torestrict access to particular folders of a website. We do not want to restrict access to the root of the website, however, because users won’t be able to view any pages of the website. To restrict access to the Books page, it must reside in a directory other than the root directory.
You’ll now configure the website to allow only authenticated users (that is, users who have logged in) to view the pages in the ProtectedContentfolder. Perform the following steps:
1.  Select Website > ASP.NET Configuration to open the Web Site Administration Tool in a web browser (Fig. 24.8). This tool allows you to configure various op-tions that determine how your application behaves.
2.  Click either the Security link or the Security tab to open a web page in which you can set security options (Fig. 24.9), such as the type of authentication the appli-cation should use. By default, website users are authenticated by entering user-name and password information in a web form.
24.2 CaseStudy:Password-ProtectedBooksDatabaseApplication	24-9













Thiswillsay0 ifyou havenotyetcreatedan accounttotestthe website



Fig. 24.8  | Web Site Administration Tool forconfiguringawebapplication.







Thiswillsay0 if youhavenotyet createdan accounttotest thewebsite











Fig. 24.9  | Security pageoftheWeb Site Administration Tool.

Step 5: Configuring the Website’s Security Settings
Next, you’ll configure the ProtectedContentfolder to grant access only to authenticated users—anyone who attempts to access pages in this folder without first logging in will be redirected to the Login page. Perform the following steps:
24-10	Chapter24  WebAppDevelopmentwithASP.NETinVB:ADeeperLook


1. Click the Create access rules link in the Access Rules column of the Web Site Administration  Tool   (Fig. 24.9)  to  view  the  Add  New  Access  Rule   page (Fig. 24.10). This page is used to create an access rule—a rule that grants or de-nies access to a particular directory for a specific user or group of users.























Fig. 24.10 | Add New Access Rule pageusedtoconfiguredirectoryaccess.

2.  Click the ProtectedContentdirectory in the left column of the page to identify the directory to which our access rule applies.
3.  In the middle column, select the radio button marked Anonymous users to spec-ify that the rule applies to users who have not been authenticated.
4.  Finally, select Deny in the Permission column to prevent unauthenticated users from accessing pages in the ProtectedContentdirectory, then click OK.
By default, unauthenticated (anonymous) users who attempt to load a page in the Pro-tectedContentdirectory are redirected to the Login.aspxpage so that they can identify themselves. Because we did not set up any access rules for the Bug2Bugroot directory, anonymous users may still access pages there.

24.2.4 Modifying the Default.aspxand About.aspxPages
We modified the content of the home (Default.aspx) and about (About.aspx) pages to replace the default content. To do so, perform the following steps:
1.  DoubleclickDefault.aspxin theSolution Explorer toopen it, then switchto De-sign view (Fig. 24.11). As you move the cursor over the page, you’ll notice that
24.2 CaseStudy:Password-ProtectedBooksDatabaseApplication   24-11


sometimes the cursor displays as	to indicate that you cannot edit the part of the page behind the cursor. Any part of a content page that is defined in a master page can be edited only in the master page.


Thiscursorindicatesapartofacontentpagethatcannot beeditedbecauseit’sinheritedfromamasterpage













Fig. 24.11 | Default.aspxpageinDesign view.

2.  Changethetext"WelcometoASP.NET!"to"WelcometoOurPassword-Protect-edBookInformationSite". Notethat the text in this heading is actually format-ted as small caps text when the page is displayed in a web browser—all of the letters are displayed in uppercase, but the letters that would normally be lower-case are smaller than the first letter in each word.
3.  Select the text of the two paragraphs that remain in the page and replace them with "Tolearnmoreaboutourbooks,clickhereorclicktheBookstabin
thenavigationbarabove.YoumustbeloggedintoviewtheBookspage." In a later step, you’ll link the words "clickhere"to the Books page.
4.  Save and close the Default.aspxpage.
5.  Next, open About.aspxand switch to Design view.
6.  Change the text "Putcontenthere."to "ThisistheBug2Bugpassword-pro-tectedbookinformationdatabaseexample."
7.  Save and close the About.aspxpage.


24.2.5 Creating a Content Page That Only Authenticated Users Can
Access
We now create the Books.aspxfile in the ProtectedContentfolder—the folder for which we set an access rule denying access to anonymous users. If an unauthenticated user re-quests this file, the user will be redirected to Login.aspx. From there, the user can either log in or create a new account, both of which will authenticate the user, then redirect back to Books.aspx. To create the page, perform the following steps:
24-12	Chapter24  WebAppDevelopmentwithASP.NETinVB:ADeeperLook


1. Right click the ProtectedContentfolder in the Solution Explorer and select Add New Item…. In the resulting dialog, select Web Form and specify the file name Books.aspx. Ensure that the CheckBoxSelect master page is checked to indicate that this Web Form should be created as a content page that references a master page, then click Add.
2. In the Select a Master Page dialog, select Site.masterand click OK. The IDE creates the file and opens it.
3. Switch to Design view, click in the page to select it, then select DOCUMENT from the ComboBoxin the Properties window.
4. Change the Titleproperty of the page to Books, then save and close the page You’ll customize this page and create its functionality shortly.

24.2.6 Linking from the Default.aspxPage to the Books.aspxPage
Next, you’ll add a hyperlink from the text "clickhere"in the Default.aspxpage to the Books.aspxpage. To do so, perform the following steps:
1. Open the Default.aspxpage and switch to Design view. 2.  Select the text "clickhere".
3.  Click the Convert to Hyperlink (	) Buttonon the toolbar at the top of Visual Web Developer to display the Hyperlink dialog. You can enter a URL here, or you can link to another page within the website.
4. Click the Browse… Buttonto display the Select Project Item dialog, which allows you to select another page in the website.
5.  In the left column, select the ProtectedContentdirectory.
6.  In the right column, select Books.aspx, then click OK to dismiss the Select Proj-ect Item dialog and click OK again to dismiss the Hyperlink dialog.

















Fig. 24.12 | SelectingtheBooks.aspxpagefromtheSelectProjectItemdialog.
24.2 CaseStudy:Password-ProtectedBooksDatabaseApplication   24-13


Users can now click the click here link in the Default.aspx page to browse to the Books.aspxpage. If a user is not logged in, clicking this link will redirect the user to the Login page.

24.2.7 Modifying the Master Page (Site.master)
Next, you’ll modify the website’s master page, which defines the common elements we want to appear on each page. A master page is like a base class in a visual inheritance hier-archy, and content pages are like derived classes. The master page contains placeholders for custom content created in each content page. The content pages visually inherit the master page’s content, then add content in the areas designated by the master page’s place-holders.
For example, it’s common to include a navigation bar (that is, a series of buttons or menus for navigating a website) on every page of a site. If a site encompasses a large number of pages, adding markup to create the navigation bar for each page can be time consuming. Moreover, if you subsequently modify the navigation bar, every page on the sitethatusesitmustbeupdated.Bycreatingamasterpage,youcanspecifythenavigation-bar in one file and have it appear on all the content pages. If the navigation bar changes, only the master page changes—any content pages that use it are updated the next time the page is requested.
In the final version of this website, we modified the master page to include the Bug2Buglogo in the header at the top of every page. We also changed the colors of some elements in the header to make them work better with the logo. In particular, we changed the background color from a dark blue to white, and we changed the color of the text for the Log In and Log Out links to black. The color changes require you to modify the CSS styles for some of the master page’s elements. These styles are defined in the file Site.css, which is located in the website’s Stylesfolder. You will not modify the CSS file directly. Instead, you’ll use the tools built into Visual Web Developer to perform these modifica-tions.

Inserting an Imagein the Header
To display the logo, we’ll place an Imagecontrol in the header of the master page. Each content page based on this master page will include the logo. Perform the following steps to add the Image:
1.  Open Site.masterand switch to Design view.
2.  Delete the text MYASP.NETAPPLICATIONat the top of the page.
3.  In the Toolbox, double click Image to add an Imagecontrol where the text used to be.
4.  Edit the Imagecontrol’s ImageUrlproperty to point to the bug2bug.pngimage in the Imagesfolder.

Customizing the CSS Styles for the Master Page
Our logo image was designed to be displayed against a white background. To change the background color in the header at the top of the page, perform the following steps:
1.  Just below the Design view is a list of Buttons that show you where the cursor is currently located in the master page (Fig. 24.13). These Buttons also allow you
24-14	Chapter24  WebAppDevelopmentwithASP.NETinVB:ADeeperLook


to select specific elements in the page. Click the <div.header> Buttonto select the header portion of the page.

i


Fig. 24.13 | ButtonsforselectingpartsofapageinDesign view.

2. Select View > Other Windows > CSS Properties to display the CSS properties (at the left of the IDE) for the currently selected element (the header of the page).
3.  At the topof theCSS Properties window, clicktheSummary Buttontoshowonly the CSS properties that are currently set for the selected element.
4.  Change the backgroundproperty from #4b6c9e(the hexadecimal value for the current dark blue background) to whiteand press Enter.
5.  The Log In and Log Out links use white text in the default website. Now that the background of the header is white, we need to change the color of these links so they’ll be visible. In the upper-right corner of the master page click the HeadLog-inView control, which is where the Log In and Log Out links get displayed.
6. Below the Design view, click the <div.loginDisplay> Buttonto display the styles for the HeadLoginView in the CSS Properties window.
7.  Change the colorproperty from whiteto blackand press Enter.
8. Click inside the box below HeadLoginView. Then, below the Design view, click the <a#HeadingLoginStatus> Buttonto display the styles for the Log In/Log Out link in the CSS Properties window
9.  Change the colorproperty from whiteto blackand press Enter.
10. Some style changes must be made directly in the Site.cssfile because the styles are applied only at runtime. On many websites, when you move the mouse over a hyperlink, the color of the link changes. Similarly, once you click a hyperlink, the hyperlink is often displayed in a different color the next time you visit the page to indicate that you’ve already clicked that link during a previous visit. The predefined styles in this website set the color of the Log In link to white for both of these cases. To change these to black, open the Site.cssfile from the Styles folder in the Solution Explorer, then search for the following two styles:

.loginDisplay a:visited .loginDisplay a:hover
Change each style’s colorproperty from whiteto black. 11. Save the Site.masterand Site.cssfiles.

Adding a Books Link to the Navigation Bar
Currently the navigation bar has only Home and About links. Next, you’ll add a link to the Books page. Perform the following steps:
1.  In the master page, position the mouse over the navigation bar links, then open the smart-tag menu and click Edit Menu Items.
24.2 CaseStudy:Password-ProtectedBooksDatabaseApplication   24-15


2.  In the Menu Item Editor dialog, click the Add a root item (	) Button.
3.  Set the new item’s Textproperty to Booksand use the up arrow Buttonto move the new item up so that the order of the navigation bar items is Home, Booksand About.
4.  Set the new item’s NavigateUrlproperty to the Books.aspxpage in the Pro-tectedContentfolder.
5.  Click OK, then save the Site.masterfile to complete the changes to the master page.

24.2.8 Customizing the Password-Protected Books.aspxPage
You are now ready to customize the Books.aspxpage to display the book information for a particular author.

Generating LINQ to SQL Classes Based on the Books.mdfDatabase TheBooks.aspxpagewillprovideaDropDownListcontainingauthors’namesandaGrid-Viewdisplaying information about books written by the author selected in the DropDown-List. A user will select an author from the DropDownListto cause the GridViewto display information about only the books written by the selected author.
To work with the Booksdatabase through LINQ, we use the same approach as in the Guestbook case study (Section 23.8). First you need to generate the LINQ to SQL classes based on the Books database, which is provided in the databases directory of this chapter’s examples folder. Name the file Books.dbml. When you drag the tables of the Books database  from  the  Database  Explorer  onto  the  Object  Relation  Designer  of Books.dbml, you’ll find that associations (represented by arrows) between the two tables are automatically generated (Fig. 24.14).









Fig. 24.14 | Object Relation Designer fortheBooksdatabase.

To obtain data from this data context, you’ll use two LinqDataSourcecontrols. In both cases, the LinqDataSourcecontrol’s built-in data selection functionality won’t be versatile enough, so the implementation will be slightly different than in Section 23.8. So, we’ll use a custom SelectLINQ statement as the query of a LinqDataSource.

Adding a DropDownListto Display the Authors’ First and Last Names
Now that we have created a BooksDataContextclass (one of the generated LINQ to SQL classes),weaddcontrols to Books.aspxthat willdisplay thedataon the web page. Wefirst add the DropDownListfrom which users can select an author.
24-16	Chapter24  WebAppDevelopmentwithASP.NETinVB:ADeeperLook


1.  OpenBooks.aspxinDesign mode,thenaddthetextAuthor:andaDropDownList control named authorsDropDownListin the page’s editable content area (which has a white background). The DropDownListinitially displays the text Unbound.
2.  Next, we’ll bind the list to a data source, so the list displays the author informa-tion in the Authors table of the Books database. Because the Configure Data Source wizard allows us to create LinqDataSources with only simple Select LINQstatements,wecannotusethewizardhere.Instead,addaLinqDataSource object below the DropDownListnamed authorsLinqDataSource.
3.  Open the smart-tag menu for the DropDownListand click Choose Data Source… to start the Data Source Configuration Wizard (Fig. 24.15). Select authorsLinq-DataSourcefrom the Select a data source drop-down list in the first screen of the wizard. Then, type Nameas the data field to display in the DropDownListand AuthorIDasthedatafieldthatwillbesubmittedtotheserverwhentheusermakes a selection. [Note: You must manually type these values in because authors-LinqDataSourcedoes not yet have a defined Select query.] When authors-DropDownListis rendered in a web browser, the list items will display the names of the authors, but the underlying values associated with each item will be the Au-thorIDs of the authors. Click OK to bind the DropDownListto the specified data.



















Fig. 24.15 | ChoosingadatasourceforaDropDownList.

4.  In the Visual Basic code-behind file (Books.aspx.vb), create an instance of BooksDataContextnamed databaseas an instance variable.
5.  In the Design view of Books.aspx, double click authorsLinqDataSourceto cre-ate an event handler for its Selectingevent. This event occurs every time the LinqDataSourceselects data from its data context, and can be used to implement custom Select queries against the data context. To do so, assign the custom
24.2 CaseStudy:Password-ProtectedBooksDatabaseApplication   24-17


LINQ query to the Resultproperty of the event handler’s LinqDataSourceSe-lectEventArgsargument. The query results become the data source’s data. In this case, we must create a custom anonymous type in the Selectclause with properties Nameand AuthorIDthat contain the author’s full name and ID. The LINQ query is

From author In database.Authors
Select Name = author.FirstName & " " & author.LastName, author.AuthorID
The limitations of the Configure Data Source wizard prevent us from using a cus-tom field such as Name(a combination of first name and last name, separated by a space) that isn’t one of the database table’s existing columns.
6. The last step in configuring the DropDownListon Books.aspxis to set the con-trol’s AutoPostBackproperty to True. This property indicates that a postback oc-curs each time the user selects an item in the DropDownList. As you’ll see shortly, this causes the page’s GridView(created in the next step) to display new data.

Creating a GridViewto Display the Selected Author’s Books
Wenow adda GridViewtoBooks.aspxfordisplaying thebookinformation bythe author selected in the authorsDropDownList.
1.  Add a GridViewnamed titlesGridViewbelow the other controls in the page’s content area.
2.  To bind the GridViewto data from the Booksdatabase, create a LinqDataSource named titlesLinqDataSourcebeneath the GridView.
3.  Select titlesLinqDataSourcefrom the Choose Data Source drop-down list in the GridView Tasks smart-tag menu. Because titlesLinqDataSourcehas no de-fined Selectquery, the GridViewwill not automatically be configured.
4.  To configure the columns of the GridViewto display the appropriate data, select Edit Columns… from the GridView Tasks smart-tag menu to display the Fields di-alog (Fig. 24.16).
5.  Uncheck the Auto-generate fields box to indicate that you’ll manually define the fields to display.
6.  Create four BoundFields with the HeaderTextISBN, Title, EditionNumberand Copyright, respectively.
7.  For each BoundFieldexcept EditionNumber, set the SortExpressionand Data-Fieldproperties to match the HeaderText. For EditionNumber, set the SortEx-pression and DataField to EditionNumber—the name of the field in the database. The SortExpressionspecifies to sort by the associated data field when theuserchooses tosort by the column. Shortly, we’ll enable sorting toallow users to sort this GridView. Clock OK to close the Fields dialog.
8.  To specify the SelectLINQ query for obtaining the data, double click titles-LinqDataSourceto create its Selectingevent handler. Assign the custom LINQ querytotheLinqDataSourceSelectEventArgsargument’sResultproperty.Use the following LINQ query:
24-18	Chapter24  WebAppDevelopmentwithASP.NETinVB:ADeeperLook



















Fig. 24.16 | CreatingGridViewfieldsintheFields dialog.

From book In database.AuthorISBNs
Where book.AuthorID = authorsDropDownList.SelectedValue Select book.Title
9. The GridViewneeds to update every time the user makes a new author selection. To implement this, double click the DropDownListto create an event handler for its SelectedIndexChangedevent. You can make the GridViewupdate by invok-ing its DataBindmethod.

Code-Behind File for the Books Page
Figure 24.17 shows the code for the completed code-behind file. Line 7 defines the data context object that is used in the LINQ queries. Lines 10–18 and 21–29 define the two LinqDataSource’s Selecting events. Lines 32–37 define the authorsDropDownList’s SelectedIndexChangedevent handler, which updates the GridView.

1  ' Fig. 24.17: ProtectedContent_Books.aspx.vb
2  ' Code-behind file for the password-protected Books page. 3  Partial Class ProtectedContent_Books
4	Inherits System.Web.UI.Page 5
6	' data context queried by data sources
7	Private database As New BooksDataContext() 8
9	' specify the Select query that creates a combined first and last name 10	Protected Sub authorsLinqDataSource_Selecting(ByVal sender As Object, 11         ByVal e As System.Web.UI.WebControls.LinqDataSourceSelectEventArgs) _ 12         Handles authorsLinqDataSource.Selecting
13

Fig. 24.17 | Code-behindfileforthepassword-protectedBooks page.(Part1of2.)
24.2 CaseStudy:Password-ProtectedBooksDatabaseApplication   24-19


14	e.Result =
15	From author In database.Authors
16	Select Name = author.FirstName & " " & author.LastName, 17               author.AuthorID
18	End Sub ' authorsLinqDataSource_Selecting 19
20	' specify the Select query that gets the specified author's books 21	Protected Sub titlesLinqDataSource_Selecting(ByVal sender As Object,
22	ByVal e As System.Web.UI.WebControls.LinqDataSourceSelectEventArgs) _ 23	Handles titlesLinqDataSource.Selecting
24
25	e.Result =
26	From book In database.AuthorISBNs
27	Where book.AuthorID = authorsDropDownList.SelectedValue 28	Select book.Title
29	End Sub ' titlesLinqDataSource_Selecting 30
31	' refresh the GridView when a different author is selected 32	Protected Sub authorsDropDownList_SelectedIndexChanged(
33	ByVal sender As Object, ByVal e As System.EventArgs) _ 34	Handles authorsDropDownList.SelectedIndexChanged
35
36         titlesGridView.DataBind() ' update the GridView 37     End Sub ' authorsDropDownList_SelectedIndexChanged
38  End Class ' ProtectedContent_Books

Fig. 24.17 | Code-behindfileforthepassword-protectedBooks page.(Part2of2.)

Configuring the GridViewto Enable Sorting and Paging
Now that the GridViewis tied to a data source, we modify several of the control’s proper-ties to adjust its appearance and behavior.
1.  In Design view, use the GridView’s sizing handles to set the width to 580px.
2.  Next, in the GridView Tasks smart-tag menu, check Enable Sorting so that the column headings in the GridViewbecome hyperlinks that allow users to sort the data in the GridViewusing the sort expressions specified by each column. For ex-ample, clicking the Titlesheading in the web browser will cause the displayed data to appear sorted in alphabetical order. Clicking this heading a second time will cause the data to be sorted in reverse alphabetical order. ASP.NET hides the details required to achieve this functionality.
3.  Finally, in the GridView Tasks smart-tag menu, check Enable Paging. This causes the GridViewto split across multiple pages. The user can click the numbered links at the bottom of the GridViewcontrol to display a different page of data. Grid-View’sPageSizepropertydeterminesthenumberofentriesperpage.SetthePage-Sizeproperty to4using theProperties windowsothat theGridViewdisplaysonly four books per page. This technique for displaying data makes the site more read-able and enables pages to load more quickly (because less data is displayed at one time). As with sorting data in a GridView, you do not need to add any code to achieve paging functionality. Figure 24.18 displays the completed Books.aspxfile in Design mode.
24-20	Chapter24  WebAppDevelopmentwithASP.NETinVB:ADeeperLook





















Fig. 24.18 | CompletedBooks.aspxpageinDesign mode.

24.3 ASP.NET Ajax
In this section, you learn the difference between a traditional web application and an Ajax (Asynchronous  JavaScript  and  XML)  web  application.  You  also  learn how  to  use ASP.NET Ajax to quickly and easily improve the user experience for your web applica-tions. To demonstrate ASP.NET Ajax capabilities, you enhance the validation example by displaying the submitted form information without reloading the entire page. The only modifications to this web application appear in the Validation.aspxfile. You use Ajax-enabled controls to add this feature.

24.3.1 Traditional Web Applications
Figure 24.19 presents the typical interactions between the client and the server in a tradi-tional web application, such as one that uses a user registration form. The user first fills in the form’s fields, then submits the form (Fig. 24.19, Step 1). The browser generates a re-questtotheserver,whichreceivestherequestandprocessesit(Step2).Theservergenerates and sends a response containing the exact page that the browser renders (Step 3), which causes the browser to load the new page (Step 4) and temporarily makes the browser win-dow blank. The client waits for the server to respond and reloads the entire page with the data from the response (Step 4). While such a synchronous request is being processed on the server, the user cannot interact with the web page. Frequent long periods of waiting, due perhaps to Internet congestion, have led some users to refer to the World Wide Web as the “World Wide Wait.” If the user interacts with and submits another form, the pro-cess begins again (Steps 5–8).
This model was designed for a web of hypertext documents—what some people call the “brochure web.” As the web evolved into a full-scale applications platform, the model
24.3 ASP.NETAjax   24-21




2
Process request
Server




Request1


Generate response
3

Page2 Form

Form

6
Process request




Request2


Generate response
7

Page3 Form

Form



Page1	4	Page 1   Form                 reloading

Form
Client

Page2	8	Page	Page3 Form               reloading       Form

Form 5	Form


Fig. 24.19 | Traditionalwebapplicationreloadingthepageforeveryuserinteraction.

shown in Fig. 24.19 yielded “choppy” user experiences. Every full-page refresh required users to reload the full page. Users began to demand a more responsive model.

24.3.2 Ajax Web Applications
Ajax web applications add a layer between the client and the server to manage communi-cation between the two (Fig. 24.20). When the user interacts with the page, the client re-quests information from the server (Step 1). The request is intercepted by the ASP.NET Ajaxcontrolsandsenttotheserverasanasynchronousrequest(Step2)—theusercancon-
Server




Process request1

Generate response

Process request2

Generate response




5  data
2	Uassyenrcihnrtoenraocutisorneqinuietisattes

data 7
pPaargteiaulpdate 4



Requestobject
Callbackfunction Responseprocessing
Client


1	Page1	8 Update    Form        Update
Form
6	3



Requestobject
Callbackfunction Responseprocessing



Partial
pageupdate

Userinteractioninitiates
asynchronousrequest

Fig. 24.20 | Ajax-enabledwebapplicationinteractingwiththeserverasynchronously.
24-22	Chapter24  WebAppDevelopmentwithASP.NETinVB:ADeeperLook


tinue interacting with the application in the client browser while the server processes the request. Other user interactions could result in additional requests to the server (Steps 3 and 4). Once the server responds to the original request (Step 5), the ASP.NET Ajax con-trol that issued the request calls a client-side function to process the data returned by the server. This function—known as a callback function—uses partial-page updates (Step 6) to display the data in the existing web page without reloading the entire page. At the same time, the server may be responding to the second request (Step 7) and the client browser may be starting another partial-page update (Step 8). The callback function updates only a designated part of the page. Such partial-page updates help make web applications more responsive, making them feel more like desktop applications. The web application does not load a new page while the user interacts with it. In the following section, you use ASP.NET Ajax controls to enhance the Validation.aspxpage.

24.3.3 Testing an ASP.NET Ajax Application
To demonstrate ASP.NET Ajax capabilities we’ll enhance the Validation application from Section 23.6 by adding ASP.NET Ajax controls. There are no Visual Basic code modifi-cations to this application—all of the changes occur in the .aspxfile.

Testing the Application in Your Default Web Browser
To test this application in your default web browser, perform the following steps:
1. Select Open Web Site… from the Visual Web Developer File menu.
2.  In the Open Web Site dialog, select File System, then navigate to this chapter’s ex-amples, select the ValidationAjaxfolder and click the Open Button.
3.  Select Validation.aspxin the Solution Explorer, then type Ctrl + F5 to execute the web application in your default web browser.
Figure 24.21 shows a sample execution of the enhanced application. In Fig. 24.21(a), we show the contact form split into two tabs via the TabContainerAjax control. You can switch between thetabs by clicking the title of eachtab. Fig. 24.21(b) showsa Validator-CalloutExtender control, which displays a validation error message in a callout that points to the controlin whichthevalidation erroroccurred, ratherthan as text in the page. Fig. 24.21(c) shows the updated page with the data the user submitted to the server.


a)Enteringanameonthe Name tabthenclickingthe Contact tab









Fig. 24.21 | ValidationapplicationenhancedbyASP.NETAjax.(Part1of2.)
24.3 ASP.NETAjax   24-23


b)Enteringane-mailaddress inanincorrectformatand pressingtheTab keytomove tothenextinputfieldcauses acallouttoappearinforming theusertoenterane-mail addressinavalidformat









c)Afterfillingouttheform properlyandclickingtheSubmit button,thesubmitteddatais displayedatthebottomofthe pagewithapartialpageupdate















Fig. 24.21 | ValidationapplicationenhancedbyASP.NETAjax.(Part2of2.)

24.3.4 The ASP.NET Ajax Control Toolkit
You’llnoticethatthereisa tabofbasic AJAX Extensions controlsin theToolbox.Microsoft also provides the ASP.NET Ajax Control Toolkit as part of the ASP.NET Ajax Library

ajax.codeplex.com
The toolkit contains many more Ajax-enabled, rich GUI controls. Click the Download Buttonto begin the download. The toolkit does not come with an installer, so you must extract the contents of the toolkit’s ZIP file to your hard drive. Note the location where you extracted the files as you’ll need this information to add the ASP.NET Ajax Controls to your Toolbox.
24-24	Chapter24  WebAppDevelopmentwithASP.NETinVB:ADeeperLook


Adding the ASP.NET Ajax Controls to the Toolbox
You should add controls from the Ajax Control Toolkit to the Toolbox in Visual Web De-veloper (or in Visual Studio), so you can drag and drop controls onto your Web Forms. To do so, perform the following steps:
1. Open an existing website project or create a new website project. 2. Open an ASPX page from your project in Design mode.
3.  Right click the Toolbox and choose Add Tab, then type ASP.NETAjaxLibraryin the new tab.
4. Right click under the new ASP.NET Ajax Library tab and select Choose Items… to open the Choose Toolbox Items dialog.
5.  Click  the  Browse  Button then  locate  the  folder  where  you  extracted  the ASP.NET Ajax Control Toolkit. In the WebForms\Releasefolder, select the file AjaxControlToolkit.dllthen click Open.
6.  Click OK toclose dialog. Thecontrols from the Ajax Control Toolkit now appear in the Toolbox’s ASP.NET Ajax Library tab.
7.  Initially the control names are not in alphabetical order. To sort them alphabet-ically, right click in the list of Ajax Control Toolkit controls and select Sort Items Alphabetically.

24.3.5 Using Controls from the Ajax Control Toolkit
In this section, you’ll enhance the application you created in Section 23.6 by adding ASP.NET Ajax controls. The key control in every ASP.NET Ajax-enabled application is the ScriptManager(in the Toolbox’s AJAX Extensions tab), which manages the JavaScript client-side code (called scripts) that enable asynchronous Ajax functionality. A benefit of using ASP.NET Ajax is that you do not need to know JavaScript to be able to use these scripts. The ScriptManageris meant for use with the controls in the Toolbox’s AJAX Ex-tensions tab. There can be only one ScriptManagerper page.

ToolkitScriptManager
The Ajax Control Toolkit comes with an enhanced ScriptManager called the Tool-kitScriptManager, which manages the scripts for the ASP. NET Ajax Toolkit controls. This one should be used in any page with controls from the ASP. NET Ajax Toolkit.

Common Programming Error 24.1
Putting more than one ScriptManagerand/or ToolkitScriptManagercontrol on a Web Form causes the application to throw an InvalidOperationExceptionwhen the page is initialized.

Open the Validationwebsite you created in Section 23.6. Then drag a Toolkit-ScriptManagerfrom the ASP.NET Ajax Library tab in the Toolbox to the top of the page— a script manager must appear before any controls that use the scripts it manages.

Grouping Information in Tabs Using the TabContainerControl
The TabContainercontrol enables you to group information into tabs that are displayed only if they’re selected. The information in an unselected tab won’t be displayed until the
24.3 ASP.NETAjax   24-25


user selects that tab. To demonstrate a TabContainercontrol, let’s split the form into two tabs—one in which the user can enter the name and one in which the user can enter the e-mail address and phone number. Perform the following steps:
1.  Click to the right of the text Please fill out all the fields in the following form: and press Enter to create a new paragraph.
2.  Drag a TabContainercontrol from the ASP.NET Ajax Library tab in the Toolbox into the new paragraph. This creates a container for hosting tabs. Set the TabCon-tainer’s Widthproperty to 450px.
3.  To add a tab, open the TabContainer Tasks smart-tag menu and select Add Tab Panel. This adds a TabPanelobject—representing a tab—to the TabContainer. Do this again to add a second tab.
4.  You must change each TabPanel’s HeaderTextproperty by editing the ASPX page’s markup. To do so, click the TabContainerto ensure that it’s selected, then switch to Split view in the design window. In the highlighted markup that corre-sponds  to  the  TabContainer,  locate  HeaderText="TabPanel1" and  change "TabPanel1" to  "Name",  then  locate  HeaderText="TabPanel2" and  change "TabPanel2"to "Contact". Switch back to Design view. In Design view, you can navigate between tabs by clicking the tab headers. You can drag-and-drop ele-ments into the tab as you would anywhere else.
5.  Click in the Name tab’s body, then insert a one row and two column table. Take the text and controls that are currently in the Name: row of the original table and move them to the table in the Name tab.
6.  SwitchtotheContact tab,clickinitsbody,theninsertatworowandtwocolumn table. Take the text and controls that are currently in the E-mail: and Phone: rows of the original table and move them to the table in the Contact tab.
7.  Delete the original table that is currently below the TabContainer.

Partial-Page Updates Using the UpdatePanelControl
The UpdatePanelcontrol eliminates full-page refreshes by isolating a section of a page for a partial-page update. In this example, we’ll use a partial-page update to display the user’s information that is submitted to the server.
To implement a partial-page update, perform the following steps:
1.  Click to the left of the Submit Buttonand press Enter to create a new paragraph above it. Then click in the new paragraph and drag an UpdatePanelcontrol from the AJAX Extensions tab in the Toolbox to your form.
2.  Then, drag into the UpdatePanelthe control(s) to update and the control that triggers the update. For this example, drag the outputLabeland the submitBut-toninto the UpdatePanel.
3.  To specify when an UpdatePanel should update, you need to define an Up-datePanel trigger. Select the UpdatePanel, then click the ellipsis button next to the control’s Triggersproperty in the Properties window. In the UpdatePanel-Trigger Collection dialog that appears (Fig. 24.22), click Add to add an Async-PostBackTrigger.  Set  the  ControlID property  to  submitButton and  the
24-26	Chapter24  WebAppDevelopmentwithASP.NETinVB:ADeeperLook


EventNameproperty to Click. Now, when the user clicks the Submit button, the UpdatePanelintercepts the request and makes an asynchronous request to the serverinstead. Then the response is insertedin theoutputLabelelement, and the UpdatePanelreloads the label to display the new text without refreshing the en-tire page.



















Fig. 24.22 | CreatingatriggerforanUpdatePanel.

Adding Ajax Functionality to ASP.NET Validation Controls Using Ajax Extenders Several controls in the Ajax Control Toolkit are extenders—components that enhance the functionality of regular ASP.NET controls. In this example, we use ValidatorCallout-ExtendercontrolsthatenhancetheASP.NETvalidationcontrolsbydisplayingerrormes-sages in small yellow callouts next to the input fields, rather than as text in the page.
You can create a ValidatorCalloutExtender by opening any validator control’s smart-tag menu and clicking Add Extender…  to display the Extender Wizard  dialog (Fig. 24.23).  Next,  choose  ValidatorCalloutExtender from  the  list  of  available extenders. The extender’s IDis chosen based on the IDof the validation control you’re extending, but you can rename it if you like. Click OK to create the extender. Do this for each of the validation controls in this example.

Changing the Display Property of the Validation Controls
The ValidatorCalloutExtenders display error messages with a nicer look-and-feel, so we no longer need the validator controls to display these messages on their own. For this rea-son, set each validation control's Displayproperty to None.

Running the Application
When you run this application, the TabContainerwill display whichever tab was last dis-played in the ASPX page’s Design view. Ensure that the Name tab is displayed, then select Validation.aspxin the Solution Explorer and type Ctrl + F5 to execute the application.
24.3 ASP.NETAjax   24-27
























Fig. 24.23 | CreatingacontrolextenderusingtheExtender Wizard.

Additional ASP.NET Information
The Ajax Control Toolkit contains many other extenders and independent controls. You can check them out at www.asp.net/ajax/ajaxcontroltoolkit/samples/. For more in-formation on ASP.NET Ajax, check out our ASP.NET Ajax Resource Center at

www.deitel.com/aspdotnetajax



Summary
Section 24.2 Case Study: Password-Protected Books Database Application
•  The ASP.NET Web Site template is a starter kit for a small multi-page website. The template uses Microsoft’s recommended practices for organizing a website and separating the website’s style (look-and-feel) from its content.

Section 24.2.1 Examining the ASP.NET Web Site Template
•  ThedefaultASP.NETWebSite containsahomepageandanaboutpage—so-calledcontentpages. The navigation bar near the top of the page allows you to switch between these pages by clicking the link for the appropriate page.
•  Amasterpagedefinescommonelementsthatareinheritedbyeachpageinasetofcontentpages. •  Content pages can inherit elements from master pages—this is a form of visual inheritance.
•  Websites commonly provide “membership capabilities” that allow users to register and log in. The default ASP.NET Web Site is pre-configured to support registration and login capabilities.
24-28	Chapter24  WebAppDevelopmentwithASP.NETinVB:ADeeperLook


Section 24.2.2 Test-Driving the Completed Application
•  Forms authentication enables only registered users who are logged in to the website to access a password-protected page or set of pages. Such users are known as the site’s members.
•  If you attempt to access a password-protected page without logging in, you’re automatically re-directed to the login page.
•  When you successfully log into the website you’re considered to be authenticated.
•  When you’re logged in, the Log In link is replaced in the upper-right corner of each page with the message “Welcome username,” where username is replaced with your log in name, and a Log Out link. When you click Log Out, the website redirects you to the home page.

Section 24.2.3 Configuring the Website
•  To create a folder in a website, right click the location of the website in the Solution Explorer, se-lect New Folder and type the folder name.
•  To restrict access to a page, it must reside in a directory other than the website’s root directory.
•  The Web Site Administration Tool allows you to configure various options that determine how your application behaves.
•  Anaccessrulegrants ordenies access toa particulardirectory fora specific userorgroup ofusers.

Section 24.2.4 Modifying the Default.aspxand About.aspxPages
•  As you move the cursor over a content page, you’ll notice that sometimes the cursor displays as to indicate that you cannot edit the part of the page behind the cursor. Any part of a content
page that is defined in a master page can be edited only in the master page.

Section 24.2.5 Creating a Content Page That Only Authenticated Users Can Access
•  When you create a new Web Form that should inherit from a specific master page, ensure that the CheckBoxSelect master page is checked. Then, in the Select a Master Page dialog, select the ap-propriate master page and click OK.

Section 24.2.6 Linking from the Default.aspxPage to the Books.aspxPage
•  To convert text to a hyperlink, select the text then click the Convert to Hyperlink (	) Buttonon the toolbar at the top of Visual Web Developer to display the Hyperlink dialog. You can enter a URL here, or you can link to another page within the website.

Section 24.2.7 Modifying the Master Page (Site.master)
•  A master page is like a base class in a visual inheritance hierarchy, and content pages are like de-rived classes. The master page contains placeholders for custom content created in each content page. The content pages visually inherit the master page’s content, then add content in the areas designated by the master page’s placeholders.
•  The website’s styles are defined in the file Site.css, which is located in the site’s Stylesfolder.
•  SelectView>OtherWindows>CSSProperties todisplaytheCSSproperties(attheleftoftheIDE) for the currently selected element. At the top of the CSS Properties window, click the Summary Buttonto show only the CSS properties that are currently set for the selected element.
•  Some style changes must be made directly in the Site.cssfile because the styles are applied only at runtime.
•  To add a link to the navigation bar in the master page, position the mouse over the navigation bar links then open the smart-tag menu and click Edit Menu Items. In the Menu Item Editor dialog, click the Addarootitem (	)Button.Setthenewitem’sTextproperty andusethearrowButtons
Summary   24-29


to move the new item where it should appear in the navigation bar. Set the new item’s Navigate-Urlproperty to the appropriate page.

Section 24.2.8 Customizing the Password-Protected Books.aspxPage
•  The Configure Data Source wizard allows you to create LinqDataSourceswith only simple Select LINQ statements, so sometimes it is necessary to add a LinqDataSourceobject with a custom query.
•  A LinqDataSource’s Selectingevent occurs every time the LinqDataSourceselects data from its data context, and can be used to implement custom Selectqueries against the data context. To do so, assign the custom LINQ query to the Resultproperty of the event handler’s LinqData-SourceSelectEventArgsargument. The query results become the data source’s data.
•  Setting a DropDownList’s AutoPostBackproperty to Trueindicates that a postback occurs each time the user selects an item in the DropDownList.
•  You can configure the columns of a GridViewmanually by selecting Edit Columns… from the GridView Tasks smart-tag menu.
•  Checking Enable Sorting in the GridView Tasks smart-tag menu changes the column headings in the GridViewto hyperlinks that allow users to sort the data in the GridViewusing the sort expres-sions specified by each column.
•  Checking Enable Paging in the GridView Tasks smart-tag menu causes the GridViewto split across multiple pages. The user can click the numbered links at the bottom of the GridViewcontrol to displayadifferentpageofdata.GridView’sPageSizepropertydeterminesthenumberofentriesper page. This technique for displaying data makes the site more readable and enables pages to load more quickly (because less data is displayed at one time).

Section 24.3 ASP.NET Ajax
•  A traditional web application must make synchronous requests and must wait for a response, whereasan AJAX(Asynchronous JavaScriptandXML)webapplicationscan make asynchronous requests and do not need to wait for a response.
•  The ASP.NET Ajax Control Toolkit contains many more Ajax-enabled, rich GUI controls. Click the Download Buttonto begin the download.
•  The key control in every ASP.NET Ajax-enabled application is the ScriptManager(in the Tool-box’s AJAX Extensions tab), which manages the JavaScript client-side code (called scripts) that en-able asynchronous Ajax functionality. A benefit of using ASP.NET Ajax is that you do not need to know JavaScript to be able to use these scripts.
•  TheScriptManagerismeantforusewiththecontrolsintheToolbox’sAJAXExtensions tab.There can be only one ScriptManagerper page.
•  TheAjaxControlToolkitcomeswithanenhancedversionoftheScriptManagercalledthe Tool-kitScriptManager, which manages all the scripts for the ASP. NET Ajax Toolkit controls. This one should be used in any ASPX page that contains controls from the ASP. NET Ajax Toolkit.
•  The TabContainercontrol enables you to group information into tabs that are displayed only if they’re selected. To add a tab, open the TabContainer Tasks smart-tag menu and select Add Tab Panel. This adds a TabPanelobject—representing a tab—to the TabContainer.
•  The UpdatePanelcontrol eliminates full-page refreshes by isolating a section of a page for a par-tial-page update.
•  To specify when an UpdatePanelshould update, you need to define an UpdatePanel trigger. Se-lect the UpdatePanel, then click the ellipsis button next to the control’s Triggersproperty in the Properties window. In the UpdatePanelTrigger Collection dialog that appears, click Add to add an
24-30	Chapter24  WebAppDevelopmentwithASP.NETinVB:ADeeperLook


AsyncPostBackTrigger. Set the ControlIDproperty to the control that triggers the update and the EventNameproperty to the event that is generated when the user interacts with the control.
•  Several controls in the Ajax Control Toolkit are extenders—components that enhance the func-tionality of regular ASP.NET controls.
•  ValidatorCalloutExtendercontrols enhance the ASP.NET validation controls by displaying er-ror messages in small yellow callouts next to the input fields, rather than as text in the page.
•  You can create a ValidatorCalloutExtenderby opening any validator control’s smart-tag menu and clicking Add Extender… to display the Extender Wizard dialog. Next, choose ValidatorCall-outExtenderfrom the list of available extenders.

Self-Review Exercises
24.1	State whether each of the following is true or false. If false, explain why.
a)  An access rule grants or denies access to a particular directory fora specific useror group of users.
b)  When using controls from the Ajax Control Toolkit, you must include the ScriptMan-agercontrol at the top of the ASPX page.
c)   A master page is like a base class in a visual inheritance hierarchy, and content pages are like derived classes.
d)  A GridViewautomatically enables sorting and paging of its contents.
e)   AJAX web applications make synchronous requests and wait for responses.
24.2	Fill in the blanks in each of the following statements:
a)  A(n)	defines common GUI elements that are inherited by each page in a set of                 .
b)  The main difference between a traditional web application and an Ajax web application is that the latter supports	requests.
c)   The	template is a starter kit for a small multi-page website that uses Micro-soft’s recommended practices for organizing a website and separating the website’s style (look-and-feel) from its content.
d)  The	allows you to configure various options that determine how your appli-cation behaves.
e)   A LinqDataSource’s	event occurs every time the LinqDataSourceselects data from its data context, and can be used to implement custom Selectqueries against the data context.
f)   Setting a DropDownList’s	property to Trueindicates that a postback occurs each time the user selects an item in the DropDownList.
g)  Several controls in the Ajax Control Toolkit are	—components that enhance the functionality of regular ASP.NET controls.

Answers to Self-Review Exercises
24.1	a) True. b) False. The ToolkitScriptManagercontrol must be used for controls from the Ajax Control Toolkit. The ScriptManagercontrol can be used only for the controls in the Toolbox’s AJAX Extensions tab. c) True. d) False. Checking Enable Sorting in the GridView Tasks smart-tag menu changes the column headings in the GridViewto hyperlinks that allow users to sort the data in the GridView. Checking Enable Paging in the GridView Tasks smart-tag menu causes the GridView to split across multiple pages. e) False. That is what traditional web applications do. AJAX web appli-cations can make asynchronous requests and do not need to wait for responses.
Exercises   24-31


24.2	a) master page, content pages. b) asynchronous. c) ASP.NET Web Site. d) Web Site Adminis-tration Tool. e) Selecting. f) AutoPostBack. g) extenders.

Exercises
24.3	(Guestbook Application Modification) Add Ajax functionality to the Guestbookapplication in Exercise 23.5. Use control extenders to display error callouts when one of the user input fields is invalid.
24.4	(Guestbook Application Modification) Modify the Guestbookapplication in Exercise 24.3 to use a UpdatePanelso only the GridViewupdates when the user submits the form. Because only the UpdatePanelwill be updated, you cannot clear the user input fields in the Submit button’s Click event, so you can remove this functionality.
24.5	(Session Tracking Modification) Use the ASP.NET Web Site template thatyou learned about in this chapter to reimplement the session tracking example in Section 23.7.








This page intentionally left blank
WebServicesinVisualBasic	25
A client is to me a mere unit, a factor in a problem.
—Sir Arthur Conan Doyle

...ifthesimplestthingsofnature have a message that you understand, rejoice, for your soul is alive.
—Eleonora Duse


Objectives Inthischapteryou’lllearn:
ÿ   HowtocreateWCFweb
services.
ÿ   HowXML,JSON,XML-Based SimpleObjectAccess Protocol(SOAP)and RepresentationalState TransferArchitecture(REST)
enableWCFwebservices.
ÿ   Theelementsthatcomprise WCFwebservices,suchas servicereferences,service endpoints,servicecontracts
andservicebindings.
ÿ   Howtocreateaclientthat consumesaWCFweb
service.
ÿ   HowtouseWCFweb serviceswithWindowsand
webapplications.
ÿ   Howtousesessiontracking inWCFwebservicesto maintainstateinformation
fortheclient.
ÿ   Howtopassuser-defined
typestoaWCFwebservice.
25-2   Chapter25 WebServicesinVisualBasic



25.1  Introduction
25.2  WCFServicesBasics
25.3  SimpleObjectAccessProtocol (SOAP)
25.4  RepresentationalStateTransfer (REST)
25.5  JavaScriptObjectNotation(JSON) 25.6  PublishingandConsumingSOAP-
BasedWCFWebServices
25.6.1 CreatingaWCFWebService
25.6.2 Codeforthe WelcomeSOAPXMLService
25.6.3 BuildingaSOAPWCFWebService
25.6.4 Deployingthe WelcomeSOAPXMLService
25.6.5 CreatingaClienttoConsumethe WelcomeSOAPXMLService
25.6.6 Consumingthe WelcomeSOAPXMLService
25.7  PublishingandConsumingREST-BasedXMLWebServices
25.7.1 HTTPgetandpostRequests
25.7.2 CreatingaREST-BasedXMLWCF
WebService
25.7.3 ConsumingaREST-BasedXMLWCF
WebService
25.8  PublishingandConsumingREST-BasedJSONWebServices


25.8.1 CreatingaREST-BasedJSONWCF
WebService
25.8.2 ConsumingaREST-BasedJSONWCF
WebService
25.9  BlackjackWebService: Using SessionTrackinginaSOAP-Based WCFWebService
25.9.1 CreatingaBlackjackWebService
25.9.2 ConsumingtheBlackjackWeb
Service
25.10  AirlineReservationWebService: DatabaseAccessandInvokinga ServicefromASP.NET
25.11  EquationGenerator:ReturningUser-DefinedTypes
25.11.1 CreatingtheREST-BasedXML
EquationGenerator WebService
25.11.2 ConsumingtheREST-BasedXML
EquationGenerator WebService
25.11.3 CreatingtheREST-BasedJSONWCF
EquationGeneratorWebService
25.11.4 ConsumingtheREST-BasedJSON WCFEquationGeneratorWeb
Service 25.12  WebResources


Summary | Self-Review Exercises | Answers to Self-Review Exercises | Exercises


25.1 Introduction
ThischapterintroducesWindowsCommunicationFoundation(WCF)servicesinVisual Basic. WCF is a set of technologies for building distributed systems in which system com-ponents communicate with one another over networks. In earlier versions of .NET, the various types of communication used different technologies and programming models. WCF uses a common framework for all communication between systems, so you need to learn only one programming model to use WCF.
ThischapterfocusesonWCFwebservices,whichpromotesoftwarereusabilityin dis-tributed systems that typically execute across the Internet. A web service is a class that allows its methods to be called by methods on other machines via common data formats and protocols, such as XML, JSON and HTTP. In .NET, the over-the-network method calls are commonly implemented through Simple Object Access Protocol (SOAP) or the Representational State Transfer (REST) architecture. SOAP is an XML-based protocol describing how to mark up requests and responses so that they can be sent via protocols such as HTTP. SOAP uses a standardized XML-based format to enclose data in a message that can be sent between a client and a server. REST is a network architecture that uses the
25.2 WCFServicesBasics   25-3


web’s traditional request/response mechanisms such as GET and POST requests. REST-based systems do not require data to be wrapped in a special message format.
We build the WCF web services presented in this chapter in Visual Web Developer 2010Express,andwecreateclientapplicationsthatinvoketheseservicesusingbothVisual Basic 2010 Express and Visual Web Developer 2010 Express. Full versions of Visual Studio 2010 include the functionality of both Express editions.
Requests to and responses from web services created with Visual Web Developer are typically transmitted via SOAP or REST, so any client capable of generating and pro-cessingSOAPorRESTmessagescaninteractwithawebservice,regardlessofthelanguage in which the web service is written. We say more about SOAP and REST in Section 25.3 and Section 25.4, respectively.

25.2 WCF Services Basics
Microsoft’s Windows Communication Foundation (WCF) was created as a single plat-form to encompass many existing communication technologies. WCF increases produc-tivity,becauseyoulearnonlyonestraightforwardprogrammingmodel.EachWCFservice has three key components—addresses, bindings and contracts (usually called the ABCs of a WCF service):
•	 An address represents the service’s location (also known as its endpoint), which includes the protocol (for example, HTTP) and network address (for example, www.deitel.com) used to access the service.
•	A binding specifies how a client communicates with the service (for example, SOAP, REST, and so on). Bindings can also specify other options, such as secu-rity constraints.
•	A contract is an interface representing the service’s methods and their return types. The service’s contract allows clients to interact with the service.
The machine on which the web service resides is referred to as a web service host. The client application that accesses the web service sends a method call over a network to the web service host, which processes the call and returns a response over the network to the application. This kind of distributed computing benefits systems in various ways. For example, an application without direct access to data on another system might be able to retrieve this data via a web service. Similarly, an application lacking the processing power necessary to perform specific computations could use a web service to take advantage of another system’s superior resources.

25.3 Simple Object Access Protocol (SOAP)
The Simple Object Access Protocol (SOAP) is a platform-independent protocol that uses XML to make remote procedure calls, typically over HTTP. Each request and response is packaged in a SOAP message—an XML message containing the information that a web service requires to process the message. SOAP messages are written in XML so that they’re computer readable, human readable and platform independent. Most firewalls—security barriers  that  restrict  communication  among  networks—allow  HTTP  traffic  to  pass through, so that clients can browse the Internet by sending requests to and receiving re-
25-4   Chapter25 WebServicesinVisualBasic


sponses from web servers. Thus, SOAP-based services can send and receive SOAP messag-es over HTTP connections with few limitations.
SOAP supports an extensive set of types. The wire format used to transmit requests and responses must support all types passed between the applications. SOAP types include the primitive types (for example, Integer), as well as DateTime, XmlNode and others. SOAP can also transmit arrays of these types. In Section 25.11, you’ll see that you can also transmit user-defined types in SOAP messages.
WhenaprograminvokesamethodofaSOAPwebservice,therequestandallrelevant information are packaged in a SOAP message enclosed in a SOAP envelope and sent to the server on which the web service resides. When the web service receives this SOAP mes-sage, it parses the XML representing the message, then processes the message’s contents. The message specifies the method that the client wishes to execute and the arguments the client passed to that method. Next, the web service calls the method with the specified arguments (if any) and sends the response back to the client in another SOAP message. The client parses the response to retrieve the method’s result. In Section 25.6, you’ll build and consume a basic SOAP web service.

25.4 Representational State Transfer (REST)
RepresentationalStateTransfer(REST)referstoanarchitecturalstyleforimplementingweb services.SuchwebservicesareoftencalledRESTfulwebservices.ThoughRESTitselfisnot a standard, RESTful web services are implemented using web standards. Each operation in a RESTful web service is identified by a unique URL. Thus, when the server receives a re-quest, it immediately knows what operation to perform. Such web services can be used in a program or directly from a webbrowser. The results of a particularoperation may becached locally by the browser when the service is invoked with a GETrequest. This can make subse-quent requests for the same operation faster by loading the result directly from the browser’s cache. Amazon’s web services (aws.amazon.com) are RESTful, as are many others.
RESTful web services are alternatives to those implemented with SOAP. Unlike SOAP-based web services, the request and response of REST services are not wrapped in envelopes. REST is also not limited to returning data in XML format. It can use a variety of formats, such as XML, JSON, HTML, plain text and media files. In Sections 25.7– 25.8, you’ll build and consume basic RESTful web services.

25.5 JavaScript Object Notation (JSON)
JavaScriptObjectNotation (JSON)isanalternativetoXML forrepresentingdata.JSON is a text-based data-interchange format used to represent objects in JavaScript as collec-tions of name/value pairs represented as Strings. It is commonly used in Ajax applica-tions.JSONisasimpleformatthatmakesobjectseasytoread,createandparse,andallows programs to transmit data efficiently across the Internet because it is much less verbose than XML. Each JSON object is represented as a list of property names and values con-tained in curly braces, in the following format:

{ propertyName1  : value1, propertyName2 : value2  }
Arrays are represented in JSON with square brackets in the following format: [ value1, value2, value3  ]
25.6 PublishingandConsumingSOAP-BasedWCFWebServices	25-5


Each value in an array can be a string, a number, a JSON object, true, falseor null. To appreciate the simplicity of JSON data, examine this representation of an array of address-book entries

[ { first: 'Cheryl', last: 'Black' }, { first: 'James', last: 'Blue' }, { first: 'Mike', last: 'Brown' },
{ first: 'Meg', last: 'Gold' } ]
Many programming languages now support the JSON data format.

25.6 Publishing and Consuming SOAP-Based WCF Web
Services
This section presents our first example of publishing (enabling for client access) and con-suming (using) a web service. We begin with a SOAP-based web service.

25.6.1 Creating a WCF Web Service
To build a SOAP-based WCF web service in Visual Web Developer, you first create a project of type WCF Service. SOAP is the default protocol for WCF web services, so no specialconfiguration is requiredtocreatethem. VisualWebDeveloperthen generatesfiles for the WCF service code, an SVC file (Service.svc, which provides access to the ser-vice), and a Web.configfile (which specifies the service’s binding and behavior).
Visual Web Developer also generates code files for the WCF service class and any other code that is part of the WCF service implementation. In the service class, you define the methods that your WCF web service makes available to client applications.

25.6.2 Code for the WelcomeSOAPXMLService
Figures 25.1 and 25.2 present the code-behind files for the WelcomeSOAPXMLService WCF web service that you build in Section 25.6.3. When creating services in Visual Web Developer, you work almost exclusively in the code-behind files. The service provides a method that takes a name (represented as a String) as an argument and appends it to the welcome message that is returned to the client. We use a parameter in the method defini-tion to demonstrate that a client can send data to a web service.
Figure 25.1 is the service’s interface, which describes the service’s contract—the set of methods and properties the client uses to access the service. The ServiceContractattri-bute (line 4) exposes a class that implements this interface as a WCF web service. The OperationContractattribute (line 7) exposes the Welcomemethod to clients for remote calls.Optionalparameterscanbeassignedtothesecontractstochangethedataformatand method behavior, as we’ll show in later examples.

1  ' Fig. 25.1: IWelcomeSOAPXMLService.vb
2  ' WCF web service interface that returns a welcome message through SOAP 3  ' protocol and XML format.
4  <ServiceContract()>

Fig. 25.1  | WCFwebserviceinterfacethatreturnsawelcomemessagethroughSOAPprotocol andXMLformat.(Part1of2.)
25-6   Chapter25 WebServicesinVisualBasic


5  Public Interface IWelcomeSOAPXMLService 6	' returns a welcome message
7	<OperationContract()>
8	Function Welcome(ByVal yourName As String) As String
9  End Interface ' IWelcomeSOAPXMLService

Fig. 25.1  | WCFwebserviceinterfacethatreturnsawelcomemessagethroughSOAPprotocol andXMLformat.(Part2of2.)

Figure 25.2 defines the class that implements the interface declared as the Service-Contract.Lines8–13definethemethodWelcome, whichreturnsa Stringwelcomingyou to WCF web services. Next, we build the web service from scratch.

1  ' Fig. 25.2: WelcomeSOAPXMLService.vb
2  ' WCF web service that returns a welcome message through SOAP protocol and 3  ' XML format.
4  Public Class WelcomeSOAPXMLService
5	Implements IWelcomeSOAPXMLService 6
7	' returns a welcome message
8	Public Function Welcome(ByVal yourName As String) As String _ 9         Implements IWelcomeSOAPXMLService.Welcome
10
11	Return "Welcome to WCF Web Services with SOAP and XML, " & 12            yourName & "!"
13	End Function ' Welcome
14  End Class ' WelcomeSOAPXMLService

Fig. 25.2  | WCFwebservicethatreturnsawelcomemessagethroughtheSOAPprotocoland XMLformat.

25.6.3 Building a SOAP WCF Web Service
In the following steps, you create a WCF Service project for the WelcomeSOAPXMLService and test it using the built-in ASP.NET Development Server that comes with Visual Web Developer Express and Visual Studio.

Step 1: Creating the Project
To create a project of type WCF Service, select File > New Web Site… to display the New Web Site dialog (Fig. 25.3). Select the WCF Service template. Select File System from the Location drop-down list to indicate that the files should be placed on your local hard disk. By default, Visual Web Developer places files on the local machine in a directory named WCFService1. Rename this folder to WelcomeSOAPXMLService. We modified the default path as well. Click OK to create the project.

Step 2: Examining the Newly Created Project
After you create the project, the code-behind file Service.vb, which contains code for a simple web service, is displayed by default. If the code-behind file is not open, open it by double clicking the file in the App_Code directory listed in the Solution Explorer. By de-fault,anewcode-behindfileimplementsaninterfacenamedIServicethatismarkedwith
25.6 PublishingandConsumingSOAP-BasedWCFWebServices	25-7




















Fig. 25.3  | CreatingaWCF Service inVisualWebDeveloper.

the ServiceContractand OperationContractattributes. In addition, the IService.vb file defines a class named CompositeType with a DataContract attribute (discussed in Section 25.8). The interface contains two sample service methods named GetDataand GetDataUsingContract. The Service.vbcontains the code that defines these methods.

Step 3: Modifying and Renaming the Code-Behind File
To create the WelcomeSOAPXMLServiceservice developed in this section, modify ISer-vice.vband Service.vbby replacing the sample code provided by Visual Web Develop-er with the code from the IWelcomeSOAPXMLServiceand WelcomeSOAPXMLServicefiles (Figs. 25.1and25.2,respectively).Thenrenamethefilesto IWelcomeSOAPXMLService.vb and WelcomeSOAPXMLService.vbby right clicking each file in the Solution Explorer and choosing Rename.

Step 4: Examining the SVC File
The Service.svcfile, when accessed through a web browser, provides information about the web service. However, if you open the SVC file on disk, it contains only

<%@ ServiceHost Language="VB" Debug="true" Service="Service" CodeBehind="~/App_Code/Service.vb" %>
to indicate the programming language in which the web service’s code-behind file is writ-ten, the Debugattribute (enables a page to be compiled for debugging), the name of the service and the code-behind file’s location. When you request the SVC page in a web browser, WCF uses this information to dynamically generate the WSDL document.

Step 5: Modifying the SVC File
If you change the code-behind file name or the class name that defines the web service, you must modify the SVC file accordingly. Thus, after defining class WelcomeSOAP-
25-8   Chapter25 WebServicesinVisualBasic


XMLServicein the code-behind file WelcomeSOAPXMLService.vb, modify the SVC file as follows:

<%@ ServiceHost Language="VB" Debug="true" Service="WelcomeSOAPXMLService" CodeBehind="~/App_Code/WelcomeSOAPXMLService.vb" %>


25.6.4 Deploying the WelcomeSOAPXMLService
You can choose Build Web Site from the Build menu to ensure that the web service com-piles without errors. You can also test the web service directly from Visual Web Developer by selecting Start Debugging from the Debug menu. The first time you do this, the Debug-gingNotEnabled dialogappears.ClickOK if you wantto enabledebugging.Next,abrows-er  window  opens  and  displays  information  about  the  service.  This  information  is generated dynamically when the SVC file is requested. Figure 25.4 shows a web browser displaying the Service.svcfile for the WelcomeSOAPXMLServiceWCF web service. [Note: To view the Service.svcfile, you must set the .svcfile as the project’s start page by right clicking it in Solution Explorer and selecting Set As Start Page.]
Once the service is running, you can also access the SVC page from your browser by typing a URL of the following form in a web browser:

http://localhost:portNumber/virtualPath/Service.svc
(See the actual URL in Fig. 25.4.) By default, the ASP.NET Development Server assigns a random port number to each website it hosts. You can change this behavior by going to the Solution Explorer and clicking on the project name to view the Properties window (Fig. 25.5). Set the Use dynamic ports property to False and set the Port number property to the port number that you want to use, which can be any unused TCP port. Generally, you don’t do this for web services that will be deployed to a real web server. You can also change the service’s virtual path, perhaps to make the path shorter or more readable.

Web Services Description Language
To consume a web service, a client must determine the service’s functionality and how to use it. For this purpose, web services normally contain a service description. This is an XML document that conforms to the Web Service Description Language (WSDL)—an XML vocabulary that defines the methods a web service makes available and how clients interact with them. The WSDL document also specifies lower-level information that cli-ents might need, such as the required formats for requests and responses.
WSDL documents help applications determine how to interact with the web services described in the documents. When viewed in a web browser, an SVC file presents a link to the service’s WSDL document and information on using the utility svcutil.exeto generate test console applications. The svcutil.exetool is included with Visual Studio 2010 and Visual Web Developer. We do not use svcutil.exeto test our services, opting instead to build our own test applications. When a client requests the SVC file’s URL fol-lowed by ?wsdl, the server autogenerates the WSDL that describes the web service and returns the WSDL document. Copy the SVC URL (which ends with .svc) from the browser’s address field in Fig. 25.4, as you’ll need it in the next section to build the client application. Also, leave the web service running so the client can interact with it.
25.6 PublishingandConsumingSOAP-BasedWCFWebServices	25-9


































Fig. 25.4  | SVCfilerenderedinawebbrowser.












Fig. 25.5  | WCFwebserviceProperties window.
25-10	Chapter25  WebServicesinVisualBasic


25.6.5 Creating a Client to Consume the WelcomeSOAPXMLService
Now that you’ve defined and deployed the web service, let’s consume it from a client ap-plication. A .NET web-service client can be any type of .NET application, such as a Win-dows application, a console application or a web application. You can enable a client application  to  consume  a  web  service  by  adding  a  service  reference  to  the  client. Figure 25.6 diagrams the parts of a client for a SOAP-based web service after a service ref-erence has been added. [Note: This section discusses Visual Basic 2010 Express, but the discussion also applies to Visual Web Developer 2010 Express.]


Client
Clientcode (webservice
consumer)





Servicereference



Proxy
class


WSDL
copy




Fig. 25.6  | .NETWCFwebserviceclientafteraweb-servicereferencehasbeenadded.

An application that consumes a SOAP-based web service actually consists of two parts—a proxy class representing the web service and a client application that accesses the webservicevia a proxy object (that is, an instance oftheproxy class). Aproxy classhandles all the “plumbing” required for service method calls (that is, the networking details and the formation of SOAP messages). Whenever the client application calls a web service’s method, the application actually calls a corresponding method in the proxy class. This methodhasthesamenameandparametersasthewebservice’smethodthatisbeingcalled, but formats the call to be sent as a request in a SOAP message. The web service receives this request as a SOAP message, executes the method call and sends back the result as another SOAP message. When the client application receives the SOAP message con-taining the response, the proxy class deserializes it and returns the results as the return value of the web-service method that was called. Figure 25.7 depicts the interactions among the client code, proxy class and web service. The proxy class is not shown in the project unless you click the Show All Files button in the Solution Explorer.
Many aspects of web-service creation and consumption—such as generating WSDL files and proxy classes—are handled by Visual Web Developer, Visual Basic 2010 and WCF. Although developers are relieved of the tedious process of creating these files, they can still modify the files if necessary. This is required only when developing advanced web services—none of our examples require modifications to these files.
25.6 PublishingandConsumingSOAP-BasedWCFWebServices	25-11


Client


Client
code


Proxy
object


Network

SOAP web
service



Fig. 25.7  | Interactionbetweenaweb-serviceclientandaSOAPwebservice.

We now create a client and generate a proxy class that allows the client to access the WelcomeSOAPXMLService web service. First create a Windows application named Wel-comeSOAPXMLClientin Visual Basic 2010, then perform the following steps.

Step 1: Opening the Add Service Reference Dialog
Right click the project name in the Solution Explorer and select Add Service Reference… to display the Add Service Reference dialog.

Step 2: Specifying the Web Service’s Location
In the dialog, enter the URL of WelcomeSOAPXMLService’s .svcfile (that is, the URL you copiedfromFig. 25.4) intheAddress field.Whenyouspecifytheserviceyouwanttocon-sume, the IDE accesses the web service’s WSDL information and copies it into a WSDL filethatisstoredintheclientproject’sServiceReferencesfolder.Thisfileisvisiblewhen you view all of your project’s files in the Solution Explorer. [Note: A copy of the WSDL file provides the client application with local access to the web service’s description. To ensure that the WSDL file is up to date, Visual Basic 2010 provides an Update Service Reference option (available by right clickingthe service reference in the Solution Explorer), which up-dates the files in the ServiceReferencesfolder.]
Many companies that provide web services simply distribute the exact URLs at which their web services can be accessed. The Add Service Reference dialog also allows you to search for services on your local machine or on the Internet.

Step 3: Renaming the Service Reference’s Namespace
IntheAddServiceReference dialog,renametheservicereference’snamespacebychanging the Namespace field to ServiceReference.

Step 4: Adding the Service Reference
Click the Ok button to add the service reference.

Step 5: Viewing the Service Reference in the Solution Explorer
The Solution Explorer should now contain a Service References folder with a node show-ing the namespace you specified in Step 3.

25.6.6 Consuming the WelcomeSOAPXMLService
The application in Fig. 25.8 uses the WelcomeSOAPXMLServiceservice to send a welcome message. You are already familiar with Visual Basic applications that use Labels, TextBox-es and Buttons, so we focus our discussions on the web-services concepts in this chapter’s applications.
25-12	Chapter25  WebServicesinVisualBasic


1  ' Fig. 25.8: WelcomeSOAPXML.vb
2  ' Client that consumes the WelcomeSOAPXMLService. 3  Public Class WelcomeSOAPXML
4	' reference to web service
5	Private client As New ServiceReference.WelcomeSOAPXMLServiceClient() 6
7	' creates welcome message from text input and web service
8	Private Sub submitButton_Click(ByVal sender As System.Object, 9         ByVal e As System.EventArgs) Handles submitButton.Click
10
11	MessageBox.Show(client.Welcome(textBox.Text)) 12     End Sub ' submitButton_Click
13  End Class ' WelcomeSOAPXML

a)Userinputsname





b)Messagesentfrom WelcomeSOAPXML-Service





Fig. 25.8  | ClientthatconsumestheWelcomeSOAPXMLService.

Line  5  defines  a  new  ServiceReference.WelcomeSOAPXMLServiceClient proxy object named client. The event handler uses this object to call methods of the Welcome-SOAPXMLServiceweb service. Line 11 invokes the WelcomeSOAPXMLServiceweb service’s Welcomemethod. The call is made via the local proxy object client, which then commu-nicates with the web service on the client’s behalf. If you downloaded the example from www.deitel.com/books/vb2010htp/, you may need to regenerate the proxy by removing the service reference, then adding it again, because ASP.NET Development Server may use a different port number on your computer. To do so, right click ServiceReference in the Service References folder in the Solution Explorer and select option Delete. Then follow the instructions in Section 25.6.5 to add the service reference to the project.
When the application runs, enter your name and click the Submit button. The appli-cation invokes the Welcomeservice method to perform the appropriate task and return the result, then displays the result in a MessageBox.

25.7 Publishing and Consuming REST-Based XML Web
Services
Intheprevioussection,weusedaproxyobjecttopassdatatoandfromaWCFwebservice using the SOAP protocol. In this section, we access a WCF web service using the REST
25.7 PublishingandConsumingREST-BasedXMLWebServices   25-13


architecture. We modify the IWelcomeSOAPXMLServiceexample to return data in plain XML format. You can create a WCF Service project as you did in Section 25.6 to begin.

25.7.1 HTTP getand postRequests
The two most common HTTP request types (also known as request methods) are get and post. A getrequest typically gets (or retrieves) information from a server. Common uses of getrequests are to retrieve a document or an image, or to fetch search results based on a user-submitted search term. A postrequest typically posts (or sends) data to a server. Common uses of postrequests are to send form data or documents to a server.
An HTTP request often posts data to a server-side form handler that processes the data. For example, when a user performsa search orparticipates in a web-basedsurvey, the web server receives the information specified in the XHTML form as part of the request. Both types of requests can be used to send form data to a web server, yet each request type sends the information differently.
A getrequest sends information to the server in the URL. For example, in the fol-lowing URL

www.google.com/search?q=deitel
searchis the name of Google’s server-side form handler, qis the nameof a variable in Google’s search form and deitelis the search term. A ?separates the query string from the rest of the URL in a request. A name/value pair is passed to the server with the name and the value separated by an equals sign (=). If more than one name/value pair is submit-ted, each pair is separated by an ampersand (&). The server uses data passed in a query string to retrieve an appropriate resource from the server. The server then sends aresponse to the client. A getrequest may be initiated by submitting an XHTML form whose meth-odattribute is set to "get", or by typing the URL (possibly containing a query string) di-rectly into the browser’s address bar.
A postrequest sends form data as part of the HTTP message, not as part of the URL. A getrequest typically limits the query string (that is, everything to the right of the ?) to a specific number of characters. For example, Internet Explorer restricts the entire URL to no more than 2083 characters. Typically, large amounts of information should be sent using the postmethod. The postmethod is also sometimes preferred because it hides the submitted data from the user by embedding it in an HTTP message. If a form submits hidden input values along with user-submitted data, the postmethod might generate a URL like www.searchengine.com/search. The form data still reaches the server for pro-cessing, but the user does not see the exact information sent.

25.7.2 Creating a REST-Based XML WCF Web Service

Step 1: Adding the WebGet Attribute
IWelcomeRESTXMLService interface (Fig. 25.9) is a modified version of the IWelcome-SOAPXMLServiceinterface.TheWelcomemethod’sWebGetattribute(line10)mapsameth-od to a unique URL that can be accessed via an HTTP getoperation programmatically or in a web browser. To use the WebGetattribute, we import the System.ServiceMod-el.Webnamespace(line4).WebGet’sUriTemplateproperty(line10)specifiestheURIfor-mat that is used to invoke the method. You can access the Welcome method in a web
25-14	Chapter25  WebServicesinVisualBasic


browser by appending text that matches the UriTemplatedefinition to the end of the ser-vice’s location, as in http://localhost:51424/WelcomeRESTXMLService/Service.svc/ welcome/Bruce. WelcomeRESTXMLService (Fig. 25.10) is the class that implements the IWelcomeRESTXMLService interface; it is similar to the WelcomeSOAPXMLService class (Fig. 25.2).


1  ' Fig. 25.9: IWelcomeRESTXMLService.vb
2  ' WCF web-service interface. A class that implements this interface
3  ' returns a welcome message through REST architecture and XML data format. 4  Imports System.ServiceModel.Web
5
6  <ServiceContract()>
7  Public Interface IWelcomeRESTXMLService 8	' returns a welcome message
9	<OperationContract()>
10	<WebGet(UriTemplate:="welcome/{yourName}")>
11	Function Welcome(ByVal yourName As String) As String
12  End Interface ' IWelcomeRESTXMLService

Fig. 25.9  | WCFweb-serviceinterface.Aclassthatimplementsthisinterfacereturnsawelcome messagethroughRESTarchitectureandXMLdataformat.


1  ' Fig. 25.10: WelcomeRESTXMLService.vb
2  ' WCF web service that returns a welcome message using REST architecture 3  ' and XML data format.
4  Public Class WelcomeRESTXMLService
5	Implements IWelcomeRESTXMLService 6
7	' returns a welcome message
8	Public Function Welcome(ByVal yourName As String) _
9	As String Implements IWelcomeRESTXMLService.Welcome 10
11	Return "Welcome to WCF Web Services with REST and XML, " & 12            yourName & "!"
13	End Function ' Welcome
14  End Class ' WelcomeRESTXMLService

Fig. 25.10 | WCFwebservicethatreturnsawelcomemessageusingRESTarchitectureand XMLdataformat.

Step 2: Modifying the Web.configFile
Figure 25.11showspartofthedefaultWeb.configfilemodifiedtouseRESTarchitecture. The endpointBehaviorselement (lines 16–20) in the behaviorselement indicates that this web service endpoint will be accessed using the web programming model (REST). The nested webHttpelement specifies that clients communicate with this service using the standard HTTP request/response mechanism. The protocolMappingelement (lines 22– 24) in the system.serviceModelelement, changes the default protocol for communicat-ing with this web service (normally SOAP) to the webHttpBinding, which is used for REST-based HTTP requests.
25.7 PublishingandConsumingREST-BasedXMLWebServices   25-15


1  <system.serviceModel> 2	<behaviors>
3	<serviceBehaviors> 4            <behavior>
5	<!-- To avoid disclosing metadata information, set the 6                  value below to false and remove the metadata
7	endpoint above before deployment --> 8               <serviceMetadata httpGetEnabled="true"/>
9	<!-- To receive exception details in faults for debugging 10                  purposes, set the value below to true.  Set to false 11                  before deployment to avoid disclosing exception
12	information -->
13	<serviceDebug includeExceptionDetailInFaults="false"/> 14            </behavior>
15	</serviceBehaviors> 16	<endpointBehaviors> 17            <behavior>
18	<webHttp/> 19            </behavior>
20	</endpointBehaviors> 21     </behaviors>
22	<protocolMapping>
23	<add scheme="http" binding="webHttpBinding"/> 24     </protocolMapping>
25  </system.serviceModel>

Fig. 25.11 | WelcomeRESTXMLServiceWeb.configfile.

Figure 25.12 tests the WelcomeRESTXMLService’s Welcomemethod in a web browser. The URL specifies the location of the Service.svcfile and uses the URI template to invoke method Welcomewith the argument Bruce. The browser displays the XML data response from WelcomeRESTXMLService. Next, you’ll learn how to consume this service.









Fig. 25.12 | ResponsefromWelcomeRESTXMLServiceinXMLdataformat.

25.7.3 Consuming a REST-Based XML WCF Web Service
WelcomeRESTXML(Fig. 25.13) uses the WebClientclass to invoke the web service and re-ceiveitsresponse. In line5, we import theXML message’s namespace (seen in Fig. 25.12), which is required to parse the service’s XML response. The keyword With-Eventsin line 9 indicates that the WebClientobject has events associated with it and enables you to use the variable’s name in an event handler’s Handlesclause.
25-16	Chapter25  WebServicesinVisualBasic


1  ' Fig. 25.13: WelcomeRESTXML.vb
2  ' Client that consumes the WelcomeRESTXMLService. 3  Imports System.Net
4  Imports System.Xml.Linq
5  Imports <xmlns="http://schemas.microsoft.com/2003/10/Serialization/"> 6
7  Public Class WelcomeRESTXML
8	' object to invoke the WelcomeRESTXMLService 9	Private WithEvents service As New WebClient()
10
11	' get user input and pass it to the web service
12	Private Sub submitButton_Click(ByVal sender As System.Object, 13         ByVal e As System.EventArgs) Handles submitButton.Click
14
15	' send request to WelcomeRESTXMLService 16	service.DownloadStringAsync(New Uri(
17	"http://localhost:51424/WelcomeRESTXMLService/Service.svc/" & 18           "welcome/" & textBox.Text))
19	End Sub ' submitButton_Click 20
21	' process web-service response
22	Private Sub service_DownloadStringCompleted(ByVal sender As Object, 23         ByVal e As System.Net.DownloadStringCompletedEventArgs) _
24	Handles service.DownloadStringCompleted 25
26	' check if any errors occurred in retrieving service data 27	If e.Error Is Nothing Then
28	' parse the returned XML string (e.Result) 29	Dim xmlResponse = XDocument.Parse(e.Result) 30
31	' use XML axis property to access the <string> element's value 32	MessageBox.Show(xmlResponse.<string>.Value)
33	End If
34	End Sub ' service_DownloadStringCompleted
35  End Class ' WelcomeRESTXML

a)Userinputsname.





b)MessagesentfromWelcomeRESTXMLService.







Fig. 25.13 | ClientthatconsumestheWelcomeRESTXMLService.
25.8 PublishingandConsumingREST-BasedJSONWebServices   25-17


Inthisexample,weprocessthe WebClient’s DownloadStringCompletedevent,which occurs when the client receives the completed response from the web service. Line 16 calls the serviceobject’s DownloadStringAsyncmethod to invoke the web service asynchro-nously. (There is also a synchronous DownloadStringmethod that does not return until it receives the response.) The method’s argument (that is, the URL to invoke the web ser-vice) must be specified as an object of class Uri. Class Uri’s constructor receives a String representingauniformresourceidentifier.[Note:TheURL’sportnumbermustmatchthe one issued to the web service by the ASP.NET Development Server.] When the call to the web service completes, the WebClientobject raises the DownloadStringCompletedevent. Its event handler has a parameter eof type DownloadStringCompletedEventArgswhich contains the information returned by the web service. We can use this variable’s properties to get the returned XML document (e.Result) and any errors that may have occurred during the process (e.Error). We then parse the XML response using XDocumentmethod Parse(line 29) and display our welcome Stringin a MessageBox(line 32).


25.8 Publishing and Consuming REST-Based JSON Web
Services
We now build a RESTful web service that returns data in JSON format.


25.8.1 Creating a REST-Based JSON WCF Web Service
By default, a web-service method with the WebGetattribute returns data in XML format. In Fig. 25.14, we modify the WelcomeRESTXMLServiceto return data in JSON format by setting WebGet’s ResponseFormatproperty to WebMessageFormat.Json(line 10). (Web-MessageFormat.XMListhedefaultvalue.)ForJSONserializationtoworkproperly,theob-jects being converted to JSON must have Public properties. This enables the JSON serialization to create name/value pairs representing each Publicproperty and its corre-sponding value. The previous examples return Stringobjects containing the responses. Even though Strings are objects, Strings do not have any Publicproperties that repre-sent their contents. So, lines 17–30 define a TextMessageclass that encapsulates a String value and defines a Publicproperty Messageto access that value. The DataContractat-tribute(line16)exposestheTextMessageclasstotheclientaccess. Similarly,theDataMem-berattribute exposes a property of this class to the client. This property will appear in the JSON object as a name/value pair. Only DataMembers of a DataContractare serialized.

1  ' Fig. 25.14: IWelcomeRESTJSONService.vb
2  ' WCF web-service interface that returns a welcome message through REST 3  ' architecture and JSON format.
4  Imports System.ServiceModel.Web 5
6  <ServiceContract()>
7  Public Interface IWelcomeRESTJSONService

Fig. 25.14 | WCFweb-serviceinterfacethatreturnsawelcomemessagethroughREST architectureandJSONformat.(Part1of2.)
25-18	Chapter25  WebServicesinVisualBasic


8	' returns a welcome message 9	<OperationContract()>
10	<WebGet(ResponseFormat:=WebMessageFormat.Json, 11         UriTemplate:="welcome/{yourName}")>
12	Function Welcome(ByVal yourName As String) As TextMessage 13  End Interface ' IWelcomeRESTJSONService
14
15  ' class to encapsulate a String to send in JSON format 16  <DataContract()>
17  Public Class TextMessage
18	Public messageValue As String 19
20	' property Message 21	<DataMember()>
22	Public Property Message() As String 23         Get
24	Return messageValue 25         End Get
26	Set(ByVal value As String) 27            messageValue = value 28	End Set
29	End Property ' Message
30  End Class ' TextMessage

Fig. 25.14 | WCFweb-serviceinterfacethatreturnsawelcomemessagethroughREST architectureandJSONformat.(Part2of2.)

Figure 25.15 shows the implementation of the interface of Fig. 25.14. The Welcome method (lines 8–15) returns a TextMessageobject, reflecting the changes we made to the interface class. This object is automatically serialized in JSON format (as a result of line 10 in Fig. 25.14) and sent to the client.


1  ' Fig. 25.15: WelcomeRESTJSONService.vb
2  ' WCF web service that returns a welcome message through REST architecture 3  ' and JSON format.
4  Public Class WelcomeRESTJSONService 5	Implements IWelcomeRESTJSONService 6
7	' returns a welcome message
8	Public Function Welcome(ByVal yourName As String)
9	As TextMessage Implements IWelcomeRESTJSONService.Welcome 10	' add welcome message to field of TextMessage object
11	Dim welcomeString As New TextMessage
12	welcomeString.Message = "Welcome to WCF Web Services with REST " & 13            "and JSON, " & yourName & "!"
14	Return welcomeString 15     End Function ' Welcome
16  End Class ' WelcomeRESTJSONService

Fig. 25.15 | WCFwebservicethatreturnsawelcomemessagethroughRESTarchitectureand JSONformat.
25.8 PublishingandConsumingREST-BasedJSONWebServices   25-19


We can once again test the web service using a web browser, by accessing the Ser-vice.svc file (http://localhost:49745/WelcomeRESTJSONService/Service.svc) and appending the URI template (welcome/yourName) to the address. The response prompts you to download a file called yourName, which is a text file. If you save it to disk, the file will have the .jsonextension. This contains the JSONformatteddata. By opening the file in a text editor such as Notepad (Fig. 25.16), you can see the service response as a JSON object. Notice that the property named Messagehas the welcome message as its value.







Fig. 25.16 | ResponsefromWelcomeRESTJSONServiceinJSONdataformat.

25.8.2 Consuming a REST-Based JSON WCF Web Service
We mentioned earlier that all types passed to and from web services can be supported by REST. Custom types that are sent to or from a REST web service are converted to XML or JSON data format. This process is referred to as XML serialization or JSON serializa-tion, respectively. In Fig. 25.17, we consume the WelcomeRESTJSONServiceservice using an objectoftheSystem.Runtime.Serialization.Jsonlibrary’sDataContractJsonSeri-alizerclass (lines 30–31). To use the System.Runtime.Serialization.Jsonlibrary and DataContractJsonSerializerclass, you must include a reference to the System.Ser-viceModel.Weband System.Runtime.Serializationassemblies in the project. To do so, right click the project name, select Add Reference and add the System.ServiceModel.Web and System.Runtime.Serializationassemblies. The TextMessageclass (lines 43–45) maps the JSON response’s fields for the DataContractJsonSerializerto deserialize. We addthe Serializableattribute (line 42) to the TextMessageclass to recognize it as a valid serializable object we can convert to and from JSON format. Also, this class on the client must have Publicdata or properties that match the Publicdata or properties in the cor-responding class from the web service. Since we want to convert the JSON response into a TextMessage object, we set the DataContractJsonSerializer’s type parameter to TextMessage(line 31). In line 33, we use the System.Textnamespace’s Encoding.Uni-code.GetBytesmethod to convert the JSON response to a Unicode encoded byte array, andencapsulatethebytearrayina MemoryStreamobjectsowecanreaddatafromthearray using stream semantics. The bytes in the MemoryStreamobject are read by the DataCon-tractJsonSerializerand deserialized into a TextMessageobject (line 32).

1  ' Fig. 25.17: WelcomeRESTJSON.vb
2  ' Client that consumes WelcomeRESTJSONService. 3  Imports System.IO
4  Imports System.Net
5  Imports System.Runtime.Serialization.Json
6  Imports System.Text

Fig. 25.17 | ClientthatconsumesWelcomeRESTJSONService.(Part1of2.)
25-20	Chapter25  WebServicesinVisualBasic


7
8  Public Class WelcomeRESTJSON
9	' object to invoke the WelcomeRESTJSONService 10	Private WithEvents service As New WebClient() 11
12	' creates welcome message from text input and web service
13	Private Sub submitButton_Click(ByVal sender As System.Object, 14         ByVal e As System.EventArgs) Handles submitButton.Click
15
16	' send request to WelcomeRESTJSONService 17	service.DownloadStringAsync(New Uri(
18	"http://localhost:49745/WelcomeRESTJSONService/Service.svc/" & 19          "welcome/" & textBox.Text))
20	End Sub ' submitButton 21
22	' process web-service response
23	Private Sub service_DownloadStringCompleted(ByVal sender As Object, 24         ByVal e As System.Net.DownloadStringCompletedEventArgs) _
25	Handles service.DownloadStringCompleted 26
27	' check if any errors occurred in retrieving service data 28	If e.Error Is Nothing Then
29	' deserialize response into a TextMessage object 30	Dim JSONSerializer _
31	As New DataContractJsonSerializer(GetType(TextMessage)) 32            Dim welcomeString = JSONSerializer.ReadObject(
33	New MemoryStream(Encoding.Unicode.GetBytes(e.Result))) 34
35	' display Message text
36	MessageBox.Show(CType(welcomeString, TextMessage).Message) 37         End If
38	End Sub ' service_DownloadStringCompleted 39  End Class ' WelcomeRESTJSON
40
41  ' TextMessage class representing a JSON object 42  <Serializable()>
43  Public Class TextMessage 44	Public Message As String
45  End Class ' TextMessage



a)Userinputsname.	b)MessagesentfromWelcomeRESTJSONService.








Fig. 25.17 | ClientthatconsumesWelcomeRESTJSONService.(Part2of2.)
25.9 UsingSessionTrackinginaSOAP-BasedWCFWebService   25-21

25.9 Blackjack Web Service: UsingSessionTrackingina
SOAP-Based WCF Web Service

In Chapter 23, we described the advantages of maintaining information about users to personalizetheirexperiences.Inparticular,wediscussedsessiontrackingusingcookiesand HttpSessionState objects. Next, we incorporate session tracking into a SOAP-based WCF web service.
Suppose a client application needs to call several methods from the same web service, possibly several times each. In such a case, it can be beneficial for the web service to main-tain state information for the client. Session tracking eliminates the need for information about the client to be passed between the client and the web service multiple times. For example, a web service providing access to local restaurant reviews would benefit from storingtheclientuser’sstreetaddress.Oncetheuser’saddressisstoredinasessionvariable, web service methods can return personalized, localized results without requiring that the address be passed in each method call. This not only improves performance but also requires less effort on your part—less information is passed in each method call.

25.9.1 Creating a Blackjack Web Service
Web services store session information to provide more intuitive functionality. Our next example is a SOAP-based web service that assists programmers in developing a blackjack card game. The web service provides methods to deal a card and to evaluate a hand of cards. After presenting the web service, we use it to serve as the dealer for a game of black-jack. The blackjack web service creates a session variable to maintain a unique deck of cards for each client application. Several clients can use the service at the same time, but method calls made by a specific client use only the deck stored in that client’s session. Our example uses a simple subset of casino blackjack rules:
Two cards each are dealt to the dealer and the player. The player’s cards are dealt face up. Only the dealer’s first card is dealt face up. Each card has a value. A card num-bered 2 through 10 is worth its face value. Jacks, queens and kings each count as 10. Aces can count as 1 or 11—whichever value is more beneficial to the player (as we’ll soon see). If the sum of the player’s two initial cards is 21 (that is, the player was dealt a card valued at 10 and an ace, which counts as 11 in this situation), the player has “blackjack” and immediately wins the game. Otherwise, the player can begin taking additional cards one at a time. These cards are dealt face up, and the player decides when to stop taking cards. If the player “busts” (that is, the sum of the player’s cards exceeds 21), the game is over, and the player loses. When the player is satisfied with the current set of cards, the player “stays” (that is, stops taking cards), and the dealer’s hid-den card is revealed. If the dealer’s total is 16 or less, the dealer must take another card; otherwise, the dealer must stay. The dealer must continue to take cards until the sum of the dealer’s cards is greater than or equal to 17. If the dealer exceeds 21, the player wins. Otherwise, the hand with the higher point total wins. If the dealer and the player have the same point total, the game is a “push” (that is, a tie), and no one wins.
TheBlackjackWCFwebservice’sinterface(Fig. 25.18) usesaServiceContractwith theSessionModepropertysettoRequired(line3).Thismeanstheservicerequiressessions to execute correctly. By default, the SessionModeproperty is set to Allowed. It can also be set to NotAllowedto disable sessions.
25-22	Chapter25  WebServicesinVisualBasic


1  ' Fig. 25.18: IBlackjackService.vb
2  ' Blackjack game WCF web-service interface.
3  <ServiceContract(SessionMode:=SessionMode.Required)> _ 4  Public Interface IBlackjackService
5	' deals a card that has not been dealt 6	<OperationContract()>
7	Function DealCard() As String 8
9	' creates and shuffles the deck 10	<OperationContract()>
11	Sub Shuffle() 12
13	' calculates value of a hand 14	<OperationContract()>
15	Function GetHandValue(ByVal dealt As String) As Integer
16  End Interface ' IBlackjackService

Fig. 25.18 | BlackjackgameWCFweb-serviceinterface.

The web-service class (Fig. 25.19) provides methods to deal a card, shuffle the deck and determine the point value of a hand. For this example, we want a separate object of the BlackjackServiceclass to handle each client session, so we can maintain a unique deck for each client. To do this, we must specify this behavior in the ServiceBehavior attribute (line 5). Setting the ServiceBehavior’s InstanceContextMode property to PerSessioncreatesanewinstanceoftheclassforeachsession.TheInstanceContextMode property can also be set to PerCallor Single. PerCalluses a new object of the web-ser-vice class to handle every method call to the service. Singleuses the same object of the web-service class to handle all calls to the service.


1  ' Fig. 25.19: BlackjackService.vb 2  ' Blackjack game WCF web service. 3  Imports System.Collections.Generic 4
5  <ServiceBehavior(InstanceContextMode:=InstanceContextMode.PerSession)> 6  Public Class BlackjackService
7	Implements IBlackjackService
8	' create persistent session deck-of-cards object 9	Dim deck As New List(Of String)
10
11	' deals card that has not yet been dealt 12	Public Function DealCard() As String _ 13         Implements IBlackjackService.DealCard 14
15	Dim card As String = Convert.ToString(deck(0)) ' get first card 16	deck.RemoveAt(0) ' remove card from deck
17	Return card
18	End Function ' DealCard
19

Fig. 25.19 | BlackjackgameWCFwebservice.(Part1of3.)
25.9 UsingSessionTrackinginaSOAP-BasedWCFWebService   25-23


20	' creates and shuffles a deck of cards
21	Public Sub Shuffle() Implements IBlackjackService.Shuffle
22	Dim randomObject As New Random() ' generates random numbers 23
24	deck.Clear() ' clears deck for new game 25
26	' generate all possible cards
27	For face = 1 To 13 ' loop through face values
28	For suit As Integer = 0 To 3 ' loop through suits
29	deck.Add(face & " " & suit) ' add card (string) to deck 30            Next suit
31	Next face 32
33	' shuffles deck by swapping each card with another card randomly 34	For i = 0 To deck.Count - 1
35	' get random index
36	Dim newIndex = randomObject.Next(deck.Count - 1)
37	Dim temporary = deck(i) ' save current card in temporary variable 38	deck(i) = deck(newIndex) ' copy randomly selected card
39	deck(newIndex) = temporary ' copy current card back into deck 40         Next
41	End Sub ' Shuffle 42
43	' computes value of hand
44	Public Function GetHandValue(ByVal dealt As String) As Integer _ 45         Implements IBlackjackService.GetHandValue
46	' split string containing all cards
47	Dim tab As Char = Convert.ToChar(vbTab)
48	Dim cards As String() = dealt.Split(tab) ' get array of cards 49	Dim total As Integer = 0 ' total value of cards in hand
50	Dim face As Integer ' face of the current card
51	Dim aceCount As Integer = 0 ' number of aces in hand 52
53	' loop through the cards in the hand 54	For Each card In cards
55	' get face of card
56	face = Convert.ToInt32(card.Substring(0, card.IndexOf(" "))) 57
58	Select Case face
59	Case 1 ' if ace, increment aceCount 60                  aceCount += 1
61	Case 11 To 13 ' if jack, queen or king add 10 62                  total += 10
63	Case Else ' otherwise, add value of face 64                  total += face
65	End Select 66         Next
67
68	' if there are any aces, calculate optimum total 69	If aceCount > 0 Then
70	' if it is possible to count one ace as 11, and the rest
71	' as 1 each, do so; otherwise, count all aces as 1 each

Fig. 25.19 | BlackjackgameWCFwebservice.(Part2of3.)
25-24	Chapter25  WebServicesinVisualBasic


72	If (total + 11 + aceCount - 1 <= 21) Then 73               total += 11 + aceCount - 1
74	Else
75	total += aceCount 76            End If
77	End If 78
79	Return total
80	End Function ' GetHandValue
81  End Class ' BlackjackService

Fig. 25.19 | BlackjackgameWCFwebservice.(Part3of3.)

We represent each card as a Stringconsisting of a digit (that is, 1–13) representing the card’s face (for example, ace through king), followed by a space and a digit (that is, 0– 3) representing the card’s suit (for example, clubs, diamonds, hearts or spades). For example, the jack of hearts is represented as "112", and the two of clubs as "20". After deploying the web service, we create a Windows Forms application that uses the Black-jackService’s methods to implement a blackjack game.
MethodDealCard(lines12–18)removesacardfromthedeckandsendsittotheclient. Without using session tracking, the deck of cards would need to be passed back and forth witheachmethodcall.Usingsessionstatemakesthemethodeasytocall(itrequiresnoargu-ments) and avoids the overhead of sending the deck over the network multiple times.
Method DealCard (lines 12–18) manipulates the current user’s deck (the List of Strings defined at line 9). From the user’s deck, DealCardobtains the current top card (line 15), removes the top card from the deck (line 16) and returns the card’s value as a String(line 17).
Method Shuffle(lines 21–41) fills the Listobject representing a deck of cards and shuffles it. Lines 27–31 generate Strings in the form "face suit"to represent each card in a deck. Lines 34–40 shuffle the deck by swapping each card with another randomly selected card in the deck.
Method GetHandValue(lines 44–80) determines the total value of cards in a hand by trying to attain the highest score possible without going over 21. Recall that an ace can be counted as either 1 or 11, and all face cards count as 10.
Asyou’llseeinFig. 25.20,theclientapplicationmaintainsahandofcardsasaString inwhicheachcardisseparatedbyatabcharacter.Line48ofFig. 25.19tokenizesthehand of cards (represented by dealt) into individual cards by calling Stringmethod Splitand passing to it the tab character. Splituses the delimiter characters to separate tokens in the String. Lines 54–66 count the value of each card. Line 56 retrieves the first integer—the face—and uses that value in the SelectCasestatement (lines 58–65). If the card is an ace, the method increments variable aceCount(line 60). We discuss how this variable is used shortly. If the card is an 11, 12 or 13 (jack, queen orking), the method adds 10 to the total value of the hand (line 62). If the card is anything else, the method increases the total by that value (line 64).
Because an ace can represent 1 or 11, additional logic is requiredto process aces. Lines 69–77 process the aces after all the other cards. If a hand contains several aces, only one ace can be counted as 11 (if two aces each are counted as 11, the hand would have a losing value of at least 22). The condition in line 72 determines whether counting one ace as 11
25.9 UsingSessionTrackinginaSOAP-BasedWCFWebService   25-25


and the rest as 1 results in a total that does not exceed 21. If this is possible, line 73 adjusts the total accordingly. Otherwise, line 75 adjusts the total, counting each ace as 1.
Method GetHandValuemaximizes the value of the current cards without exceeding 21. Imagine, for example, that the dealer has a 7 and receives an ace. The new total could beeither8or18.However,GetHandValuealwaysmaximizesthevalueofthecardswithout going over 21, so the new total is 18.

Modifying the web.configFile
To allow this web service to perform session tracking, you must modify the web.config file to include the following element in the system.serviceModelelement:s

<protocolMapping>
<add scheme="http" binding="wsHttpBinding"/> </protocolMapping>


25.9.2 Consuming the Blackjack Web Service
Now we use our blackjack web service in a Windows application (Fig. 25.20). This appli-cation uses an instance of BlackjackServiceClient(declared in line 7 and created in line 30) to represent the dealer. The web service keeps track of the player’s and the dealer’s cards (that is, all the cards that have been dealt). As in Section 25.6.5, you must add a ser-vice reference to your project so it can access the web service. The code and images for this example are provided with the chapter’s examples.

1  ' Fig. 25.20: Blackjack.vb
2  ' Blackjack game that uses the BlackjackService web service. 3  Imports System.Net
4
5  Public Class Blackjack
6	' reference to web service
7	Private dealer As ServiceReference.BlackJackServiceClient 8
9	' string representing the dealer's cards 10	Private dealersCards As String
11
12	' string representing the player's cards 13	Private playersCards As String
14	Private cardBoxes As List(Of PictureBox) ' list of card images
15	Private currentPlayerCard As Integer ' player's current card number 16	Private currentDealerCard As Integer ' dealer's current card number 17
18	' enum representing the possible game outcomes 19	Public Enum GameStatus
20	PUSH ' game ends in a tie 21	LOSE ' player loses
22	WIN ' player wins
23	BLACKJACK ' player has blackjack 24     End Enum ' GameStatus
25

Fig. 25.20 | BlackjackgamethatusestheBlackjackServicewebservice.(Part1of8.)
25-26	Chapter25  WebServicesinVisualBasic


26	' sets up the game
27	Private Sub Blackjack_Load(ByVal sender As Object, 28         ByVal e As System.EventArgs) Handles Me.Load
29	' instantiate object allowing communication with web service 30	dealer = New ServiceReference.BlackJackServiceClient()
31
32	cardBoxes = New List(Of PictureBox) 33
34	' put PictureBoxes into cardBoxes List 35	cardBoxes.Add(pictureBox1)
36	cardBoxes.Add(pictureBox2) 37	cardBoxes.Add(pictureBox3) 38	cardBoxes.Add(pictureBox4) 39	cardBoxes.Add(pictureBox5) 40	cardBoxes.Add(pictureBox6) 41	cardBoxes.Add(pictureBox7) 42	cardBoxes.Add(pictureBox8) 43	cardBoxes.Add(pictureBox9) 44	cardBoxes.Add(pictureBox10) 45	cardBoxes.Add(pictureBox11) 46	cardBoxes.Add(pictureBox12) 47	cardBoxes.Add(pictureBox13) 48	cardBoxes.Add(pictureBox14) 49	cardBoxes.Add(pictureBox15) 50	cardBoxes.Add(pictureBox16) 51	cardBoxes.Add(pictureBox17) 52	cardBoxes.Add(pictureBox18) 53	cardBoxes.Add(pictureBox19) 54	cardBoxes.Add(pictureBox20) 55	cardBoxes.Add(pictureBox21) 56	cardBoxes.Add(pictureBox22) 57     End Sub ' Blackjack_Load
58
59	' deals cards to dealer while dealer's total is less than 17, 60	' then computes value of each hand and determines winner
61	Private Sub DealerPlay()
62	' reveal dealer's second card
63	Dim tab As Char = Convert.ToChar(vbTab)
64	Dim cards As String() = dealersCards.Split(tab) 65	DisplayCard(1, cards(1))
66
67	Dim nextCard As String 68
69	' while value of dealer's hand is below 17, 70	' dealer must take cards
71	While dealer.GetHandValue(dealersCards) < 17
72	nextCard = dealer.DealCard() ' deal new card 73	dealersCards &= vbTab & nextCard
74
75	' update GUI to show new card
76	MessageBox.Show("Dealer takes a card")
77	DisplayCard(currentDealerCard, nextCard)

Fig. 25.20 | BlackjackgamethatusestheBlackjackServicewebservice.(Part2of8.)
25.9 UsingSessionTrackinginaSOAP-BasedWCFWebService   25-27


78	currentDealerCard += 1 79         End While
80
81	Dim dealerTotal As Integer = dealer.GetHandValue(dealersCards) 82	Dim playerTotal As Integer = dealer.GetHandValue(playersCards) 83
84	' if dealer busted, player wins 85	If dealerTotal > 21 Then
86	GameOver(GameStatus.WIN) 87         Else
88            ' if dealer and player have not exceeded 21, 89            ' higher score wins; equal scores is a push.
90	If dealerTotal > playerTotal Then ' player loses game 91               GameOver(GameStatus.LOSE)
92	ElseIf playerTotal > dealerTotal Then ' player wins game 93               GameOver(GameStatus.WIN)
94	Else ' player and dealer tie 95               GameOver(GameStatus.PUSH) 96	End If
97	End If
98	End Sub ' DealerPlay 99
100	' displays card represented by cardValue in specified PictureBox 101	Public Sub DisplayCard(
102	ByVal card As Integer, ByVal cardValue As String) 103	' retrieve appropriate PictureBox
104	Dim displayBox As PictureBox = cardBoxes(card) 105
106	' if string representing card is empty, 107	' set displayBox to display back of card 108	If String.IsNullOrEmpty(cardValue) Then 109           displayBox.Image =
110	Image.FromFile("blackjack_images/cardback.png") 111           Return
112	End If 113
114	' retrieve face value of card from cardValue 115	Dim face As String =
116	cardValue.Substring(0, cardValue.IndexOf(" ")) 117
118	' retrieve the suit of the card from cardValue 119	Dim suit As String =
120	cardValue.Substring(cardValue.IndexOf(" ") + 1) 121
122	Dim suitLetter As Char ' suit letter used to form image file name 123
124	' determine the suit letter of the card 125	Select Case Convert.ToInt32(suit)
126	Case 0 ' clubs
127	suitLetter = "c"c 128           Case 1 ' diamonds
129	suitLetter = "d"c

Fig. 25.20 | BlackjackgamethatusestheBlackjackServicewebservice.(Part3of8.)
25-28	Chapter25  WebServicesinVisualBasic


130	Case 2 ' hearts
131	suitLetter = "h"c 132           Case Else ' spades 133	suitLetter = "s"c 134        End Select
135
136	' set displayBox to display appropriate image 137	displayBox.Image = Image.FromFile(
138	"blackjack_images/" & face & suitLetter & ".png") 139     End Sub ' DisplayCard
140
141	' displays all player cards and shows 142	' appropriate game status message
143	Public Sub GameOver(ByVal winner As GameStatus) 144        ' display appropriate status image
145	If winner = GameStatus.PUSH Then ' push 146           statusPictureBox.Image =
147	Image.FromFile("blackjack_images/tie.png") 148        ElseIf winner = GameStatus.LOSE Then ' player loses 149           statusPictureBox.Image =
150	Image.FromFile("blackjack_images/lose.png") 151        ElseIf winner = GameStatus.BLACKJACK Then
152	' player has blackjack 153	statusPictureBox.Image =
154	Image.FromFile("blackjack_images/blackjack.png") 155        Else ' player wins
156	statusPictureBox.Image =
157	Image.FromFile("blackjack_images/win.png") 158        End If
159
160	' display final totals for dealer and player 161	dealerTotalLabel.Text =
162	"Dealer: " & dealer.GetHandValue(dealersCards) 163        playerTotalLabel.Text =
164	"Player: " & dealer.GetHandValue(playersCards) 165
166	' reset controls for new game 167	stayButton.Enabled = False 168	hitButton.Enabled = False
169	dealButton.Enabled = True 170     End Sub ' GameOver
171
172	' deal two cards each to dealer and player
173	Private Sub dealButton_Click(ByVal sender As System.Object, 174        ByVal e As System.EventArgs) Handles dealButton.Click
175	Dim card As String ' stores a card temporarily until added to a hand 176
177	' clear card images
178	For Each cardImage As PictureBox In cardBoxes 179           cardImage.Image = Nothing
180	Next 181
182	statusPictureBox.Image = Nothing ' clear status image

Fig. 25.20 | BlackjackgamethatusestheBlackjackServicewebservice.(Part4of8.)
25.9 UsingSessionTrackinginaSOAP-BasedWCFWebService   25-29


183	dealerTotalLabel.Text = String.Empty ' clear final total for dealer 184	playerTotalLabel.Text = String.Empty ' clear final total for player 185
186	' create a new, shuffled deck on the web service host 187	dealer.Shuffle()
188
189	' deal two cards to player
190	playersCards = dealer.DealCard() ' deal a card to player's hand 191
192	' update GUI to display new card 193	DisplayCard(11, playersCards)
194	card = dealer.DealCard() ' deal a second card
195	DisplayCard(12, card) ' update GUI to display new card
196	playersCards &= vbTab & card ' add second card to player's hand 197
198	' deal two cards to dealer, only display face of first card 199	dealersCards = dealer.DealCard() ' deal a card to dealer's hand 200	DisplayCard(0, dealersCards) ' update GUI to display new card 201	card = dealer.DealCard() ' deal a second card
202	DisplayCard(1, String.Empty) ' update GUI to show face-down card 203	dealersCards &= vbTab & card ' add second card to dealer's hand 204
205	stayButton.Enabled = True ' allow player to stay 206	hitButton.Enabled = True ' allow player to hit 207	dealButton.Enabled = False ' disable Deal Button 208
209	' determine the value of the two hands
210	Dim dealerTotal As Integer = dealer.GetHandValue(dealersCards) 211	Dim playerTotal As Integer = dealer.GetHandValue(playersCards) 212
213	' if hands equal 21, it is a push
214	If dealerTotal = playerTotal And dealerTotal = 21 Then 215           GameOver(GameStatus.PUSH)
216	ElseIf dealerTotal = 21 Then ' if dealer has 21, dealer wins 217           GameOver(GameStatus.LOSE)
218	ElseIf playerTotal = 21 Then ' player has blackjack 219           GameOver(GameStatus.BLACKJACK)
220	End If 221
222	currentDealerCard = 2 ' next dealer card has index 2 in cardBoxes 223	currentPlayerCard = 13 ' next player card has index 13 in cardBoxes 224     End Sub ' dealButton_Click
225
226	' deal another card to player
227	Private Sub hitButton_Click(ByVal sender As System.Object, 228        ByVal e As System.EventArgs) Handles hitButton.Click 229        ' get player another card
230	Dim card As String = dealer.DealCard() ' deal new card
231	playersCards &= vbTab & card ' add new card to player's hand 232
233	' update GUI to show new card
234	DisplayCard(currentPlayerCard, card)
235	currentPlayerCard += 1

Fig. 25.20 | BlackjackgamethatusestheBlackjackServicewebservice.(Part5of8.)
25-30	Chapter25  WebServicesinVisualBasic


236
237	' determine the value of the player's hand
238	Dim total As Integer = dealer.GetHandValue(playersCards) 239
240	' if player exceeds 21, house wins 241	If total > 21 Then
242	GameOver(GameStatus.LOSE) 243        End If
244
245	' if player has 21,
246	' they cannot take more cards, and dealer plays 247	If total = 21 Then
248	hitButton.Enabled = False 249	DealerPlay()
250	End If
251	End Sub ' hitButton_Click 252
253	' play the dealer's hand after the play chooses to stay 254	Private Sub stayButton_Click(ByVal sender As System.Object, 255        ByVal e As System.EventArgs) Handles stayButton.Click 256        stayButton.Enabled = False ' disable Stay Button
257	hitButton.Enabled = False ' disable Hit Button 258	dealButton.Enabled = True ' re-enable Deal Button
259	DealerPlay() ' player chose to stay, so play the dealer's hand 260     End Sub ' stayButton_Click
261 End Class ' Blackjack

a)InitialcardsdealttotheplayerandthedealerwhentheuserpressestheDeal button.





















Fig. 25.20 | BlackjackgamethatusestheBlackjackServicewebservice.(Part6of8.)
25.9 UsingSessionTrackinginaSOAP-BasedWCFWebService   25-31



b)CardsaftertheplayerpressestheHitbuttononce,thentheStay button.Inthiscase,the playerwinsthegamewithahighertotalthanthedealer.





















c)CardsaftertheplayerpressestheHitbuttononce,thentheStay button.Inthiscase,the playerbusts(exceeds21)andthedealerwinsthegame.




















Fig. 25.20 | BlackjackgamethatusestheBlackjackServicewebservice.(Part7of8.)
25-32	Chapter25  WebServicesinVisualBasic



d)CardsaftertheplayerpressestheDealbutton.Inthiscase,theplayerwinswithBlackjack becausethefirsttwocardsareanaceandacardwithavalueof10(ajackinthiscase).




















e)CardsaftertheplayerpressestheStay button.Inthiscase,theplayeranddealerpush— theyhavethesamecardtotal.




















Fig. 25.20 | BlackjackgamethatusestheBlackjackServicewebservice.(Part8of8.)
25.9 UsingSessionTrackinginaSOAP-BasedWCFWebService   25-33


Each player has 11 PictureBoxes—the maximum number of cards that can be dealt without exceeding 21 (that is, four aces, four twos and three threes). These PictureBoxes are placed in a List(lines 35–56), so we can index the Listduring the game to determine which PictureBoxshould display a particular card image. The images are located in the blackjack_images directory with  this example. Drag this directory from Windows Explorer into your project. In the Solution Explorer, select all the files in that folder and set their Copy to Output Directory property to Copy if newer.
Method GameOver(lines 143–170) shows an appropriate message in the status Pic-tureBoxand displays the final point totals of both the dealer and the player. These values are obtained by calling the web service’s GetHandValuemethod in lines 162 and 164. Method GameOverreceives as an argument a member of the GameStatusenumeration (defined in lines 19–24). The enumeration represents whether the player tied, lost or won the game; its four members are PUSH, LOSE, WINand BLACKJACK.
When the player clicks the Deal button, the event handler (lines 173–224) clears the PictureBoxes and the Labels displaying the final point totals. Line 187 shuffles the deck by calling the web service’s Shufflemethod, then the player and dealer receive two cards each (returned by calls to the web service’s DealCardmethod in lines 190, 194, 199 and 201). Lines 210–211 evaluate both the dealer’s and player’s hands by calling the web ser-vice’sGetHandValuemethod.Iftheplayerandthedealerbothobtainscoresof21,thepro-gram calls method GameOver, passing GameStatus.PUSH. If only the player has 21 after the first two cards are dealt, the program passes GameStatus.BLACKJACKto method GameOver. If only the dealer has 21, the program passes GameStatus.LOSEto method GameOver.
If dealButton_Click does not call GameOver, the player can take more cards by clicking the Hit button. The event handler for this button is in lines 227–251. Each time a player clicks Hit, the program deals the player one more card (line 230), displaying it in the GUI. Line 238 evaluates the player’s hand. If the player exceeds 21, the game is over, and the player loses. If the player has exactly 21, the player cannot take any more cards, and method DealerPlay(lines 61–98) is called, causing the dealer to keep taking cards until the dealer’s hand has a value of 17 or more (lines 71–79). If the dealer exceeds 21, the player wins (line 86); otherwise, the values of the hands are compared, and GameOver is called with the appropriate argument (lines 90–96).
Clicking the Stay button indicates that a player does not want to be dealt another card. The event handler for this button (lines 254–260) disables the Hit and Stay buttons, then calls method DealerPlay.
Method DisplayCard(lines 101–139) updates the GUI to display a newly dealt card. The method takesasarguments an integerrepresentingtheindex of thePictureBoxin the Listthat must have its image set, and a Stringrepresenting the card. An empty String indicates that we wish to display the card face down. If method DisplayCardreceives a Stringthat’s not empty, the program extracts the face and suit from the Stringand uses this information to find the correct image. The SelectCasestatement (lines 125–134) converts the number representing the suit to an Integerand assigns the appropriate char-acter literal to suitLetter(cfor clubs, dfor diamonds, hfor hearts and sfor spades). The character in suitLetteris used to complete the image’s file name (lines 137–138).
25-34	Chapter25  WebServicesinVisualBasic

25.10sAirline Reservation WebrService:.Database
Acces  and Invoking a Service f om ASP NET
Our prior examples accessed web services from Windows Forms applications. You can just as easily use web services in ASP.NET web applications. In fact, because web-based busi-nesses are becoming increasingly prevalent, it is common for web applications to consume web services. Figures 25.21 and 25.22 present the interface and class, respectively, for an airline reservation service that receives information regarding the type of seat a customer wishes to reserve, checks a database to see if such a seat is available and, if so, makes a res-ervation. Later in this section, we present an ASP.NET web application that allows a cus-tomer to specify a reservation request, then uses the airline reservation web service to attempt to execute the request. The code and database used in this example are provided with the chapter’s examples.


1  ' Fig. 25.21: IReservationService.vb
2  ' Airline reservation WCF web-service interface. 3  <ServiceContract()>
4  Public Interface IReservationService 5	' reserves a seat
6	<OperationContract()>
7	Function Reserve(ByVal seatType As String, 8         ByVal classType As String) As Boolean
9  End Interface ' IReservationService

Fig. 25.21 | AirlinereservationWCFweb-serviceinterface.


1  ' Fig. 25.22: ReservationService.vb
2  ' Airline reservation WCF web service. 3  Public Class ReservationService
4	Implements IReservationService 5
6	' create ticketsDB object to access Tickets database 7	Private ticketsDB As New TicketsDataContext()
8
9	' checks database to determine whether matching seat is available 10	Public Function Reserve(ByVal seatType As String,
11	ByVal classType As String) As Boolean _ 12	Implements IReservationService.Reserve 13
14	' LINQ query to find seats matching the parameters 15	Dim result =
16	From seat In ticketsDB.Seats
17	Where (seat.Taken = 0) And (seat.SeatType = seatType) 18               And (seat.SeatClass = classType)
19
20	' if the number of seats returned is nonzero,
21	' obtain the first matching seat number and mark it as taken
22	If result.Count() <> 0 Then

Fig. 25.22 | AirlinereservationWCFwebservice.(Part1of2.)
25.10 DatabaseAccessandInvokingaServicefromASP.NET	25-35


23	' get first available seat
24	Dim firstAvailableSeat As Seat = result.First()
25	firstAvailableSeat.Taken = 1 ' mark the seat as taken 26	ticketsDB.SubmitChanges() ' update
27	Return True ' seat was reserved 28         End If
29
30	Return False ' no seat was reserved 31     End Function ' Reserve
32  End Class ' ReservationService

Fig. 25.22 | AirlinereservationWCFwebservice.(Part2of2.)


We added the Tickets.mdf database and corresponding LINQ to SQL classes to create a DataContextobject (line 7) for our ticket reservation system. Tickets.mdfdata-base contains the Seatstable with four columns—the seat number (1–10), the seat type (Window, Middleor Aisle), the class type (Economyor First) and a column containing either 1(true) or 0(false) to indicate whether the seat is taken.
This web service has a single method—Reserve(lines 10–31)—which searches a seat database(Tickets.mdf) tolocate a seat matchinga user’s request. If it finds an appropriate seat, Reserveupdates the database, makes the reservation and returns True; otherwise, no reservation is made, and the method returns False. The statements in lines 15–18 and lines 22–28, which query and update the database, use LINQ to SQL.
Reserve receives two parameters—a String representing the seat type (that is, Window, Middleor Aisle) and a Stringrepresenting the class type (that is, Economyor First). Our database contains four columns—the seat number (that is, 1–10), the seat type (that is, Window, Middleor Aisle), the class type (that is, Economyor First) and a column containing either 1(true) or 0(false) to indicate whether the seat is taken. Lines 16–18retrievetheseatnumbersofanyavailableseatsmatchingtherequestedseatandclass type with the results of a query. In line 22, if the number of results in the query is not zero, there was at least one seat that matched the user’s request. In this case, the web service reserves the first matching seat. We obtain the seat in line 24 by accessing the query’s first result. Line 25 marks the seat as taken and line 26 submits the changes to the database. Method Reservereturns True(line 27) to indicate that the reservation was successful. If there are no matching seats, Reserve returns False (line 30) to indicate that no seats matched the user’s request.

Creating a Web Form to Interact with the Airline Reservation Web Service
Figure 25.23 presents an ASP.NET page through which users can select seat types. This page allows users to reserve a seat on the basis of its class (Economyor First) and location (Aisle, Middleor Window) in a row of seats. The page then uses the airline reservation web service to carry out user requests. If the database request is not successful, the user is in-structed to modify the request and try again. When you create this ASP.NET application, remember to add a service reference to the ReservationService.
This page defines two DropDownListobjects and a Button. One DropDownListdis-plays all the seat types from which users can select (Aisle, Middle, Window). The second provides choices for the class type. Users click the Button named reserveButton to
25-36	Chapter25  WebServicesinVisualBasic











Fig. 25.23 | ASPXfilethattakesreservationinformation.

submit requests after making selections from the DropDownLists. The page also defines an initially blank Labelnamed errorLabel, which displays an appropriate message if no seat matching the user’s selection is available. Line 9 of the code-behind file (Fig. 25.24) attaches an event handler to reserveButton.
Line 6 of Fig. 25.24 creates a ReservationServiceClientproxy object. When the user clicks Reserve (Fig. 25.25), the reserveButton_Clickevent handler (lines 8–29 of Fig. 25.24) executes, and the page reloads. The event handler calls the web service’s

1  ' Fig. 25.24: ReservationClient.aspx.vb 2  ' ReservationClient code-behind file. 3  Partial Class ReservationClient
4	Inherits System.Web.UI.Page
5	' object of proxy type used to connect to Reservation service
6	Private ticketAgent As New ServiceReference.ReservationServiceClient() 7
8	Protected Sub reserveButton_Click(ByVal sender As Object,
9	ByVal e As System.EventArgs) Handles reserveButton.Click 10
11	' if the ticket is reserved
12	If ticketAgent.Reserve(seatList.SelectedItem.Text, 13            classList.SelectedItem.Text.ToString()) Then
14
15	' hide other controls
16	instructionsLabel.Visible = False 17	seatList.Visible = False
18	classList.Visible = False
19	reserveButton.Visible = False 20	errorLabel.Visible = False
21
22	' display message indicating success
23	Response.Write("Your reservation has been made. Thank you.") 24         Else ' service method returned false, so signal failure
25	' display message in the initially blank errorLabel
26	errorLabel.Text = "This type of seat is not available. " & 27               "Please modify your request and try again."
28	End If
29	End Sub ' reserveButton_Click
30  End Class ' ReservationClient

Fig. 25.24 | ReservationClientcode-behindfile.
25.10 DatabaseAccessandInvokingaServicefromASP.NET	25-37


Reservemethodandpasses toit theselected seat andclass typeas arguments(lines 12–13). If Reservereturns True, the application hides the GUI controls and displays a message thanking the user for making a reservation (line 23); otherwise, the application notifies the user that the type of seat requested is not available and instructs the user to try again (lines 26–27). You can use the techniques presented in Chapter 23 to build this ASP.NET Web Form. Figure 25.25 shows several user interactions with this web application.

a)Selectingaseat.








b)Seatisreservedsuccessfully.








c)Attemptingtoreserveanotherseat.








d)Noseatsmatchtherequestedtypeandclass.










Fig. 25.25 | Ticketreservationweb-applicationsampleexecution.
25-38	Chapter25  WebServicesinVisualBasic

25.11  Equation Generator: Returning User-Defined
Types
With the exception of the WelcomeRESTJSONService(Fig. 25.15), the web services we’ve demonstrated all received and returned primitive-type instances. It is also possible to pro-cess instances of complete user-defined types in a web service. These types can be passed to or returned from web-service methods.
ThissectionpresentsanEquationGeneratorwebservicethatgeneratesrandomarith-metic equations of type Equation. The client is a math-tutoring application that inputs information about the mathematical question that the user wishes to attempt (addition, subtraction or multiplication) and the skill level of the user (1 specifies equations using numbers from 1 to 10, 2 specifies equations involving numbers from 10 to 100, and 3 specifies equations containing numbers from 100 to 1000). The web service then gener-ates anequationconsistingofrandomnumbers in theproperrange. The clientapplication receives the Equationand displays the sample question to the user.

Defining Class Equation
We define class Equationin Fig. 25.26. Lines 16–33 define a constructor that takes three arguments—two Integers representing the left and right operands and a Stringthat rep-resents the arithmetic operation to perform. The constructor sets the leftOperand, rightOperandand operationTypeinstance variables, then calculates the appropriate re-sult. The parameterless constructor (lines 11–13) calls the three-argument constructor (lines 16–33) and passes default values.

1  ' Fig. 25.26: Equation.vb
2  ' Class Equation that contains information about an equation. 3  <DataContract()>
4  Public Class Equation
5	Private leftOperand As Integer ' number to the left of the operator
6	Private rightOperand As Integer ' number to the right of the operator 7	Private resultValue As Integer ' result of the operation
8	Private operationType As String ' type of the operation 9
10	' required default constructor 11	Public Sub New()
12	MyClass.New(0, 0, "add") 13     End Sub ' parameterless New 14
15	' three-argument constructor for class Equation 16	Public Sub New(ByVal leftValue As Integer,
17	ByVal rightValue As Integer, ByVal type As String) 18
19	Left = leftValue 20	Right = rightValue 21
22	Select Case type ' perform appropriate operation 23            Case "add" ' addition
24	Result = leftOperand + rightOperand
25	operationType = "+"

Fig. 25.26 | ClassEquationthatcontainsinformationaboutanequation.(Part1of3.)
25.11 EquationGenerator:ReturningUser-DefinedTypes   25-39


26	Case "subtract" ' subtraction
27	Result = leftOperand - rightOperand 28	operationType = "-"
29	Case "multiply" ' multiplication
30	Result = leftOperand * rightOperand 31	operationType = "*"
32	End Select
33	End Sub ' three-parameter New 34
35	' return string representation of the Equation object 36	Public Overrides Function ToString() As String
37	Return leftOperand.ToString() & " " & operationType & " " & 38            rightOperand.ToString() & " = " & resultValue.ToString() 39     End Function ' ToString
40
41	' property that returns a string representing left-hand side 42	<DataMember()>
43	Public Property LeftHandSide() As String 44         Get
45	Return leftOperand.ToString() & " " & operationType & " " & 46               rightOperand.ToString()
47	End Get 48
49	Set(ByVal value As String) ' required set accessor 50            ' empty body
51	End Set
52	End Property ' LeftHandSide 53
54	' property that returns a string representing right-hand side 55	<DataMember()>
56	Public Property RightHandSide() As String 57         Get
58	Return resultValue.ToString() 59         End Get
60
61	Set(ByVal value As String) ' required set accessor 62            ' empty body
63	End Set
64	End Property ' RightHandSide 65
66	' property to access the left operand 67	<DataMember()>
68	Public Property Left() As Integer 69         Get
70	Return leftOperand 71         End Get
72
73	Set(ByVal value As Integer) 74            leftOperand = value
75	End Set
76	End Property ' Left
77

Fig. 25.26 | ClassEquationthatcontainsinformationaboutanequation.(Part2of3.)
25-40	Chapter25  WebServicesinVisualBasic


78	' property to access the right operand 79	<DataMember()>
80	Public Property Right() As Integer 81         Get
82	Return rightOperand 83         End Get
84
85	Set(ByVal value As Integer) 86            rightOperand = value
87	End Set
88	End Property ' Right 89
90	' property to access the result of applying 91	' an operation to the left and right operands 92	<DataMember()>
93	Public Property Result() As Integer 94         Get
95	Return resultValue 96         End Get
97
98	Set(ByVal value As Integer) 99            resultValue = value
100	End Set
101	End Property ' Result 102
103	' property to access the operation 104	<DataMember()>
105	Public Property Operation() As String 106        Get
107	Return operationType 108        End Get
109
110	Set(ByVal value As String) 111           operationType = value 112	End Set
113	End Property ' Operation
114 End Class ' Equation

Fig. 25.26 | ClassEquationthatcontainsinformationaboutanequation.(Part3of3.)

Class Equationdefines properties LeftHandSide(lines 43–52), RightHandSide(lines 56–64), Left(lines 68–76), Right(lines 80–88), Result(lines 93–101) and Operation (lines 105–113). The web service client does not need to modify the values of properties LeftHandSideand RightHandSide. However, recall that a property can be serialized only if it has both a Getand a Setaccessor—this is true even if the Setaccessor has an empty body. Each of the properties is preceded by the DataMemberattribute to indicate that it shouldbeserialized.LeftHandSide(lines 43–52) returns a Stringrepresentingeverything to the left of the equals (=) sign in the equation, and RightHandSide(lines 56–64) returns a Stringrepresenting everything to the right of the equals (=) sign. Left(lines 68–76) returns the Integerto the left of the operator (known as the left operand), and Right (lines 80–88) returns the Integer to the right of the operator (known as the right operand). Result (lines 93–101) returns the solution to the equation, and Operation
25.11 EquationGenerator:ReturningUser-DefinedTypes   25-41


(lines 105–113) returns theoperator in the equation. The client in this case study does not use the RightHandSideproperty, but we included it in case future clients choose to use it. Method ToString(lines 36–39) returns a Stringrepresentation of the equation.

25.11.1 Creating the REST-Based XML EquationGenerator Web Service
Figures 25.27 and 25.28 present the interface and class for the EquationGenerator-Serviceweb service, which creates random, customized Equations. This web service con-tains  only  method  GenerateEquation (lines  7–27  of  Fig. 25.28),  which  takes  two parameters—a Stringrepresenting the mathematical operation ("add", "subtract"or "multiply") and a Stringrepresenting the difficulty level. When line 26 of Fig. 25.28 re-turns the Equation, it is serialized as XML by default and sent to the client. We’ll do this with JSON as well in Section 25.11.3. Recall from Section 25.7.2 that you must modify the Web.configfile to enable REST support as well.

1  ' Fig. 25.27: IEquationGeneratorService.vb
2  ' WCF REST service interface to create random equations based on a 3  ' specified operation and difficulty level.
4  Imports System.ServiceModel.Web 5
6  <ServiceContract()>
7  Public Interface IEquationGeneratorService 8	' method to generate a math equation
9	<OperationContract()>
10	<WebGet(UriTemplate:="equation/{operation}/{level}")> 11	Function GenerateEquation(ByVal operation As String, 12         ByVal level As String) As Equation
13  End Interface ' IEquationGeneratorService

Fig. 25.27 | WCFRESTserviceinterfacetocreaterandomequationsbasedonaspecified operationanddifficultylevel.

1  ' Fig. 25.28: EquationGeneratorService.vb
2  ' WCF REST service to create random equations based on a 3  ' specified operation and difficulty level.
4  Public Class EquationGeneratorService
5     Implements IEquationGeneratorService 6     ' method to generate a math equation
7	Public Function GenerateEquation(ByVal operation As String, 8         ByVal level As String) As Equation _
9	Implements IEquationGeneratorService.GenerateEquation 10
11	' convert level from String to Integer 12	Dim digits = Convert.ToInt32(level)
13
14	' calculate maximum and minimum number to be used
15	Dim maximum As Integer = Convert.ToInt32(Math.Pow(10, digits))
16	Dim minimum As Integer = Convert.ToInt32(Math.Pow(10, digits - 1))

Fig. 25.28 | WCFRESTservicetocreaterandomequationsbasedonaspecifiedoperationand difficultylevel.(Part1of2.)
25-42	Chapter25  WebServicesinVisualBasic


17
18	Dim randomObject As New Random() ' used to generate random numbers 19
20	' create Equation consisting of two random 21	' numbers in the range minimum to maximum 22	Dim newEquation As New Equation(
23	randomObject.Next(minimum, maximum),
24	randomObject.Next(minimum, maximum), operation) 25
26	Return newEquation
27	End Function ' GenerateEquation
28  End Class ' EquationGeneratorService

Fig. 25.28 | WCFRESTservicetocreaterandomequationsbasedonaspecifiedoperationand difficultylevel.(Part2of2.)

25.11.2 Consuming the REST-Based XML EquationGenerator Web
Service
The MathTutorapplication (Fig. 25.29) calls the EquationGeneratorweb service’s Gen-erateEquationmethod to create an Equationobject. The tutor then displays the left-hand side of the Equationand waits for user input.
Thedefaultsettingforthedifficultylevelis1,buttheusercanchangethisbychoosing a level from the RadioButtons in the GroupBoxlabeled Difficulty. Clicking any of the levels invokes the corresponding RadioButton’s CheckedChangedevent handler (lines 85–103), which sets integer levelto the level selected by the user. Although the default setting for the question type is Addition, the user also can change this by selecting one of the RadioButtons in the GroupBoxlabeled Operation. Doing so invokes the corresponding operation’s event handlers in lines 64–82, which assigns to Stringoperationthe symbol corresponding to the user’s selection. Each event handler also updates the Textproperty of the Generate button to match the newly selected operation.
Line 13 defines the WebClientthat is used to invoke the web service. Event handler generateButton_Click (lines  16–23)  invokes  EquationGeneratorService method GenerateEquation (line 20–22) asynchronously using the web service’s UriTemplate specified at line 10 in Fig. 25.27. When the response arrives, the DownloadStringCom-pletedevent handler (lines 26–41) parses the XML response (line 33), uses XML Axis properties to obtain the left side of the equation (line 34) and stores the result (line 35). Then, the handler displays the left-hand side of the equation in questionLabel(line 37) and enables okButtonso that the user can enter an answer. When the user clicks OK, okButton_Click(lines 44–61) checks whether the user provided the correct answer.

1  ' Fig. 25.29: MathTutor.vb
2  ' Math tutor using EquationGeneratorService to create equations. 3  Imports System.Net
4  Imports System.Xml.Linq
5  Imports <xmlns="http://schemas.datacontract.org/2004/07/">

Fig. 25.29 | MathtutorusingXMLversionofEquationGeneratorServicetocreate equations.(Part1of4.)
25.11 EquationGenerator:ReturningUser-DefinedTypes   25-43


6
7  Public Class MathTutor
8     Private operation As String = "add" ' the default operation 9     Private level As Integer = 1 ' the default difficulty level
10	Private leftHandSide As String ' the left side of the equation 11	Private result As Integer ' the answer
12
13	Private WithEvents service As New WebClient() ' used to invoke service 14
15	' generates a new equation when user clicks button
16	Private Sub generateButton_Click(ByVal sender As System.Object, 17         ByVal e As System.EventArgs) Handles generateButton.Click 18
19	' send request to EquationGeneratorServiceXML 20	service.DownloadStringAsync(New Uri(
21	"http://localhost:49593/EquationGeneratorServiceXML/" & 22	"Service.svc/equation/" & operation & "/" & level))
23	End Sub ' generateButton_Click 24
25	' process web-service response
26	Private Sub service_DownloadStringCompleted(ByVal sender As Object, 27         ByVal e As System.Net.DownloadStringCompletedEventArgs) _
28	Handles service.DownloadStringCompleted 29
30	' check if any errors occurred in retrieving service data 31	If e.Error Is Nothing Then
32	' parse response and get LeftHandSide and Result values 33	Dim xmlResponse = XDocument.Parse(e.Result)
34	leftHandSide = xmlResponse.<Equation>.<LeftHandSide>.Value
35	result = Convert.ToInt32(xmlResponse.<Equation>.<Result>.Value) 36
37	questionLabel.Text = leftHandSide ' display left side of equation 38	okButton.Enabled = True ' enable okButton
39	answerTextBox.Enabled = True ' enable answerTextBox 40         End If
41	End Sub ' service_DownloadStringCompleted 42
43	' check user’s answer
44	Private Sub okButton_Click(ByVal sender As System.Object, 45         ByVal e As System.EventArgs) Handles okButton.Click
46
47	If Not String.IsNullOrEmpty(answerTextBox.Text) Then 48            ' get user's answer
49	Dim userAnswer As Integer = Convert.ToInt32(answerTextBox.Text) 50
51	' determine whether user's answer is correct 52	If result = userAnswer Then
53	questionLabel.Text = String.Empty ' clear question 54	answerTextBox.Clear() ' clear answer
55	okButton.Enabled = False ' disable OK button
56	MessageBox.Show("Correct! Good job!")

Fig. 25.29 | MathtutorusingXMLversionofEquationGeneratorServicetocreate equations.(Part2of4.)
25-44	Chapter25  WebServicesinVisualBasic


57	Else
58	MessageBox.Show("Incorrect. Try again.") 59            End If
60	End If
61	End Sub ' okButton_Click 62
63	' set the operation to addition
64	Private Sub additionRadioButton_CheckedChanged(
65	ByVal sender As System.Object, ByVal e As System.EventArgs) _ 66	Handles additionRadioButton.CheckedChanged
67	operation = "add"
68	End Sub ' additionRadioButton_CheckedChanged 69
70	' set the operation to subtraction
71	Private Sub subtractionRadioButton_CheckedChanged(
72	ByVal sender As System.Object, ByVal e As System.EventArgs) _ 73	Handles subtractionRadioButton.CheckedChanged
74	operation = "subtract"
75	End Sub ' subtractionRadioButton_CheckedChanged 76
77	' set the operation to multiplication
78	Private Sub multiplicationRadioButton_CheckedChanged(
79	ByVal sender As System.Object, ByVal e As System.EventArgs) _ 80	Handles multiplicationRadioButton.CheckedChanged
81	operation = "multiply"
82	End Sub ' multiplicationRadioButton_CheckedChanged 83
84	' set difficulty level to 1
85	Private Sub levelOneRadioButton_CheckedChanged(
86	ByVal sender As System.Object, ByVal e As System.EventArgs) _ 87	Handles levelOneRadioButton.CheckedChanged
88	level = 1
89	End Sub ' levelOneRadioButton_CheckedChanged 90
91	' set difficulty level to 2
92	Private Sub levelTwoRadioButton_CheckedChanged(
93	ByVal sender As System.Object, ByVal e As System.EventArgs) _ 94	Handles levelTwoRadioButton.CheckedChanged
95	level = 2
96	End Sub ' levelTwoRadioButton_CheckedChanged 97
98	' set difficulty level to 3
99	Private Sub levelThreeRadioButton_CheckedChanged(
100	ByVal sender As System.Object, ByVal e As System.EventArgs) _ 101	Handles levelThreeRadioButton.CheckedChanged
102	level = 3
103	End Sub ' levelThreeRadioButton_CheckedChanged
104 End Class ' MathTutor

Fig. 25.29 | MathtutorusingXMLversionofEquationGeneratorServicetocreate equations.(Part3of4.)
25.11 EquationGenerator:ReturningUser-DefinedTypes   25-45



a)Generatingalevel1additionequation.










b)Answeringthequestionincorrectly.










c)Answeringthequestioncorrectly.









Fig. 25.29 | MathtutorusingXMLversionofEquationGeneratorServicetocreate equations.(Part4of4.)

25.11.3 Creating the REST-Based JSON WCF EquationGenerator
Web Service
You can set the web service to return JSON data instead of XML. Figure 25.30 is a mod-ified IEquationGeneratorService interface for a service that returns an Equation in JSON format. The ResponseFormatproperty (line 10) is added to the WebGetattribute and set to WebMessageFormat.Json. We don’t show the implementation of this interface here, because it is identical to that of Fig. 25.28. This shows how flexible WCF can be.
25-46	Chapter25  WebServicesinVisualBasic


1  ' Fig. 25.30: IEquationGeneratorService.vb
2  ' WCF REST service interface to create random equations based on a 3  ' specified operation and difficulty level.
4  Imports System.ServiceModel.Web 5
6  <ServiceContract()>
7  Public Interface IEquationGeneratorService 8	' method to generate a math equation
9	<OperationContract()>
10	<WebGet(ResponseFormat:=WebMessageFormat.Json, 11         UriTemplate:="equation/{operation}/{level}")>
12	Function GenerateEquation(ByVal operation As String, 13         ByVal level As String) As Equation
14  End Interface ' IEquationGeneratorService

Fig. 25.30 | WCFRESTserviceinterfacetocreaterandomequationsbasedonaspecified operationanddifficultylevel.

25.11.4 Consuming the REST-Based JSON WCF EquationGenerator
Web Service
A modified MathTutor application (Fig. 25.31) accesses the URI of the EquationGener-ator web service to get the JSON object (lines 19–21). We define a JSON representation of an Equationobject for the serializer in Fig. 25.32. The JSON object is deserialized us-ing a DataContractJsonSerializer(lines 32–35) and converted into an Equationob-ject. We use the LeftHandSidefield of the deserialized object (line 38) to display the left side of the equation and the Resultfield (line 51–52) to obtain the answer.

1  ' Fig. 25.31: MathTutor.vb
2  ' Math tutor using EquationGeneratorServiceJSON to create equations. 3  Imports System.Net
4  Imports System.IO 5  Imports System.Text
6  Imports System.Runtime.Serialization.Json 7
8  Public Class MathTutor
9	Private operation As String = "add" ' the default operation 10	Private level As Integer = 1 ' the default difficulty level 11	Private currentEquation As Equation ' represents the Equation
12	Private WithEvents service As New WebClient() ' used to invoke service 13
14	' generates a new equation when user clicks button
15	Private Sub generateButton_Click(ByVal sender As System.Object, 16         ByVal e As System.EventArgs) Handles generateButton.Click 17
18	' send request to EquationGeneratorServiceJSON 19	service.DownloadStringAsync(New Uri(
20	"http://localhost:49817/EquationGeneratorServiceJSON/" & 21	"Service.svc/equation/" & operation & "/" & level))
22	End Sub ' generateButton_Click

Fig. 25.31 | MathtutorusingJSONversionofEquationGeneratorServiceJSON.(Part1of4.)
25.11 EquationGenerator:ReturningUser-DefinedTypes   25-47


23
24	' process web-service response
25	Private Sub service_DownloadStringCompleted(ByVal sender As Object, 26         ByVal e As System.Net.DownloadStringCompletedEventArgs) _
27	Handles service.DownloadStringCompleted 28
29	' check if any errors occurred in retrieving service data 30	If e.Error Is Nothing Then
31	' deserialize response into an equation object 32	Dim JSONSerializer As New
33	DataContractJsonSerializer(GetType(Equation))
34	currentEquation = CType(JSONSerializer.ReadObject(New
35	MemoryStream(Encoding.Unicode.GetBytes(e.Result))), Equation) 36
37	' display left side of equation
38	questionLabel.Text = currentEquation.LeftHandSide 39	okButton.Enabled = True ' enable okButton
40	answerTextBox.Enabled = True ' enable answerTextBox 41         End If
42	End Sub ' service_DownloadStringCompleted 43
44	' check user's answer
45	Private Sub okButton_Click(ByVal sender As System.Object, 46         ByVal e As System.EventArgs) Handles okButton.Click
47
48	' check if answer field is filled
49	If Not String.IsNullOrEmpty(answerTextBox.Text) Then 50            ' determine whether user's answer is correct
51	If currentEquation.Result =
52	Convert.ToInt32(answerTextBox.Text) Then 53
54	questionLabel.Text = String.Empty ' clear question 55	answerTextBox.Clear() ' clear answer
56	okButton.Enabled = False ' disable OK button 57	MessageBox.Show("Correct! Good job!")
58	Else
59	MessageBox.Show("Incorrect. Try again.") 60            End If
61	End If
62	End Sub ' okButton_Click 63
64	' set the operation to addition
65	Private Sub additionRadioButton_CheckedChanged(
66	ByVal sender As System.Object, ByVal e As System.EventArgs) _ 67	Handles additionRadioButton.CheckedChanged
68	operation = "add"
69	End Sub ' additionRadioButton_CheckedChanged 70
71	' set the operation to subtraction
72	Private Sub subtractionRadioButton_CheckedChanged(
73	ByVal sender As System.Object, ByVal e As System.EventArgs) _
74	Handles subtractionRadioButton.CheckedChanged

Fig. 25.31 | MathtutorusingJSONversionofEquationGeneratorServiceJSON.(Part2of4.)
25-48	Chapter25  WebServicesinVisualBasic


75	operation = "subtract"
76	End Sub ' subtractionRadioButton_CheckedChanged 77
78	' set the operation to multiplication
79	Private Sub multiplicationRadioButton_CheckedChanged(
80	ByVal sender As System.Object, ByVal e As System.EventArgs) _ 81	Handles multiplicationRadioButton.CheckedChanged
82	operation = "multiply"
83	End Sub ' multiplicationRadioButton_CheckedChanged 84
85	' set difficulty level to 1
86	Private Sub levelOneRadioButton_CheckedChanged(
87	ByVal sender As System.Object, ByVal e As System.EventArgs) _ 88	Handles levelOneRadioButton.CheckedChanged
89	level = 1
90	End Sub ' levelOneRadioButton_CheckedChanged 91
92	' set difficulty level to 2
93	Private Sub levelTwoRadioButton_CheckedChanged(
94	ByVal sender As System.Object, ByVal e As System.EventArgs) _ 95	Handles levelTwoRadioButton.CheckedChanged
96	level = 2
97	End Sub ' levelTwoRadioButton_CheckedChanged 98
99	' set difficulty level to 3
100	Private Sub levelThreeRadioButton_CheckedChanged(
101	ByVal sender As System.Object, ByVal e As System.EventArgs) _ 102	Handles levelThreeRadioButton.CheckedChanged
103	level = 3
104	End Sub ' levelThreeRadioButton_CheckedChanged
105 End Class ' MathTutor

a)Generatingalevel2multiplicationequation.








b)Answeringthequestionincorrectly.








Fig. 25.31 | MathtutorusingJSONversionofEquationGeneratorServiceJSON.(Part3of4.)
25.12 WebResources	25-49



c)Answeringthequestioncorrectly.










Fig. 25.31 | MathtutorusingJSONversionofEquationGeneratorServiceJSON.(Part4of4.)


1  ’ Fig. 25.32: Equation.vb
2  ' Equation class representing a JSON object. 3  <Serializable()>
4  Public Class Equation
5	Public Left As Integer
6	Public LeftHandSide As String 7	Public Operation As String
8	Public Result As Integer 9	Public Right As Integer
10	Public RightHandSide As String
11  End Class ' Equation

Fig. 25.32 | EquationclassrepresentingaJSONobject.


25.12  Web Resources
To learn more about web services, check out our web services Resource Centers at:

www.deitel.com/WebServices/ www.deitel.com/RESTWebServices/
You’ll find articles, samples chapters and tutorials that discuss XML, web-services specifica-tions, SOAP, WSDL, UDDI, .NET web services, consuming XML web services, and web-services architecture. You'll learn how to build your own Yahoo! maps mashup and applica-tionsthatworkwiththeYahoo!MusicEngine.You’llfindinformationaboutAmazon’sweb services includingthe Amazon E-CommerceService (ECS), Amazon historicalpricing, Am-azonMechanicalTurk,AmazonS3(SimpleStorageService)andtheScalableSimpleQueue Service (SQS). You’ll learn how to use web services from several other companies including eBay, Google and Microsoft. You’ll find REST web services best practices and guidelines. You’ll also learn how to use REST web services with other technologies including SOAP, Rails, Windows Communication Foundation (WCF) and more. You can view the complete list of Deitel Resource Centers at www.deitel.com/ResourceCenters.html.
25-50	Chapter25  WebServicesinVisualBasic


Summary
Section 25.1 Introduction
•  WCF is a set of technologies for building distributed systems in which system components com-municate with one another over networks. WCF uses a common framework for all communica-tion between systems, so you need to learn only one programming model to use WCF.
•  WCF web services promote software reusability in distributed systems that typically execute across the Internet.
•  Simple Object Access Protocol (SOAP) is an XML-based protocol describing how to mark up requests and responses so that they can be sent via protocols such as HTTP. SOAP uses a stan-dardized XML-based format to enclose data in a message.
•  Representational State Transfer (REST) is a network architecture that uses the web’s traditional request/response mechanisms such as GETand POSTrequests. REST-based systems do not require data to be wrapped in a special message format.

Section 25.2 WCF Services Basics
•  WCF service has three key components—addresses, bindings and contracts.
•  An address represents the service’s location or endpoint, which includes the protocol and net-work address used to access the service.
•  A binding specifies how a client communicates with the service, such as through SOAP protocol or REST architecture. Bindings can also specify other options, such as security constraints.
•  A contract is an interface representing the service’s methods and their return types. The service’s contract allows clients to interact with the service.
•  The machine on which the web service resides is referred to as a web service host.

Section 25.3 Simple Object Access Protocol (SOAP)
•  The Simple Object Access Protocol (SOAP) is a platform-independent protocol that uses XML to make remote procedure calls, typically over HTTP.
•  Each request and response is packaged in a SOAP message—an XML message containing the in-formation that a web service requires to process the message.
•  SOAP messages arewritten in XML so thatthey’re computerreadable, human readableand plat-form independent.
•  SOAP supports an extensive set of types—the primitive types, as well as DateTime, XmlNodeand others. SOAP can also transmit arrays of these types.
•  When a program invokes a method of a SOAP web service, the request and all relevant informa-tion are packaged in a SOAP message enclosed in a SOAP envelope and sent to the server on which the web service resides.
•  When a web service receives a SOAP message, it parses the XML representing the message, then processes the message’s contents. The message specifies the method that the client wishes to ex-ecute and the arguments the client passed to that method.
•  After a web service parses a SOAP message, it calls the appropriate method with the specified ar-guments (if any), and sends the response back to the client in another SOAP message. The client parses the response to retrieve the method’s result.

Section 25.4 Representational State Transfer (REST)
•  RepresentationalStateTransfer(REST)referstoanarchitecturalstyleforimplementingwebser-vices. Such web services are often called RESTful web services. Though REST itself is not a stan-dard, RESTful web services are implemented using web standards.
Summary   25-51


•  Each operation in a RESTful web service is identified by a unique URL.
•  REST can return data in formats such as XML, JSON, HTML, plain text and media files.

Section 25.5 JavaScript Object Notation (JSON)
•  JavaScript Object Notation (JSON) is an alternative to XML for representing data.
•  JSON is a text-based data-interchange format used to represent objects in JavaScript as collec-tions of name/value pairs represented as Strings.
•  JSON is a simple format that makes objects easy to read, create and parse, and allows programs to transmit data efficiently across the Internet because it is much less verbose than XML.
•  Each value in a JSON array can be a string, a number, a JSON object, true, falseor null.

Section 25.6 Publishing and Consuming SOAP-Based WCF Web Services •  Enabling a web service for client usage is also known as publishing the web service.
•  Using a web service is also known as consuming the web service.

Section 25.6.1 Creating a WCF Web Service
•  To create a SOAP-based WCF web service in Visual Web Developer, you first create a project of type WCF Service. SOAP is the default protocol for WCF web services, so no special configu-ration is required to create SOAP-based services.
•  Visual Web Developer automatically generates files for a WCF Service project, including an SVC file, which provides access to the service, and a Web.configfile, which specifies theservice’s bind-ing and behavior, and code files for the WCF service class and any other code that is part of the WCF service implementation. In the service class, you define the methods that your WCF web service makes available to client applications.

Section 25.6.2 Code for the WelcomeSOAPXMLService
•  Theserviceinterfacedescribestheservice’scontract—thesetofmethodsandpropertiestheclient uses to access the service.
•  The ServiceContractattribute exposes a class that implements the service interface as a WCF web service.
•  The OperationContractattribute exposes a method for remote calls.

Section 25.6.3 Building a SOAP WCF Web Service
•  By default, a new code-behind file implements an interface named IServicethat is marked with the ServiceContractand OperationContractattributes. In addition, the IService.vbfile defines a class named CompositeTypewith a DataContractattribute. The interface contains two sample service methods named GetDataand GetDataUsingContract. The Service.vbfile con-tains the code that defines these methods.
•  The Service.svc file, when accessed through a web browser, provides access to information about the web service.
•  When you display the SVC file in the Solution Explorer, you see the programming language in which the web service’s code-behind file is written, the Debugattribute, the name of the service and the code-behind file’s location.
•  If you change the code-behind file name or the class name that defines the web service, you must modify the SVC file accordingly.
25-52	Chapter25  WebServicesinVisualBasic


Section 25.6.4 Deploying the WelcomeSOAPXMLService
•  You can choose Build Web Site from the Build menu to ensure that the web service compiles with-out errors. You can also test the web service directly from Visual Web Developer by selecting Start Without Debugging from the Debug menu. This opens a browser window that contains the SVC page. Once the service is running, you can also access the SVC page from your browser by typing the URL in a web browser.
•  By default, the ASP.NET Development Server assigns a random port number to each website it hosts. You can change this behavior by going to the Solution Explorer and clicking on the project name to view the Properties window. Set the Use dynamic ports property to False and specify the port number you want to use, which can be any unused TCP port. You can also change the ser-vice’s virtual path, perhaps to make the path shorter or more readable.
•  Web services normally contain a service description that conforms to the Web Service Descrip-tion Language (WSDL)—an XML vocabulary that defines the methods a web service makes available and how clients interact with them. WSDL documents help applications determine how to interact with the web services described in the documents.
•  When viewed in a web browser, an SVC file presents a link to the service’s WSDL file and infor-mation on using the utility svcutil.exeto generate test console applications.
•  When a client requests the WSDL URL, the server autogenerates the WSDL that describes the web service and returns the WSDL document.
•  Many aspects of web-service creation and consumption—such as generating WSDL files and proxy classes—are handled by Visual Web Developer, Visual Basic 2010 and WCF.

Section 25.6.5 Creating a Client to Consume the WelcomeSOAPXMLService
•  An application that consumes a SOAP-based web service consists of a proxy class representing thewebserviceandaclientapplicationthataccessesthewebserviceviaaproxyobject.Theproxy object passes arguments from the client application to the web service as part of the web-service method call. When the method completes its task, the proxy object receives the result and parses it for the client application.
•  A proxy objectcommunicates withthewebserviceon the client’s behalf. The proxy objectis part of the client application, making web-service calls appear to interact with local objects.
•  To add a proxy class, right click the project name in the Solution Explorer and select Add Service Reference… to display the Add Service Reference dialog. In the dialog, enter the URL of the ser-vice’s .svcfile in the Address field. The tools will automatically use that URL to request the web service’s WSDL document. You can rename the service reference’s namespace by changing the Namespace field. Click the OK button to add the service reference.
•  A proxy object handles the networking details and the formation of SOAP messages. Whenever the client application calls a web method, the application actually calls a corresponding method in the proxy class. This method has the same name and parameters as the web method that is being called, but formats the call to be sent as a request in a SOAP message. The web service re-ceives this request as a SOAP message, executes the method call and sends back the result as an-other SOAP message. When the client application receives the SOAP message containing the response,theproxyclassdeserializesitandreturnstheresultsasthereturnvalueofthewebmeth-od that was called.

Section 25.7.2 Creating a REST-Based XML WCF Web Service
•  WebGetmaps a method to a unique URL that can be accessed via an HTTP GEToperation.
•  WebGet’s UriTemplateproperty specifies the URI format that is used to invoke a method.
Summary   25-53


•  You can test a REST-based service method using a web browser by going to the Service.svc file’s network address and appending to the address the URI template with the appropriate ar-guments.

Section 25.7.3 Consuming a REST-Based XML WCF Web Service •  The WebClientclass invokes a web service and receives its response.
•  WebClient’s DownloadStringAsync method invokes a web service asynchronously. The Down-loadStringCompletedevent occurs when the WebClientreceives the completed response from the web service.
•  If a service is invoked asynchronously, the application can continue executing and the user can continue interacting with it while waiting for a response from the web service. DownloadString-CompletedEventArgscontains the information returned by the web service. We can use this vari-able’s properties to get the returned XML document and any errors that may have occurred during the process.

Section 25.8.1 Creating a REST-Based JSON WCF Web Service
•  By default, a web-service method with the WebGetattribute returns data in XML format. To re-turn data in JSON format, set WebGet’s ResponseFormatproperty to WebMessageFormat.Json.
•  Objects being converted to JSON must have Publicproperties. This enables the JSON serializa-tion to create name/value pairs that represent each Publicproperty and its corresponding value.
•  The DataContractattribute exposes a class to the client access.
•  The DataMemberattribute exposes a property of this class to the client.
•  When we test the web service using a web browser, the response prompts you to download a text file containing the JSON formatted data. You can see the service response as a JSON object by opening the file in a text editor such as Notepad.

Section 25.8.2 Consuming a REST-Based JSON WCF Web Service •  XML serialization converts a custom type into XML data format.
•  JSON serialization converts a custom type into JSON data format.
•  The System.Runtime.Serialization.Jsonlibrary’s DataContractJsonSerializerclass serializ-es custom types as JSON objects. To use the System.Runtime.Serialization.Jsonlibrary, you must include a reference to the System.ServiceModel.Webassembly in the project.
•  Attribute Serializableindicates that a class can be used in serialization.
•  A MemoryStreamobject is used to encapsulate the JSON object so we can read data from the byte array using stream semantics. The MemoryStreamobject is read by the DataContractJsonSerial-izerand then converted into a custom type.

Section 25.9 Blackjack Web Service: Using Session Tracking in a SOAP-Based WCF Web Service
•  Using session tracking eliminates the need for information about the client to be passed between the client and the web service multiple times.

Section 25.9.1 Creating a Blackjack Web Service
•  Web services store session information to provide more intuitive functionality.
•  A service’s interface uses a ServiceContractwith the SessionModeproperty set to Requiredto indicate that the service needs a session to run. The SessionModeproperty is Allowedby default and can also be set to NotAllowedto disable sessions.
25-54	Chapter25  WebServicesinVisualBasic


•  Setting the ServiceBehavior’s InstanceContextModeproperty to PerSessioncreates a new in-stance of the class for each session. The InstanceContextModeproperty can also be set to PerCall or Single. PerCalluses a new object of the web-service class to handle every method call to the service. Singleuses the same object of the web-service class to handle all calls to the service.

Section 25.10 Airline Reservation Web Service: Database Access and Invoking a Ser-vice from ASP.NET
•  You can add a database and corresponding LINQ to SQL classes to create a DataContextobject to support database operations of your web service.

Section 25.11 Equation Generator: Returning User-Defined Types
•  Instances of user-defined types can be passed to or returned from web-service methods.

Self-Review Exercises
25.1	State whether each of the following is true or false. If false, explain why.
a)  The purpose of a web service is to create objects of a class located on a web service host. This class then can be instantiated and used on the local machine.
b)  You must explicitly create the proxy class after you add a service reference for a SOAP-based service to a client application.
c)   A client application can invoke only those methods of a web service that are tagged with the OperationContractattribute.
d)  To enable session tracking in a web-service method, no action is required other than setting the SessionModeproperty to SessionMode.Requiredin the ServiceContractat-tribute.
e)   Operations in a REST web service are defined by their own unique URLs. f)   A SOAP-based web service can return data in JSON format.
g)  For a client application to deserialize a JSON object, the client must define a Serial-izableclass with public instance variables or properties that match those serialized by the web service.
25.2	Fill in the blanks for each of the following statements:
a)  A key difference between SOAP and REST is that SOAP messages have data wrapped in a(n)	.
b)  A WCF web service exposes its methods to clients by adding the	and attributes to the service interface.
c)   Web-service   requests   are   typically   transported   over   the   Internet   via   the protocol.
d)  To return data in JSON format from a REST-based web service, the	prop-erty of the WebGetattribute is set to	.
e)		transforms an object into a format that can be sent between a web service and a client.
f)   To parse a HTTP response in XML data format, the client application must import the response’s	.

Answers to Self-Review Exercises
25.1	a) False. Web services are used to execute methods on web service hosts. The web service receives the arguments it needs to execute a particular method, executes the method and returns the result to the caller. b) False. The proxy class is created by Visual Basic or Visual Web Developer when youaddaServiceReferenceto yourproject.Theproxy classitself is hiddenfromyou.c)True. d) True. e) True. f) False. A SOAP web service implicitly returns data in XML format. g) True.
Exercises   25-55


25.2	a) envelope.  b) ServiceContract,  OperationContract.  c) HTTP.  d) ResponseFormat, WebMessageFormat.Json. e) Serialization. f) namespace.

Exercises
25.3	(Phone-Book WebService) CreateaREST-basedwebservicethatstoresphone-bookentries in a database (PhoneBook.mdf, which is provided in the examples directory for this chapter) and a client application that consumes this service. Give the client user the capability to enter a new con-tact (service method AddEntry) and to find contacts by last name (service method GetEntries). Pass only primitive types as arguments to the web service. Add a DataContextto the web-service project to enable the web service to interact with the database. The GetEntriesmethod should return an array of Strings that contains the matching phone-book entries. Each Stringin the array should consist of the last name, first name and phone number for one phone-book entry separated by com-mas. Build an ASP.NET client (Fig. 25.33) to interact with this web service. To use an asynchro-nous web request from an ASP.NET client, you must set the Asyncproperty to true by adding Async="true"to the .aspxpage directive. Since the AddEntrymethod accepts a request and does not return a response to the client, you can use WebClient’sOpenReadmethod to access the service method. You can use the ToArraymethod on the LINQ query to return an array containing LINQ query results.
25-56	Chapter25  WebServicesinVisualBasic
























Fig. 25.33 | Templatewebformforphonebookclient.

25.4	(Phone-Book Web Service Modification) Modify Exercise 25.3 so that it uses a class named PhoneBookEntryto represent a row in the database. The web service should return objects of type PhoneBookEntry in XML format for the GetEntries service method, and the client application should use XML document parsing to interpret the PhoneBookEntryobject.
25.5	(Phone-Book Web Service with JSON) Modify Exercise 25.4 so that the PhoneBookEntry class is passed to and from the web service as a JSON object. Use serialization to convert the JSON object into an object of type PhoneBookEntry.
25.6	(Blackjack Modification) Modify the blackjack web-service example in Section 25.9 to in-cludeclass Card.Change service method DealCardso thatitreturns an objectof type Cardand mod-ify method GetHandValueto receive an array of Cards. Also modify the client application to keep track of what cards have been dealt by using Cardobjects. Your Cardclass should include properties for the face and suit of the card. [Note: When you create the Cardclass, be sure to add the Data-Contractattribute to the class and the DataMemberattribute to the properties. Also, in a SOAP-based service, you don’t need to define your own Cardclass on the client as well. The Cardclass will be exposed to the client through the service reference that you add to the client. If the service refer-ence is named ServiceReference, you’ll access the card type as ServiceReference.Card.]
25.7	(Airline Reservation Web-Service Modification) Modify the airline reservation web service inSection 25.10sothatitcontainstwoseparatemethods—onethatallowsuserstoviewallavailable seats, and another that allows users to reserve a particular seat that is currently available. Use an ob-ject of type Ticketto pass information to and from the web service. The web service must be able to handle cases in which two users view available seats, one reserves a seat and the second user tries to reserve the same seat, not knowing that it is now taken. The names of the methods that execute should be Reserveand GetAllAvailableSeats.




JavaServer™FacesWeb Apps:Part1

26
If any man will draw up his case, and put his name at the foot of the first page, I will give himanimmediatereply.Where he compels me to turn over the sheet, he must wait my leisure.
—Lord Sandwich

Rule One:
Our client is always right. Rule Two: If you think our client is wrong, see Rule One.
—Anonymous

A fair question should be followed by a deed in silence.
—Dante Alighieri

You will come here and get books that will open your eyes, and your ears, and your curiosity, and turn you inside out or outside in.
—Ralph Waldo Emerson



Objectives Inthischapteryou’lllearn:
ÿ   TocreateJavaServerFaces
webapps.
ÿ   Tocreatewebapps
consistingofmultiplepages.
ÿ   Tovalidateuserinputona
webpage.
ÿ   Tomaintainuser-specific stateinformationthroughout awebappwithsession
tracking.
26-2   Chapter26 JavaServer™FacesWebApps:Part1



26.1  Introduction
26.2  HyperTextTransferProtocol(HTTP) Transactions
26.3  MultitierApplicationArchitecture 26.4  YourFirstJSFWebApp
26.4.1 TheDefaultindex.xhtml
Document:IntroducingFacelets 26.4.2 ExaminingtheWebTimeBeanClass
26.4.3 BuildingtheWebTimeJSFWebApp
inNetBeans

26.5  Model-View-ControllerArchitecture ofJSFApps
26.6  CommonJSFComponents 26.7  ValidationUsingJSFStandard
Validators
26.8  SessionTracking
26.8.1 Cookies
26.8.2 SessionTrackingwith
@SessionScopedBeans


Summary | Self-Review Exercises | Answers to Self-Review Exercises | Exercises



26.1 Introduction
In this chapter, we introduce web app development in Java with JavaServer Faces (JSF). Web-based apps create content for web browser clients. This content includes eXtensible HyperText Markup Language (XHTML), JavaScript client-side scripting, Cascading StyleSheets(CSS), imagesandbinarydata. XHTMLis an XML (eXtensibleMarkup Lan-guage) vocabulary that is based on HTML (HyperText Markup Language). We discuss only the features of these technologies that are required to understand the examples in this chapter. This chapter begins with an overview of how interactions between a web browser and web server work. We then present several web apps implemented with JSF. We con-tinue this discussion in Chapter 27 with more advanced web applications.
JavamultitierapplicationsaretypicallyimplementedusingJavaEnterpriseEdition(Java EE). The technologies we use to develop web apps here and in Chapter 27 are part of Java EE  6  (www.oracle.com/technetwork/java/javaee/overview/index.html).  After  you study this chapter and the next, you can learn more about JavaServer Faces 2.0 in Oracle’s extensive Java EE 6 tutorial at download.oracle.com/javaee/6/tutorial/doc/.
We focus on the JavaServer Faces 2.01 subset of Java EE. JavaServer Faces is a web-application framework that enables you to build multitier web apps by extending the framework with your application-specific capabilities. The framework handles the details of receiving client requests and returning responses for you so that you can focus on your application’s functionality.


Required Software for This Chapter
To work with and implement the examples in this chapter and Chapters 27–28, you must install the NetBeans 6.9.1 IDE and the GlassFish 3.0.1 open-source application server. Both are available in a bundle from netbeans.org/downloads/index.html. You’re prob-ably using a computer with the Windows, Linux or Max OS X operating system—install-ers are provided for each of these platforms. Download and execute the installer for the Java or All version—both includethe requiredJava Web and EE and Glassfish Server Open

1.    The JavaServer Faces Specification: http://bit.ly/JSF20Spec.
26.2 HyperTextTransferProtocol(HTTP)Transactions	26-3


Source Edition options. We assume you use the default installation options for your plat-form. Once you’ve installed NetBeans, run it. Then, use the Help menu’s Check for Up-dates option to make sure you have the most up-to-date components.



26.2 HyperText Transfer Protocol (HTTP) Transactions
To learn how JSF web apps work, it’s important to understand the basics of what occurs behind the scenes when a user requests a web page in a web browser. If you’re already fa-miliar with this and with multitier application architecture, you can skip to Section 26.4.

XHTML Documents
In its simplest form, a web page is nothing more than an XHTML document (also called an XHTML page) that describes content to display in a web browser. HTML documents normally contain hyperlinks that link to different pages or to other parts of the same page. When the user clicks a hyperlink, the requested web page loads into the user’s web brows-er. Similarly, the user can type the address of a page into the browser’s address field.

URLs
Computers that run web-server software make resources available, such as web pages, im-ages, PDF documents and even objects that perform complex tasks such as database look-ups and web searches. The HyperText Transfer Protocol (HTTP) is used by web browsers to communicate with web servers, so they can exchange information in a uniform and re-liable manner. URLs (Uniform Resource Locators) identify the locations on the Internet of resources, such as those mentioned above. If you know the URL of a publicly available web resource, you can access it through HTTP.

Parts of a URL
When you enter a URL into a web browser, the browser uses the information in the URL to locate the web server that contains the resource and to request that resource from the server. Let’s examine the components of the URL

http://www.deitel.com/books/downloads.html
The http://indicates that the resource is to be obtained using the HTTP protocol. The next portion, www.deitel.com, is the server’s fully qualified hostname—the name of the server on which the resource resides. The computer that houses and maintains resources is usually is referred to as the host. The hostname www.deitel.comis translated into an IP (Internet Protocol) address—a unique numerical value that identifies the server, much as atelephonenumberuniquelydefinesaparticularphoneline.Thistranslationisperformed by a domain-name system (DNS) server—a computer that maintains a database of host-names and their corresponding IP addresses—and the process is called a DNS lookup. To test web apps, you’ll often use your computer as the host. This host is referred to using the reserveddomain name localhost, which translates totheIPaddress127.0.0.1. The fully qualified hostname can be followed by a colon (:) and a port number. Web servers typi-cally await requests on port 80 by default; however, many development web servers use a different port number, such as 8080—as you’ll see in Section 26.4.3.
26-4   Chapter26 JavaServer™FacesWebApps:Part1


The remainder of the URL (i.e., /books/downloads.html) specifies both the name of the requested resource (the HTML document downloads.html) and its path, or location (/books), on the web server. The path could specify the location of an actual directory on the web server’s file system. For security reasons, however, the path normally specifies the locationofavirtualdirectory.Theservertranslatesthevirtualdirectoryintoareallocation on the server (or on another computer on the server’s network), thus hiding the resource’s true location. Some resources are created dynamically using other information, such as data from a database.

Making a Request and Receiving a Response
When given a URL, a web browser performs an HTTP transaction to retrieve and display the web page at that address. Figure 26.1 illustrates the transaction, showing the interac-tion between the web browser (the client) and the web server (the server).



(a) TheGETrequestis sentfromthe clienttotheweb server




Client
Internet



WebServer
(b) Afteritreceives therequest,the webserver searchesthrough itssystemforthe resource



Fig. 26.1  | Clientinteractingwiththewebserver.Step 1: TheGETrequest.

In Fig. 26.1, the web browser sends an HTTP request to the server. Underneath the hood, the request (in its simplest form) is

GET /books/downloads.html HTTP/1.1
The word GETis an HTTP method indicating that the client wishes to obtain a resource from the server. The remainder of the request provides the path name of the resource (e.g., an HTML document) and the protocol’s name and version number (HTTP/1.1). As part of the client request, the browser also sends other required and optional information, such as the Host(which identifies the server computer) or the User-Agent(which identifies the web browser type and version number).
Any server that understands HTTP (version 1.1) can translate this request and respond appropriately. Figure 26.2 depicts the server responding to a request.
The server first responds by sending a line of text that indicates the HTTP version, fol-lowed by a numeric code and a phrase describing the status of the transaction. For example,

HTTP/1.1 200 OK
indicates success, whereas

HTTP/1.1 404 Not found
26.2 HyperTextTransferProtocol(HTTP)Transactions	26-5










Client
Internet

WebServer
Theserver respondstothe requestwithan appropriate messageand theresource's contents



Fig. 26.2  | Clientinteractingwiththewebserver.Step 2: TheHTTPresponse.

informs the client that the web server could not locate the requested resource. On a suc-cessful request, the server appends the requested resource to the HTTP response. A com-plete list of numeric codes indicating the status of an HTTP transaction can be found at www.w3.org/Protocols/rfc2616/rfc2616-sec10.html.

HTTP Headers
The server then sends one or more HTTP headers, which provide additional information about the data that will be sent. If the server is sending an HTML text document, one HTTP header would read:

Content-type: text/html
The information provided in this header specifies the Multipurpose Internet Mail Exten-sions (MIME) type of the content that the server is transmitting to the browser. MIME is an Internet standard that specifies data formats sothat programs can interpretdata correct-ly. For example, the MIME type text/plainindicates that the sent information is text that can be displayed directly, without any interpretation of the content as HTML mark-up. Similarly, the MIME type image/jpegindicates that the content is a JPEG image. When the browser receives this MIME type, it attempts to display the image. For a list of available MIME types, visit www.w3schools.com/media/media_mimeref.asp.
The header or set of headers is followed by a blank line, which indicates to the client browserthattheserverisfinishedsendingHTTPheaders.Theserverthensendsthecontents of the requested resource (such as, downloads.html). In the case of an HTML document, the web browser parses the HTML markup it receives and renders (or displays) the results.

HTTP GETand POSTRequests
The two most common HTTP request types (also known as request methods) are GET and POST. A GETrequest typically asks for a resource on a server. Common uses of GETre-quests are to retrieve an HTML document or an image or to fetch search results from a search engine based on a user-submitted search term. A POSTrequest typically sends data toa server. Common uses ofPOSTrequests are to send form data or documents to a server.
When a web page contains an HTML form in which the user can enter data, an HTTP request typically posts that data to a server-side form handler for processing. For example, when a user performs a search or participates in a web-based survey, the web server receives the information specified in the form as part of the request.
26-6   Chapter26 JavaServer™FacesWebApps:Part1


GETrequests and POSTrequests can both send form data to a web server, yet each request type sends the information differently. A GETrequest sends information to the server in the URL, as in www.google.com/search?q=deitel. Here, searchis the name of Google’s server-side form handler, qis the nameof a variable in Google’s search form and deitelis the search term. A ?separates the query string from the rest of the URL in a request. A name/value pair is passed to the server with the name and the value separated by an equals sign (=). If more than one name/value pair is submitted, each is separated from the next by an ampersand (&). The server uses data passed in a query string to retrieve an appropriate resource. The server then sends a response to the client. A GETrequest may be initiated by submitting an HTML form whose methodattribute is set to "get", by typing the URL (possibly containing a query string) directly into the browser’s address bar or through a hyperlink when the user clicks the link.
A POSTrequest sends form data as part of the HTTP message, not as part of the URL. The specification for GETrequests does not limit the query string’s number of characters, but some web browsers do—for example, Internet Explorer restricts the length to 2083 characters), so it’s often necessary to send large pieces of information using POST. Some-times POSTis preferred because it hides the submitted data from the user by embedding it in an HTTP message.

Software Engineering Observation 26.1
The data sent in a POSTrequest is not part of the URL, and the user can’t see the data by default. However, tools are available that expose this data, so you should not assume that the data is secure just because a POSTrequest is used.

Client-Side Caching
Browsers often cache (save on disk) web pages for quick reloading. If there are no changes between the version stored in the cache and the current version on the web, the browser uses the cached copy to speed up your browsing experience. An HTTP response can indi-cate the length of time for which the content remains “fresh.” If this amount of time has not been reached, the browser can avoid another request to the server. Otherwise, the browser requests the document from the server. Thus, the browser minimizes the amount of data that must be downloaded for you to view a web page. Browsers typically do not cache the server’s response to a POSTrequest, because the next POSTmight not return the sameresult.Forexample,inasurvey,manyuserscouldvisitthesamewebpageandanswer a question. The survey results could then be displayed for the user. Each new answer changes the survey results.
When you use a web-based search engine, the browser normally supplies the informa-tion you specify in an HTML form to the search engine with a GETrequest. The search engine performs the search, then returns the results to you as a web page. Such pages are sometimes cached by the browser in case you perform the same search again.

26.3 Multitier Application Architecture
Web apps are multitier applications (sometimes referred to as n-tier applications). Multi-tier applications divide functionality into separate tiers (i.e., logical groupings of function-ality).Althoughtierscanbelocatedonthesamecomputer,thetiersofwebappsoftenreside on separate computers. Figure 26.3 presents the basic structure of a three-tier web app.
26.4 YourFirstJSFWebApp   26-7



Thetoptier istheuserinterface ontheclientcomputer

Themiddletier containstheapplication’s businesslogic

Thebottomtier containstheapplication’s data(typicallyinadatabase)



Browser	XHTML	JDBC
Webserver	Database



Fig. 26.3  | Three-tierarchitecture.

The information tier (also called the data tier or the bottom tier) maintains data per-taining to the application. This tier typically stores data in a relational database manage-ment system (RDBMS). We discussed RDBMSs in Chapter 18. For example, a retail store might have a database for storing product information, such as descriptions, prices and quantities in stock. The same database also might contain customer information, such as user names, billing addresses and credit card numbers. This tier can contain multiple data-bases, which together comprise the data needed for our application.
The middle tier implements business logic, controller logic and presentation logic to control interactions between the application’s clients and the application’s data. The middle tier acts as an intermediary between data in the information tier and the applica-tion’s clients. The middle-tier controller logic processes client requests (such as requests to view a product catalog) and retrieves data from the database. The middle-tier presentation logic then processes data from the information tier and presents the content to the client. Web apps typically present data to clients as HTML documents.
Business logic in the middle tier enforces business rules and ensures that data is reli-able before the server application updates the database or presents the data to users. Busi-ness rules dictate how clients can and cannot access application data, and how applications process data. For example, a business rule in the middle tier of a retail store’s web app might ensure that all product quantities remain positive. A client request to set a negative quantity in the bottom tier’s product-information database would be rejected by the middle tier’s business logic.
The client tier, or top tier, is the application’s user interface, which gathers input and displays output. Users interact directly with the application through the user interface (typically viewed in a web browser), keyboard and mouse. In response to user actions (e.g., clicking a hyperlink), the client tier interacts with the middle tier to make requests and to retrievedatafromtheinformationtier.Theclienttierthendisplaysthedataretrievedfrom themiddletiertotheuser.Theclienttierneverdirectlyinteractswiththeinformationtier.

26.4 Your First JSF Web App
Let’s begin with a simple example. Figure 26.4 shows the output of our WebTimeapp. When you invoke this app from a web browser, the browser requests the app’s default JSF page. The web server receives this request and passes it to the JSF web-application frame-work for processing. This framework is available in any Java EE 6-compliant application server (such as the GlassFish application server used in this chapter) or any JavaServer
26-8   Chapter26 JavaServer™FacesWebApps:Part1


Faces 2.0-compliant container (such as Apache Tomcat). The framework includes the Faces servlet—a software component running on the server that processes each requested JSF page so that the server can eventually return a response to the client. In this example, the Faces servlet processes the JSF document in Fig. 26.5 and forms a response containing the text "Currenttimeonthewebserver:"followed by the web server’s local time. We demonstrate this chapter’s examples on the GlassFish server that you installed with Net-Beans locally on your computer.









Fig. 26.4  | SampleoutputoftheWebTimeapp.

Executing the WebTimeApp
To run this example on your own computer, perform the following steps:
1. Open the NetBeans IDE.
2. Select File > Open Project… to display the Open Project dialog.
3.  Navigate to the ch26folder in the book’s examples and select WebTime. 4.  Click the Open Project button.
5.  Right click the project’s name in the Projects tab (in the upper-left corner of the IDE, below the toolbar) and select Run from the pop-up menu.
This launches the GlassFish application server (if it isn’t already running), installs the web app onto the server, then opens your computer’s default web browser which requests the WebTimeapp’s default JSF page. The browser should display a web page similar to that in Fig. 26.4.

26.4.1 The Default index.xhtmlDocument: Introducing Facelets
This app contains a single web page and consists of two related files—a JSF document named index.xhtml(Fig. 26.5) and a supporting Java source-code file (Fig. 26.6), which wediscussinSection 26.4.2.Firstwediscussthemarkupinindex.xhtmlandthesupport-ing source code, then we provide step-by-step instructions for creating this web app in Section 26.4.3. Most of the markup in Fig. 26.5 was generated by NetBeans. We’ve refor-matted the generated code to match our coding conventions used throughout the book.

1  <?xml version='1.0' encoding='UTF-8' ?> 2
3  <!-- index.xhtml -->
4  <!-- JSF page that displays the current time on the web server -->

Fig. 26.5  | JSFpagethatdisplaysthecurrenttimeonthewebserver.(Part1of2.)
26.4 YourFirstJSFWebApp   26-9


5  <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 6	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"> 7  <html xmlns="http://www.w3.org/1999/xhtml"
8	xmlns:h="http://java.sun.com/jsf/html"> 9	<h:head>
10	<title>WebTime: A Simple Example</title> 11	<meta http-equiv="refresh" content="60" /> 12     </h:head>
13	<h:body>
14	<h1>Current time on the web server: #{webTimeBean.time}</h1> 15     </h:body>
16  </html>

Fig. 26.5  | JSFpagethatdisplaysthecurrenttimeonthewebserver.(Part2of2.)

Facelets: XHTML and JSF Markup
You present your web app’s content in JSF using Facelets—a combination of XHTML markup and JSF markup. XHTML—the Extensible HyperText Markup Language— specifies the content of a web page that is displayed in a web browser. XHTML separates the presentation of a document (that is, the document’s appearance when rendered by a browser) from the structure of the document’s data. A document’s presentation might specify where the browser should place an element in a web page or what fonts and colors should be used to display an element. The XHTML 1.0 Strict Recommendation allows only a document’s structure to appear in a valid XHTML document, and not its presen-tation. Presentation is specified with Cascading Style Sheets (CSS). JSF uses the XHTML 1.0 Transitional Recommendation by default. Transitional markup may include some non-CSS formatting, but this is not recommended.

XML Declaration, Comments and the DOCTYPEDeclaration
Withtheexceptionof lines3–4,10–11 and14,thecodeshownin Fig. 26.5was generated by NetBeans. Line 1 is an XML declaration, indicating that the JSF document is expressed in XML 1.0 syntax. Lines 3–4 are comments that we added to the document to indicate its file name and purpose. Lines 5–6 are a DOCTYPEdeclaration indicating the version of XHTML used in the markup. This can be used by a web browser to validate the syntax of the document.

Specifying the XML Namespaces Used in the Document
Line 7 begins the document’s root htmlelement, which spans lines 7–16. Each element typicallyconsistsofastartingandendingtag.Thestarting<html>tag(lines7–8)maycon-tain one or more xmlnsattributes. Each xmlnsattribute has a name and a value separated by an equalsign (=), andspecifiesan XML namespaceof elements that are usedin the doc-ument. Just as Java packages can be used to differentiate class names, XML namespaces can be used to differentiate sets of elements. When there’s a naming conflict, fully quali-fied tag names can be used to resolve the conflict.
Line 7 specifies a required xmlnsattribute and its value (http://www.w3.org/1999/ xhtml)forthehtmlelement. Thisindicatesthatthehtmlelement andanyotherunqualified element names are part of the default XML namespace that’s used in this document.
The xmlns:h attribute (line 8) specifies a prefix and a URL for JSF’s HTML Tag Library, allowingthe document touse JSF’selements from that library. Ataglibrary defines
26-10	Chapter26  JavaServer™FacesWebApps:Part1


asetofelementsthatcanbeinsertedintotheXHTMLmarkup.TheelementsintheHTML Tag Library generate  XHTML elements. Based on line 7, each element we use from the HTML TagLibrary must beprecededby theh:prefix. This taglibrary is one of severalsup-poortedbyJSFthat canbeusedtocreateFaceletspages.We’lldiscussothersasweusethem. For a complete list of JSF tag libraries and their elements and attributes, visit

javaserverfaces.java.net/nonav/docs/2.0/pdldocs/facelets/

The h:headand h:bodyElements
The h:headelement (lines 9–12) defines the XHTML page’s headelement. In this exam-ple the headcontains an HTML titleelement and a metaelement. The document’s title(line 10) typically appears in the browser window’s title bar, or a browser tab if you have multiple web pages open in the browser at once. The titleis also used when search engines index your web pages. The metaelement (line 11) tells the browser to refresh the page every 60 seconds. This forces the browser to re-request the page once per minute.
The h:bodyelement (lines 13–15) represent’s the page’s content. In this example, it contains a XHTML h1header element (line 14) that represents the text to display when this document is rendered in the web browser. The h1element contains some literal text (Currenttimeonthewebserver:) that’ssimplyplacedintotheresponsetotheclientand a JSF Expression Language (EL) expression that obtains a value dynamically and inserts it into the response. The expression

#{webTimeBean.time}
indicates that the web app has an object named webTimeBeanwhich contains a property named time. The property’s value replaces the expression in the response that’s sent to the client. We’ll discuss this EL expression in more detail shortly.

26.4.2 Examining the WebTimeBeanClass
JSF documents typically interact with one or more Java objects to perform the app’s tasks. Asyousaw,thisexampleobtainsthetimeontheserverandsendsitaspartoftheresponse.

JavaBeans
JavaBeans objects are instances of classes that follow certain conventions for class design. Each JavaBean class typically contains data and methods. A JavaBean exposes its data to a JSF document as properties. Depending on their use, these properties can be read/write, read-only or write-only. To define a read/write property, a JavaBean class provides set and get methods for that property. For example, to create a Stringproperty firstName, the class would provide methods with the following first lines:

public String getFirstName()
public void setFirstName( String name )
The fact that both method names contain “FirstName” with an uppercase “F” indicates that the class exposes a firstNameproperty with a lowercase “F.” This naming convention is part of the JavaBeans Specification (available at bit.ly/JavaBeansSpecification). A read-only property would have only a get method and a write-only property only a set method. The JavaBeans used in JSF are also POJOs (plain old Java objects), meaning that—unlike prior versions of JSF—you do not need to extend a special class to create the beans used in JSF applications. Instead various annotations are used to “inject” function-
26.4 YourFirstJSFWebApp	26-11


ality into your beans so they can be used easily in JSF applications. The JSF framework is responsible for creating and managing objects of your JavaBean classes for you—you’ll see how to enable this momentarily.

Class WebTimeBean
Figure 26.6 presents the WebTimeBeanclass that allows the JSF document to obtain the web server’s time. You can name your bean classes like any other class. We chose to end the class name with “Bean” to indicate that the class represents a JavaBean. The class con-tains just a getTimemethod (lines 13–17), which defines the read-only timeproperty of the class. Recall that we access this property at line 14 of Fig. 26.5. Lines 15–16 create a Dateobject, then format and return the time as a String.

1  // WebTimeBean.java
2  // Bean that enables the JSF page to retrieve the time from the server 3  package webtime;
4
5  import java.text.DateFormat; 6  import java.util.Date;
7  import javax.faces.bean.ManagedBean; 8
9  @ManagedBean( name="webTimeBean" ) 10  public class WebTimeBean
11  {
12	// return the time on the server at which the request was received 13	public String getTime()
14	{
15	return DateFormat.getTimeInstance( DateFormat.LONG ).format( 16            new Date() );
17	} // end method getTime
18  } // end class WebTimeBean

Fig. 26.6  | BeanthatenablestheJSFpagetoretrievethetimefromtheserver.

The @ManagedBeanAnnotation
Line 9 uses the @ManagedBeanannotation (from the package javax.faces.bean) to indi-cate that the JSF framework should create and manage the WebTimeBeanobject(s) used in the application. The parentheses following the annotation contain the optional nameat-tribute—in this case, indicating that the bean object created by the JSF framework should becalled webTimeBean.Ifyouspecifytheannotation without theparenthesesandthe name attribute, the JSF framework will use the class name with a lowercase first letter (that is, webTimeBean) as the default bean name.

Processing the EL Expression
When the Faces servlet encounters an EL expression that accesses a bean property, it au-tomatically invokes the property’s set or get method based on the context in which the property is used. In line 14 of Fig. 26.5, accessing the property webTimeBean.timeresults in a call to the bean’s getTimemethod, which returns the web server’s time. If this bean object does not yet exist, the JSF framework instantiates it, then calls the getTimemethod on the bean object. The framework can also discard beans that are no longer being used. [Note: We discuss only the EL expressions that we use in this chapter. For more EL details,
26-12	Chapter26  JavaServer™FacesWebApps:Part1


see Chapter 6 of the Java EE 6 tutorial at download.oracle.com/javaee/6/tutorial/ doc/and Chapter 5 of the JSF 2.0 specification at bit.ly/JSF20Spec.]

26.4.3 Building the WebTimeJSF Web App in NetBeans We’ll now build the WebTimeapp from scratch using NetBeans.

Creating the JSF Web Application Project
Begin by opening the NetBeans IDE and performing the following steps:
1. Select File > New Project... to display the New Project dialog. Select Java Web in the Categories pane, Web Application in the Projects pane and click Next >.
2. In the dialog’s Name and Location step, specify WebTimeas the Project Name. In the Project Location field, specify where you’d like to store the project (or keep the default location). These settings will create a WebTimedirectory to store the project’sfilesintheparentdirectoryyouspecified.Keeptheotherdefaultsettings and click Next >.
3. In the dialog’s Server and Settings step, specify GlassFish Server 3 as the Server and Java EE 6 Web as the Java EE Version (these may be the default). Keep the default Context Path and click Next >.
4.  In the dialog’s Frameworks step, select JavaServer Faces, then click Finish to cre-ate the web application project.

Examining the NetBeans Projects Window
Figure 26.7 displays the Projects window, which appears in the upper-left corner of the IDE.Thiswindowdisplaysthecontentsof theproject.Theapp’sXHTML documentsare placed in the Web Pages node. NetBeans supplies the default web page index.xhtmlthat will be displayed when a user requests this web app from a browser. When you add Java source code to the project, it will be placed in the Source Packages node.





JSFapp’sdefaultwebpage





Fig. 26.7  | Projects windowfortheWebTimeproject.

Examining the Default index.xhtmlPage
Figure 26.8 displays index.xthml—the default page that will be displayed when a user re-quests this web app. We reformatted the code to match our coding conventions. When this file is first created, it contains elements for setting up the page, including linking to thepage’sstyle sheetanddeclaring theJSFlibrariesthat willbeused.By default, NetBeans
26.4 YourFirstJSFWebApp	26-13


does not show line numbers in the source-code editor. To view the line numbers, select View > Show Line Numbers.














Fig. 26.8  | Defaultindex.xhtmlpagegeneratedbyNetBeansforthewebapp.

Editing the h:headElement’s Contents
Modify line 7 of Fig. 26.8 by changing the title element’s content from "Facelet Title"to"WebTime:ASimpleExample".Aftertheclosing</title>tag,pressEnter,then insert the metaelement

<meta http-equiv="refresh" content="60" />
which will cause the browser to refresh this page once per minute. As you type, notice that NetBeans provides a code-completion window to help you write your code. For example, after typing “<meta” and a space, the IDE displays the code-completion window in Fig. 26.9, which shows the list of valid attributes for the starting tag of a metaelement. You can then double click an item in the list to insert it into your code. Code-completion support is provided for XHTML elements, JSF elements and Java code.








Fig. 26.9  | NetBeanscode-completionwindow.

Editing the h:bodyElement’s Contents
In the h:bodyelement, replace "HellofromFacelets"with the h1header element

<h1>Current time on the web server: </h1>
Don’t insert the expression #{webTimeBean.time}yet. After we define the WebTimeBean class, we’ll come back to this file and insert this expression to demonstrate that the IDE provides code-completion support for the Java classes you define in your project.
26-14	Chapter26  JavaServer™FacesWebApps:Part1


Defining the Page’s Logic: Class WebTimeBean
We’ll now create the WebTimeBeanclass—the @ManagedBeanclass that will allow the JSF page to obtain the web server’s time. To create the class, perform the following steps:
1. In the NetBeans Projects tab, right click the WebTimeproject’s Source Packages node and select New > Other… to display the New File dialog.
2.  IntheCategories list,selectJavaServerFaces,thenintheFileTypes listselectJSF Managed Bean. Click Next >.
3.  In the Name and Location step, specify WebTimeBean as the Class Name and webtimeas the Package, then click Finish.
NetBeanscreatestheWebTimeBean.javafileandplacesitwithinthewebtimepackageinthe project’s Source Packages node. Figure 26.10 shows this file’s default source code displayed in the IDE. At line 16, notice that NetBeans added the @RequestScopedannotation to the class—this indicates that an object of this class exists only for the duration of the request that’s being processed. (We’ll discuss @RequestScopedand other bean scopes in more detail in Section 26.8.) We did not include this annotation in Fig. 26.6, because all JSF beans are request scoped by default. Replace the code in Fig. 26.10 with the code in Fig. 26.6.



















Fig. 26.10 | DefaultsourcecodefortheWebTimeBeanclass.


Adding the EL Expression to the index.xhtmlPage
Now that you’ve created the WebTimeBean, let’s go back to the index.xhtmlfile and add the EL expression that will obtain the time. In the index.xhtmlfile, modify the line

<h1>Current time on the web server: </h1>
by inserting the expression #{webTimeBean.time}before the h1element’s closing tag. Af-ter you type the characters #and {, the IDE automatically inserts the closing }, inserts the
26.4 YourFirstJSFWebApp	26-15


cursor between the braces and displays the code-completion window. This shows various items that could be placed in the braces of the EL expression, including the webTimeBean object(oftypeWebTimeBean).ToinsertwebTimeBeaninthecode,youcantypetheobject’s name or double click it in the code-completion window. As you type, the list of items in the code-completion window is filtered by what you’ve typed so far.
Whenyoutypethedot(.)afterwebTimeBean,thecode-completionwindowreappears, showing you the WebTimeBeanmethods and properties that can be used in this context (Fig. 26.11). In this list, you can double click the timeproperty, or you can simply type its name.








Fig. 26.11 | NetBeanscode-completionwindowforthewebTimeBeanobject.

Running the Application
You’ve now completed the WebTimeapp. To test it, right click the project’s name in the Projects tab and select Run from the pop-up menu. The IDE will compile the code and deploy (that is, install) the WebTimeapp on the GlassFish application server running on your local machine. Then, the IDE will launch your default web browser and request the WebTime app’s default web page (index.xhtml). Because GlassFish is installed on your local computer, the URL displayed in the browser’s address bar will be

http://localhost:8080/WebTime/
where 8080is the port number on which the GlassFish server runs by default. Depending on your web browser, the http://may not be displayed (Fig. 26.4).

Debugging the Application
If there’s a problem with your web app’s logic, you can press <Ctrl> F5 to build the appli-cation and run it in debug mode—the NetBeans built-in debugger can help you trouble-shoot applications. If you press F6, the program executes without debugging enabled.

Testing the Application from Other Web Browsers
After deploying your project, you can test it from another web browser on your computer by entering the app’s URL into the other browser’s address field. Since your application resides on the local file system, GlassFish must be running. If you’ve already executed the application using one of the techniques above and have not closed NetBeans, GlassFish will still be running. Otherwise, you can start the server from the IDE by opening the Ser-vices tab (located in the same panel as the Projects), expanding the Servers node, right clicking GlassFish Server 3 and selecting Start. Then you can type the URL in the browser to execute the application.
26-16	Chapter26  JavaServer™FacesWebApps:Part1

26.5 Model-View-Controller Architecture of JSF Apps
JSF applications adhere to the Model-View-Controller (MVC) architecture, which sepa-rates an application’s data (contained in the model) from the graphical presentation (the view) and the processing logic (the controller). Figure 26.12 shows the relationships be-tween components in MVC.



Controller   modifies	Model	notifies	View


Fig. 26.12 | Model-View-Controllerarchitecture.

In JSF, the controller is the JSF framework and is responsible for coordinating inter-actions between the view and the model. The model contains the application’s data (typ-ically in a database), and the view presents the data stored in the model (typically as web pages). When a user interacts with a JSF web app’s view, the framework interacts with the model to store and/or retrieve data. When the model changes, the view is updated with the changed data.


26.6 Common JSF Components
As mentioned in Section 26.4, JSF supports several tag libraries. In this section, we intro-duce severalof the JSFHTML TagLibrary’s elements andone element from theJSF Core Tag Library. Figure 26.13 summarizes elements discussed in this section.



JSFcomponent

h:form
h:commandButton


h:graphicImage
h:inputText
h:outputLink
h:panelGrid
h:selectOneMenu

h:selectOneRadio
f:selectItem

Description

Inserts an XHTML formelement into a page.
Displays a button that triggers an event when clicked. Typically, such a button is used to submit a form’s user input to the server for processing.
Displays an image (e.g., GIF and JPG).
Displays a text box in which the user can enter input. Displays a hyperlink.
Displays an XHTML tableelement.
Displays a drop-down list of choices from which the user can make a selection.
Displays a set of radio buttons.
Specifies an item in an h:selectOneMenuor h:selectOneRadio(and other similar components).


Fig. 26.13  | CommonlyusedJSFcomponents.
26.6 CommonJSFComponents	26-17


Allof theseelementsaremappedby JSFframework to acombination of XHTML ele-ments and JavaScript code that enables the browser to render the page. JavaScript is a scripting language that’s interpreted in all of today’s popular web browsers. It can be used to perform tasks that manipulate web-page elements in a web browser and provide inter-activity with the user. You can learn more about JavaScript in our JavaScript Resource Center at www.deitel.com/JavaScript/.
Figure 26.14 displays a form for gathering user input. [Note: To create this applica-tion from scratch, review the steps in Section 26.4.3 and name the application WebCompo-nents.] The h:formelement (lines 14–55) contains the components with which a user interacts to provide data, such as registration or login information, to a JSF app. This example uses the components summarized in Fig. 26.13. This example does not perform a task when the user clicks the Register button. Later, we demonstrate how to add func-tionality to many of these components.


1  <?xml version='1.0' encoding='UTF-8' ?> 2
3  <!-- index.xhtml -->
4  <!-- Registration form that demonstrates various JSF components --> 5  <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
6	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"> 7  <html xmlns="http://www.w3.org/1999/xhtml"
8	xmlns:h="http://java.sun.com/jsf/html" 9	xmlns:f="http://java.sun.com/jsf/core">
10	<h:head>
11	<title>Sample Registration Form</title> 12     </h:head>
13	<h:body> 14         <h:form>
15	<h1>Registration Form</h1>
16	<p>Please fill in all fields and click Register</p>
17	<h:panelGrid columns="4" style="height: 96px; width:456px;"> 18               <h:graphicImage name="fname.png" library="images"/>
19	<h:inputText id="firstNameInputText"/>
20	<h:graphicImage name="lname.png" library="images"/> 21	<h:inputText id="lastNameInputText"/>
22	<h:graphicImage name="email.png" library="images"/> 23	<h:inputText id="emailInputText"/>
24	<h:graphicImage name="phone.png" library="images"/> 25	<h:inputText id="phoneInputText"/>
26	</h:panelGrid>
27	<p><h:graphicImage name="publications.png" library="images"/> 28               <br/>Which book would you like information about?</p>
29	<h:selectOneMenu id="booksSelectOneMenu"> 30               <f:selectItem itemValue="CHTP"
31	itemLabel="C How to Program" /> 32               <f:selectItem itemValue="CPPHTP"
33	itemLabel="C++ How to Program" /> 34               <f:selectItem itemValue="IW3HTP"
35	itemLabel="Internet &amp; World Wide Web How to Program" />

Fig. 26.14 | RegistrationformthatdemonstratesvariousJSFcomponents.(Part1of2.)
26-18	Chapter26  JavaServer™FacesWebApps:Part1


36	<f:selectItem itemValue="JHTP"
37	itemLabel="Java How to Program" /> 38               <f:selectItem itemValue="VBHTP"
39	itemLabel="Visual Basic How to Program" /> 40               <f:selectItem itemValue="VCSHTP"
41	itemLabel="Visual C# How to Program" /> 42            </h:selectOneMenu>
43	<p><h:outputLink value="http://www.deitel.com"> 44               Click here to learn more about our books
45	</h:outputLink></p>
46	<h:graphicImage name="os.png" library="images"/> 47	<h:selectOneRadio id="osSelectOneRadio">
48	<f:selectItem itemValue="WinVista" itemLabel="Windows Vista"/> 49	<f:selectItem itemValue="Win7" itemLabel="Windows 7"/>
50	<f:selectItem itemValue="OSX" itemLabel="Mac OS X"/> 51	<f:selectItem itemValue="Linux" itemLabel="Linux"/> 52	<f:selectItem itemValue="Other" itemLabel="Other"/> 53            </h:selectOneRadio>
54	<h:commandButton value="Register"/> 55         </h:form>
56	</h:body>
57  </html>









h:graphicImage



h:inputText


h:selectOneMenu



h:selectOneRadio

h:commandButton

Fig. 26.14 | RegistrationformthatdemonstratesvariousJSFcomponents.(Part2of2.)

h:panelGridElement
Lines 17–26 define an h:panelGridelement for organizing elements in the page. This element inserts an XHTML tablein the page. The h:prefix indicates that panelGridis
26.6 CommonJSFComponents	26-19


fromthe JSF HTMLTagLibrary. Thecolumnsattributespecifiesthenumberof columns in the table. The elements between the h:panelGrid’s start tag (line 17) and end tag (line 26) are automatically placed into the table’s columns from left to right in the order they appear in the JSF page. When the number of elements in a row exceeds the number of columns, the h:panelGridcreates a new row. We use the h:panelGridto control the po-sitions of the h:graphicImageand h:inputTextelements in the user information section ofthepage. Inthiscase,thereareeightelementsinthe h:panelGrid,sothefirstfour(lines 18–21) are placed in the table’s first row and the last four are placed in the second row. The h:panelGrid’s styleattribute specifies the CSS formatting for the table. We use the CSS attributes widthand heightto specify the width and height of the table in pixels (px).The h:panelGridcontains pairs of h:graphicImageand h:inputTextelements.


h:graphicImageElement and Resource Libraries
Each h:graphicImagedisplays an image in the page. For example, line 18 inserts the im-age fname.png—as specified by the nameattribute. As of JSF 2.0, you add resources that are used throughout your app—such as images, CSS files, JavaScript files—to your web appsbyplacingthemintheapp’sresourcesfolderwithinyourproject’sWebPages node. Each subfolder of resourcesrepresents a resource library. Typically, images are placed in an imageslibrary and CSS files in a csslibrary. In line 18, we specify that the image is located in the imageslibrary with the libraryattribute. JSF knows that the value of this attribute represents a folder within the resourcesfolder.
You can create any library you like in the resourcesfolder. To create this folder:
1.  Expand your app’s node in the NetBeans Projects tab.
2.  Right click the Web Pages node and select New > Folder… to display the New Folder dialog. [Note: If the Folder… option is not available in the popup menu, select Other…, then in the Categories pane select Other and in the File Types pane select Folder and click Next >.
3.  Specify resourcesas the Folder Name and press Finish.
Next, right click the resourcesfolder you just created and create an imagessubfolder. You can then drag the images from your file system onto the imagesfolder to add them as resources. The images in this example are located in the imagesdirectory with the chap-ter’s examples.
The h:graphicImagein line 18 is a so-called empty element—an element that does not have content between its start and end tags. In such an element, data is typically spec-ified as attributes in the start tag, such as the nameand libraryattributes in line 18. You can close an empty element either by placing a slash immediately preceding the start tag’s right angle bracket, as shown in line 18, or by explicitly writing an end tag.


h:inputTextElement
Line 19 defines an h:inputTextelement in which the user can enter text or the app can display text. For any element that might be accessed by other elements of the page or that might be used in server-side code, you should specify an idattribute. We specified these attributes in this example, even though the app does not provide any functionality. We’ll use the idattribute starting with the next example.
26-20	Chapter26  JavaServer™FacesWebApps:Part1


h:selectOneMenuElement
Lines 29–42 define an h:selectOneMenuelement, which is typically rendered in a web page as a drop-down list. When a user clicks the drop-down list, it expands and displays a list from which the user can make a selection. Each item to display appears between the startandendtagsof this elementasanf:selectItemelement(lines 30–41). This element is part of the JSF Core Tag Library. The XML namespace for this tag library is specified inthehtmlelement’sstart tagat line9.Each f:selectItemhasitemValueanditemLabel attributes. The itemLabelis the string that the user will see in the browser, and the item-Valueis the value that’s returned when you programmatically retrieve the user’s selection from the drop-down list (as you’ll see in a later example).

h:outputLinkElement
The h:outputLinkelement (lines 43–45) inserts a hyperlink in a web page. Its valueattri-bute specifies the resource (http://www.deitel.comin this case) that’s requested when a userclicksthehyperlink.Bydefault,h:outputLinkelementscausepagestoopeninthesame browser window, but you can set the element’s targetattribute to change this behavior.

h:selectOneMenuElement
Lines 47–53 define an h:selectOneRadioelement, which provides a series of radio but-tons from which the user can select only one. Like an h:selectOneMenu, an h:selectOne-Radiodisplays items that are specified with f:selectItemelements.

h:commandButtonElement
Lines 54 defines an h:commandButtonelement that triggers an action when clicked—in this example,wedon’tspecifytheactiontotrigger,sothedefaultactionoccurs(re-requestingthe same page from the server) when the user clicks this button. An h:commandButtontypically maps to an XHTML inputelement with its typeattribute set to "submit". Such elements are often used to submit a form’s user input values to the server for processing.

26.7 Validation Using JSF Standard Validators
Validating input is an important step in collecting information from users. Validation helps prevent processing errors due to incomplete, incorrect or improperly formatted user input. For example, you may perform validation to ensure that all required fields contain data or that a zip-code field has the correct number of digits. The JSF Core Tag Library provides several standard validator components and allows you to create your own custom validators. Multiple validators can be specified for each input element. The validators are:
•	 f:validateLength—determines whether a field contains an acceptable number of characters.
•	 f:validateDoubleRange and f:validateLongRange—determine whether nu-meric input falls within acceptable ranges of doubleor longvalues, respectively.
•	f:validateRequired—determines whether a field contains a value.
•	 f:validateRegex—determines whether a field contains a string that matches a specified regular expression pattern.
•	f:validateBean—allows you to invoke a bean method that performs custom validation.
26.7 ValidationUsingJSFStandardValidators   26-21


Validating Form Data in a Web Application
[Note: Tocreatethis application fromscratch, reviewthestepsin Section 26.4.3andname the application Validation.] The example in this section prompts the user to enter a name, e-mail address and phone number in a form. When the user enters any data and presses the Submit button to submit the form’s contents to the web server, validation ensures that the user entered a value in each field, that the entered name does not exceed 30 characters, and that the e-mail address and phone-number values are in an acceptable format. In this example, (555) 123-4567, 555-123-4567 and 123-4567 are all considered valid phone numbers. Once valid data is submitted, the JSF framework stores the submit-ted values in a bean object of class ValidationBean(Fig. 26.15), then sends a response back to the web browser. We simply display the validated data in the page to demonstrate that the server received the data. A real business application would typically store the sub-mitted data in a database or in a file on the server.

Class ValidationBean
Class ValidationBean(Fig. 26.15) provides the read/write properties name, email and phone, and the read-only property result. Each read/write property has an instance vari-able (lines 11–13) and corresponding set/get methods (lines 16–25, 28–37 and 40–49) for manipulating the instance variables. The read-only property response has only a get-Resultmethod (lines 52–60), which returns a paragraph (p) element containing the vali-dated data. (You can create the ValidationBeanmanaged bean class by using the steps presented in Fig. 26.4.3.)

1  // ValidationBean.java
2  // Validating user input. 3  package validation;
4
5  import java.io.Serializable;
6  import javax.faces.bean.ManagedBean; 7
8  @ManagedBean( name="validationBean" )
9  public class ValidationBean implements Serializable 10  {
11	private String name; 12	private String email; 13	private String phone; 14
15	// return the name String 16	public String getName() 17	{
18	return name;
19	} // end method getName 20
21	// set the name String
22	public void setName( String name ) 23	{
24	this.name = name;
25	} // end method setName

Fig. 26.15 | ValidationBeanstoresthevalidateddata,whichisthenusedaspartofthe responsetotheclient.(Part1of2.)
26-22	Chapter26  JavaServer™FacesWebApps:Part1


26
27	// return the email String 28	public String getEmail() 29	{
30	return email;
31	} // end method getEmail 32
33	// set the email String
34	public void setEmail( String email ) 35	{
36	this.email = email; 37     } // end method setEmail 38
39	// return the phone String 40	public String getPhone() 41	{
42	return phone;
43	} // end method getPhone 44
45	// set the phone String
46	public void setPhone( String phone ) 47	{
48	this.phone = phone; 49     } // end method setPhone 50
51	// returns result for rendering on the client 52	public String getResult()
53	{
54	if ( name != null && email != null && phone != null )
55	return "<p style=\"background-color:yellow;width:200px;" + 56               "padding:5px\">Name: " + getName() + "<br/>E-Mail: " + 57               getEmail() + "<br/>Phone: " + getPhone() + "</p>";
58	else
59	return ""; // request has not yet been made 60     } // end method getResult
61  } // end class ValidationBean

Fig. 26.15 | ValidationBeanstoresthevalidateddata,whichisthenusedaspartofthe responsetotheclient.(Part2of2.)


index.xhtml
Figure 26.16 shows this app’s index.xhtmlfile. The initial request to this web app displays the page shown in Fig. 26.16(a). When this app is initially requested, the beginning of the JSF application lifecycle uses this index.xhtmldocument to build the app’s facelets view and sends it as the response to the client browser, which displays the form for user input. During this initial request, the EL expressions (lines 22, 30, 39 and 47) are evaluated to ob-tain the values that should be displayed in various parts of the page. Nothing is displayed initially as a result of these four EL expressions being evaluated, because no default values are specified forthe bean’s properties. The page’s h:formelement contains an h:panelGrid (lines18–45)withthreecolumnsandanh:commandButton(line46),whichbydefaultsub-mits the contents of the form’s fields to the server.
26.7 ValidationUsingJSFStandardValidators   26-23


1  <?xml version='1.0' encoding='UTF-8' ?> 2
3  <!-- index.xhtml -->
4  <!-- Validating user input -->
5  <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 6	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"> 7  <html xmlns="http://www.w3.org/1999/xhtml"
8	xmlns:h="http://java.sun.com/jsf/html" 9	xmlns:f="http://java.sun.com/jsf/core">
10	<h:head>
11	<title>Validating Form Data</title>
12	<h:outputStylesheet name="style.css" library="css"/> 13     </h:head>
14	<h:body>
15	<h:form>
16	<h1>Please fill out the following form:</h1>
17	<p>All fields are required and must contain valid information</p> 18	<h:panelGrid columns="3">
19	<h:outputText value="Name:"/>
20	<h:inputText id="nameInputText" required="true" 21                  requiredMessage="Please enter your name"
22	value="#{validationBean.name}"
23	validatorMessage="Name must be fewer than 30 characters"> 24	<f:validateLength maximum="30" />
25	</h:inputText>
26	<h:message for="nameInputText" styleClass="error"/> 27	<h:outputText value="E-mail:"/>
28	<h:inputText id="emailInputText" required="true"
29	requiredMessage="Please enter a valid e-mail address" 30	value="#{validationBean.email}"
31	validatorMessage="Invalid e-mail address format"> 32	<f:validateRegex pattern=
33	"\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*" /> 34               </h:inputText>
35	<h:message for="emailInputText" styleClass="error"/> 36	<h:outputText value="Phone:"/>
37	<h:inputText id="phoneInputText" required="true"
38	requiredMessage="Please enter a valid phone number" 39	value="#{validationBean.phone}"
40	validatorMessage="Invalid phone number format"> 41	<f:validateRegex pattern=
42	"((\(\d{3}\) ?)|(\d{3}-))?\d{3}-\d{4}" /> 43               </h:inputText>
44	<h:message for="phoneInputText" styleClass="error"/> 45            </h:panelGrid>
46	<h:commandButton value="Submit"/>
47	<h:outputText escape="false" value="#{validationBean.response}"/> 48         </h:form>
49	</h:body>
50  </html>

Fig. 26.16 | Formtodemonstratevalidatinguserinput.(Part1of3.)
26-24	Chapter26  JavaServer™FacesWebApps:Part1



a)Submittingtheformbeforeenteringanyinformation














b)Errormessagesdisplayedaftersubmittingtheemptyform














c)Errormessagesdisplayedaftersubmittinginvalidinformation














Fig. 26.16 | Formtodemonstratevalidatinguserinput.(Part2of3.)
26.7 ValidationUsingJSFStandardValidators   26-25


d)Successfullysubmittedform
















Fig. 26.16 | Formtodemonstratevalidatinguserinput.(Part3of3.)


First Row of the h:panelGrid
In this application, we demonstrate several new elements and attributes. The first new el-ement is the h:outputTextelement (line 19; from the JSF HTML Tag Library), which insertstextin thepage.Inthiscase,weinsertaliteralstring("Name:")thatisspecifiedwith the element’s valueattribute.
The h:inputTextelement (lines 20–25) displays a text box in which the user can enter a name. We’ve specified several attributes for this element:
•	id—This enables other elements or server-side code to reference this element.
•	 required—Ensuring that the user has made a selection or entered some text in a required input element is a basic type of validation. When set to "true", this at-tribute specifies that the element must contain a value.
•	 requiredMessage—This specifies the message that should be displayed if the user submits the form without first providing a value for this required element.
•	value—This specifies the value to display in the field or to be saved into a bean on the server. In this case, the EL expression indicates the bean property that’s associated with this field.
•	validatorMessage—This specifies the message to display if a validator is associ-ated with this h:inputTextand the data the user enters is invalid.
The messages specified by the requiredMessageand validatorMessageattributes are displayed in an associated h:messageelement (line 26) when validation fails. The ele-ment’s forattribute specifies the idof the specific element for which messages will be dis-played (nameInputText), and the styleClassattribute specifies the name of a CSS style class that will format the message. For this example, we defined a CSS style sheet, which was inserted into the document’s headelement at line 12 using theh:outputStylesheet
26-26	Chapter26  JavaServer™FacesWebApps:Part1


element. We placed the style sheet in the csslibrary within the resourcesfolder. The style sheet contains the following CSS rule:

.error {
color:red; }
whichcreatesastyleclassnamederror(thedotindicatesthatit’sastyleclass)andspecifies that any text to which this is applied, such as the error messages, should be red. We use this CSS style for all the h:messageelements in this example.

Validating the nameInputTextElement’s Contents
If the user submits the form without a value in the nameInputText, the requiredMessage "Pleaseenteryourname"is displayed in the corresponding h:messageelement. If the user specifies a value for the nameInputText, the JSF framework executes the f:validate-Lengthvalidator that’s nested in the h:inputTextelement. Here, we check that the name contains no more than 30 characters—as specified by the validator’s maximumattribute. This might be useful to ensure that a value will fit within a particular database field.
Users can type as much text in the nameInputTextas they wish. If the name is too long, the validatorMessageis displayed in the h:messageelement after the user submits the form. It’s also possible to limit the length of user input in an h:inputTextwithout using validation by setting its maxlengthattribute, in which case the element’s cursor will not advance beyond the maximum allowable number of characters. This would prevent the user from submitting data that exceeds the length limit.

Second and Third Rows of the h:panelGrid
The next two rows of the h:panelGridhave elements similar to those in the first row. In addition to being required elements, the h:inputTextelements at lines 28–34 and 37–43 are each validated by h:validateRegexvalidators as described next.

Validating the e-Mail Address
The h:validateRegexelement at lines 32–33 uses the regular expression

\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*
which indicates that an e-mail address is valid if the part before the @symbol contains one or more word characters (that is, alphanumeric characters or underscores), followed by zeroormorestringscomprisedofahyphen,plussign,periodorapostropheandadditional word characters. After the @symbol, a valid e-mail address must contain one or more groups of word characters potentially separated by hyphens or periods, followed by a re-quired period and another group of one or more word characters potentially separated by hyphens  or  periods.  For  example,  bob's-personal.email@white.email.com,  bob-white@my-email.comand bob.white@email.comare all valid e-mail addresses. If the ad-dress the user enters has an invalid format, the validatorMessage(line 31) will be dis-played in the corresponding h:messageelement (line 35).

Validating the Phone Number
The h:validateRegexelement at lines 41–42 uses the regular expression

((\(\d{3}\) ?)|(\d{3}-))?\d{3}-\d{4}
26.8 SessionTracking   26-27


which indicates that a phone number can contain a three-digit area code either in paren-theses and followed by an optional space or without parentheses and followed by a re-quired hyphen. After an optional area code, a phone number must contain three digits, a hyphen and another four digits. For example, (555)123-4567, 555-123-4567and 123-4567are all valid phone numbers. If the phone number the user enters has an invalid for-mat, the validatorMessage(line 40) will be displayed in the corresponding h:message element (line 44).

Submitting the Form—More Details of the JSF Lifecycle
As we mentioned earlier in this section, when the app receives the initial request, it returns the page shown in Fig. 26.16(a). When a request does not contain any request values, such as those the user enters in a form, the JSF framework simply creates the view and returns it as the response.
The user submits the form to the server by pressing the Submit h:commandButton (defined at line 46). Since we did not specify an actionattribute for this h:command-Button, the action is configured by default to perform a postback—the browser re-requests the page index.xhtmland sends the values of the form’s fields to the server for processing. Next, the JSF framework performs the validations of all the form elements. If any of the elements is invalid, the framework renders the appropriate error message as part of the response.
Ifthevaluesofalltheelementsarevalid,theframeworkusesthevaluesoftheelements to set the properties of the validateBean—as specified in the EL expressions in lines 22, 30 and 39. Each property’s set method is invoked, passing the value of the corresponding element as an argument. The framework then formulates the response to the client. In the response, the form elements are populated with the values of the validateBean’s proper-ties (by calling their get methods), and the h:outputTextelement at line 47 is populated with the value of the read-only resultproperty. The value of this property is determined bythegetResultmethod(lines52–60of Fig. 26.15),whichusesthesubmittedformdata in the string that it returns.
When you execute this app, try submitting the form with no data (Fig. 26.16(b)), with invalid data (Fig. 26.16(c)) and with valid data (Fig. 26.16(d)).

26.8 Session Tracking
Originally, critics accused the Internet and e-business of failing to provide the customized service typically experienced in “brick-and-mortar” stores. To address this problem, busi-nesses established mechanisms by which they could personalize users’ browsing experienc-es, tailoring content to individual users. They tracked each customer’s movement through the Internet and combined the collected data with information the consumer provided, including billing information, personal preferences, interests and hobbies.

Personalization
Personalization enables businesses to communicate effectively with their customers and also helps users locate desired products and services. Companies that provide content of particular interest to users can establish relationships with customers and build on those relationships over time. Furthermore, by targeting consumers with personal offers, recom-mendations, advertisements, promotions and services, businesses create customer loyalty.
26-28	Chapter26  JavaServer™FacesWebApps:Part1


Websites can use sophisticated technology to allow visitors to customize home pages to suittheirindividualneedsandpreferences.Similarly,onlineshoppingsitesoftenstoreper-sonal information forcustomers, tailoringnotifications andspecial offers to theirinterests. Such services encourage customers to visit sites more frequently and make purchases more regularly.

Privacy
A trade-off exists between personalized business service and protection of privacy. Some consumers embrace tailored content, but others fear the possible adverse consequences if the info they provide to businesses is released or collected by tracking technologies. Con-sumers and privacy advocates ask: What if the business to which we give personal data sells or gives that information to another organization without our knowledge? What if we do not want our actions on the Internet—a supposedly anonymous medium—to be tracked and recorded by unknown parties? What if unauthorized parties gain access to sensitive privatedata,suchascredit-cardnumbersormedicalhistory?Thesearequestionsthatmust be addressed by programmers, consumers, businesses and lawmakers alike.

Recognizing Clients
To provide personalized services, businesses must be able to recognize clients when they request information from a site. As we have discussed, the request/response system on which the web operates is facilitated by HTTP. Unfortunately, HTTP is a stateless proto-col—it does not provide information that would enable web servers to maintain state infor-mation  regarding  particular  clients.  This  means  that  web  servers  cannot  determine whether a request comes from a particular client or whether the same or different clients generate a series of requests.
Tocircumvent this problem, sites can provide mechanisms by which they identify indi-vidual clients. A session represents a unique client on a website. If the client leaves a site and then returns later, the client will still be recognized as the same user. When the user closes the browser, the session typically ends. To help the server distinguish among clients, each client must identify itself to the server. Tracking individual clients is known as session tracking.Onepopularsession-trackingtechniqueusescookies(discussedinSection 26.8.1); another uses beans  that  are  marked  with  the  @SessionScoped annotation  (used in Section 26.8.2). Additional session-tracking techniques are beyond this book’s scope.

26.8.1 Cookies
Cookies provide you with a tool for personalizing web pages. A cookie is a piece of data stored by web browsers in a small text file on the user’s computer. A cookie maintains in-formationabouttheclientduringandbetweenbrowsersessions.Thefirsttimeauservisits the website, the user’s computer might receive a cookie from the server; this cookie is then reactivated each time the user revisits that site. The collected information is intended to be an anonymous record containing data that is used to personalize the user’s future visits to the site. For example, cookies in a shopping application might store unique identifiers for users. When a user adds items to an online shopping cart or performs another task re-sulting in a request to the web server, the server receives a cookie containing the user’s unique identifier. The server then uses the unique identifier to locate the shopping cart and perform any necessary processing.
26.8 SessionTracking   26-29


In addition to identifying users, cookies also can indicate users’ shopping preferences. When a Web Form receives a request from a client, the Web Form can examine the cookie(s) it sent to the client during previous communications, identify the user’s prefer-ences and immediately display products of interest to the client.
Every HTTP-based interaction between a client and a server includes a header con-taining information either about the request (when the communication is from the client to the server) or about the response (when the communication is from the server to the client). When a Web Form receives a request, the header includes information such as the request type and any cookies that have been sent previously from the server to be stored on the client machine. When the server formulates its response, the header information contains any cookies the server wants to store on the client computer and other informa-tion, such as the MIME type of the response.
The expiration date of a cookie determines how long the cookie remains on the client’s computer. If you do not set an expiration date for a cookie, the web browser main-tains the cookie for the duration of the browsing session. Otherwise, the web browser maintains the cookie until the expiration date occurs. Cookies are deleted by the web browser when they expire.

Portability Tip 26.1
Users may disable cookies in their web browsers to help ensure their privacy. Such users will experience difficulty using web applications that depend on cookies to maintain state information.


26.8.2 Session Tracking with @SessionScopedBeans
The previous web applications used @RequestScopedbeans by default—the beans existed only for the duration of each request. In the next application, we use a @SessionScoped bean to maintain selections throughout the user’s session. Such a bean is created when a session begins and exists throughout the entire session. A @SessionScopedbean can be ac-cessed by all of the app’s pages during the session, and the app server maintains a separate @SessionScopedbean for each user. By default a session expires after 30 minutes of inac-tivity or when the user closes the browser that was used to begin the session. When the session expires, the server discards the bean associated with that session.

Software Engineering Observation 26.2
@SessionScoped beans should implement the Serializable interface. Websites with heavy traffic often use groups of servers (sometimes hundreds or thousands of them) to respond to requests. Such groups are known as server farms. Server farms often balance the number of requests being handled on each server by moving some sessions to other servers. Making a bean Serializableenables the session to be moved properly among servers.

Test-Driving the App ThisexampleconsistsofaSelectionsBeanclassthatis@SessionScopedandtwopages(in-dex.xhtmland recommendations.xhtml) that store data in and retrieve data from a Selec-tionsBeanobject. To understand how these pieces fit together, let’s walk through a sample execution of the app. When you first execute the app, the index.xhtmlpage is displayed. The user selects a topic from a group of radio buttons and submits the form (Fig. 26.17).
26-30	Chapter26  JavaServer™FacesWebApps:Part1
















Fig. 26.17 | index.xhtmlaftertheuserhasmadeaselectionandisabouttosubmitthe formforthefirsttime.

Whentheformissubmitted,theJSFframeworkcreatesaSelectionsBeanobjectthat is specific to this user, stores the selected topic in the bean and returns the index.xhtml page. The page now shows how many selections have been made (1) and allows the user to make another selection (Fig. 26.18).
















Fig. 26.18 | index.xhtmlaftertheuserhassubmittedtheformthefirsttime,madeanother selectionandisabouttosubmittheformagain.

The user makes a second topic selection and submits the form again. The app stores the selection in this user’s existing SelectionsBeanobject and returns the index.xhtml page (Fig. 26.19), which shows how many selections have been made so far (2).
Atanytime, theusercanclickthelinkat thebottomof theindex.xhtmlpagetoopen recommendations.xhtml,whichobtainstheinformationfromthisuser’sSelectionsBean object and creates a recommended books list (Fig. 26.20) for the user’s selected topics.
26.8 SessionTracking   26-31
















Fig. 26.19 | index.xhtmlaftertheuserhassubmittedtheformthesecondtimeandis abouttoclickthelinktotherecommendations.xhtmlpage.












Fig. 26.20 | recommendations.hxtmlshowingbookrecommendationsforthetopic selectionsmadebytheuserinFigs.26.18and26.19.

@SessionScopedClass SelectionsBean
Class SelectionsBean(Fig. 26.21) uses the @SessionScopedannotation (line 13) to in-dicate that the server should maintain separate instances of this class for each user session. The class maintains a staticHashMap(created at lines 17–18) of topics and their corre-sponding book titles. We made this object static, because its values can be shared among all SelectionsBeanobjects. The staticinitializer block (lines 23–28) specifies the Hash-Map’s  key/value  pairs.  Class  SelectionsBean maintains  each  user’s  selections  in  a Set<String>(line32),whichallowsonlyuniquekeys,soselectingthesametopicmultiple times does not increase the number of selections.

1  // SelectionsBean.java
2  // Manages a user's topic selections
3  package sessiontracking;

Fig. 26.21 | @SessionScopedSelectionsBeanclass.(Part1of3.)
26-32	Chapter26  JavaServer™FacesWebApps:Part1


4
5  import java.io.Serializable; 6  import java.util.HashMap;
7  import java.util.Set;
8  import java.util.TreeSet;
9  import javax.faces.bean.ManagedBean; 10  import javax.faces.bean.SessionScoped; 11
12  @ManagedBean( name="selectionsBean" ) 13  @SessionScoped
14  public class SelectionsBean implements Serializable 15  {
16	// map of topics to book titles
17	private static final HashMap< String, String > booksMap = 18         new HashMap< String, String >();
19
20	// initialize booksMap 21	static
22	{
23	booksMap.put( "java", "Java How to Program" ); 24	booksMap.put( "cpp", "C++ How to Program" ); 25	booksMap.put( "iphone",
26	"iPhone for Programmers: An App-Driven Approach" ); 27         booksMap.put( "android",
28	"Android for Programmers: An App-Driven Approach" ); 29     } // end static initializer block
30
31	// stores individual user's selections
32	private Set< String > selections = new TreeSet< String >(); 33	private String selection; // stores the current selection 34
35	// return number of selections
36	public int getNumberOfSelections() 37	{
38	return selections.size();
39	} // end method getNumberOfSelections 40
41	// returns the current selection 42	public String getSelection()
43	{
44	return selection;
45	} // end method getSelection 46
47	// store user's selection
48	public void setSelection( String topic ) 49	{
50	selection = booksMap.get( topic ); 51	selections.add( selection );
52	} // end method setSelection 53
54     // return the Set of selections 55     public String[] getSelections()
56	{

Fig. 26.21 | @SessionScopedSelectionsBeanclass.(Part2of3.)
26.8 SessionTracking   26-33


57	return selections.toArray( new String[ selections.size() ] ); 58     } // end method getSelections
59  } // end class SelectionsBean

Fig. 26.21 | @SessionScopedSelectionsBeanclass.(Part3of3.)

Methods of Class SelectionsBean
Method getNumberOfSelections(lines 36–39) returns the number of topics the user has selected and represents the read-only property numberOfSelections. We use this property intheindex.xhtmldocumenttodisplaythenumberofselectionstheuserhasmadesofar.
Methods getSelection(lines 42–45) and setSelection(lines 48–52) represent the read/write selectionproperty. When a user makes a selection in index.xhtmland sub-mits the form, method setSelection looks up the corresponding book title in the booksMap (line 50), then stores that title in selections(line 51).
Method getSelections(lines 55–58) represents the read-only property selections, which returns an array of Strings containing the book titles for the topics selected by the user so far. When the recommendations.xhtmlpage is requested, it uses the selections property to get the list of book titles and display them in the page.

index.xhtml
The index.xhtmldocument (Fig. 26.22) contains an h:selectOneRadioelement (lines 19–26) with the options Java, C++, iPhone and Android. The user selects a topic by click-ing a radio button, then pressing Submit to send the selection. As the user makes each se-lectionandsubmitstheform,theselectionsBeanobject’sselectionpropertyisupdated and this document is returned. The EL expression at line 15 inserts the number of selec-tions that have been made so far into the page. When the user clicks the h:outputLink (lines29–31)therecommendations.xhtmlpageisrequested.Thevalueattributespecifies only recommendations.xhtml, so the browser assumes that this page is on the same server and at the same location as index.xhtml.


1  <?xml version='1.0' encoding='UTF-8' ?> 2
3  <!-- index.xhtml -->
4  <!-- Allow the user to select a topic -->
5  <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 6	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"> 7  <html xmlns="http://www.w3.org/1999/xhtml"
8	xmlns:h="http://java.sun.com/jsf/html" 9	xmlns:f="http://java.sun.com/jsf/core">
10	<h:head>
11	<title>Topic Selection Page</title> 12     </h:head>
13	<h:body>
14	<h1>Welcome to Sessions!</h1>
15	<p>You have made #{selectionsBean.numberOfSelections} selection(s) 16	</p>
17	<h3>Make a Selection and Press Submit</h3>

Fig. 26.22 | index.xhtmlallowstheusertoselectatopic.(Part1of2.)
26-34	Chapter26  JavaServer™FacesWebApps:Part1


18	<h:form>
19	<h:selectOneRadio id="topicSelectOneRadio" required="true"
20	requiredMessage="Please choose a topic, then press Submit" 21	value="#{selectionsBean.selection}">
22	<f:selectItem itemValue="java" itemLabel="Java"/> 23	<f:selectItem itemValue="cpp" itemLabel="C++"/>
24	<f:selectItem itemValue="iphone" itemLabel="iPhone"/> 25	<f:selectItem itemValue="android" itemLabel="Android"/> 26            </h:selectOneRadio>
27	<p><h:commandButton value="Submit"/></p> 28         </h:form>
29	<p><h:outputLink value="recommendations.xhtml"> 30            Click here for book recommendations
31	</h:outputLink></p> 32     </h:body>
33  </html>

Fig. 26.22 | index.xhtmlallowstheusertoselectatopic.(Part2of2.)

recommendations.xhtml
When the user clicks the h:outputLinkin the index.xhtmlpage, the browser requests the recommendations.xhtml (Fig. 26.23),  which  displays  book  recommendations  in  an XHTML unordered (bulleted) list (lines 15–19). The h:outputLink(lines 20–22) allows the user to return to index.xhtmlto select additional topics.


1  <?xml version='1.0' encoding='UTF-8' ?> 2
3  <!-- recommendations.xhtml -->
4  <!-- Display recommended books based on the user's selected topics --> 5  <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
6	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"> 7  <html xmlns="http://www.w3.org/1999/xhtml"
8	xmlns:h="http://java.sun.com/jsf/html"
9	xmlns:ui="http://java.sun.com/jsf/facelets"> 10	<h:head>
11	<title>Recommended Books</title> 12     </h:head>
13	<h:body>
14	<h1>Book Recommendations</h1> 15	<ul>
16	<ui:repeat value="#{selectionsBean.selections}" var="book"> 17               <li>#{book}</li>
18	</ui:repeat> 19         </ul>
20	<p><h:outputLink value="index.xhtml">
21	Click here to choose another topic 22            </h:outputLink></p>
23	</h:body>
24  </html>

Fig. 26.23 | recommendations.xhtmldisplaysbookrecommendationsbasedontheuser’s selections.
26.8 SessionTracking   26-35


Iterating Through the List of Books
Line 9 enables us to use elements from the JSF Facelets Tag Library. This library includes the ui:repeatelement (lines 16–18), which can be thought of as an enhanced forloop that iterates through collections JSF Expression Language. The element inserts its nested element(s) once for each element in a collection. The collection is specified by the value attribute’s EL expression, which must return an array, a List, a java.sql.ResultSetor an Object. If the EL expression does not return an array, a Listor a ResultSet, the ui:repeatelement inserts its nested element(s) only once for the returned Object. In this example, the ui:repeatelement renders the items returned by the selectionsBean’s se-lectionsproperty.
The ui:repeatelement’s varattribute creates a variable named bookto which each item in the collection is assigned in sequence. You can use this variable in EL expressions in the nested elements. For example, the expression #{book}in line 17 inserts between the <li>and </li>tags the Stringrepresentation of one item in the collection. You can also use the variable to invoke methods on, or access properties of, the referenced object.



Summary
Section 26.1 Introduction
•  Web-based apps create content for web browser clients. This content includes eXtensible Hyper-Text Markup Language (XHTML), JavaScript client-side scripting, Cascading Style Sheets (CSS), images and binary data.
•  XHTML is an XML (eXtensible Markup Language) vocabulary that is based on HTML(Hyper-Text Markup Language).
•  Java multitier applications are typically implemented using the features of Java Enterprise Edi-tion (Java EE).
•  The JavaServer Faces subset of Java EE is a web-application framework (p. 26-2) for building multitier web apps by extending the framework with your application-specific capabilities. The framework handles the details of receiving client requests and returning responses for you.

Section 26.2 HyperText Transfer Protocol (HTTP) Transactions
•  In its simplest form, a web page is nothing more than an XHTML document that describes to a web browser how to display and format the document’s information.
•  XHTML documents normally contain hyperlinks that link to different pages or to other parts of the same page. When the user clicks a hyperlink, the requested web page loads into the browser.
•  Computers that run web-server software (p. 26-3) make resources available, such as web pages, images, PDF documents and even objects that perform complex tasks.
•  The HTTP protocol allows clients and servers to interact and exchange information. •  HTTP uses URLs (Uniform Resource Locators) to locate resources on the Internet.
•  A URL contains information that directs a browser to the resource that the user wishes to access. •  The computer that houses and maintains resources is usually referred to as the host (p. 26-3). •  Host names are translated into IP addresses by domain-name system (DNS) servers (p. 26-3).
•  The path in a URL typically specifies a virtual directory on the server. The server translates this into a real location, thus hiding a resource’s true location.
26-36	Chapter26  JavaServer™FacesWebApps:Part1


•  When given a URL, a web browser performs an HTTP transaction to retrieve and display the web page at that address.
•  HTTP headers (p. 26-5) provide additional information about the data that will be sent.
•  Multipurpose Internet Mail Extensions (MIME; p. 26-5) is an Internet standard that specifies data formats so that programs can interpret data correctly.
•  The two most common HTTP request types are GETand POST(p. 26-5). A GETrequest typically asks for a specific resource on a server. A POSTrequest typically posts (or sends) data to a server.
•  GETrequests and POSTrequests can both be used to send form data to a web server, yet each re-quest type sends the information differently. A GETrequest sends information to the server in the URL’s query string (p. 26-6). A POSTrequest sends form data as part of the HTTP message.
•  Browsers often cache (p. 26-6) web pages for quick reloading. If there are no changes between the cached version and the current version on the web, this speeds up your browsing experience.
•  An HTTP response can indicate the length of time for which the content remains “fresh.” If this amount of time has not been reached, the browser can avoid another request to the server.
•  Browsers typically do not cache the server’s response to a POSTrequest, because the next POST might not return the same result.

Section 26.3 Multitier Application Architecture
•  Web-based applications are multitier(n-tier) applications (p. 26-6)that divide functionality into separate tiers (i.e., logical groupings of functionality). Although tiers can be located on the same computer, the tiers of web-based applications often reside on separate computers.
•  The information tier (p. 26-7) maintains data pertaining to the application.
•  The middle tier (p. 26-7) implements business logic, controller logic and presentation logic to control interactions between the application’s clients and the application’s data. Business logic in the middle tier enforces business rules and ensures that data is reliable before the server applica-tion updates the database or presents the data to users. Business rules dictate how clients can and cannot access application data, and how applications process data.
•  The client tier (p. 26-7) is the application’s user interface, which gathers input and displays out-put. Users interact directly with the application through the user interface. In response to user actions (e.g., clicking a hyperlink), the client tier interacts with the middle tier to make requests and to retrieve data from the information tier.

Section 26.4 Your First JSF Web App
•  The JSF web-application framework’s Faces servlet (p. 26-8) processes each requested JSF page so that the server can eventually return a response to the client.

Section 26.4.1 The Default index.xhtmlDocument: Introducing Facelets
•  You present your web app’s content in JSF using Facelets (p. 26-9)—a combination of XHTML markup and JSF markup.
•  XHTML (p. 26-9) specifies the content of a web page that is displayed in a web browser. XHTML separates the presentation of a document from the structure of the document’s data.
•  Presentation is specified with Cascading Style Sheets (CSS).
•  JSF uses the XHTML 1.0 Transitional Recommendation by default. Transitional markup may include some non-CSS formatting, but this is not recommended.
•  The starting <html>tag may contain one or more xmlnsattributes (p. 26-9). Each has a name and a value separated by an equal sign (=), and specifies an XML namespace of elements that are used in the document.
Summary   26-37


•  The attribute xmlns:h="http://java.sun.com/jsf/html"specifies a prefix and a URL for JSF’s HTML Tag Library (p. 26-9), allowing the document to use JSF’s elements from that library.
•  A tag library defines a set of elements that can be inserted into the XHTML markup. •  The elements in the HTML Tag Library generate  XHTML elements.
•  The h:headelement (p. 26-10) defines the XHTML page’s headelement.
•  The document’s titletypically appears in the browserwindow’s title bar,or a browsertab if you have multiple web pages open in the browser at once.
•  The h:body(p. 26-10) element represents the page’s content.
•  A JSF Expression Language (EL; p. 26-10) expression can interact with a JavaBean to obtain data.

Section 26.4.2 Examining the WebTimeBeanClass
•  JSF documents typically interact with one or more Java objects to perform the app’s tasks.
•  JavaBeans objects (p. 26-10) are instances of classes that follow certain conventions for class design. AJavaBeanexposesitsdataasproperties(p. 26-10).Propertiescanberead/write,read-onlyorwrite-only.Todefinearead/writeproperty,aJavaBeanclassprovidessetandgetmethodsforthatproperty. A read-only property would have only a get method and a write-only property only a set method.
•  The JavaBeans used in JSF are also POJOs (plain old Java objects; p. 26-10)
•  The JSF framework creates and manages objects of your JavaBean classes for you.
•  The @ManagedBeanannotation (from the package javax.faces.bean; p. 26-11) indicates that the JSF framework should create and manage instances of the class. The parentheses following the annotation contain the optional nameattribute. If you specify the annotation without the paren-theses and the nameattribute, the JSF framework will use the class name with a lowercase first letter as the default bean name.
•  When the Faces servlet encounters an EL expression that accesses a bean property, it automati-cally invokes the property’s set or get method based on the context in which the property is used.

Section 26.5 Model-View-Controller Architecture of JSF Apps
•  JSF applications adhere to the Model-View-Controller (MVC; p. 26-16) architecture, which separates an application’s data (contained in the model) from the graphical presentation (the view) and the processing logic (the controller).
•  In JSF, the controller is the JSF framework and is responsible for coordinating interactions be-tween the view and the model. The model contains the application’s data (typically in a data-base), and the view presents the data stored in the model (typically as web pages).

Section 26.6 Common JSF Components
•  Elements from the JSF HTML Tag Library are mapped by the JSF framework to a combination of XHTML elements and JavaScript code that enables the browser to render the page.
•  The h:formelement (p. 26-17) contains the components with which a user interacts to provide data, such as registration or login information, to a JSF app.
•  An h:panelGridelement (p. 26-18) organizes elements in an XHTML table. The columnsattri-bute specifies the number of columns in the table. The styleattribute specifies the CSS format-ting for the table.
•  A h:graphicImage(p. 26-19) displays an image (specified by the nameattribute) in the page.
•  As of JSF 2.0, you add resources (p. 26-19) that are used throughout your app—such as images, CSS files, JavaScript files—to your web apps by placing them in the app’s resourcesfolder within yourproject’sWebPages node.Eachsubfolderofresourcesrepresentsaresourcelibrary(p. 26-19).
26-38	Chapter26  JavaServer™FacesWebApps:Part1


•  An empty element (p. 26-19) does not have content between its start and end tags. In such an element, data can bespecified as attributes in the start tag.You can close an empty element either by placingaslashimmediatelyprecedingthestarttag’srightanglebracketorby explicitly writing an end tag.
•  An h:selectOneMenuelement (p. 26-20) is typically rendered in a web page as a drop-down list. Each item to display appears between the start and end tags of this element as an f:selectItem element (from the JSF Core Tag Library; p. 26-20). An f:selectItem’s itemLabelis the string that the user will see in the browser, and its itemValueis the value that’s returned when you pro-grammatically retrieve the user’s selection from the drop-down list.
•  An h:outputLinkelement (p. 26-20) inserts a hyperlink in a web page. Its valueattribute spec-ifies the resource that’s requested when a user clicks the hyperlink.
•  An h:selectOneRadioelement (p. 26-20) provides a series of radio buttons from which the user can select only one.
•  An h:commandButtonelement (p. 26-20) triggers an action when clicked. An h:commandButton typically maps to an XHTML inputelement with its typeattribute set to "submit". Such ele-ments are often used to submit a form’s user input values to the server for processing.

Section 26.7 Validation Using JSF Standard Validators
•  Form validation (p. 26-20) helps prevent processing errors due to incomplete or improperly for-matted user input.
•  An f:validateLength validator (p. 26-20) determines whether a field contains an acceptable number of characters.
•  f:validateDoubleRangeand f:validateLongRangevalidators (p. 26-20) determine whether nu-meric input falls within acceptable ranges.
•  An f:validateRequiredvalidator (p. 26-20) determines whether a field contains a value.
•  An f:validateRegex validator (p. 26-20) determines whether a field contains a string that matches a specified regular expression pattern.
•  An f:validateBeanvalidator (p. 26-20) invokes a bean method that performs custom validation. •  An h:outputTextelement (p. 26-25) inserts text in a page.
•  An input element’s requiredattribute (when set to "true"; p. 26-25) ensures that the user has made a selection or entered some text in a required input element is a basic type of validation.
•  An input element’s requiredMessageattribute (p. 26-25) specifies the message that should be displayed if the user submits the form without first providing a value for the required element.
•  An input element’s validatorMessageattribute (p. 26-25) specifies the message to display if a validator is associated with the element and the data the user enters is invalid.
•  The messages specified by the requiredMessageand validatorMessageattributes are displayed in an associated h:messageelement (p. 26-25) when validation fails.
•  To limit the length of user input in an h:inputText, set its maxlengthattribute (p. 26-26)—the element’s cursor will not advance beyond the maximum allowable number of characters.
•  Inapostback(p. 26-27),thebrowserre-requeststhepageandsendsthevaluesoftheform’sfields to the server for processing.

Section 26.8 Session Tracking
•  Personalization (p. 26-27) makes it possible for e-businesses to communicate effectively with their customers and also improves the user’s ability to locate desired products and services.
Self-ReviewExercises	26-39


•  A trade-off exists between personalized e-business service and protection of privacy. Some con-sumers embrace the idea of tailored content, but others fear the possible adverse consequences if the information they provide to e-businesses is released or collected by tracking technologies.
•  HTTP is a stateless protocol—it does not provide information that would enable web servers to maintain state information regarding particular clients.
•  To help the server distinguish among clients, each client must identify itself to the server. Track-ing individual clients, known as session tracking, can be achieved in a number of ways. One pop-ular technique uses cookies; another uses the @SessionScopedannotation.

Section 26.8.1 Cookies
•  A cookie (p. 26-28) is a piece of data stored in a small text file on the user’s computer. A cookie maintains information about the client during and between browser sessions.
•  The expiration date (p. 26-29) of a cookie determines how long the cookie remains on the cli-ent’s computer. If you do not set an expiration date for a cookie, the web browser maintains the cookie for the duration of the browsing session.

Section 26.8.2 Session Tracking with @SessionScopedBeans
•  A @SessionScopedbean (p. 26-29) can maintain a user’s selections throughout the user’s session. Such a bean is created when a session begins and exists throughout the entire session.
•  A @SessionScopedbean can be accessed by all of the app’s pages, and the app server maintains a separate @SessionScopedbean for each user.
•  By default a session expires after 30 minutes of inactivity or when the user closes the browser that was used to begin the session. When the session expires, the server discards the bean that was as-sociated with that session.
•  The ui:repeat element (from the JSF Facelets Tag Library; p. 26-35) inserts its nested ele-ment(s) once for each element in a collection. The collection is specified by the valueattribute’s EL expression, which must return an array, a List, a java.sql.ResultSetor an Object.
•  The ui:repeatelement’s varattribute creates a variable to which each item in the collection is assigned in sequence.

Self-Review Exercises
26.1	State whether each of the following is true or false. If false, explain why.
a)  A URL contains information that directs a browser to the resource that the user wishes to access.
b)  Host names are translated into IP addresses by web servers.
c)   The path in a URL typically specifies a resource’s exact location on the server.
d)  GETrequests and POSTrequests can both be used to send form data to a web server. e)   Browsers typically cache the server’s response to a POSTrequest.
f)   A tag library defines a set of elements that can be inserted into the XHTML markup. g)  You must create and manage the JavaBean objects that are used in your JSF web appli-
cations.
h)  When theFaces servlet encounters an ELexpression that accesses a bean property, it au-tomatically invokes the property’s set or get method based on the context in which the property is used.
i)   An h:panelGridelement organizes elements in an XHTML table.
j)   Anh:selectOneMenuelementistypicallyrenderedin awebpageasasetofradiobuttons. k)  The messages specified by an element’s requiredMessageand validatorMessageattri-
butes are displayed in an associated h:messageelement when validation fails.
26-40	Chapter26  JavaServer™FacesWebApps:Part1


l)   TheHTTP protocol provides information thatenables webservers to maintainstatein-formation regarding particular clients.
m) The ui:repeatelement inserts its nested element(s) once for each element in a collec-tion. The collection can be any IEnumerabletype.
26.2	Fill in the blanks in each of the following statements:
a)  Java multitier applications are typically implemented using the features of                    . b)  Computers that run                     software make resources available, such as web pages,
images, PDF documents and even objects that perform complex tasks.
c)   The JSF web-application framework’s	processes each requested JSF page. d)  A(n)	exposes its data as read/write, read-only or write-only properties.
e)   The	annotation indicates that the JSF framework should create and man-age instances of the class.
f)   A(n)	element contains the components with which a user interacts to pro-vide data, such as registration or login information, to a JSF app.
g)  A(n)	element triggers an action when clicked.
h)  A(n)	validator determines whether a field contains an acceptable number of characters.
i)   A(n)	validator determines whether a field contains a string that matches a specified regular expression pattern.
j)   In a(n)	, the browser re-requests the page and sends the values of the form’s fields to the server for processing.
k)  A(n)	bean is created when a session begins and exists throughout the entire session.


Answers to Self-Review Exercises
26.1	a) True. b) False. Host names are translated into IP addresses by DNS servers. c) False. The server translates a virtual directory into a real location, thus hiding a resource’s true location. d) True. e) False. Browsers typically do not cache the server’s response to a POSTrequest, because the next POSTmight not return the same result. f) True. g) False. The JSF framework creates and man-ages objects of your JavaBean classes for you. h) True. i) True. j) False. An h:selectOneRadioele-ment is rendered as a set of radio buttons. An h:selectOneMenuis rendered as a drop-down list. k) True. l) False. HTTP is a stateless protocol that does not provide information that enables web servers to maintain state information regarding particular clients—a separate tracking technology must be used. m) False. A ui:repeatelement can iterate over only arrays, Lists and ResultSets. For any other object, the elements in a ui:repeatelement will be inserted once.
26.2	a) Java Enterprise Edition (Java EE). b) web-server. c) Faces servlet. d) JavaBean. e) @Man-agedBean. f) h:form. g) h:commandButton. h) f:validateLength. i) f:validateRegex. j) postback. k) @SessionScoped.


Exercises
26.3	(Registration Form Modification) Modify the WebComponentsapplication to add function-ality to the Register button. When the user clicks Register, validate all input fields to make sure the user has filled out the form completely and entered a valid email address and phone number. Then, display a message indicating successful registration and show the user’s registration information at the bottom of the page. (This is similar to the example in Section 26.7.) You’ll need to create an appropriate bean class to store the user’s registration information.
Exercises   26-41


26.4	(Shopping Cart Application) Using the techniques you learned in Section 26.8.2, create a simple shopping cart application. Display a list of books as an h:selectOneRadioelement. When the user submits the form, store the user’s selection in a @SessionScopedmanaged bean. Allow the usertoreturntothelistofbooksandmakeadditionalselections.Providealinktoviewtheshopping cart. On the shopping cart page, display the list of selections the user made, the price of each book and the total of all books in the cart.
26.5	(GuestbookApplication) In Section 26.8.2, you used an @SessionScopedmanaged bean to maintain an individual user’s selections. JSF also provides the @ApplicationScopedannotation for managed beans that should be shared among all users of a JSF app. For this exercise, create an @Ap-plicationScopedGuestbookBeanthat maintains a Listof GuestbookEntryobjects. The application should provide a form, similar to the one in Fig. 26.16 that enables a user to enter a name, an email address and a message. When the user submits the form, the GuestbookBeanshould create a Guest-bookEntry object containing the submitted values and insert it at the beginning of the List of GuestbookEntryobjects—this places the most recent entry first. The GuestbookBeanshould also provide a read-only property that returns the Listof GuestbookEntryobjects. The page should use aui:repeatelementtodisplayall oftheitems intheListso theusercanseeallthe guestbook entries so far. [Note: In the next chapter, you’ll implement a similar exercise that stores this information in a database.]








This page intentionally left blank




JavaServer™FacesWeb Apps:Part2

27
Whatever is in any way beautiful hath its source of beauty in itself, and is complete in itself; praise forms no part of it.
—Marcus Aurelius Antoninus

There issomething in aface, An air,andapeculiargrace,Which boldest painters cannot trace.
—William Somerville

Cato said the best way to keep good acts in memory was to refresh them with new.
—Francis Bacon

Ineverforgetaface,but inyour case I’ll make an exception.
—Groucho Marx




Objectives Inthischapteryou’lllearn:
ÿ   ToaccessdatabasesfromJSF
applications.
ÿ   Thebasicprinciplesand advantagesofAjax
technology.
ÿ   TouseAjaxinaJSFwebapp.
27-2   Chapter27 JavaServer™FacesWebApps:Part2



27.1  Introduction
27.2  AccessingDatabasesinWebApps
27.2.1 SettingUptheDatabase
27.2.2 @ManagedBeanClassAddressBean 27.2.3 index.xhtmlFaceletsPage
27.2.4 addentry.xhtmlFaceletsPage

27.3  Ajax
27.4  AddingAjaxFunctionalitytothe ValidationApp


Summary | Self-Review Exercise | Answers to Self-Review Exercise | Exercises


27.1 Introduction
This chapter continues our discussion of JSF web application development with two ad-ditional examples. In the first, we present a simple address book app that retrieves data from and inserts data into a Java DB database. The app allows users to view the existing contacts in the address book and to add new contacts. In the second example, we add so-called AjaxcapabilitiestotheValidationexamplefromSection 26.7.Asyou’lllearn,Ajax improves application performance and responsiveness. This chapter’s examples, like those in Chapter 26, were developed in NetBeans.

27.2 Accessing Databases in Web Apps
Many web apps access databases to store and retrieve persistent data. In this section, we build an address book web app that uses a Java DB database display contacts from the ad-dress book on a web page and to store contacts in the address book. Figure 27.1 shows sample interactions with the AddressBookapp.

a)TableofaddressesdisplayedwhentheAddressBookappisfirstrequested


















Fig. 27.1  | SampleoutputsfromtheAddressBookapp.(Part1of2.)
27.2 AccessingDatabasesinWebApps	27-3


b)Formforaddinganentry
















c)TableofaddressesupdatedwiththenewentryaddedinPart(b)



















Fig. 27.1  | SampleoutputsfromtheAddressBookapp.(Part2of2.)

If the app’s database already contains addresses, the initial request to the app displays those addresses as shown in Fig. 27.1(a). We populated the database with the sample addresses shown. When the user clicks Add Entry, the addentry.xhtmlpage is displayed (Fig. 27.1(b)). When the user clicks Save Address, the form’s fields are validated. If the validations are successful, the address is added to the database and the app returns to the index.xhtmlpage to show the updated list of addresses (Fig. 27.1(c)). This example also introduces the h:dataTableelement for displaying data in tabular format.
27-4   Chapter27 JavaServer™FacesWebApps:Part2


The next several sections explain how to build the AddressBookapplication. First, we set up the database(Section 27.2.1). Next, we present class AddressBean(Section 27.2.2), which enables the app’s Facelets pages to interact with the database. Finally, we present the index.xthml(Section 27.2.3) and addentry.xhtml(Section 27.2.4) Facelets pages.

27.2.1 Setting Up the Database
You’ll now create a data source that enables the app to interact with the database. As part of this process, you’ll create the addressbookdatabase and populate it with sample data.

Open NetBeans and Ensure that Java DB and GlassFish Are Running
Before you can create the data source in NetBeans, the IDE must be open andthe Java DB and GlassFish servers must be running. Perform the following steps:
1. Open the NetBeans IDE.
2. On the Services tab, expand the Databases node then right clickJava DB. If Java DB is not already running the Start Server option will be enabled. In this case, Se-lect Start server to launch the Java DB server.
3.  On the Services tab, expand the Servers node then right click GlassFish Server 3. If GlassFish Server 3 is not already running the Start option will be enabled. In this case, Start server to launch GlassFish.
You may need to wait a few moments for the servers to begin executing.

Creating a Connection Pool
In web apps that receive many requests, it’s inefficient to create separate database connec-tions for each request. Instead, you should set up a connection pool to allow the server to managealimitednumberofdatabaseconnectionsandsharethemamongrequests.Tocre-ate a connection pool for this app, perform the following steps:
1.  On the Services tab, expand the Servers node, right click GlassFish Server 3 and select View Admin Console. This opens your default web browser and displays a web page for configuring the GlassFish server.
2.  Intheleftcolumnof thepageunder CommonTasks,expandtheResources node, then expand its JDBC node to show the JDBC Resources and Connection Pools nodes (Fig. 27.2).











Fig. 27.2  | Common Tasks windowintheGlassFishserverconfigurationwebpage.
27.2 AccessingDatabasesinWebApps	27-5


3.  Click the Connection Pools node to display the list of existing connection pools, then click the New… button above the list to create a new connection pool.
4.  In the New JDBC Connection Pool (Step 1 of 2) page (Fig. 27.3), specify Address-BookPoolfortheName, select javax.sql.DataSourcefor theResource Type and select JavaDB for the Database Vendor, then click Next.
5. In the New JDBC Connection Pool (Step 2 of 2) page (Fig. 27.4), scroll to the Ad-ditional Properties table and specify the following values (leave the other entries in the table unchanged):
•ConnectionAttributes: ;create=true(specifies that the database should be cre-ated when the connection pool is created)
•DatabaseName: addressbook(specifies the name of the database to create)
•Password: APP(specifies the password for the database—the User name is al-ready specified as APPin the Additional Properties table; you can specify any User name and Password you like)











Fig. 27.3  | New JDBC Connection Pool (Step 1 of 2) page.


















Fig. 27.4  | New JDBC Connection Pool (Step 2 of 2) page.
27-6   Chapter27 JavaServer™FacesWebApps:Part2


6. Click Finish to create the connection pool and return to the connection pools list.
7. ClickAddressBookPoolintheconnectionpoolslisttodisplaytheEditJDBCCon-nection Pool page, then clickPing in that pagetotest thedatabaseconnectionand ensure that you set it up correctly.

Creating a Data Source Name
Toconnect tothedatabasefrom theweb app, you must configurea data source name that will be used to locate the database. The data source name must be associated with the con-nection pool that manages the connections to the database. Perform the following steps:
1.  In the left column of the GlassFish configuration web page, click the JDBC Re-sources nodetodisplaythelistofdatasourcenames,thenclicktheNew… button to display the New JDBC Resource page (Fig. 27.5).
2. Specify jdbc/addressbookas the JNDI Name and select AddressBookPoolas the Pool Name. Then click OK. JNDI (Java Naming and Directory Interface) is a technology for locating application components (such as databases) in a distrib-uted application (such as a multitier web application). You can now close the GlassFish configuration web page.














Fig. 27.5  | New JDBC Resource page.

Populating the addressbookDatabase with Sample Data You’llnowpopulatethedatabasewithsampledatausingtheAddressBook.sqlSQLscript that’s provided with this chapter’s examples. To do so, you must create a connection to the new addressbookdatabase from NetBeans. Perform the following steps:
1. On the NetBeans Services tab, right click the Databases node and select New Connection….
2. In the New Database Connection dialog, specify localhostas the Host, 1527as thePort,addressbookastheDatabase,APPastheUserName andAPPasthePass-word, then select the Remember password checkbox and click OK.
The preceding steps create anew entryin theDatabases nodeshowingthedatabase’s URL (jdbc:derby://localhost:1527/addressbook). The database server that provides access to this database resides on the local machine and accepts connections on port 1527.
27.2 AccessingDatabasesinWebApps	27-7


NetBeans must be connected to the database to execute SQL statements. If NetBeans is already connected to the database, the icon	is displayed next to the database’s URL; otherwise, the icon	is displayed. In this case, right click the icon and select Connect….
To populate the database with sample data, perform the following steps:
1. Click the + next to jdbc:derby://localhost:1527/addressbooknode to ex-pand it, then expand the database’s APP node.
2.  Right click the Tables node and select Execute Command… to open a SQL Com-mand editor tab in NetBeans. In a text editor, open the file AddressBook.sql from this chapter’s examples folder, then copy the SQL statements and paste them into the SQL Command editor in NetBeans. Next, right click in the SQL Command editorandselect RunFile.ThiswillcreatetheAddressestablewiththe sample data in Fig. 27.1(a). [Note: The SQL script attempts to remove the data-base’s Addressestable if it already exists. If it doesn’t exist, you’ll receive an error message, but the table will still be created properly.] Expand the Tables node to seethe new table. Youcan view thetable’s data by right clicking ADDRESSES and selecting View Data…. Notice that we named the columns with all capital letters. We’ll be using these names in Section 27.2.3.

27.2.2 @ManagedBeanClass AddressBean
[Note: To build this app from scratch, use the techniques you learned in Chapter 26 to create a JSF web application named AddressBookand add a second Facelets page named addentry.xhtmlto the app.] Class AddressBean(Fig. 27.6) enables the AddressBookapp tointeract with the addressbookdatabase. The class provides properties that represent the first name, last name, street, city, state and zip code for an entry in the database. These are used by the addentry.xhtmlpage when adding a new entry to the database. In addition, this class declares a DataSource(lines 26–27) for interacting with the database method getAddresses(lines 102–130) for obtaining the list of addresses from the database and method save(lines 133–169) for saving a new address into the database. These methods use various JDBC techniques you learned in Chapter 18.

1  // AddressBean.java
2  // Bean for interacting with the AddressBook database 3  package addressbook;
4
5  import java.sql.Connection;
6  import java.sql.PreparedStatement; 7  import java.sql.ResultSet;
8  import java.sql.SQLException;
9  import javax.annotation.Resource;
10  import javax.faces.bean.ManagedBean; 11  import javax.sql.DataSource;
12  import javax.sql.rowset.CachedRowSet; 13
14  @ManagedBean( name="addressBean" ) 15  public class AddressBean
16  {

Fig. 27.6  | AddressBeaninteractswithadatabasetostoreandretrieveaddresses.(Part1of4.)
27-8   Chapter27 JavaServer™FacesWebApps:Part2


17	// instance variables that represent one address 18	private String firstName;
19	private String lastName; 20	private String street; 21	private String city;
22	private String state; 23	private String zipcode; 24
25	// allow the server to inject the DataSource 26	@Resource( name="jdbc/addressbook" )
27	DataSource dataSource; 28
29	// get the first name
30	public String getFirstName() 31	{
32	return firstName;
33	} // end method getFirstName 34
35	// set the first name
36	public void setFirstName( String firstName ) 37	{
38	this.firstName = firstName; 39     } // end method setFirstName 40
41	// get the last name
42	public String getLastName() 43	{
44	return lastName;
45	} // end method getLastName 46
47	// set the last name
48	public void setLastName( String lastName ) 49	{
50	this.lastName = lastName; 51     } // end method setLastName 52
53	// get the street
54	public String getStreet() 55	{
56	return street;
57	} // end method getStreet 58
59	// set the street
60	public void setStreet( String street ) 61	{
62	this.street = street; 63     } // end method setStreet 64
65	// get the city
66	public String getCity() 67	{
68	return city;
69	} // end method getCity

Fig. 27.6  | AddressBeaninteractswithadatabasetostoreandretrieveaddresses.(Part2of4.)
27.2 AccessingDatabasesinWebApps	27-9


70
71	// set the city
72	public void setCity( String city ) 73	{
74	this.city = city;
75	} // end method setCity 76
77	// get the state
78	public String getState() 79	{
80	return state;
81	} // end method getState 82
83	// set the state
84	public void setState( String state ) 85	{
86	this.state = state; 87     } // end method setState 88
89	// get the zipcode
90	public String getZipcode() 91	{
92	return zipcode;
93	} // end method getZipcode 94
95	// set the zipcode
96	public void setZipcode( String zipcode ) 97	{
98	this.zipcode = zipcode; 99     } // end method setZipcode 100
101	// return a ResultSet of entries
102	public ResultSet getAddresses() throws SQLException 103	{
104	// check whether dataSource was injected by the server 105	if ( dataSource == null )
106	throw new SQLException( "Unable to obtain DataSource" ); 107
108	// obtain a connection from the connection pool
109	Connection connection = dataSource.getConnection(); 110
111	// check whether connection was successful 112	if ( connection == null )
113	throw new SQLException( "Unable to connect to DataSource" ); 114
115	try 116	{
117	// create a PreparedStatement to insert a new address book entry 118	PreparedStatement getAddresses = connection.prepareStatement( 119              "SELECT FIRSTNAME, LASTNAME, STREET, CITY, STATE, ZIP " +
120	"FROM ADDRESSES ORDER BY LASTNAME, FIRSTNAME" ); 121
122	CachedRowSet rowSet = new com.sun.rowset.CachedRowSetImpl();

Fig. 27.6  | AddressBeaninteractswithadatabasetostoreandretrieveaddresses.(Part3of4.)
27-10	Chapter27  JavaServer™FacesWebApps:Part2


123	rowSet.populate( getAddresses.executeQuery() ); 124	return rowSet;
125	} // end try 126	finally
127	{
128	connection.close(); // return this connection to pool 129        } // end finally
130	} // end method getAddresses 131
132	// save a new address book entry
133	public String save() throws SQLException 134	{
135	// check whether dataSource was injected by the server 136	if ( dataSource == null )
137	throw new SQLException( "Unable to obtain DataSource" ); 138
139	// obtain a connection from the connection pool
140	Connection connection = dataSource.getConnection(); 141
142	// check whether connection was successful 143	if ( connection == null )
144	throw new SQLException( "Unable to connect to DataSource" ); 145
146	try 147	{
148	// create a PreparedStatement to insert a new address book entry 149	PreparedStatement addEntry =
150	connection.prepareStatement( "INSERT INTO ADDRESSES " + 151                 "(FIRSTNAME,LASTNAME,STREET,CITY,STATE,ZIP)" +
152	"VALUES ( ?, ?, ?, ?, ?, ? )" ); 153
154	// specify the PreparedStatement's arguments 155	addEntry.setString( 1, getFirstName() ); 156	addEntry.setString( 2, getLastName() );
157	addEntry.setString( 3, getStreet() ); 158	addEntry.setString( 4, getCity() ); 159	addEntry.setString( 5, getState() ); 160	addEntry.setString( 6, getZipcode() ); 161
162	addEntry.executeUpdate(); // insert the entry 163	return "index"; // go back to index.xhtml page 164        } // end try
165	finally 166	{
167	connection.close(); // return this connection to pool 168        } // end finally
169	} // end method save
170 } // end class AddressBean

Fig. 27.6  | AddressBeaninteractswithadatabasetostoreandretrieveaddresses.(Part4of4.)

Injecting the DataSourceinto Class AddressBean
A DataSource(package javax.sql) enables a web application to obtain a Connectionto a database. Lines 26–27 use annotation @Resourceto inject a DataSourceobject into the
27.2 AccessingDatabasesinWebApps	27-11


AddressBean. The annotation’s nameattribute specifies java/addressbook—the JNDI name from the Creating a Data Source Name step of Section 27.2.1. The @Resourceanno-tation enables the server (GlassFish in our case) to hide all the complex details of locating the connection pool that we set up for interacting with the addressbookdatabase. The server creates a DataSourcefor you that’s configured to use that connection pool and as-signs the DataSourceobject to the annotated variable declared at line 27. You can now trivially obtain a Connectionfor interacting with the database.

AddressBeanMethod getAddresses
Method getAddresses(lines 102–130) is called when the index.xhtmlpage is requested. The method returns a list of addresses for display in the page (Section 27.2.3). First, we checkwhethervariabledataSourceisnull(lines105–106),whichwouldindicatethatthe server was unable to create the DataSourceobject. If the DataSourcewas created success-fully, we use it to obtain a Connectionto the database (line 109). Next, we check whether variable connectionis null(lines 112–113), which would indicate that we were unable to connect. If the connection was successful, lines 118–124 get the set of addresses from the database and return them.
The PreparedStatementat lines 118–120 obtains all the addresses. Because database connections are a limited resources, you should use and close them quickly in your web apps. For this reason, we create a CachedRowSet and populate it with the ResultSet returned by the PreparedStatement’s executeQuerymethod (lines 122–123). We then return the CachedRowSet(a disconnected RowSet) for use in the index.xhtmlpage (line 124) and close the connectionobject (line 128) in the finallyblock.

AddressBeanMethod save
Method save(lines 133–169) stores a new address in the database (Section 27.2.4). This occurs when the user submits the addentry.xhtmlform—assuming the form’s fields val-idate successfully. As in getAddresses, we ensure that the DataSourceis not null, then obtain the Connectionobject and ensure that its not null. Lines 149–152 create a Pre-paredStatementfor inserting a new record in the database. Lines 155–160 specify the val-ues for each of the parameters in the PreparedStatement. Line 162 then executes the PreparedStatementto insert the new record. Line 163 returns the string "index", which as you’ll see in Section 27.2.4 causes the app to display the index.xhtmlpage again.

27.2.3 index.xhtmlFacelets Page
index.xhtml(Fig. 27.7) is the default web page for the AddressBookapp. When this page is requested, it obtains the list of addresses from the AddressBeanand displays them in tab-ularformatusinganh:dataTableelement.TheusercanclicktheAddEntry button(line17) to view the addentry.xhtmlpage. Recall that the default action for an h:commandButtonis to submit a form. In this case, we specify the button’s action attribute with the value "addentry".TheJSFframeworkassumesthisisapageintheapp,appends.xhtmlextension totheactionattribute’s valueand returns theaddentry.xhtmlpageto the client browser.

The h:dataTableElement
The h:dataTableelement (lines 19–46) inserts tabular data into a page. We discuss only the attributes and nested elements that we use here. For more details on this element, its attributes and other JSF tag library elements, visit bit.ly/JSF2TagLibraryReference.
27-12	Chapter27  JavaServer™FacesWebApps:Part2


1  <?xml version='1.0' encoding='UTF-8' ?> 2
3  <!-- index.html -->
4  <!-- Displays an h:dataTable of the addresses in the address book --> 5  <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
6	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"> 7  <html xmlns="http://www.w3.org/1999/xhtml"
8	xmlns:h="http://java.sun.com/jsf/html" 9	xmlns:f="http://java.sun.com/jsf/core">
10	<h:head>
11	<title>Address Book</title>
12	<h:outputStylesheet name="style.css" library="css"/> 13     </h:head>
14	<h:body>
15	<h1>Address Book</h1> 16	<h:form>
17	<p><h:commandButton value="Add Entry" action="addentry"/></p> 18         </h:form>
19	<h:dataTable value="#{addressBean.addresses}" var="address" 20            rowClasses="oddRows,evenRows" headerClass="header"
21	styleClass="table" cellpadding="5" cellspacing="0"> 22	<h:column>
23	<f:facet name="header">First Name</f:facet> 24	#{address.FIRSTNAME}
25	</h:column> 26	<h:column>
27	<f:facet name="header">Last Name</f:facet> 28	#{address.LASTNAME}
29	</h:column> 30	<h:column>
31	<f:facet name="header">Street</f:facet> 32	#{address.STREET}
33	</h:column> 34	<h:column>
35	<f:facet name="header">City</f:facet> 36	#{address.CITY}
37	</h:column> 38	<h:column>
39	<f:facet name="header">State</f:facet> 40	#{address.STATE}
41	</h:column> 42	<h:column>
43	<f:facet name="header">Zip code</f:facet> 44	#{address.ZIP}
45	</h:column> 46         </h:dataTable> 47     </h:body>
48  </html>

Fig. 27.7  | Displaysanh:dataTableoftheaddressesintheaddressbook.


The h:dataTableelement’s valueattribute (line 19) specifies the collection of data you wish to display. In this case, we use AddressBean’s addressesproperty, which calls
27.2 AccessingDatabasesinWebApps	27-13


the getAddresses method (Fig. 27.6). The collection returned by this method is a CachedRowSet, which is a type of ResultSet.
Theh:dataTableiteratesoveritsvaluecollection and, oneata time, assigns eachele-ment to the variable specified by the varattribute. This variable is used in the h:data-Table’snestedelementstoaccesseachelement ofthecollection—eachelementin this case represents one row (i.e., address) in the CachedRowSet.
The rowClassesattribute (line 20) is a space-separated list of CSS style class names that are used to style the rows in the tabular output. These style classes are defined in the app’s styles.cssfile in the csslibrary (which is inserted into the document at line 12). You can open this file to view the various style class definitions. We specified two style classes— all the odd numbered rows will have the first style (oddRows) and all the even numbered rows the second style (evenRows). You can specify as many styles as you like— they’ll be applied in the order you list them one row at a time until all the styles have been applied, then the h:DataTablewill automatically cycle through the styles again for the next set of rows. The columnClassesattribute works similarly for columns in the table.
The headerClassattribute (line 20) specifies the column header CSS style. Headers are defined with f:facetelements nested in h:columnelements (discussed momentarily). The footerClassattribute works similarly for column footers in the table.
The styleClassattribute (line 21) specifies the CSS styles for the entire table. The cellpaddingand cellspacingattributes (line 21) specify the number of pixels around each table cell’s contents and the number of pixels between table cells, respectively.

The h:columnElements
Lines 22–45 define the table’s columns with six nested h:columnelements. We focus here on the one at lines 22–25. When the CachedRowSetis populated in the AddressBeanclass, it automatically uses the database’s column names as property names for each row object in the CachedRowSet. Line 24 inserts into the column the FIRSTNAME property of the CachedRowSet’s current row. To display a column header above the column, you define an f:facetelement (line 23) and set its nameattribute to "header". Similarly, to display a column footer, use an f:facetwith its nameattribute set to "footer". The header is for-matted with the CSS style specified in the h:dataTable’s headerClassattribute (line 20). The remaining h:columnelements perform similar tasks for the current row’s LASTNAME, STREET, CITY, STATEand ZIPproperties.


27.2.4 addentry.xhtmlFacelets Page
When the user clicks Add Entry in the index.xhtmlpage, addentry.xhtml(Fig. 27.8) is displayed. Each h:inputTextin this page has its requiredattribute set to "true"and in-cludes a maxlengthattribute that restricts the user’s input to the maximum length of the corresponding database field. When the user clicks Save (lines 48–49), the input element’s values are validated and (if successful) assigned to the properties of the addressBeanman-aged object. In addition, the button specifies as its actionthe EL expression

#{addressBean.save}
which invokes the addressBeanobject’s savemethod to store the new address in the data-base. When you call a method with the actionattribute, if the method returns a value (in
27-14	Chapter27  JavaServer™FacesWebApps:Part2


this case, it returns the string "index"), that value is used to request the corresponding pagefromtheapp.Ifthemethoddoesnotreturnavalue,thecurrentpageisre-requested.

1  <?xml version='1.0' encoding='UTF-8' ?> 2
3  <!-- addentry.html -->
4  <!-- Form for adding an entry to an address book -->
5  <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 6	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"> 7  <html xmlns="http://www.w3.org/1999/xhtml"
8	xmlns:h="http://java.sun.com/jsf/html"> 9	<h:head>
10	<title>Address Book: Add Entry</title>
11	<h:outputStylesheet name="style.css" library="css"/> 12     </h:head>
13	<h:body>
14	<h1>Address Book: Add Entry</h1> 15	<h:form>
16	<h:panelGrid columns="3">
17	<h:outputText value="First name:"/>
18	<h:inputText id="firstNameInputText" required="true" 19                  requiredMessage="Please enter first name"
20	value="#{addressBean.firstName}" maxlength="30"/>
21	<h:message for="firstNameInputText" styleClass="error"/> 22	<h:outputText value="Last name:"/>
23	<h:inputText id="lastNameInputText" required="true" 24                  requiredMessage="Please enter last name"
25	value="#{addressBean.lastName}" maxlength="30"/>
26	<h:message for="lastNameInputText" styleClass="error"/> 27	<h:outputText value="Street:"/>
28	<h:inputText id="streetInputText" required="true"
29	requiredMessage="Please enter the street address" 30	value="#{addressBean.street}" maxlength="150"/> 31               <h:message for="streetInputText" styleClass="error"/> 32               <h:outputText value="City:"/>
33	<h:inputText id="cityInputText" required="true" 34                  requiredMessage="Please enter the city"
35	value="#{addressBean.city}" maxlength="30"/>
36	<h:message for="cityInputText" styleClass="error"/> 37	<h:outputText value="State:"/>
38	<h:inputText id="stateInputText" required="true" 39                  requiredMessage="Please enter state"
40	value="#{addressBean.state}" maxlength="2"/>
41	<h:message for="stateInputText" styleClass="error"/> 42	<h:outputText value="Zipcode:"/>
43	<h:inputText id="zipcodeInputText" required="true" 44                  requiredMessage="Please enter zipcode"
45	value="#{addressBean.zipcode}" maxlength="5"/>
46	<h:message for="zipcodeInputText" styleClass="error"/> 47            </h:panelGrid>
48	<h:commandButton value="Save Address" 49               action="#{addressBean.save}"/>
50	</h:form>
Fig. 27.8  | Formforaddinganentrytoanaddressbook.(Part1of2.)
27.3 Ajax	27-15


51	<h:outputLink value="index.xhtml">Return to Addresses</h:outputLink> 52     </h:body>
53  </html>

Fig. 27.8  | Formforaddinganentrytoanaddressbook.(Part2of2.)

27.3 Ajax
The term Ajax—short for Asynchronous JavaScript and XML—was coined by Jesse James Garrett of Adaptive Path, Inc., in 2005 to describe a range of technologies for de-veloping highly responsive, dynamic web applications. Ajax applications include Google Maps, Yahoo’s FlickR and many more. Ajax separates the user interaction portion of an ap-plication from its server interaction, enabling both to proceed in parallel. This enables Ajax web-based applications to perform at speeds approaching those of desktop applications, reducing or even eliminating the performance advantage that desktop applications have traditionally had over web-based applications. This has huge ramifications for the desktop applications industry—the applications platform of choice is shifting from the desktop to the web. Many people believe that the web—especially in the context of abundant open-source software, inexpensive computers and exploding Internet bandwidth—will create the next major growth phase for Internet companies.
Ajax makes asynchronous calls to the server to exchange small amounts of data with each call. Where normally the entire page would be submitted and reloaded with every user interaction on a web page, Ajax allows only the necessary portions of the page to reload, saving time and resources.
Ajax applications typically make use of client-side scripting technologies such as JavaScript to interact with page elements. They use the browser’s XMLHttpRequestobject to perform the asynchronous exchanges with the web server that make Ajax applications so responsive. This object can be used by most scripting languages to pass XML data from the client to the server and to process XML data sent from the server back to the client.
Using Ajax technologies in web applications can dramatically improve performance, but programming Ajax directly is complex and error prone. It requires page designers to know both scripting and markup languages. As you’ll soon see, JSF 2.0 makes adding Ajax capabilities to your web apps fairly simple.

Traditional Web Applications
Figure 27.9 presents the typical interactions between the client and the server in a tradi-tional web application, such as one that uses a user registration form. The user first fills in theform’sfields,thensubmitstheform(Fig. 27.9, Step1).Thebrowsergeneratesa request to the server, which receives the request and processes it (Step 2). The server generates and sends a response containing the exact page that the browser will render (Step 3), which causes the browser to load the new page (Step 4) and temporarily makes the browser win-dow blank. The client waits for the server to respond and reloads the entire page with the data from the response (Step 4). While such a synchronous request is being processed on the server, the user cannot interact with the client web page. If the user interacts with and submits another form, the process begins again (Steps 5–8).
This model was originally designed for a web of hypertext documents—what some people call the “brochure web.” As the web evolved into a full-scale applications platform,
27-16	Chapter27  JavaServer™FacesWebApps:Part2




2
Process request
Server




Request1


Generate response
3

Page2 Form

Form

6
Process request




Request2


Generate response
7

Page3 Form

Form



Page1	4	Page 1   Form                 reloading

Form
Client

Page2	8	Page	Page3 Form               reloading       Form

Form 5	Form


Fig. 27.9  | Classicwebapplicationreloadingthepageforeveryuserinteraction.

the model shown in Fig. 27.9 yielded “choppy” application performance. Every full-page refresh required users to reestablish their understanding of the full-page contents. Users began to demand a model that would yield the responsiveness of desktop applications.

Ajax Web Applications
Ajax applications add a layer between the client and the server to manage communication between the two (Fig. 27.10). When the user interacts with the page, the client creates an
Server




Process request1

Generate response

Process request2

Generate response




5  data
2	Uassyenrcihnrtoenraocutisorneqinuietisattes

data 7
pPaargteiaulpdate 4



Requestobject
Callbackfunction Responseprocessing
Client


1	Page1	8 Update    Form        Update
Form
6	3



Requestobject
Callbackfunction Responseprocessing



Partial
pageupdate

Userinteractioninitiates
asynchronousrequest


Fig. 27.10  | Ajax-enabledwebapplicationinteractingwiththeserverasynchronously.
27.4 AddingAjaxFunctionalitytotheValidationApp   27-17


XMLHttpRequestobject to manage a request (Step 1). This object sends the request to the server(Step2)andawaitstheresponse.Therequestsareasynchronous,sotheusercancon-tinue interacting with the application on the client side while the server processes the ear-lier request concurrently. Other user interactions could result in additional requests to the server (Steps 3 and 4). Once the server responds to the original request (Step 5), the XML-HttpRequestobject that issued the request calls a client-side function to process the data returned by the server. This function—known as a callback function—uses partial page updates (Step 6) to display the data in the existing web page without reloading the entire page. At the same time, the server may be responding to the second request (Step 7) and the client side may be starting to do another partial page update (Step 8). The callback function updates only a designated part of the page. Such partial page updates help make web applications more responsive, making them feel more like desktop applications. The web application does not load a new page while the user interacts with it.

27.4 Adding Ajax Functionality to the Validation App
TheexampleinthissectionaddsAjaxcapabilitiestotheValidationappthatwepresented inSection 26.7.Figure 27.11showsthesampleoutputsfromthe ValidationAjaxversion of the app that we’ll build momentarily. Part (a) shows the initial form that’s displayed when this app first executes. Parts (b) and (c) show validation errors that are displayed when the user submits an empty form and invalid data, respectively. Part (d) shows the page after the form is submitted successfully.
Asyoucansee, theapphasthesamefunctionalityastheversionin Section 26.7;how-ever, you’ll notice a couple of changes in how the app works. First, the URL displayed in the web browser always reads localhost:8080/ValidationAjax/, whereas the URL in the Section 26.7 changes after the form is submitted the first time. Also, in the non-Ajax version of the app, the page refreshes each time you press the Submit button. In the Ajax version, only the parts of the page that need updating actually change.


a)Submittingtheformbeforeenteringanyinformation














Fig. 27.11 | JSPthatdemonstratesvalidationofuserinput.(Part1of2.)
27-18	Chapter27  JavaServer™FacesWebApps:Part2



b)Errormessagesdisplayedaftersubmittingtheemptyform













c)Errormessagesdisplayedaftersubmittinginvalidinformation













d)Successfullysubmittedform
















Fig. 27.11 | JSPthatdemonstratesvalidationofuserinput.(Part2of2.)
27.4 AddingAjaxFunctionalitytotheValidationApp   27-19


index.xhtml
The changes required to add Ajax functionality to this app are minimal. All of the changes are in the index.xhtmlfile (Fig. 27.12) and are highlighted. The ValidationBeanclass is identical to the version in Section 26.7, so we don’t show it here.

1  <?xml version='1.0' encoding='UTF-8' ?> 2
3  <!-- index.xhtml -->
4  <!-- Validating user input -->
5  <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 6	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"> 7  <html xmlns="http://www.w3.org/1999/xhtml"
8	xmlns:h="http://java.sun.com/jsf/html" 9	xmlns:f="http://java.sun.com/jsf/core">
10	<h:head>
11	<title>Validating Form Data</title>
12	<h:outputStylesheet name="style.css" library="css"/> 13     </h:head>
14	<h:body>
15	<h:form>
16	<h1>Please fill out the following form:</h1>
17	<p>All fields are required and must contain valid information</p> 18	<h:panelGrid columns="3">
19	<h:outputText value="Name:"/>
20	<h:inputText id="nameInputText" required="true" 21                  requiredMessage="Please enter your name"
22	value="#{validationBean.name}"
23	validatorMessage="Name must be fewer than 30 characters"> 24	<f:validateLength maximum="30" />
25	</h:inputText>
26	<h:message id="nameMessage" for="nameInputText" 27                  styleClass="error"/>
28	<h:outputText value="E-mail:"/>
29	<h:inputText id="emailInputText" required="true"
30	requiredMessage="Please enter a valid e-mail address" 31	value="#{validationBean.email}"
32	validatorMessage="Invalid e-mail address format"> 33	<f:validateRegex pattern=
34	"\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*" /> 35               </h:inputText>
36	<h:message id="emailMessage" for="emailInputText" 37                  styleClass="error"/>
38	<h:outputText value="Phone:"/>
39	<h:inputText id="phoneInputText" required="true"
40	requiredMessage="Please enter a valid phone number" 41	value="#{validationBean.phone}"
42	validatorMessage="Invalid phone number format"> 43	<f:validateRegex pattern=
44	"((\(\d{3}\) ?)|(\d{3}-))?\d{3}-\d{4}" /> 45               </h:inputText>
46	<h:message id="phoneMessage" for="phoneInputText" 47                  styleClass="error"/>
48	</h:panelGrid>

Fig. 27.12 | AjaxenablingtheValidationapp.(Part1of2.)
27-20	Chapter27  JavaServer™FacesWebApps:Part2


49	<h:commandButton value="Submit">
50	<f:ajax execute="nameInputText emailInputText phoneInputText" 51                  render=
52	"nameMessage emailMessage phoneMessage resultOutputText"/> 53            </h:commandButton>
54	<h:outputText id="resultOutputText" escape="false" 55               value="#{validationBean.response}"/>
56	</h:form> 57     </h:body>
58  </html>

Fig. 27.12 | AjaxenablingtheValidationapp.(Part2of2.)

Adding idAttributes to Elements
The Facelets elements that will be submitted as part of an Ajax request and the Facelets elements that will participate in the partial page updates must have idattributes. The h:inputText elements in the original Validation example already had id attributes. These elements will be submitted to the server as part of an Ajax request. We’d like the h:Messageelements that show validation errors and the h:outputTextelement that dis-plays the result to be updated with partial page updates. For this reason, we’ve added id attributes to these elements.

f:ajaxElement
The other key change to this page is at lines 49–53 where the h:commandButtonnow con-tains an f:ajaxelement, which intercepts the form submission when the user clicks the button and makes an Ajax request instead. The f:ajaxelement’s executeattribute spec-ifies a space-separated list of element ids—the values of these elements are submitted as part of theAjax request. Thef:ajaxelement’s renderattribute specifies a space-separated list of element ids for the elements that should be updated via partial page updates.




Summary
Section 27.2.1 Setting Up the Database
•  A data source enables a web app to interact with a database.
•  In web apps that receive many requests, it’s inefficient to create separate database connections for each request. Instead, you should set up a connection pool (p. 27-4) to allow the server to man-age a limited number of database connections and share them among requests.
•  To connect to the database from a web app, you configure a data source name (p. 27-6) that will be used to locate the database. The data source name is associated with a connection pool that manages the connections to the database.
•  JNDI (Java Naming and Directory Interface) is a technology for locating application compo-nents (such as databases) in a distributed application (such as a multitier web application).

Section 27.2.2 @ManagedBeanClass AddressBean
•  A DataSource(p. 27-10; package javax.sql) enables a web application to obtain a Connection to a database.
Summary   27-21


•  The annotation @Resource(p. 27-10) can be used to inject a DataSourceobject into a managed bean. The annotation’s nameattribute specifies the JNDI name of a data source.
•  The @Resourceannotation enables the server to hide all the complex details of locating a connec-tion pool. The server creates a DataSourcefor you that’s configured to use a connection pool and assigns the DataSourceobject to the annotated variable. You can then trivially obtain a Connec-tionfor interacting with the database.
•  Database connections are limited resources, so you should use and close them quickly in your web apps. You can use a CachedRowSetto store the results of a query for use later.

Section 27.2.3 index.xhtmlFacelets Page
•  You can use an h:dataTableelement (p. 27-11) to display a collection of objects, such as the rows in a CachedRowSet, in tabular format.
•  If you specify an h:commandButton’s actionattribute (p. 27-11) with a value that is the name of a web page (without the file name extension), the JSF framework assumes this is a page in the app, appends.xhtmlextensiontotheactionattribute’svalueandreturnsthepagetotheclientbrowser.
•  The h:dataTableelement’s valueattribute (p. 27-12) specifies the collection of data you wish to display. The h:dataTableiterates over its valuecollection and, one at a time, assigns each el-ement to the variable specified by the var attribute (p. 27-13). This variable is used in the h:dataTable’s nested elements to access each element of the collection.
•  The h:dataTable rowClasses attribute (p. 27-13) is a space-separated list of CSS style class names that are used to style the rows in the tabular output. You can specify as many styles as you like—they’ll be applied in the order you list them one row at a time until all the styles have been applied, then the h:DataTablewill automatically cycle through the styles again for the next set of rows. The columnClassesattribute works similarly for columns in the table.
•  The headerClassattribute (p. 27-13) specifies the column header CSS style. The footerClass attribute (p. 27-13) works similarly for column footers in the table.
•  The styleClassattribute (p. 27-13) specifies the CSS styles for the entire table. The cellpad-dingand cellspacingattributes (p. 27-13) specify the number of pixels around each table cell’s contents and the number of pixels between table cells, respectively.
•  An h:columnelement (p. 27-13) defines a column in an h:dataTable.
•  To display a column header above a column, define an f:facetelement (p. 27-13) and set its nameattribute to "header". Similarly, to display a column footer, use an f:facetwith its name attribute set to "footer".

Section 27.2.4 addentry.xhtmlFacelets Page
•  You can call a managed bean’s methods in EL expressions.
•  When you call a managed bean method with the actionattribute, if the method returns a value, that value is used to request the corresponding page from the app. If the method does not return a value, the current page is re-requested.

Section 27.3 Ajax
•  The term Ajax—short for Asynchronous JavaScript and XML—was coined by Jesse James Gar-rett of Adaptive Path, Inc., in February 2005 to describe a range of technologies for developing highly responsive, dynamic web applications.
•  Ajax separates the user interaction portion of an application from its server interaction, enabling both to proceed asynchronously in parallel. This enables Ajax web-based applications to perform at speeds approaching those of desktop applications.
27-22	Chapter27  JavaServer™FacesWebApps:Part2


•  Ajax makes asynchronous calls to the server to exchange small amounts of data with each call. Where normally the entire page would be submitted and reloaded with every user interaction on a web page, Ajax reloads only the necessary portions of the page, saving time and resources.
•  Ajax applications typically make use of client-side scripting technologies such as JavaScript to in-teract with page elements. They use the browser’s XMLHttpRequestobject to perform the asyn-chronous exchanges with the web server that make Ajax applications so responsive.
•  In a traditional web application, the user fills in a form’s fields, then submits the form. The browser generates a request to the server, which receives the request and processes it. The server generatesandsendsaresponsecontainingtheexactpagethatthebrowserwillrender.Thebrows-er loads the new page, temporarily making the browser window blank. The client waits for the server to respond and reloads the entire page with the data from the response. While such a syn-chronous request is being processed on the server, the user cannot interact with the web page. This model yields “choppy” application performance.
•  In an Ajax application, when the user interacts with the page, the client creates an XMLHttpRe-questobject to manage a request. This object sends the request to the server and awaits the re-sponse. The requests are asynchronous, so the user can interact with the application on the client side while the server processes the earlier request concurrently. Other user interactions could re-sult in additional requests to the server. Once the server responds to the original request, the XM-LHttpRequest object that issued the request calls a client-side function to process the data returned by the server. This callback function uses partial page updates to display the data in the existingwebpagewithoutreloadingtheentirepage.Atthesametime,theservermayberespond-ing to the second request and the client side may be starting to do another partial page update.
•  Partial page updates help make web applications more responsive, making them feel more like desktop applications.

Section 27.4 Adding Ajax Functionality to the Validation App
•  The Facelets elements that will be submitted as part of an Ajax request and the Facelets elements that will participate in the partial page updates must have idattributes.
•  When you nest an f:ajaxelement (p. 27-20) in an h:commandButtonelement, the f:ajaxele-ment intercepts the form submission and makes an Ajax request instead.
•  The f:ajax element’s execute attribute (p. 27-20) specifies a space-separated list of element ids—the values of these elements are submitted as part of the Ajax request.
•  The f:ajaxelement’s renderattribute (p. 27-20) specifies a space-separated list of element ids for the elements that should be updated via partial page updates.

Self-Review Exercise
27.1	Fill in the blanks in each of the following statements. a)  Ajax is an acronym for	.
b)  A(n)	allows the server to manage a limited number of database connections and share them among requests.
c)   is a technology for locating application components (such as databases) in a distributed application.
d)  A(n)	enables a web application to obtain a Connectionto a database.
e)   The annotation	can be used to inject a DataSourceobject into a managed bean.
f)   A(n)	element displays a collection of objects in tabular format.
g)  An h:commandButton’s	attribute can specify the name of another page in the web app that should be returned to the client.
AnswerstoSelf-ReviewExercise	27-23


h)  To specify headers or footers for the columns in h:dataTables, use	elements nested with their nameattributes set to	and	, respectively.
i)		separates the user interaction portion of an application from its server inter-action, enabling both to proceed asynchronously in parallel.
j)		help make web applications more responsive, making them feel more like desktop applications.
k)  The f:ajax element’s	attribute specifies a space-separated list of element ids—the values of these elements are submitted as part of the Ajax request.
l)   The f:ajaxelement’s	attribute specifies a space-separated list of element ids for the elements that should be updated via partial page updates.

Answers to Self-Review Exercise
27.1	a) Asynchronous JavaScript and XML. b) connection pool. c) JNDI (Java Naming and Di-rectory Interface). d) DataSource. e) @Resource. f) h:dataTable. g) action. h) f:facet, "header", "footer". i) Ajax. j) partial page updates. k) execute. l) render.

Exercises
27.2	(GuestbookApplication) Create a JSF web app that allows users to sign and view a guest-book. Use the Guestbook database to store guestbook entries. [Note: A SQL script to create the Guestbookdatabase is provided in the examples directory for this chapter.] The Guestbookdatabase has a single table, Messages, which has four columns: Date, Name, Emailand Message. The database already containsa few sample entries.UsingtheAddressBookapp in Section 27.2as yourguide,cre-ate two Facelets pages and a managed bean. The index.xhtmlpage should show the Guestbook en-tries in tabular format and should provide a button to add an entry to the Guestbook. When the userclicksthisbutton,displayanaddentry.xhtmlpage.Provideh:inputTextelementsfortheuser’s name and email address, an h:inputTextareafor the message and a Sign Guestbook button to sub-mit the form. When the form is submitted, you should store in the Guestbookdatabase a new entry containing the user’s input and the date of the entry.
27.3	(AddressBookApplication Modification: Ajax) Combine the two Facelets pages of the Ad-dressBookapplication (Section 27.2) into a single page. Use Ajax capabilities to submit the new ad-dress book entry and to perform a partial page update that rerenders h:dataTablewith the updated list of addresses.
27.4	(AddressBookApplication Modification) Modify your solution to Exercise 27.3 to add a search capability that allows the user to search by last name. When the user presses the Search but-ton, use Ajax to submit the search key and perform a partial page update that displays only the matching addresses in the h:dataTable.








This page intentionally left blank
WebServicesinJava	28
A client is to me a mere unit, a factor in a problem.
—Sir Arthur Conan Doyle

They also serve who only stand and wait.
—John Milton

...ifthesimplestthingsofnature have a message that you understand, rejoice, for your soul is alive.
—Eleonora Duse

Protocol is everything. —Francoise Giuliani

Objectives Inthischapteryouwilllearn: ÿ   Whatawebserviceis.
ÿ   Howtopublishandconsume
webservicesinNetBeans.
ÿ   HowXML,JSON,XML-Based SimpleObjectAccess Protocol(SOAP)and RepresentationalState Transfer(REST)Architecture
enableJavawebservices.
ÿ   Howtocreateclientdesktop andwebapplicationsthat
consumewebservices.
ÿ   Howtousesessiontracking inwebservicestomaintain
clientstateinformation.
ÿ   Howtoconnecttodatabases
fromwebservices.
ÿ   Howtopassobjectsofuser-definedtypestoandreturn
themfromawebservice.
28-2   Chapter28 WebServicesinJava



28.1  Introduction
28.2  WebServiceBasics
28.3  SimpleObjectAccessProtocol(SOAP) 28.4  RepresentationalStateTransfer(REST) 28.5  JavaScriptObjectNotation(JSON) 28.6  PublishingandConsumingSOAP-
BasedWebServices
28.6.1 CreatingaWebApplicationProjectand AddingaWebServiceClassin
NetBeans
28.6.2DefiningtheWelcomeSOAPWeb
ServiceinNetBeans
28.6.3PublishingtheWelcomeSOAPWeb
ServicefromNetBeans
28.6.4TestingtheWelcomeSOAPWebService withGlassFishApplicationServer’s
TesterWebPage
28.6.5 DescribingaWebServicewiththeWeb
ServiceDescriptionLanguage(WSDL)
28.6.6CreatingaClienttoConsumethe
WelcomeSOAPWebService
28.6.7ConsumingtheWelcomeSOAPWeb
Service
28.7  PublishingandConsumingREST-BasedXMLWebServices
28.7.1 CreatingaREST-BasedXMLWeb
Service
28.7.2 ConsumingaREST-BasedXMLWeb
Service

28.8  PublishingandConsumingREST-BasedJSONWebServices
28.8.1 CreatingaREST-BasedJSONWeb
Service
28.8.2 ConsumingaREST-BasedJSONWeb
Service
28.9  SessionTrackinginaSOAPWeb Service
28.9.1CreatingaBlackjackWebService
28.9.2ConsumingtheBlackjackWeb
Service
28.10  ConsumingaDatabase-DrivenSOAP WebService
28.10.1CreatingtheReservationDatabase
28.10.2CreatingaWebApplicationtoInteract
withtheReservationService 28.11  EquationGenerator:ReturningUser-
DefinedTypes
28.11.1CreatingtheEquation-
GeneratorXMLWebService
28.11.2ConsumingtheEquation-
GeneratorXMLWebService
28.11.3CreatingtheEquation-
GeneratorJSONWebService
28.11.4ConsumingtheEquation-
GeneratorJSONWebService


Summary | Self-Review Exercises | Answers to Self-Review Exercises | Exercises



28.1 Introduction
This chapter introduces web services, which promote software portability and reusability in applications that operate over the Internet. A web service is a software component stored on one computer that can be accessed by an application (or other software compo-nent) on another computer over a network. Web services communicate using such tech-nologies as XML, JSON and HTTP. In this chapter, we use two Java APIs that facilitate web  services.  The  first,  JAX-WS,  is  based  on  the  Simple  Object  Access  Protocol (SOAP)—an XML-based protocol that allows web services and clients to communicate, even if the client and the web service are written in different languages. The second, JAX-RS, uses Representational State Transfer (REST)—a network architecture that uses the web’s traditional request/response mechanisms such as GETand POSTrequests. For more information on SOAP-based and REST-based web services, visit our Web Services Re-source Centers:

www.deitel.com/WebServices/ www.deitel.com/RESTWebServices/
28.1 Introduction	28-3


These Resource Centers include information about designing and implementing web ser-vicesin many languages andabout web servicesofferedbycompaniessuchasGoogle,Am-azon and eBay. You’ll also find many additional tools for publishing and consuming web services. For more information about REST-based Java web services, check out the Jersey project:

jersey.java.net/
The XML used in this chapter is created and manipulated for you by the APIs, so you need not know the details of XML to use it here. To learn more about XML, see Chapter 15and visit our XML Resource Center:

www.deitel.com/XML/


Business-to-Business Transactions
Rather than relying on proprietary applications, businesses can conduct transactions via standardized, widely available web services. This has important implications for business-to-business (B2B) transactions. Web services are platform and language independent, en-abling companies to collaborate without worrying about the compatibility of their hard-ware, software and communications technologies. Companies such as Amazon, Google, eBay,PayPalandmanyothersarebenefitingbymakingtheirserver-sideapplicationsavail-able to partners via web services.
By purchasing some web services and using other free ones that are relevant to their businesses,companiescanspendlesstimedevelopingapplicationsandcancreatenewones that are more innovative. E-businesses for example, can provide their customers with enhanced shopping experiences. Consider an online music store. The store’s website links toinformationaboutvariousCDs,enablinguserstopurchasethem,tolearnabouttheart-ists, to find more titles by those artists, to find other artists’ music they may enjoy, and more. The store’s website may also link to the site of a company that sells concert tickets and provides a web service that displays upcoming concert dates for various artists, allowing users to buy tickets. By consuming the concert-ticket web service on its site, the onlinemusic store can provide an additional service toits customers, increase its site traffic and perhaps earn a commission on concert-ticket sales. The company that sells concert tickets also benefits from the business relationship by selling more tickets and possibly by receiving revenue from the online music store for the use of the web service.
Any Java programmer with a knowledge of web services can write applications that “consume” web services. The resulting applications would invoke web services running on servers that could be thousands of miles away.


NetBeans
NetBeans is one of many tools that enable you to publish and/or consume web services. We demonstrate how to use NetBeans toimplement web services using the JAX-WS and JAX-RS APIs and how to invoke them from client applications. For each example, we provide the web service’s code, then present a client application that uses the web service. Our first examples build simple web services and client applications in NetBeans. Then we demon-strate web services that use more sophisticated features, such as manipulating databases
28-4   Chapter28 WebServicesinJava


with JDBC and manipulating class objects. For information on downloading and install-ing the NetBeans and the GlassFish server, see Section 26.1.

28.2 Web Service Basics
The machine on which a web service resides is referred to as a web service host. The client application sends a request over a network to the web service host, which processes the re-quest and returns a response over the network to the application. This kind of distributed computing benefits systems in various ways. For example, an application without direct access to data on another system might be able to retrieve the data via a web service. Sim-ilarly, an application lacking the processing power to perform specific computations could use a web service to take advantage of another system’s superior resources.
In Java, a web service is implemented as a class that resides on a server—it’s not part of the client application. Making a web service available to receive client requests is known as publishing a web service; using a web service from a client application is known as con-suming a web service.

28.3 Simple Object Access Protocol (SOAP)
The Simple Object Access Protocol (SOAP) is a platform-independent protocol that uses XML to interact with web services, typically over HTTP. You can view the SOAP speci-fication at www.w3.org/TR/soap/. Each request and response is packaged in a SOAP mes-sage—XML markup containing the information that a web service requires to process the message. SOAP messages are written in XML so that they’re computer readable, human readable and platform independent. Most firewalls—security barriers that restrict com-munication among networks—allow HTTP traffic to pass through, so that clients can browse the web by sending requests to and receiving responses from web servers. Thus, SOAP-based services can send and receive SOAP messages over HTTP connections with few limitations.
SOAP supports an extensive set of types, including the primitive types (e.g., int), as wellas DateTime,XmlNodeandothers. SOAPcan alsotransmit arraysof thesetypes. When a program invokes a method of a SOAP web service, the request and all relevant informa-tion are packaged in a SOAP message enclosed in a SOAP envelope and sent to the server on which the web service resides. When the web service receives this SOAP message, it parses the XML representingthemessage, then processesthemessage’s contents. The mes-sage specifies the method that the client wishes to execute and the arguments the client passed to that method. Next, the web service calls the method with the specified argu-ments (if any) and sends the response back to the client in another SOAP message. The client parses the response to retrieve the method’s result. In Section 28.6, you’ll build and consume a basic SOAP web service.

28.4 Representational State Transfer (REST)
RepresentationalStateTransfer(REST)referstoanarchitecturalstyleforimplementingweb services.SuchwebservicesareoftencalledRESTfulwebservices.ThoughRESTitselfisnot a standard, RESTful web services are implemented using web standards. Each method in a
28.5 JavaScriptObjectNotation(JSON)	28-5


RESTfulwebserviceisidentifiedbyauniqueURL.Thus,whentheserverreceivesarequest, it immediately knows what operation to perform. Such web services can be used in a pro-gram or directly from a web browser. The results of a particular operation may be cached locally by the browser when the service is invoked with a GETrequest. This can make subse-quent requests for the same operation faster by loading the result directly from the browser’s cache. Amazon’s web services (aws.amazon.com) are RESTful, as are many others.
RESTful web services are alternatives to those implemented with SOAP. Unlike SOAP-based web services, the request and response of REST services are not wrapped in envelopes. REST is also not limited to returning data in XML format. It can use a variety of formats, such as XML, JSON, HTML, plain text and media files. In Sections 28.7–– 28.8, you’ll build and consume basic RESTful web services.

28.5 JavaScript Object Notation (JSON)
JavaScriptObjectNotation (JSON)isanalternativetoXML forrepresentingdata.JSON is a text-based data-interchange format used to represent objects in JavaScript as collec-tions of name/value pairs represented as Strings. It’s commonly usedin Ajax applications. JSON is a simple format that makes objects easy to read, create and parse and, because it’s much less verbose than XML, allows programs to transmit data efficiently across the In-ternet. Each JSON object is represented as a list of property names and values contained in curly braces, in the following format:

{ propertyName1  : value1, propertyName2 : value2  }
Arrays are represented in JSON with square brackets in the following format: [ value1, value2, value3  ]
Each value in an array can be a string, a number, a JSON object, true, falseor null. To appreciate the simplicity of JSON data, examine this representation of an array of address-book entries:

[ { first: 'Cheryl', last: 'Black' }, { first: 'James', last: 'Blue' }, { first: 'Mike', last: 'Brown' },
{ first: 'Meg', last: 'Gold' } ]
Many programming languages now support the JSON data format. An extensive list of JSON libraries sorted by language can be found at www.json.org.

28.6 Publishing and Consuming SOAP-Based Web
Services
This section presents our first Java example of publishing (enabling for client access) and consuming (using) a web service. We begin with a SOAP-based web service.

28.6.1 Creating a Web Application Project and Adding a Web Service
Class in NetBeans
When you create a web service in NetBeans, you focus on its logic and let the IDE and server handle its infrastructure. First you create a Web Application project. NetBeans uses this project type for web services that are invoked by other applications.
28-6   Chapter28 WebServicesinJava


Creating a Web Application Project in NetBeans
To create a web application, perform the following steps:
1.  Select File > New Project… to open the New Project dialog.
2.  Select Java Web from the dialog’s Categories list, then select Web Application from the Projects list. Click Next >.
3.  Specify the name of your project (WelcomeSOAP) in the Project Name field and specify where you’d like to store the project in the Project Location field. You can click the Browse button to select the location. Click Next >.
4.  Select GlassFish Server 3 from the Server drop-down list and Java EE 6 Web from the Java EE Version drop-down list.
5.  Click Finish to create the project.
This creates a web application that will run in a web browser, similar to the projects used in Chapters 26 and 27.

Adding a Web Service Class to a Web Application Project Perform the following steps to add a web service class to the project:
1.  In the Projects tab in NetBeans, right click the WelcomeSOAP project’s node and select New > Web Service… to open the New Web Service dialog.
2.  Specify WelcomeSOAPin the Web Service Name field.
3.  Specify com.deitel.welcomesoapin the Package field. 4.  Click Finish to create the web service class.
TheIDEgeneratesasamplewebserviceclasswiththenamefromStep2inthepackagefrom Step 3. You can find this class in yourproject’s Web Services node. In this class, you’lldefine the methods that your web service makes available to client applications. When you eventu-allybuildyourapplication,theIDEwillgenerateothersupportingfilesforyourwebservice.

28.6.2 Defining the WelcomeSOAPWeb Service in NetBeans
Figure 28.1 contains the completed WelcomeSOAPServicecode (reformatted to match the coding conventions we use in this book). First we discuss this code, then show how to use the NetBeans web service design view to add the welcomemethod to the class.

1  // Fig. 28.1: WelcomeSOAP.java
2  // Web service that returns a welcome message via SOAP. 3  package com.deitel.welcomesoap;
4
5  import javax.jws.WebService; // program uses the annotation @WebService 6  import javax.jws.WebMethod; // program uses the annotation @WebMethod
7  import javax.jws.WebParam; // program uses the annotation @WebParam 8
9  @WebService() // annotates the class as a web service 10  public class WelcomeSOAP
11  {

Fig. 28.1  | WebservicethatreturnsawelcomemessageviaSOAP.(Part1of2.)
28.6 PublishingandConsumingSOAP-BasedWebServices	28-7


12	// WebMethod that returns welcome message 13	@WebMethod( operationName = "welcome" )
14	public String welcome( @WebParam( name = "name" ) String name ) 15	{
16	return "Welcome to JAX-WS web services with SOAP, " + name + "!"; 17     } // end method welcome
18  } // end class WelcomeSOAP

Fig. 28.1  | WebservicethatreturnsawelcomemessageviaSOAP.(Part2of2.)


Annotation importDeclarations
Lines 5–7 import the annotations used in this example. By default, each new web service class created with the JAX-WS APIs is a POJO (plain old Java object), so you do not need to extend a class or implement an interface to create a web service.

@WebServiceAnnotation
Line 9 contains a @WebServiceannotation (imported at line 5) which indicates that class WelcomeSOAPimplements a web service. The annotation is followed by parentheses that may contain optional annotation attributes. The optionalnameattribute specifiesthename of the service endpoint interface class that will be generated for the client. A service end-point interface (SEI) class (sometimes called a proxy class) is used to interact with the web service—a client application consumes the web service by invoking methods on the service endpoint interface object. The optional serviceNameattribute specifies the service name, which is also the name of the class that the client uses to obtain a service endpoint interface object. If the serviceNameattribute is not specified, the web service’s name is assumed to be the Java class name followed by the word Service. NetBeans places the @WebService annotation at the beginning of each new web service class you create. You can then add the nameand serviceNameproperties in the parentheses following the annotation.
When you deploy a web application containing a class that uses the @WebService annotation, the server (GlassFish in our case) recognizes that the class implements a web service and creates all the server-side artifacts that support the web service—that is, the framework that allows the web service to wait for client requests and respond to those requests once it’s deployed on an application server. Some popular open-source applica-tion servers that support Java web services include GlassFish (glassfish.dev.java.net), Apache Tomcat (tomcat.apache.org) and JBoss Application Server (www.jboss.com/ products/platforms/application).

WelcomeSOAPService’s welcomeMethod
The WelcomeSOAPservice has only one method, welcome(lines 13–17), which takes the user’s name as aStringand returns a Stringcontaining a welcome message. This method is tagged with the @WebMethodannotation to indicate that it can be called remotely. Any methods that are not tagged with @WebMethodare not accessible to clients that consume the web service. Such methods are typically utility methods within the web service class. The@WebMethodannotationusestheoperationNameattributetospecifythemethodname that is exposed to the web service’s client. If the operationNameis not specified, it’s set to the actual Java method’s name.
28-8   Chapter28 WebServicesinJava


Common Programming Error 28.1
Failing to expose a method as a web method by declaring it with the @WebMethodanno-tation prevents clients of the web service from accessing the method. There’s one excep-tion—if none of the class’s methods are declared with the @WebMethodannotation, then all the publicmethods of the class will be exposed as web methods.

Common Programming Error 28.2
Methods with the @WebMethodannotation cannot be static. An object of the web service class must exist for a client to access the service’s web methods.

Thenameparametertowelcomeisannotatedwiththe @WebParamannotation (line14). The optional @WebParamattribute nameindicates the parameter name that is exposed to the web service’s clients. If you don’t specify the name, the actual parameter name is used.

Completing the Web Service’s Code
NetBeans provides a web service design view in which you can define the method(s) and parameter(s) for your web services. To define the WelcomeSOAPclass’s welcomemethod, perform the following steps:
1.  In the project’s Web Services node, double click WelcomeSOAPto open the file WelcomeSOAPService.javain the code editor.
2. Click the Design button at the top of the code editor to show the web service de-sign view (Fig. 28.2).














Fig. 28.2  | Webservicedesignview.

3.  Click  the  Add  Operation…  button  to  display  the  Add  Operation…  dialog (Fig. 28.3).
4.  Specify the method name welcomein the Name field. The default Return Type (String) is correct for this example.
5.  Add the method’s nameparameter by clicking the Add button to the right of the Parameters tab then entering namein the Name field. The parameter’s default Type (String) is correct for this example.
28.6 PublishingandConsumingSOAP-BasedWebServices	28-9


















Fig. 28.3  | Addinganoperationtoawebservice.

6.  Click OK to create the welcomemethod. The design view should now appear as shown in Fig. 28.3.
7.  At the top of the design view, click the Source button to display the class’s source code and add the code line 18 of Fig. 28.1 to the body of method welcome.

















Fig. 28.4  | Webservicedesignviewafternewoperationisadded.

28.6.3 Publishing the WelcomeSOAPWeb Service from NetBeans
Now that you’ve created the WelcomeSOAPweb service class, you’ll use NetBeans to build and publish (that is, deploy) the web service so that clients can consume its services. Net-Beans handles all the details of building anddeploying a web service for you. This includes
28-10	Chapter28  WebServicesinJava


creating the framework required to support the web service. Right click the project name WelcomeSOAPin the Projects tab and select Deploy to build and deploy the web application to the GlassFish server.

28.6.4 Testing the WelcomeSOAPWeb Service with GlassFish
Application Server’s TesterWeb Page
Next, you’ll test the WelcomeSOAPweb service. We previously selected the GlassFish appli-cationservertoexecutethiswebapplication.Thisservercandynamicallycreateawebpage that allows you to test a web service’s methods from a web browser. To use this capability:
1. Expand the project’s Web Services in the NetBeans Projects tab.
2.  Right click the web service class name (WelcomeSOAP) and select Test Web Service.
The GlassFish application server builds the Testerweb page and loads it into your web browser. Figure 28.5 shows the Testerweb page for the WelcomeSOAPweb service. The web service’s name is automatically the class name followed by Service.















Fig. 28.5  | TesterwebpagecreatedbyGlassFishfortheWelcomeSOAPwebservice.

Once you’ve deployed the web service, you can also type the URL

http://localhost:8080/WelcomeSOAP/WelcomeSOAPService?Tester
inyourwebbrowsertoviewtheTesterwebpage.WelcomeSOAPServiceisthename(spec-ified in line 11 of Fig. 28.1) that clients use to access the web service.
To test WelcomeSOAP’s welcomeweb method, type your name in the text field to the rightofthewelcome buttonandclickthebutton toinvokethemethod.Figure 28.6shows the results of invoking WelcomeSOAP’s welcomemethod with the value Paul.

Application Server Note
You can access the web service only when the application server is running. If NetBeans launches GlassFish for you, it will automatically shut it down when you close NetBeans. To keep it up and running, you can launch it independently of NetBeans before you deploy or run  web  applications.  The  GlassFish  Quick  Start  Guide  at  glassfish.java.net/ downloads/quickstart/index.htmlshows how to manually start and stop the server.
28.6 PublishingandConsumingSOAP-BasedWebServices	28-11

















Fig. 28.6  | TestingWelcomeSOAP’swelcomemethod.

Testing the WelcomeSOAPWeb Service from Another Computer
If your computer is connected to a network and allows HTTP requests, then you can test the web service from another computer on the network by typing the following URL (where host is the hostname or IP address of the computer on which the web service is de-ployed) into a browser on another computer:

http://host:8080/WelcomeSOAP/WelcomeSOAPService?Tester

28.6.5 Describing a Web Service with the Web Service Description
Language (WSDL)
To consume a web service, a client must determine its functionality and how to use it. For this purpose, web services normally contain a service description. This is an XML docu-ment that conforms to the Web Service Description Language (WSDL)—an XML vo-cabulary that defines the methods a web service makes available and how clients interact with them. The WSDL document also specifies lower-level information that clients might need, such as the required formats for requests and responses.
WSDL documents help applications determine how to interact with the web services described in the documents. You do not need to understand WSDL to take advantage of it—the GlassFish application server generates a web service’s WSDL dynamically for you, and client tools can parse the WSDL to help create the client-side service endpoint inter-face class that a client uses to access the web service. Since GlassFish (and most other servers) generate the WSDL dynamically, clients always receive a deployed web service’s most up-to-date description. To access the WelcomeSOAPweb service, the client code will need the following WSDL URL:

http://localhost:8080/WelcomeSOAP/WelcomeSOAPService?WSDL

Accessing the WelcomeSOAPWeb Service’s WSDL from Another Computer Eventually, you’ll want clients on other computers to use your web service. Such clients need the web service’s WSDL, which they would access with the following URL:
28-12	Chapter28  WebServicesinJava


http://host:8080/WelcomeSOAP/WelcomeSOAPService?WSDL
where host is the hostname or IP address of the server that hosts the web service. As we discussed in Section 28.6.4, this works only if your computer allows HTTP connections from other computers—as is the case for publicly accessible web and application servers.

28.6.6 Creating a Client to Consume the WelcomeSOAPWeb Service
Now you’ll consume the web service from a client application. A web service client can be anytypeofapplicationorevenanotherwebservice.Youenableaclientapplicationtocon-sume a web service by adding a web service reference to the application.

Service Endpoint Interface (SEI)
An application that consumes a web service consists of an object of a service endpoint in-terface (SEI) class (sometimes called a proxy class) that’s used to interact with the web ser-vice and a client application that consumes the web service by invoking methods on the serviceendpointinterfaceobject.Theclientcodeinvokesmethodsontheserviceendpoint interface object, which handles the details of passing method arguments to and receiving return values from the web service on the client’s behalf. This communication can occur over a local network, over the Internet or even with a web service on the same computer. The web service performs thecorrespondingtask andreturnstheresultstotheserviceend-pointinterfaceobject,whichthenreturnstheresultstotheclientcode.Figure 28.7depicts the interactions among the client code, the SEI object and the web service. As you’ll soon see, NetBeans creates these service endpoint interface classes for you.
Requests to and responses from web services created with JAX-WS (one of many dif-ferent web service frameworks) are typically transmitted via SOAP. Any client capable of generatingandprocessingSOAPmessagescaninteractwithawebservice,regardlessofthe language in which the web service is written.
We now use NetBeans to create a client Java desktop GUI application. Then you’ll add a web service reference to the project so the client can access the web service. When you add the reference, the IDE creates and compiles the client-side artifacts—the frame-work of Java code that supports the client-side service endpoint interface class. The client then calls methods on an object of the service endpoint interface class, which uses the rest of the artifacts to interact with the web service.


Client	Server


Client
code


Proxy
class
SEI
object


Internet


Web
service



Fig. 28.7  | Interactionbetweenawebserviceclientandawebservice.

Creating a Desktop Application Project in NetBeans
Before performing the steps in this section, ensure that the WelcomeSOAPweb service has been deployed and that the GlassFish application server is running (see Section 28.6.3). Perform the following steps to create a client Java desktop application in NetBeans:
28.6 PublishingandConsumingSOAP-BasedWebServices	28-13


1.  Select File > New Project… to open the New Project dialog.
2.  Select Java from the Categories list and Java Application from the Projects list, then click Next >.
3.  Specify the name WelcomeSOAPClientin the Project Name field and uncheck the Create Main Class checkbox. Later, you’ll add a subclass of JFramethat contains a mainmethod.
4.  Click Finish to create the project.

Step 2: Adding a Web Service Reference to an Application
Next, you’ll add a web service reference to your application so that it can interact with the WelcomeSOAPweb service. To add a web service reference, perform the following steps.
1.  Right click the project name (WelcomeSOAPClient) in the NetBeans Projects tab and select New > Web Service Client… from the pop-up menu to display the New Web Service Client dialog.
2.  IntheWSDLURL field,specifytheURLhttp://localhost:8080/WelcomeSOAP/ WelcomeSOAPService?WSDL(Fig. 28.8).ThisURLtellstheIDEwheretofindthe web service’s WSDL description. [Note: If the GlassFish application server is located on a different computer, replace localhost with the hostname or IP address of that computer.] The IDE uses this WSDL description to generate the client-side artifacts that compose and support the service endpoint interface.


















Fig. 28.8  | New Web Service Client dialog.

3.  Fortheotheroptions,leavethedefaultsettings,thenclickFinish tocreatetheweb service reference and dismiss the New Web Service Client dialog.
In the NetBeans Projects tab, the WelcomeSOAPClientproject now contains a Web Service References folder with the WelcomeSOAPweb service’s service endpoint interface (Fig. 28.9). The service endpoint interface’s name is listed as WelcomeSOAPService.
28-14	Chapter28  WebServicesinJava








Generatedartifacts





Webserviceendpoint





Fig. 28.9  | NetBeansProject tabafteraddingawebservicereferencetotheproject.


Whenyouspecifythewebserviceyouwanttoconsume,NetBeansaccessesandcopies its WSDL information to a file in your project (named WelcomeSOAPService.wsdlin this example). You can view this file by double clicking the WelcomeSOAPServicenode in the project’s Web Service References folder. If the web service changes, the client-side artifacts and the client’s copy of the WSDL file can be regenerated by right clicking the Welcome-SOAPServicenode shown in Fig. 28.9 and selecting Refresh…. Figure 28.9 also shows the IDE-generated client-side artifacts, which appear in the Generated Sources (jax-ws) folder.


28.6.7 Consuming the WelcomeSOAPWeb Service
For this example, we use a GUI application to interact with the WelcomeSOAPweb service. To build the client application’s GUI, add a subclass of JFrameto the project by perform-ing the following steps:
1.  Right click the project name (WelcomeSOAPClient) in the NetBeans Project tab and select New > JFrame Form… to display the New JFrame Form dialog.
2.  Specify WelcomeSOAPClientJFramein the Class Name field.
3.  Specify com.deitel.welcomesoapclientin the Package field. 4.  Click Finish to close the New JFrame Form dialog.
Next, use the NetBeans GUI design tools to build the GUI shown in the sample screen captures at the end of Fig. 28.10. The GUI consists of a Label, a Text Field and a Button.
The application in Fig. 28.10 uses the WelcomeSOAPweb service to display a welcome message to the user. To save space, we do not show the NetBeans autogenerated initCom-ponentsmethod, which contains the code that creates the GUI components, positions them and registers their event handlers. To view the complete source code, open the Wel-
28.6 PublishingandConsumingSOAP-BasedWebServices	28-15


comeSOAPClientJFrame.javafile in this example’s folder under src\java\com\deitel\ welcomesoapclient. NetBeans places the GUI component instance-variable declarations at the end of the class (lines 114–116). Java allows instance variables to be declared any-where in a class’s body as long as they’re placed outside the class’s methods. We continue to declare our own instance variables at the top of the class.



1  // Fig. 28.10: WelcomeSOAPClientJFrame.java
2  // Client desktop application for the WelcomeSOAP web service. 3  package com.deitel.welcomesoapclient;
4
5  import com.deitel.welcomesoap.WelcomeSOAP;
6  import com.deitel.welcomesoap.WelcomeSOAPService; 7  import javax.swing.JOptionPane;
8
9  public class WelcomeSOAPClientJFrame extends javax.swing.JFrame 10  {
11	// references the service endpoint interface object (i.e., the proxy) 12	private WelcomeSOAP welcomeSOAPProxy;
13
14	// no-argument constructor
15	public WelcomeSOAPClientJFrame() 16	{
17	initComponents(); 18
19	try 20	{
21	// create the objects for accessing the WelcomeSOAP web service 22	WelcomeSOAPService service = new WelcomeSOAPService();
23	welcomeSOAPProxy = service.getWelcomeSOAPPort(); 24         } // end try
25	catch ( Exception exception ) 26	{
27	exception.printStackTrace(); 28	System.exit( 1 );
29	} // end catch
30	} // end WelcomeSOAPClientJFrame constructor 31
32	// The initComponents method is autogenerated by NetBeans and is called 33	// from the constructor to initialize the GUI. This method is not shown 34	// here to save space. Open WelcomeSOAPClientJFrame.java in this
35	// example's folder to view the complete generated code. 36
87	// call the web service with the supplied name and display the message 88	private void submitJButtonActionPerformed(
89	java.awt.event.ActionEvent evt ) 90     {
91	String name = nameJTextField.getText(); // get name from JTextField 92
93	// retrieve the welcome string from the web service
94	String message = welcomeSOAPProxy.welcome( name );

Fig. 28.10 | ClientdesktopapplicationfortheWelcomeSOAPwebservice.(Part1of2.)
28-16	Chapter28  WebServicesinJava


95	JOptionPane.showMessageDialog( this, message, 96            "Welcome", JOptionPane.INFORMATION_MESSAGE ); 97     } // end method submitJButtonActionPerformed
98
99	// main method begins execution
100	public static void main( String args[] ) 101	{
102	java.awt.EventQueue.invokeLater( 103           new Runnable()
104	{
105	public void run() 106	{
107	new WelcomeSOAPClientJFrame().setVisible( true ); 108              } // end method run
109	} // end anonymous inner class
110	); // end call to java.awt.EventQueue.invokeLater 111     } // end main
112
113	// Variables declaration - do not modify 114	private javax.swing.JLabel nameJLabel;
115	private javax.swing.JTextField nameJTextField; 116	private javax.swing.JButton submitJButton; 117	// End of variables declaration
118 } // end class WelcomeSOAPClientJFrame









Fig. 28.10 | ClientdesktopapplicationfortheWelcomeSOAPwebservice.(Part2of2.)

Lines 5–6 import the classes WelcomeSOAPand WelcomeSOAPServicethat enable the client application to interact with the web service. Notice that we do not have importdec-larations for most of the GUI components used in this example. When you create a GUI in NetBeans, it uses fully qualified class names (such as javax.swing.JFramein line 9), so importdeclarations are unnecessary.
Line 12 declares a variable of type WelcomeSOAPthat will refer to the service endpoint interface object. Line 22 in the constructor creates an object of type WelcomeSOAPService. Line 23 uses this object’s getWelcomeSOAPPortmethod to obtain the WelcomeSOAPservice endpoint interface object that the application uses to invoke the web service’s methods.
TheeventhandlerfortheSubmit button(lines88–97)firstretrievesthenametheuser entered from nameJTextField. It then calls the welcomemethod on the service endpoint interfaceobject(line94)toretrievethewelcomemessagefromthewebservice.Thisobject communicates with the web service on the client’s behalf. Once the message has been retrieved, lines 95–96 display it in a message box by calling JOptionPane’s showMessage-Dialogmethod.
28.7 PublishingandConsumingREST-BasedXMLWebServices   28-17

28.7 Publishing and Consuming REST-Based XML Web
Services
The previous section used a service endpoint interface (proxy) object to pass data to and from a Java web service using the SOAP protocol. Now, we access a Java web service using theRESTarchitecture.WerecreatetheWelcomeSOAPexampletoreturndatainplainXML format. You can create a Web Application project as you did in Section 28.6.1 to begin. Name the project WelcomeRESTXML.

28.7.1 Creating a REST-Based XML Web Service
NetBeans provides various templates for creating RESTful web services, including ones that can interact with databases on the client’s behalf. In this chapter, we focus on simple RESTful web services. To create a RESTful web service:
1. Right-click the WelcomeRESTXML node in the Projects tab, and select New > Other… to display the New File dialog.
2.  SelectWeb Services underCategories,thenselectRESTful Web Services from Pat-terns and click Next >.
3. Under Select Pattern, ensure Simple Root Resource is selected, and click Next >.
4. Set the Resource Package to com.deitel.welcomerestxml, the Path to welcome andtheClass Name toWelcomeRESTXMLResource.LeavetheMIME Type andRep-resentation Class set to application/xmland java.lang.String, respectively. The correct configuration is shown in Fig. 28.11.
5.  Click Finish to create the web service.





















Fig. 28.11 | CreatingtheWelcomeRESTXMLRESTfulwebservice.
28-18	Chapter28  WebServicesinJava


NetBeans generates the class and sets up the proper annotations. The class is placed in the project’s RESTful Web Services folder. The code for the completed service is shown in Fig. 28.12. You’ll notice that the completed code does not include some of the code generated by NetBeans. We removed the pieces that were unnecessary for this simple web service. The autogenerated putXmlmethod is not necessary, because this example does not modify stateon the server. The UriInfoinstance variableis not needed, because we donot use HTTP query parameters. We also removed the autogenerated constructor, because we have no code to place in it.

1  // Fig. 28.12: WelcomeRESTXMLResource.java
2  // REST web service that returns a welcome message as XML. 3  package com.deitel.welcomerestxml;
4
5  import java.io.StringWriter;
6  import javax.ws.rs.GET; // annotation to indicate method uses HTTP GET 7  import javax.ws.rs.Path; // annotation to specify path of resource
8  import javax.ws.rs.PathParam; // annotation to get parameters from URI 9  import javax.ws.rs.Produces; // annotation to specify type of data
10  import javax.xml.bind.JAXB; // utility class for common JAXB operations 11
12  @Path( "welcome" ) // URI used to access the resource 13  public class WelcomeRESTXMLResource
14  {
15	// retrieve welcome message
16	@GET // handles HTTP GET requests
17	@Path( "{name}" ) // URI component containing parameter
18	@Produces( "application/xml" ) // response formatted as XML 19	public String getXml( @PathParam( "name" ) String name )
20	{
21	String message = "Welcome to JAX-RS web services with REST and " + 22            "XML, " + name + "!"; // our welcome message
23	StringWriter writer = new StringWriter();
24	JAXB.marshal( message, writer ); // marshal String as XML 25	return writer.toString(); // return XML as String
26	} // end method getXml
27  } // end class WelcomeRESTXMLResource

Fig. 28.12 | RESTwebservicethatreturnsawelcomemessageasXML.

Lines 6–9 contain the imports for the JAX-RS annotations that help define the RESTful web service. The @Pathannotation on the WelcomeRESTXMLResourceclass (line 12) indicates the URI for accessing the web service. This URI is appended to the web application project’s URL to invoke the service. Methods of the class can also use the @Pathannotation (line 17). Parts of the path specified in curly braces indicate parame-ters—they’re placeholders for values that are passed to the web service as part of the path. The base path for the service is the project’s resourcesdirectory. For example, to get a welcome message for someone named John, the complete URL is

http://localhost:8080/WelcomeRESTXML/resources/welcome/John
Arguments in a URL can be used as arguments to a web service method. To do so, you bind the parameters specified in the @Pathspecification to parameters of the web service
28.7 PublishingandConsumingREST-BasedXMLWebServices   28-19


method with the @PathParamannotation, as shown in line 19. When the request is re-ceived, the server passes theargument(s)inthe URL to theappropriateparameter(s) in the web service method.
The @GETannotation denotes that this method is accessed via an HTTP GETrequest. The putXmlmethod the IDE created for us had an @PUTannotation, which indicates that the method is accessed using the HTTP PUTmethod. Similar annotations exist for HTTP POST, DELETEand HEADrequests.
The @Producesannotation denotes the content type returned to the client. It’s pos-sibletohavemultiple methods withthesame HTTPmethodandpathbut different@Pro-ducesannotations, and JAX-RS will call the method matching the content type requested by the client. Standard Java method overloading rules apply, so such methods must have different names. The @Consumesannotation for the autogenerated putXmlmethod (which we deleted) restricts the content type that the web service will accept from a PUToperation. Line 10 imports the JAXBclass from package javax.xml.bind. JAXB (Java Architec-
ture for XML Binding) is a set of classes for converting POJOs to and from XML. There are many related classes in the same package that implement the serializations we perform, but the JAXBclass contains easy-to-use wrappers for common operations. After creating the welcome message (lines 21–22), we create a StringWriter(line 23) to which JAXB will output the XML. Line 24 calls the JAXBclass’s staticmethod marshalto convert the Stringcontaining our message to XML format. Line 25 calls StringWriter’s toString method to retrieve the XML text to return to the client.

Testing RESTful Web Services
Section 28.6.4 demonstratedtesting a SOAPservice using GlassFish’s Testerpage. Glass-Fish does not provide a testing facility for RESTful services, but NetBeans automatically generates a test page that can be accessed by right clicking the WelcomeRESTXML node in theProjects tab andselectingTest RESTful Web Services. This willcompileanddeploythe web service, if you have not yet done so, then open the test page. Your browser will prob-ably require you to acknowledge a potential security issue before allowing the test page to perform its tasks. The test page is loaded from your computer’s local file system, not the GlassFish server. Browsers consider the local file system and GlassFish as two different servers, even though they’re both on the local computer. For security reasons, browsers do not allow so-called cross-site scripting in which a web page tries to interact with a server other than the one that served the page.
On the test page (Fig. 28.13), expand the welcome element in the left column and select {name}. The form on the right side of the page allows you to choose the MIME type of the data (application/xmlby default) and lets you enter the nameparameter’s value. Click the Test button to invoke the web service and display the returned XML.

Error-Prevention Tip 28.1
At the time of this writing, the test page did not work in Google’s Chrome web browser. If this is your default web browser, copy the test page’s URL from Chrome’s address field and paste it into another web browser’s address field. Fig. 28.13 shows the test page in Mozilla Firefox.

The test page shows several tabs containing the results and various other information. The Raw View tab shows the actual XML response. The Headers tab shows the HTTP
28-20	Chapter28  WebServicesinJava
























Fig. 28.13 | TestpagefortheWelcomeRESTXMLwebservice.

headers returnedby the server. The Http Monitor tab shows a log of the HTTPtransactions that took place to complete the request and response. The Sub-Resource tab shows the actual URL that was used to invoke the web service

http://localhost:8080/WelcomeRESTXML/resources/welcome/Paul
You can enter this URL in any browser on your computer to invoke the web service with the value Paul.
The test page provides its functionality by reading a WADL file from the server—you can see the URL of the WADL file in the upper-left corner of the test page. WADL (Web Application Description Language) has similar design goals to WSDL, but describes RESTful services instead of SOAP services.

28.7.2 Consuming a REST-Based XML Web Service
As we did with SOAP, we create a Java application that retrieves the welcome message from the web service and displays it to the user. First, create a Java application with the name WelcomeRESTXMLClient. RESTful web services do not require web service referenc-es, so you can begin building the GUI immediately by creating a JFrame form called WelcomeRESTXMLClientJFrameand placing it in the com.deitel.welcomerestxmlclient package. The GUI is identical to the one in Fig. 28.10, including the names of the GUI elements. To create the GUI quickly, you can simply copy and paste the GUI from the Design view of the WelcomeSOAPClientJFrameclass and paste it into the Design view of the WelcomeRESTXMLClientJFrameclass. Figure 28.14 contains the completed code.
28.7 PublishingandConsumingREST-BasedXMLWebServices   28-21


1  // Fig. 28.14: WelcomeRESTXMLClientJFrame.java
2  // Client that consumes the WelcomeRESTXML service. 3  package com.deitel.welcomerestxmlclient;
4
5  import javax.swing.JOptionPane;
6  import javax.xml.bind.JAXB; // utility class for common JAXB operations 7
8  public class WelcomeRESTXMLClientJFrame extends javax.swing.JFrame 9  {
10	// no-argument constructor
11	public WelcomeRESTXMLClientJFrame() 12	{
13	initComponents(); 14     } // end constructor 15
16	// The initComponents method is autogenerated by NetBeans and is called 17	// from the constructor to initialize the GUI. This method is not shown 18	// here to save space. Open WelcomeRESTXMLClientJFrame.java in this
19	// example's folder to view the complete generated code. 20
71	// call the web service with the supplied name and display the message 72	private void submitJButtonActionPerformed(
73	java.awt.event.ActionEvent evt) 74     {
75	String name = nameJTextField.getText(); // get name from JTextField 76
77	// the URL for the REST service 78	String url =
79	"http://localhost:8080/WelcomeRESTXML/resources/welcome/" + name; 80
81	// read from URL and convert from XML to Java String 82	String message = JAXB.unmarshal( url, String.class ); 83
84	// display the message to the user
85	JOptionPane.showMessageDialog( this, message,
86	"Welcome", JOptionPane.INFORMATION_MESSAGE ); 87     } // end method submitJButtonActionPerformed
88
89	// main method begins execution
90	public static void main( String args[] ) 91	{
92	java.awt.EventQueue.invokeLater( 93            new Runnable()
94	{
95	public void run() 96	{
97	new WelcomeRESTXMLClientJFrame().setVisible( true ); 98               } // end method run
99	} // end anonymous inner class
100	); // end call to java.awt.EventQueue.invokeLater 101     } // end main
102

Fig. 28.14 | ClientthatconsumestheWelcomeRESTXMLservice.(Part1of2.)
28-22	Chapter28  WebServicesinJava


103	// Variables declaration - do not modify 104	private javax.swing.JLabel nameJLabel;
105	private javax.swing.JTextField nameJTextField; 106	private javax.swing.JButton submitJButton; 107	// End of variables declaration
108 } // end class WelcomeRESTXMLClientJFrame







Fig. 28.14 | ClientthatconsumestheWelcomeRESTXMLservice.(Part2of2.)

You can access a RESTful web service with classes from Java API. As in the RESTful XML web service, we use the JAXB library. The JAXB class (imported on line 6) has a staticunmarshalmethod that takes as arguments a file name or URL as a String, and a Class<T>object indicating the Java class to which the XML will be converted (line 82). In this example, the XML contains a Stringobject, so we use the Java compiler shortcut String.classto create the Class<String>object we need as the second argument. The Stringreturned from the call to the unmarshalmethod is then displayed to the user via JOptionPane’s showMessageDialogmethod (lines 85–86), as it was with the SOAP ser-vice. The URL used in this example to extract data from the web service matches the URL used by the test page.

28.8 Publishing and Consuming REST-Based JSON Web
Services
While XML was designed primarily as a document interchange format, JSON is designed as a data exchange format. Data structures in most programming languages do not map directly to XML constructs—for example, the distinction between elements and attributes isnotpresentin programming-languagedatastructures. JSONis asubset oftheJavaScript programming language, and its components—objects, arrays, strings, numbers—can be easily mapped to constructs in Java and other programming languages.
The standard Java libraries do not currently provide capabilities for working with JSON, but there are many open-source JSON libraries for Java and other languages; you can find a list of them at json.org. We chose the Gson library from code.google.com/ p/google-gson/, which provides a simple way to convert POJOs to and from JSON.

28.8.1 Creating a REST-Based JSON Web Service
To begin, create a WelcomeRESTJSON web application, then create the web service by following  the  steps  in  Section 28.7.1.  In  Step  4,  change  the  Resource  Package  to com.deitel.welcomerestjson, the Class Name to WelcomeRESTJSONResourceand the MIME Type to application/json. Additionally, you must download the Gson library’s
28.8 PublishingandConsumingREST-BasedJSONWebServices   28-23


JAR file, then add it to the project as a library. To do so, right click your project’s Libraries folder, select Add JAR/Folder… locate the downloaded Gson JAR file and click Open. The complete code for the service is shown in Fig. 28.15.

1  // Fig. 28.15: WelcomeRESTJSONResource.java
2  // REST web service that returns a welcome message as JSON. 3  package com.deitel.welcomerestjson;
4
5  import com.google.gson.Gson; // converts POJO to JSON and back again
6  import javax.ws.rs.GET; // annotation to indicate method uses HTTP GET 7  import javax.ws.rs.Path; // annotation to specify path of resource
8  import javax.ws.rs.PathParam; // annotation to get parameters from URI 9  import javax.ws.rs.Produces; // annotation to specify type of data
10
11  @Path( "welcome" ) // path used to access the resource 12  public class WelcomeRESTJSONResource
13  {
14	// retrieve welcome message
15	@GET // handles HTTP GET requests
16	@Path( "{name}" ) // takes name as a path parameter
17	@Produces( "application/json" ) // response formatted as JSON 18	public String getJson( @PathParam( "name" ) String name )
19	{
20	// add welcome message to field of TextMessage object
21	TextMessage message = new TextMessage(); // create wrapper object 22	message.setMessage( String.format( "%s, %s!",
23	"Welcome to JAX-RS web services with REST and JSON", name ) ); 24
25	return new Gson().toJson( message ); // return JSON-wrapped message 26     } // end method getJson
27  } // end class WelcomeRESTJSONResource 28
29  // private class that contains the message we wish to send 30  class TextMessage
31  {
32	private String message; // message we're sending 33
34	// returns the message
35	public String getMessage() 36	{
37	return message;
38	} // end method getMessage 39
40	// sets the message
41	public void setMessage( String value ) 42	{
43	message = value;
44	} // end method setMessage
45  } // end class TextMessage

Fig. 28.15 | RESTwebservicethatreturnsawelcomemessageasJSON.

All the annotations and the basic structure of the WelcomeRESTJSONResourceclass are the same as REST XML example. The argument to the @Producesattribute (line 17) is
28-24	Chapter28  WebServicesinJava


"application/json".  The  TextMessage class  (lines  30–45)  addresses  a  difference between JSON and XML. JSON does not permit strings or numbers to stand on their own—they must be encapsulated in a composite data type. So, we created class TextMes-sageto encapsulate the Stringrepresenting the message.
When a client invokes this web service, line 21 creates the TextMessageobject, then lines 22–23 set its contained message. Next, line 25 creates a Gsonobject (from package com.google.gson.Gson) and calls its toJsonmethod to convert the TextMessageinto its JSON Stringrepresentation. We return this String, which is then sent back to the client in the web service’s response. There are multiple overloads of the toJsonmethod, such as one that sends its output to a Writerinstead of returning a String.
RESTful services returning JSON can be tested in the same way as those returning XML. Follow the procedure outlined in Section 28.7.1, but be sure to change the MIME type to application/jsonin the test web page; otherwise, the web service will return an error stating that it cannot produce the desired response.


28.8.2 Consuming a REST-Based JSON Web Service
We now create a Java application that retrieves the welcome message from the web service and displays it to the user. First, create a Java application with the name WelcomeREST-JSONClient. Then, create a JFrameform called WelcomeRESTXMLClientJFrameand place it in the com.deitel.welcomerestjsonclientpackage. The GUI is identical to the one in Fig. 28.10. To create the GUI quickly, copy it from the Design view of the Welcome-SOAPClientJFrameclassandpasteitintotheDesign viewoftheWelcomeRESTJSONClient-JFrameclass. Figure 28.16 contains the completed code.


1  // Fig. 28.16: WelcomeRESTJSONClientJFrame.java
2  // Client that consumes the WelcomeRESTJSON service. 3  package com.deitel.welcomerestjsonclient;
4
5  import com.google.gson.Gson; // converts POJO to JSON and back again 6  import java.io.InputStreamReader;
7  import java.net.URL;
8  import javax.swing.JOptionPane; 9
10  public class WelcomeRESTJSONClientJFrame extends javax.swing.JFrame 11  {
12	// no-argument constructor
13	public WelcomeRESTJSONClientJFrame() 14	{
15	initComponents(); 16     } // end constructor 17
18	// The initComponents method is autogenerated by NetBeans and is called 19	// from the constructor to initialize the GUI. This method is not shown 20	// here to save space. Open WelcomeRESTJSONClientJFrame.java in this
21	// example's folder to view the complete generated code.
22

Fig. 28.16 | ClientthatconsumestheWelcomeRESTJSONservice.(Part1of3.)
28.8 PublishingandConsumingREST-BasedJSONWebServices   28-25


73	// call the web service with the supplied name and display the message 74	private void submitJButtonActionPerformed(
75	java.awt.event.ActionEvent evt ) 76     {
77	String name = nameJTextField.getText(); // get name from JTextField 78
79	// retrieve the welcome string from the web service 80	try
81	{
82	// the URL of the web service
83	String url = "http://localhost:8080/WelcomeRESTJSON/" + 84               "resources/welcome/" + name;
85
86	// open URL, using a Reader to convert bytes to chars 87	InputStreamReader reader =
88	new InputStreamReader( new URL( url ).openStream() ); 89
90	// parse the JSON back into a TextMessage 91	TextMessage message =
92	new Gson().fromJson( reader, TextMessage.class ); 93
94	// display message to the user
95	JOptionPane.showMessageDialog( this, message.getMessage(), 96               "Welcome", JOptionPane.INFORMATION_MESSAGE );
97	} // end try
98	catch ( Exception exception ) 99	{
100	exception.printStackTrace(); // show exception details 101        } // end catch
102	} // end method submitJButtonActionPerformed 103
104	// main method begin execution
105	public static void main( String args[] ) 106	{
107	java.awt.EventQueue.invokeLater( 108           new Runnable()
109	{
110	public void run() 111	{
112	new WelcomeRESTJSONClientJFrame().setVisible( true ); 113              } // end method run
114	} // end anonymous inner class
115	); // end call to java.awt.EventQueue.invokeLater 116     } // end main
117
118	// Variables declaration - do not modify 119	private javax.swing.JLabel nameJLabel;
120	private javax.swing.JTextField nameJTextField; 121	private javax.swing.JButton submitJButton; 122	// End of variables declaration
123 } // end class WelcomeRESTJSONClientJFrame
124

Fig. 28.16 | ClientthatconsumestheWelcomeRESTJSONservice.(Part2of3.)
28-26	Chapter28  WebServicesinJava


125 // private class that contains the message we are receiving 126 class TextMessage
127 {
128	private String message; // message we're receiving 129
130	// returns the message 131	public String getMessage() 132	{
133	return message;
134	} // end method getMessage 135
136	// sets the message
137	public void setMessage( String value ) 138	{
139	message = value;
140	} // end method setMessage
141 } // end class TextMessage

Fig. 28.16 | ClientthatconsumestheWelcomeRESTJSONservice.(Part3of3.)


Lines 83–84 create the URL Stringthat is used to invoke the web service. Lines 87– 88 create a URLobject using this String, then call the URL’s openStreammethod to invoke the web service and obtain an InputStreamfrom which the client can read the response. The InputStreamis wrapped in an InputStreamReaderso it can be passed as the first argument to the Gsonclass’s fromJsonmethod. This method is overloaded. The version we use takes as arguments a Readerfrom which to read a JSON Stringand a Class<T> object indicating the Java class to which the JSON Stringwill be converted (line 92). In this example, the JSON Stringcontains a TextMessageobject, so we use the Java com-piler shortcut TextMessage.classto create the Class<TextMessage>object we need as the second argument. Lines 95–96 display the message in the TextMessageobject.
The TextMessageclasses in the web service and client are unrelated. Technically, the client can be written in any programming language, so the manner in which a response is processed can vary greatly. Since our client is written in Java, we duplicated the TextMes-sageclass in the client so we could easily convert the JSON object back to Java.


28.9 Session Tracking in a SOAP Web Service
Section 26.8 described the advantages of using session tracking to maintain client-state in-formation so you can personalize the users’ browsing experiences. Now we’ll incorporate session tracking into a web service. Suppose a client application needs to call several meth-ods from the same web service, possibly several times each. In such a case, it can be bene-ficial for the web service to maintain state information for the client, thus eliminating the need for client information to be passed between the client and the web service multiple times. For example, a web service that provides local restaurant reviews could store the cli-ent user’s street address during the initial request, then use it to return personalized, local-ized results in subsequent requests. Storing session information also enables a web service to distinguish between clients.
28.9 SessionTrackinginaSOAPWebService   28-27


28.9.1 Creating a BlackjackWeb Service
Our next example is a web service that assists you in developing a blackjack card game. The Blackjackweb service (Fig. 28.17) provides web methods to shuffle a deck of cards, deal a card from the deck and evaluate a hand of cards. After presenting the web service, we use it to serve as the dealer for a game of blackjack (Fig. 28.18). The Blackjackweb service uses an HttpSessionobject to maintain a unique deck of cards for each client ap-plication. Several clients can use the service at the same time, but web method calls made by a specific client use only the deck of cards stored in that client’s session. Our example uses the following blackjack rules:
Two cards each are dealt to the dealer and the player. The player’s cards are dealt face up. Only the first of the dealer’s cards is dealt face up. Each card has a value. A card numbered 2 through 10 is worth its face value. Jacks, queens and kings each count as 10. Aces can count as 1 or 11—whichever value is more beneficial to the player (as we’ll soon see). If the sum of the player’s two initial cards is 21 (i.e., the player was dealt a card valued at 10 and an ace, which counts as 11 in this situation), the player has “blackjack” and immediately wins the game—if the dealer does not also have blackjack (which would result in a “push”—i.e., a tie). Otherwise, the player can begin taking additional cards one at a time. These cards are dealt face up, and the player decides when to stop taking cards. If the player “busts” (i.e., the sum of the player’s cards exceeds 21), the game is over, and the player loses. When the player is sat-isfied with the current set of cards, the player “stands” (i.e., stops taking cards), and the dealer’s hidden card is revealed. If the dealer’s total is 16 or less, the dealer must take another card; otherwise, the dealer must stand. The dealer must continue taking cards until the sum of the dealer’s cards is greater than or equal to 17. If the dealer exceeds 21, the player wins. Otherwise, the hand with the higher point total wins. If the dealer and the player have the same point total, the game is a “push,” and no one wins. The value of an ace for a dealer depends on the dealer’s other card(s) and the casino’s house rules. A dealer typically must hit for totals of 16 or less and must stand for totals of 17 or more. However, for a “soft 17”—a hand with a total of 17 with one ace counted as 11—some casinos require the dealer to hit and some require the dealer to stand (we require the dealer to stand). Such a hand is known as a “soft 17” because taking another card cannot bust the hand.
The web service (Fig. 28.17) stores each card as a Stringconsisting of a number, 1– 13, representing the card’s face (ace through king, respectively), followed by a space and a digit,0–3,representingthecard’ssuit(hearts,diamonds,clubsorspades,respectively).For example, the jack of clubs is represented as "11 2"and the two of hearts as "2 0". To create and deploy this web service, follow the steps that we presented in Sections 28.6.1– 28.6.3 for the WelcomeSOAPservice.

1  // Fig. 28.17: Blackjack.java
2  // Blackjack web service that deals cards and evaluates hands 3  package com.deitel.blackjack;
4
5  import com.sun.xml.ws.developer.servlet.HttpSessionScope; 6  import java.util.ArrayList;
7  import java.util.Random;

Fig. 28.17 | Blackjackwebservicethatdealscardsandevaluateshands.(Part1of3.)
28-28	Chapter28  WebServicesinJava


8  import javax.jws.WebMethod; 9  import javax.jws.WebParam;
10  import javax.jws.WebService; 11
12  @HttpSessionScope // enable web service to maintain session state 13  @WebService()
14  public class Blackjack 15  {
16	private ArrayList< String > deck; // deck of cards for one user session 17	private static final Random randomObject = new Random();
18
19	// deal one card
20	@WebMethod( operationName = "dealCard" ) 21	public String dealCard()
22	{
23	String card = "";
24	card = deck.get( 0 ); // get top card of deck 25	deck.remove( 0 ); // remove top card of deck 26	return card;
27	} // end WebMethod dealCard 28
29	// shuffle the deck
30	@WebMethod( operationName = "shuffle" ) 31	public void shuffle()
32	{
33	// create new deck when shuffle is called 34	deck = new ArrayList< String >();
35
36	// populate deck of cards
37	for ( int face = 1; face <= 13; face++ ) // loop through faces 38            for ( int suit = 0; suit <= 3; suit++ ) // loop through suits 39               deck.add( face + " " + suit ); // add each card to deck
40
41	String tempCard; // holds card temporarily during swapping 42	int index; // index of randomly selected card
43
44	for ( int i = 0; i < deck.size() ; i++ ) // shuffle 45	{
46	index = randomObject.nextInt( deck.size() - 1 ); 47
48	// swap card at position i with randomly selected card 49	tempCard = deck.get( i );
50	deck.set( i, deck.get( index ) ); 51	deck.set( index, tempCard );
52	} // end for
53	} // end WebMethod shuffle 54
55	// determine a hand's value
56	@WebMethod( operationName = "getHandValue" )
57	public int getHandValue( @WebParam( name = "hand" ) String hand ) 58	{
59	// split hand into cards
60	String[] cards = hand.split( "\t" );

Fig. 28.17 | Blackjackwebservicethatdealscardsandevaluateshands.(Part2of3.)
28.9 SessionTrackinginaSOAPWebService   28-29


61	int total = 0; // total value of cards in hand 62	int face; // face of current card
63	int aceCount = 0; // number of aces in hand 64
65	for ( int i = 0; i < cards.length; i++ ) 66	{
67	// parse string and get first int in String 68	face = Integer.parseInt(
69	cards[ i ].substring( 0, cards[ i ].indexOf( " " ) ) ); 70
71	switch ( face ) 72	{
73	case 1: // if ace, increment aceCount 74                  ++aceCount;
75	break;
76	case 11: // jack 77	case 12: // queen 78	case 13: // king 79                  total += 10; 80                  break;
81	default: // otherwise, add face 82                  total += face;
83	break;
84	} // end switch 85         } // end for
86
87	// calculate optimal use of aces 88	if ( aceCount > 0 )
89	{
90	// if possible, count one ace as 11 91	if ( total + 11 + aceCount - 1 <= 21 ) 92               total += 11 + aceCount - 1;
93	else // otherwise, count all aces as 1 94               total += aceCount;
95	} // end if 96
97	return total;
98	} // end WebMethod getHandValue
99  } // end class Blackjack

Fig. 28.17 | Blackjackwebservicethatdealscardsandevaluateshands.(Part3of3.)

Session Tracking in Web Services: @HttpSessionScopeAnnotation
In JAX-WS 2.2, it’s easy to enable session tracking in a web service. You simply precede yourwebserviceclasswiththe@HttpSessionScopeannotation.Thisannotationislocated in package com.sun.xml.ws.developer.servlet. To use this package you must add the JAX-WS2.2librarytoyourproject.Todoso,rightclicktheLibraries nodeinyourBlack-jackweb application project and select Add Library…. Then, in the dialog that appears, locate and select JAX-WS 2.2, then click Add Library. Once a web service is annotated with @HttpSessionScope, the server automatically maintains a separate instance of the class for eachclient session. Thus, the deckinstance variable (line 16) willbe maintainedseparately for each client.
28-30	Chapter28  WebServicesinJava


Client Interactions with the BlackjackWeb Service
Aclientfirstcallsthe Blackjackwebservice’sshufflewebmethod(lines30–53)tocreate a new deck of cards (line 34), populate it (lines 37–39) and shuffle it (lines 41–52). Lines 37–39generateStringsintheform"face suit"torepresenteachpossiblecardinthedeck.
Lines20–27definethedealCardwebmethod.Methodshufflemustbecalledbefore method dealCardis called the first time for a client—otherwise, deckcould be null. The method gets the top card from the deck (line 24), removes it from the deck (line 25) and returns the card’s value as a String(line 26). Without using session tracking, the deck of cards would need to be passed back and forth with each method call. Session tracking makes the dealCardmethod easy to call (it requires no arguments) and eliminates the overhead of sending the deck over the network multiple times.
Method getHandValue(lines 56–98) determines the total value of the cards in a hand by trying to attain the highest score possible without going over 21. Recall that an ace can be counted as either 1 or 11, and all face cards count as 10. This method does not use the sessionobject, because the deck of cards is not used in this method.
As you’ll soon see, the client application maintains a hand of cards as a Stringin which each card is separated by a tab character. Line 60 splits the hand of cards (repre-sented by hand) into individual cards by calling Stringmethod splitand passing to it a Stringcontaining thedelimitercharacters(in this case, just a tab). Methodsplituses the delimiter characters to separate tokens in the String. Lines 65–85 count the value of each card. Lines 68–69 retrieve the first integer—the face—and use that value in the switch statement (lines 71–84). If the card is an ace, the method increments variable aceCount. We discuss how this variable is used shortly. If the card is an 11, 12 or 13 (jack, queen or king), the method adds 10 to the total value of the hand (line 79). If the card is anything else, the method increases the total by that value (line 82).
Because an ace can have either of two values, additional logic is required to process aces. Lines 88–95 process the aces after all the other cards. If a hand contains several aces, only one ace can be counted as 11. The condition in line 91 determines whether counting one ace as 11 and the rest as 1 will result in a total that does not exceed 21. If this is pos-sible, line 92 adjusts the total accordingly. Otherwise, line 94 adjusts the total, counting each ace as 1.
Method getHandValuemaximizes the value of the current cards without exceeding 21. Imagine, for example, that the dealer has a 7 and receives an ace. The new total could beeither8or18.However,getHandValuealwaysmaximizesthevalueofthecardswithout going over 21, so the new total is 18.


28.9.2 Consuming the BlackjackWeb Service
The blackjack application in Fig. 28.18 keeps track of the player’s and dealer’s cards, and the web service tracks the cards that have been dealt. The constructor (lines 34–83) sets up the GUI (line 36), changes the window’s background color (line 40) and creates the Blackjackweb service’s service endpoint interface object (lines 46–47). In the GUI, each player has 11 JLabels—the maximum number of cards that can be dealt without auto-matically exceeding 21 (i.e., four aces, four twos and three threes). These JLabels are placed in an ArrayListof JLabels (lines 59–82), so we can index the ArrayListduring the game to determine the JLabelthat will display a particular card image.
28.9 SessionTrackinginaSOAPWebService   28-31


1  // Fig. 28.18: BlackjackGameJFrame.java
2  // Blackjack game that uses the Blackjack Web Service. 3  package com.deitel.blackjackclient;
4
5  import com.deitel.blackjack.Blackjack;
6  import com.deitel.blackjack.BlackjackService; 7  import java.awt.Color;
8  import java.util.ArrayList;
9  import javax.swing.ImageIcon; 10  import javax.swing.JLabel;
11  import javax.swing.JOptionPane;
12  import javax.xml.ws.BindingProvider; 13
14  public class BlackjackGameJFrame extends javax.swing.JFrame 15  {
16     private String playerCards; 17     private String dealerCards;
18	private ArrayList<JLabel> cardboxes; // list of card image JLabels 19	private int currentPlayerCard; // player's current card number
20	private int currentDealerCard; // blackjackProxy's current card number 21	private BlackjackService blackjackService; // used to obtain proxy
22	private Blackjack blackjackProxy; // used to access the web service 23
24	// enumeration of game states 25	private enum GameStatus
26	{
27	PUSH, // game ends in a tie 28	LOSE, // player loses
29	WIN, // player wins
30	BLACKJACK // player has blackjack 31     } // end enum GameStatus
32
33	// no-argument constructor 34	public BlackjackGameJFrame() 35	{
36	initComponents(); 37
38	// due to a bug in NetBeans, we must change the JFrame's background 39	// color here rather than in the designer
40	getContentPane().setBackground( new Color( 0, 180, 0 ) ); 41
42	// initialize the blackjack proxy 43	try
44	{
45	// create the objects for accessing the Blackjack web service 46	blackjackService = new BlackjackService();
47	blackjackProxy = blackjackService.getBlackjackPort(); 48
49	// enable session tracking
50	( (BindingProvider) blackjackProxy ).getRequestContext().put( 51               BindingProvider.SESSION_MAINTAIN_PROPERTY, true );
52	} // end try

Fig. 28.18 | BlackjackgamethatusestheBlackjackwebservice.(Part1of10.)
28-32	Chapter28  WebServicesinJava


53	catch ( Exception e ) 54	{
55	e.printStackTrace(); 56         } // end catch
57
58	// add JLabels to cardBoxes ArrayList for programmatic manipulation 59	cardboxes = new ArrayList<JLabel>();
60
61	cardboxes.add( dealerCard1JLabel ); 62	cardboxes.add( dealerCard2JLabel ); 63	cardboxes.add( dealerCard3JLabel ); 64	cardboxes.add( dealerCard4JLabel ); 65	cardboxes.add( dealerCard5JLabel ); 66	cardboxes.add( dealerCard6JLabel ); 67	cardboxes.add( dealerCard7JLabel ); 68	cardboxes.add( dealerCard8JLabel ); 69	cardboxes.add( dealerCard9JLabel ); 70	cardboxes.add( dealerCard10JLabel ); 71	cardboxes.add( dealerCard11JLabel ); 72	cardboxes.add( playerCard1JLabel ); 73	cardboxes.add( playerCard2JLabel ); 74	cardboxes.add( playerCard3JLabel ); 75	cardboxes.add( playerCard4JLabel ); 76	cardboxes.add( playerCard5JLabel ); 77	cardboxes.add( playerCard6JLabel ); 78	cardboxes.add( playerCard7JLabel ); 79	cardboxes.add( playerCard8JLabel ); 80	cardboxes.add( playerCard9JLabel ); 81	cardboxes.add( playerCard10JLabel ); 82	cardboxes.add( playerCard11JLabel ); 83     } // end constructor
84
85	// play the dealer’s hand 86	private void dealerPlay() 87	{
88	try 89	{
90	// while the value of the dealers's hand is below 17 91	// the dealer must continue to take cards
92	String[] cards = dealerCards.split( "\t" ); 93
94	// display dealer's cards
95	for ( int i = 0; i < cards.length; i++ ) 96	{
97	displayCard( i, cards[i] ); 98            }
99
100	while ( blackjackProxy.getHandValue( dealerCards ) < 17 ) 101	{
102	String newCard = blackjackProxy.dealCard(); // deal new card 103	dealerCards += "\t" + newCard; // deal new card
104	displayCard( currentDealerCard, newCard );

Fig. 28.18 | BlackjackgamethatusestheBlackjackwebservice.(Part2of10.)
28.9 SessionTrackinginaSOAPWebService   28-33


105	++currentDealerCard;
106	JOptionPane.showMessageDialog( this, "Dealer takes a card", 107                 "Dealer's turn", JOptionPane.PLAIN_MESSAGE );
108	} // end while 109
110	int dealersTotal = blackjackProxy.getHandValue( dealerCards ); 111	int playersTotal = blackjackProxy.getHandValue( playerCards ); 112
113	// if dealer busted, player wins 114	if ( dealersTotal > 21 )
115	{
116	gameOver( GameStatus.WIN ); 117	return;
118	} // end if 119
120	// if dealer and player are below 21
121	// higher score wins, equal scores is a push 122	if ( dealersTotal > playersTotal )
123	{
124	gameOver( GameStatus.LOSE ); 125           }
126	else if ( dealersTotal < playersTotal ) 127	{
128	gameOver( GameStatus.WIN ); 129           }
130	else 131	{
132	gameOver( GameStatus.PUSH ); 133           }
134	} // end try
135	catch ( Exception e ) 136	{
137	e.printStackTrace(); 138        } // end catch
139	} // end method dealerPlay 140
141	// displays the card represented by cardValue in specified JLabel 142	private void displayCard( int card, String cardValue )
143	{
144	try 145	{
146	// retrieve correct JLabel from cardBoxes 147	JLabel displayLabel = cardboxes.get( card ); 148
149	// if string representing card is empty, display back of card 150	if ( cardValue.equals( "" ) )
151	{
152	displayLabel.setIcon( new ImageIcon( getClass().getResource( 153                 "/com/deitel/java/blackjackclient/" +
154	"blackjack_images/cardback.png" ) ) ); 155              return;
156	} // end if

Fig. 28.18 | BlackjackgamethatusestheBlackjackwebservice.(Part3of10.)
28-34	Chapter28  WebServicesinJava


157
158	// retrieve the face value of the card
159	String face = cardValue.substring( 0, cardValue.indexOf( " " ) ); 160
161	// retrieve the suit of the card 162	String suit =
163	cardValue.substring( cardValue.indexOf( " " ) + 1 ); 164
165	char suitLetter; // suit letter used to form image file 166
167	switch ( Integer.parseInt( suit ) ) 168	{
169	case 0: // hearts 170                 suitLetter = 'h'; 171                 break;
172	case 1: // diamonds 173                 suitLetter = 'd'; 174                 break;
175	case 2: // clubs
176	suitLetter = 'c'; 177	break;
178	default: // spades 179                 suitLetter = 's'; 180                 break;
181	} // end switch 182
183	// set image for displayLabel
184	displayLabel.setIcon( new ImageIcon( getClass().getResource( 185              "/com/deitel/java/blackjackclient/blackjack_images/" + 186              face + suitLetter + ".png" ) ) );
187	} // end try
188	catch ( Exception e ) 189	{
190	e.printStackTrace(); 191        } // end catch
192	} // end method displayCard 193
194	// displays all player cards and shows appropriate message 195	private void gameOver( GameStatus winner )
196	{
197	String[] cards = dealerCards.split( "\t" ); 198
199	// display blackjackProxy's cards
200	for ( int i = 0; i < cards.length; i++ ) 201	{
202	displayCard( i, cards[i] ); 203        }
204
205	// display appropriate status image 206	if ( winner == GameStatus.WIN )
207	{
208	statusJLabel.setText( "You win!" );
209	}

Fig. 28.18 | BlackjackgamethatusestheBlackjackwebservice.(Part4of10.)
28.9 SessionTrackinginaSOAPWebService   28-35


210	else if ( winner == GameStatus.LOSE ) 211	{
212	statusJLabel.setText( "You lose." ); 213        }
214	else if ( winner == GameStatus.PUSH ) 215	{
216	statusJLabel.setText( "It's a push." ); 217        }
218	else // blackjack 219	{
220	statusJLabel.setText( "Blackjack!" ); 221        }
222
223	// display final scores
224	int dealersTotal = blackjackProxy.getHandValue( dealerCards ); 225	int playersTotal = blackjackProxy.getHandValue( playerCards ); 226	dealerTotalJLabel.setText( "Dealer: " + dealersTotal );
227	playerTotalJLabel.setText( "Player: " + playersTotal ); 228
229	// reset for new game
230	standJButton.setEnabled( false ); 231	hitJButton.setEnabled( false ); 232	dealJButton.setEnabled( true ); 233     } // end method gameOver
234
235	// The initComponents method is autogenerated by NetBeans and is called 236	// from the constructor to initialize the GUI. This method is not shown 237	// here to save space. Open BlackjackGameJFrame.java in this
238	// example's folder to view the complete generated code 239
542	// handles dealJButton click
543	private void dealJButtonActionPerformed( 544        java.awt.event.ActionEvent evt )
545	{
546	String card; // stores a card temporarily until it's added to a hand 547
548	// clear card images
549	for ( int i = 0; i < cardboxes.size(); i++ ) 550	{
551	cardboxes.get( i ).setIcon( null ); 552        }
553
554	statusJLabel.setText( "" );
555	dealerTotalJLabel.setText( "" ); 556	playerTotalJLabel.setText( "" ); 557
558	// create a new, shuffled deck on remote machine 559	blackjackProxy.shuffle();
560
561	// deal two cards to player
562	playerCards = blackjackProxy.dealCard(); // add first card to hand 563	displayCard( 11, playerCards ); // display first card
564	card = blackjackProxy.dealCard(); // deal second card

Fig. 28.18 | BlackjackgamethatusestheBlackjackwebservice.(Part5of10.)
28-36	Chapter28  WebServicesinJava


565	displayCard( 12, card ); // display second card
566	playerCards += "\t" + card; // add second card to hand 567
568	// deal two cards to blackjackProxy, but only show first
569	dealerCards = blackjackProxy.dealCard(); // add first card to hand 570	displayCard( 0, dealerCards ); // display first card
571	card = blackjackProxy.dealCard(); // deal second card 572	displayCard( 1, "" ); // display back of card
573	dealerCards += "\t" + card; // add second card to hand 574
575	standJButton.setEnabled( true ); 576	hitJButton.setEnabled( true ); 577	dealJButton.setEnabled( false ); 578
579	// determine the value of the two hands
580	int dealersTotal = blackjackProxy.getHandValue( dealerCards ); 581	int playersTotal = blackjackProxy.getHandValue( playerCards ); 582
583	// if hands both equal 21, it is a push
584	if ( playersTotal == dealersTotal && playersTotal == 21 ) 585	{
586	gameOver( GameStatus.PUSH ); 587        }
588	else if ( dealersTotal == 21 ) // blackjackProxy has blackjack 589	{
590	gameOver( GameStatus.LOSE ); 591        }
592	else if ( playersTotal == 21 ) // blackjack 593	{
594	gameOver( GameStatus.BLACKJACK ); 595        }
596
597	// next card for blackjackProxy has index 2 598	currentDealerCard = 2;
599
600	// next card for player has index 13 601	currentPlayerCard = 13;
602	} // end method dealJButtonActionPerformed 603
604	// handles standJButton click
605	private void hitJButtonActionPerformed( 606        java.awt.event.ActionEvent evt ) 607	{
608	// get player another card
609	String card = blackjackProxy.dealCard(); // deal new card 610	playerCards += "\t" + card; // add card to hand
611
612	// update GUI to display new card
613	displayCard( currentPlayerCard, card ); 614	++currentPlayerCard;
615
616	// determine new value of player's hand
617	int total = blackjackProxy.getHandValue( playerCards );

Fig. 28.18 | BlackjackgamethatusestheBlackjackwebservice.(Part6of10.)
28.9 SessionTrackinginaSOAPWebService   28-37


618
619	if ( total > 21 ) // player busts 620	{
621	gameOver( GameStatus.LOSE ); 622        }
623	else if ( total == 21 ) // player cannot take any more cards 624	{
625	hitJButton.setEnabled( false ); 626	dealerPlay();
627	} // end if
628	} // end method hitJButtonActionPerformed 629
630	// handles standJButton click
631	private void standJButtonActionPerformed( 632        java.awt.event.ActionEvent evt )
633	{
634	standJButton.setEnabled( false ); 635	hitJButton.setEnabled( false ); 636	dealJButton.setEnabled( true ); 637	dealerPlay();
638	} // end method standJButtonActionPerformed 639
640	// begins application execution
641	public static void main( String args[] ) 642	{
643	java.awt.EventQueue.invokeLater( 644           new Runnable()
645	{
646	public void run() 647	{
648	new BlackjackGameJFrame().setVisible( true ); 649              }
650	}
651	); // end call to java.awt.EventQueue.invokeLater 652     } // end main
653
654     // Variables declaration - do not modify 655     private javax.swing.JButton dealJButton;
656	private javax.swing.JLabel dealerCard10JLabel; 657	private javax.swing.JLabel dealerCard11JLabel; 658	private javax.swing.JLabel dealerCard1JLabel; 659	private javax.swing.JLabel dealerCard2JLabel; 660	private javax.swing.JLabel dealerCard3JLabel; 661	private javax.swing.JLabel dealerCard4JLabel; 662	private javax.swing.JLabel dealerCard5JLabel; 663	private javax.swing.JLabel dealerCard6JLabel; 664	private javax.swing.JLabel dealerCard7JLabel; 665	private javax.swing.JLabel dealerCard8JLabel; 666	private javax.swing.JLabel dealerCard9JLabel; 667	private javax.swing.JLabel dealerJLabel;
668	private javax.swing.JLabel dealerTotalJLabel; 669	private javax.swing.JButton hitJButton;
670	private javax.swing.JLabel playerCard10JLabel;

Fig. 28.18 | BlackjackgamethatusestheBlackjackwebservice.(Part7of10.)
28-38	Chapter28  WebServicesinJava


671	private javax.swing.JLabel playerCard11JLabel; 672	private javax.swing.JLabel playerCard1JLabel; 673	private javax.swing.JLabel playerCard2JLabel; 674	private javax.swing.JLabel playerCard3JLabel; 675	private javax.swing.JLabel playerCard4JLabel; 676	private javax.swing.JLabel playerCard5JLabel; 677	private javax.swing.JLabel playerCard6JLabel; 678	private javax.swing.JLabel playerCard7JLabel; 679	private javax.swing.JLabel playerCard8JLabel; 680	private javax.swing.JLabel playerCard9JLabel; 681	private javax.swing.JLabel playerJLabel;
682	private javax.swing.JLabel playerTotalJLabel; 683	private javax.swing.JButton standJButton;
684	private javax.swing.JLabel statusJLabel; 685	// End of variables declaration
686 } // end class BlackjackGameJFrame

a)DealerandplayerhandsaftertheuserclickstheDeal JButton



















b)Dealerandplayer handsaftertheuser clicksStand.Inthis case,theresultisapush







Fig. 28.18 | BlackjackgamethatusestheBlackjackwebservice.(Part8of10.)
28.9 SessionTrackinginaSOAPWebService   28-39



c)DealerandplayerhandsaftertheuserclicksHit anddraws21.Inthiscase,theplayerwins





















d)Dealerandplayerhandsaftertheplayerisdealtblackjack





















Fig. 28.18 | BlackjackgamethatusestheBlackjackwebservice.(Part9of10.)
28-40	Chapter28  WebServicesinJava


e)Dealerandplayerhandsafterthedealerisdealtblackjack




















Fig. 28.18 | BlackjackgamethatusestheBlackjackwebservice.(Part10of10.)


Configuring the Client for Session Tracking
WheninteractingwithaJAX-WSwebservicethatperformssessiontracking,theclientap-plication must indicate whether it wants to allow the web service to maintain session in-formation. Lines 50–51 in the constructor perform this task. We first cast the service endpoint interface object to interface type BindingProvider. A BindingProviderenables the client to manipulate the request information that will be sent to the server. This infor-mation is stored in an object that implements interface RequestContext. The Binding-Providerand RequestContextare part of the framework that is created by the IDE when you add a web service client to the application. Next, we invoke the BindingProvider’s getRequestContextmethod to obtain the RequestContextobject. Then we call the Re-questContext’s putmethod to set the property

BindingProvider.SESSION_MAINTAIN_PROPERTY
to true. This enables the client side of the session-tracking mechanism, so that the web service knows which client is invoking the service’s web methods.

Method gameOver
Method gameOver(lines 195–233) displays all the dealer’s cards, shows the appropriate message in statusJLabeland displays the final point totals of both the dealer and the player. Method gameOverreceives as an argument a member of the GameStatusenumer-ation (defined in lines 25–31). The enumeration represents whether the player tied, lost or won the game; its four members are PUSH, LOSE, WINand BLACKJACK.
28.10 ConsumingaDatabase-DrivenSOAPWebService   28-41


Method dealJButtonActionPerformed
When the player clicks the Deal JButton, method dealJButtonActionPerformed(lines 543–602) clears all of the JLabels that display cards or game status information. Next, the deck is shuffled (line 559), and the player and dealer receive two cards each (lines 562– 573). Lines 580–581 then total each hand. If the player and the dealer both obtain scores of 21, the program calls method gameOver, passing GameStatus.PUSH(line 586). If only the dealer has 21, the program passes GameStatus.LOSEto method gameOver(line 590). If only the player has 21 after the first two cards are dealt, the program passes GameSta-tus.BLACKJACKto method gameOver(line 594).

Method hitJButtonActionPerformed
If dealJButtonActionPerformeddoes not call gameOver, the player can take more cards by clicking the Hit JButton, which calls hitJButtonActionPerformedin lines 605–628. Each time a player clicks Hit, the program deals the player one more card (line 609) and displays it in the GUI (line 613). If the player exceeds 21, the game is over and the player loses (line 621). If the player has exactly 21, the player is not allowed to take any more cards (line 625), and method dealerPlayis called (line 626).

Method dealerPlay
Method dealerPlay(lines 86–139) displays the dealer’s cards, then deals cards to the dealer until the dealer’s hand has a value of 17 or more (lines 100–108). If the dealer ex-ceeds 21, the player wins (line 116); otherwise, the values of the hands are compared, and gameOveris called with the appropriate argument (lines 122–133).

Method standJButtonActionPerformed
Clicking the Stand JButtonindicates that a player does not want to be dealt another card. Method standJButtonActionPerformed(lines 631–638) disables the Hit and Stand but-tons, enables the Deal button, then calls method dealerPlay.

Method displayCard
Method displayCard(lines 142–192) updates the GUI to display a newly dealt card. The method takes as arguments an integer index for the JLabelin the ArrayListthat must have its image set and a Stringrepresenting the card. An empty Stringindicates that we wish to display the card face down. If method displayCardreceives a Stringthat’s not empty, the program extracts the face and suit from the Stringand uses this information to display the correct image. The switchstatement (lines 167–181) converts the number representing the suit to an integer and assigns the appropriate character to variable suit-Letter(hfor hearts, dfor diamonds, cfor clubs and sfor spades). The character in suit-Letteris used to complete the image’s file name (lines 184–186). You must add the folder blackjack_imagesto your project so that lines 152–154 and 184–186 can access the images properly. To do so, copy the folder blackjack_imagesfrom this chapter’s examples folder and paste it into the project’s src\com\deitel\java\blackjackclientfolder.

28.10  ConsumingaDatabase-DrivenSOAPWebService
Our prior examples accessed web services from desktop applications created in NetBeans. However, we can just as easily use them in web applications created with NetBeans. In fact, because web-based businesses are becoming increasingly popular, it’s common for
28-42	Chapter28  WebServicesinJava


web applications toconsume web services. In this section, wepresent an airline reservation web service that receives information regarding the type of seat a customer wishes to re-serve and makes a reservation if such a seat is available. Later in the section, we present a webapplicationthatallowsacustomertospecifyareservationrequest,thenusestheairline reservation web service to attempt to execute the request.


28.10.1 Creating the ReservationDatabase
Our web service uses a reservationdatabase containing a single table named Seatsto locate a seat matching a client’s request. Review the steps presented in Section 27.2.1 for configuring a data source and the addressbookdatabase. Then perform those steps for the reservation database used in this example. Create a data source named jdbc/reservation. This chapter’s examples directory contains the Seats.sqlSQL script to create the seats table and populate it with sample data. The sample data is shown in Fig. 28.19.



number   location

1	Aisle 2	Aisle 3	Aisle 4	Middle 5	Middle 6	Middle 7	Window 8	Window 9	Window
10	Window

class	taken

Economy	0 Economy	0 First	0 Economy	0 Economy	0 First	0 Economy	0 Economy	0 First	0
First	0


Fig. 28.19  | Datafromtheseatstable.

Creating the Reservation Web Service
You can now create a web service that uses the Reservationdatabase (Fig. 28.20). The airline reservation web service has a single web method—reserve(lines 23–79)—which searches the Seatstable to locate a seat matching a user’s request. The method takes two arguments—a String representing the desired seat type (i.e., "Window", "Middle" or "Aisle") and a Stringrepresenting the desired class type (i.e., "Economy"or "First"). If it finds an appropriate seat, method reserveupdates the database to make the reservation and returns true; otherwise, no reservation is made, and the method returns false. The statements at lines 35–40 and lines 45–49 that query and update the database use objects of JDBC types ResultSetand PreparedStatement.

Software Engineering Observation 28.1
Using PreparedStatements to create SQL statements is highly recommended to secure against so-called SQL injection attacks in which executable code is inserted into SQL code. The site www.owasp.org/index.php/Preventing_SQL_Injection_in_Java provides a summary of SQL injection attacks and ways to mitigate against them.
28.10 ConsumingaDatabase-DrivenSOAPWebService   28-43


1  // Fig. 28.20: Reservation.java
2  // Airline reservation web service. 3  package com.deitel.reservation;
4
5  import java.sql.Connection;
6  import java.sql.PreparedStatement; 7  import java.sql.ResultSet;
8  import java.sql.SQLException;
9  import javax.annotation.Resource; 10  import javax.jws.WebMethod;
11  import javax.jws.WebParam; 12  import javax.jws.WebService; 13  import javax.sql.DataSource; 14
15  @WebService()
16  public class Reservation 17  {
18	// allow the server to inject the DataSource 19	@Resource( name="jdbc/reservation" )
20	DataSource dataSource; 21
22	// a WebMethod that can reserve a seat 23	@WebMethod( operationName = "reserve" )
24	public boolean reserve( @WebParam( name = "seatType" ) String seatType, 25         @WebParam( name = "classType" ) String classType )
26	{
27	Connection connection = null;
28	PreparedStatement lookupSeat = null; 29	PreparedStatement reserveSeat = null; 30
31	try 32	{
33	connection = DriverManager.getConnection( 34               DATABASE_URL, USERNAME, PASSWORD );
35	lookupSeat = connection.prepareStatement(
36	"SELECT \"number\" FROM \"seats\" WHERE (\"taken\" = 0) " + 37	"AND (\"location\" = ?) AND (\"class\" = ?)" );
38	lookupSeat.setString( 1, seatType ); 39	lookupSeat.setString( 2, classType );
40	ResultSet resultSet = lookupSeat.executeQuery(); 41
42	// if requested seat is available, reserve it 43	if ( resultSet.next() )
44	{
45	int seat = resultSet.getInt( 1 );
46	reserveSeat = connection.prepareStatement(
47	"UPDATE \"seats\" SET \"taken\"=1 WHERE \"number\"=?" ); 48               reserveSeat.setInt( 1, seat );
49	reserveSeat.executeUpdate(); 50	return true;
51	} // end if
52

Fig. 28.20 | Airlinereservationwebservice. (Part1of2.)
28-44	Chapter28  WebServicesinJava


53	return false; 54         } // end try
55	catch ( SQLException e ) 56	{
57	e.printStackTrace(); 58	return false;
59	} // end catch
60	catch ( Exception e ) 61	{
62	e.printStackTrace(); 63	return false;
64	} // end catch 65	finally
66	{
67	try 68	{
69	lookupSeat.close(); 70	reserveSeat.close(); 71	connection.close(); 72            } // end try
73	catch ( Exception e ) 74	{
75	e.printStackTrace(); 76	return false;
77	} // end catch 78         } // end finally
79	} // end WebMethod reserve
80  } // end class Reservation

Fig. 28.20 | Airlinereservationwebservice. (Part2of2.)

Our database contains four columns—the seat number (i.e., 1–10), the seat type (i.e., Window, Middleor Aisle), the class type (i.e., Economyor First) and a column containing either 1(true) or 0(false) to indicate whether the seat is taken. Lines 35–40 retrieve the seat numbers of any available seats matching the requested seat and class type. This state-ment fills the resultSetwith the results of the query

SELECT number FROM seats
WHERE (taken = 0) AND (type = type) AND (class = class)
The parameters type and class in the query are replaced with values of method reserve’s seatTypeand classTypeparameters.
If resultSetis not empty (i.e., at least one seat is available that matches the selected criteria), the condition in line 43 is trueand the web service reserves the first matching seat number. Recall that ResultSetmethod nextreturns trueif a nonempty row exists, and positions the cursor on that row. We obtain the seat number (line 45) by accessing resultSet’s first column (i.e., resultSet.getInt(1)—the first column in the row). Then lines 45–49 configure a PreparedStatementand execute the SQL:

UPDATE seats SET taken = 1
WHERE (number = number)
28.10 ConsumingaDatabase-DrivenSOAPWebService   28-45


which marks the seat as taken in the database. The parameter number is replaced with the value of seat. Method reservereturns true(line 50) to indicate that the reservation was successful. If there are no matching seats, or if an exception occurred, method reservere-turns false(lines 53, 58, 63 and 76) to indicate that no seats matched the user’s request.

28.10.2 Creating a Web Application to Interact with the Reservation
Service
This section presents a ReservationClientJSF web application that consumes the Res-ervationweb service. The application allows users to select "Aisle", "Middle"or "Win-dow"seats in "Economy"or "First"class, then submit their requests to the web service. If the database request is not successful, the application instructs the user to modify the re-questandtryagain.Theapplicationpresentedherewasbuiltusingthetechniquespresent-ed in Chapters 26–27. We assume that you’ve already read those chapters and thus know how to build a Facelets page and a corresponding JavaBean.

index.xhtml
index.xhtml(Fig. 28.21) defines two h:selectOneMenus and an h:commandButton. The h:selectOneMenuat lines 16–20) displays all the seat types from which users can select. The one at lines 21–24) provides choices for the class type. The values of these are stored in the seatTypeand classTypeproperties of the reservationBean(Fig. 28.22). Users click the Reserve button (lines 25–26) to submit requests after making selections from the h:selectOneMenus. Clicking the button calls the reservationBean’s reserveSeatmeth-od. The page displays the result of each attempt to reserve a seat in line 28.

1  <?xml version='1.0' encoding='UTF-8' ?> 2
3  <!-- Fig. 28.21: index.xhtml -->
4  <!-- Facelets page that allows a user to select a seat -->
5  <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 6	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"> 7  <html xmlns="http://www.w3.org/1999/xhtml"
8	xmlns:h="http://java.sun.com/jsf/html" 9	xmlns:f="http://java.sun.com/jsf/core">
10	<h:head>
11	<title>Airline Reservations</title> 12     </h:head>
13	<h:body>
14	<h:form>
15	<h3>Please select the seat type and class to reserve:</h3> 16	<h:selectOneMenu value="#{reservationBean.seatType}">
17	<f:selectItem itemValue="Aisle" itemLabel="Aisle" /> 18	<f:selectItem itemValue="Middle" itemLabel="Middle" /> 19	<f:selectItem itemValue="Window" itemLabel="Window" /> 20            </h:selectOneMenu>
21	<h:selectOneMenu value="#{reservationBean.classType}">
22	<f:selectItem itemValue="Economy" itemLabel="Economy" /> 23	<f:selectItem itemValue="First" itemLabel="First" />
24	</h:selectOneMenu>

Fig. 28.21 | Faceletspagethatallowsausertoselectaseat.(Part1of2.)
28-46	Chapter28  WebServicesinJava


25	<h:commandButton value="Reserve"
26	action="#{reservationBean.reserveSeat}"/> 27         </h:form>
28	<h3>#{reservationBean.result}</h3> 29     </h:body>
30  </html>

a)Selecting aseat






b)Seatreserved successfully







c)Attemptingto reserveanother windowseatin economywhen therearenosuch seatsavailable


d)Noseats matchthe requestedseat typeandclass







Fig. 28.21 | Faceletspagethatallowsausertoselectaseat.(Part2of2.)

ReservationBean.java
Class ReservationBean(Fig. 28.22) defines the seatType, classTypeand resultprop-erties and the reserveSeatmethod that are used in the index.xhtmlpage. When the user clicks the Reserve button in index.xhtml, method reserveSeat(lines 57–74) executes. Lines 61–62 use the service endpoint interface object (created in lines 22–23) to invoke
28.10 ConsumingaDatabase-DrivenSOAPWebService   28-47


the web service’s reservemethod, passing the selected seat type and class type as argu-ments. If reservereturns true, line 65 sets resultto a message thanking the user for making a reservation; otherwise, lines 67–68 set resultto a message notifying the user that the requested seat type is not available and instructing the user to try again.


1  // Fig. 28.22: ReservationBean.java 2  // Bean for seat reservation client. 3  package reservationclient;
4
5  import com.deitel.reservation.Reservation;
6  import com.deitel.reservation.ReservationService; 7  import javax.faces.bean.ManagedBean;
8
9  @ManagedBean( name = "reservationBean" ) 10  public class ReservationBean
11  {
12	// references the service endpoint interface object (i.e., the proxy) 13	private Reservation reservationServiceProxy; // reference to proxy
14	private String seatType; // type of seat to reserve 15	private String classType; // class of seat to reserve
16	private String result; // result of reservation attempt 17
18	// no-argument constructor 19	public ReservationBean() 20	{
21	// get service endpoint interface
22	ReservationService reservationService = new ReservationService(); 23	reservationServiceProxy = reservationService.getReservationPort(); 24     } // end constructor
25
26	// return classType
27	public String getClassType() 28	{
29	return classType;
30	} // end method getClassType 31
32	// set classType
33	public void setClassType( String classType ) 34	{
35	this.classType = classType; 36     } // end method setClassType 37
38	// return seatType
39	public String getSeatType() 40	{
41	return seatType;
42	} // end method getSeatType 43
44	// set seatType
45	public void setSeatType( String seatType )
46	{

Fig. 28.22 | Pagebeanforseatreservationclient.(Part1of2.)
28-48	Chapter28  WebServicesinJava


47	this.seatType = seatType; 48     } // end method setSeatType 49
50	// return result
51	public String getResult() 52	{
53	return result;
54	} // end method getResult 55
56	// invoke the web service when the user clicks Reserve button 57	public void reserveSeat()
58	{
59	try 60	{
61	boolean reserved = reservationServiceProxy.reserve( 62               getSeatType(), getClassType() );
63
64	if ( reserved )
65	result = "Your reservation has been made. Thank you!"; 66            else
67	result = "This type of seat is not available. " + 68                  "Please modify your request and try again."; 69         } // end try
70	catch ( Exception e ) 71	{
72	e.printStackTrace(); 73         } // end catch
74	} // end method reserveSeat
75  } // end class ReservationBean

Fig. 28.22 | Pagebeanforseatreservationclient.(Part2of2.)

28.11  Equation Generator: Returning User-Defined
Types
Most of the web services we’ve demonstrated received and returned primitive-type in-stances. It’s also possible to process instances of class types in a web service. These types can be passed to or returned from web service methods.
This section presents a RESTful EquationGenerator web service that generates random arithmetic equations of type Equation. The client is a math-tutoring application that accepts information about the mathematical question that the user wishes to attempt (addition, subtraction or multiplication) and the skill level of the user (1 specifies equa-tions using numbers from 1 through 9, 2 specifies equations involving numbers from 10 through 99, and 3 specifies equations containing numbers from 100 through 999). The web service then generates an equation consisting of random numbers in the proper range. The client application receives the Equationand displays the sample question to the user.

Defining Class Equation
Wedefineclass Equationin Fig. 28.23. Alltheprogramsin thissectionhaveacopyof this class in their corresponding package. Except for the package name, the class is identical in each project, so we show it only once. Like the TextMessageclass used earlier, the server-
28.11 EquationGenerator:ReturningUser-DefinedTypes   28-49


side and client-side copies of class Equationare unrelated to each other. The only require-ment for serialization and deserialization to work with the JAXB and Gson classes is that class Equationmust have the same publicproperties on both the server and the client. Such properties can be public instance variables or private instance variables that have cor-responding set and get methods.

1  // Fig. 28.23: Equation.java
2  // Equation class that contains information about an equation. 3  package com.deitel.equationgeneratorxml;
4
5  public class Equation 6  {
7	private int leftOperand; 8	private int rightOperand; 9	private int result;
10	private String operationType; 11
12	// required no-argument constructor 13	public Equation()
14	{
15	this( 0, 0, "add" );
16	} // end no-argument constructor 17
18	// constructor that receives the operands and operation type 19	public Equation( int leftValue, int rightValue, String type ) 20	{
21	leftOperand = leftValue; 22	rightOperand = rightValue; 23
24	// determine result
25	if ( type.equals( "add" ) ) // addition 26	{
27	result = leftOperand + rightOperand; 28	operationType = "+";
29	} // end if
30	else if ( type.equals( "subtract" ) ) // subtraction 31	{
32	result = leftOperand - rightOperand; 33	operationType = "-";
34	} // end if
35	else // multiplication 36	{
37	result = leftOperand * rightOperand; 38	operationType = "*";
39	} // end else
40	} // end three argument constructor 41
42	// gets the leftOperand
43	public int getLeftOperand() 44	{
45	return leftOperand;
46	} // end method getLeftOperand

Fig. 28.23 | Equationclassthatcontainsinformationaboutanequation.(Part1of3.)
28-50	Chapter28  WebServicesinJava


47
48	// required setter
49	public void setLeftOperand( int value ) 50	{
51	leftOperand = value;
52	} // end method setLeftOperand 53
54	// gets the rightOperand
55	public int getRightOperand() 56	{
57	return rightOperand;
58	} // end method getRightOperand 59
60	// required setter
61	public void setRightOperand( int value ) 62	{
63	rightOperand = value;
64	} // end method setRightOperand 65
66	// gets the resultValue 67	public int getResult() 68	{
69	return result;
70	} // end method getResult 71
72	// required setter
73	public void setResult( int value ) 74	{
75	result = value;
76	} // end method setResult 77
78	// gets the operationType
79	public String getOperationType() 80	{
81	return operationType;
82	} // end method getOperationType 83
84	// required setter
85	public void setOperationType( String value ) 86	{
87	operationType = value;
88	} // end method setOperationType 89
90	// returns the left hand side of the equation as a String 91	public String getLeftHandSide()
92	{
93	return leftOperand + " " + operationType + " " + rightOperand; 94     } // end method getLeftHandSide
95
96	// returns the right hand side of the equation as a String 97	public String getRightHandSide()
98	{

Fig. 28.23 | Equationclassthatcontainsinformationaboutanequation.(Part2of3.)
28.11 EquationGenerator:ReturningUser-DefinedTypes   28-51


99	return "" + result;
100	} // end method getRightHandSide 101
102	// returns a String representation of an Equation 103	public String toString()
104	{
105	return getLeftHandSide() + " = " + getRightHandSide(); 106     } // end method toString
107 } // end class Equation

Fig. 28.23 | Equationclassthatcontainsinformationaboutanequation.(Part3of3.)

Lines 19–40 define a constructor that takes two ints representing the left and right operands, and a Stringrepresenting the arithmetic operation. The constructor stores this information, then calculates the result. The parameterless constructor (lines 13–16) calls the three-argument constructor (lines 19–40) and passes default values.
Class Equationdefines get and set methods for instance variables leftOperand(lines 43–52), rightOperand(lines 55–64), result(line 67–76) and operationType(lines 79– 88). It alsoprovidesgetmethodsfortheleft-hand andright-hand sides of theequation and a toStringmethod that returns the entire equation as a String. An instance variable can be serialized only if it has both a get and a set method. Because the different sides of the equation and the result of toStringcan be generated from the other instance variables, there’s no need to send them across the wire. The client in this case study does not use the getRightHandSidemethod, but we included it in case future clients choose to use it.

28.11.1 Creating the EquationGeneratorXMLWeb Service
Figure 28.24 presents the EquationGeneratorXMLweb service’s class for creating random-ly generated Equations. Method getXml(lines 19–38) takes two parameters—a String representing the mathematical operation ("add", "subtract"or "multiply") and an int representing the difficulty level. JAX-RS automatically converts the arguments to the cor-rect type and will return a “not found” error to the client if the argument cannot be con-verted from a String to the destination type. Supported types for conversion include integer types, floating-point types, booleanand the corresponding type-wrapper classes.

1  // Fig. 28.24: EquationGeneratorXMLResource.java 2  // RESTful equation generator that returns XML. 3  package com.deitel.equationgeneratorxml;
4
5  import java.io.StringWriter; 6  import java.util.Random;
7  import javax.ws.rs.PathParam; 8  import javax.ws.rs.Path;
9  import javax.ws.rs.GET;
10  import javax.ws.rs.Produces;
11  import javax.xml.bind.JAXB; // utility class for common JAXB operations
12

Fig. 28.24 | RESTfulequationgeneratorthatreturnsXML.(Part1of2.)
28-52	Chapter28  WebServicesinJava


13  @Path( "equation" )
14  public class EquationGeneratorXMLResource 15  {
16	private static Random randomObject = new Random(); 17
18	// retrieve an equation formatted as XML 19	@GET
20     @Path( "{operation}/{level}" ) 21     @Produces( "application/xml" )
22	public String getXml( @PathParam( "operation" ) String operation, 23         @PathParam( "level" ) int level )
24	{
25	// compute minimum and maximum values for the numbers 26	int minimum = ( int ) Math.pow( 10, level - 1 );
27	int maximum = ( int ) Math.pow( 10, level ); 28
29	// create the numbers on the left-hand side of the equation
30	int first = randomObject.nextInt( maximum - minimum ) + minimum; 31	int second = randomObject.nextInt( maximum - minimum ) + minimum; 32
33	// create Equation object and marshal it into XML
34	Equation equation = new Equation( first, second, operation ); 35	StringWriter writer = new StringWriter(); // XML output here
36	JAXB.marshal( equation, writer ); // write Equation to StringWriter 37	return writer.toString(); // return XML string
38	} // end method getXml
39  } // end class EquationGeneratorXMLResource

Fig. 28.24 | RESTfulequationgeneratorthatreturnsXML.(Part2of2.)

The getXmlmethod first determines the minimum (inclusive) and maximum (exclu-sive)valuesforthenumbersintheequationitwillreturn(lines26–27).Itthenusesastatic member of the Randomclass (line 16) to generate two random numbers in that range (lines 30–31). Line 34 creates an Equationobject, passing these two numbers and the requested operationtotheconstructor.ThegetXmlmethodthenusesJAXBtoconverttheEquation object to XML (line 36), which is output to the StringWritercreated on line 35. Finally, itretrievesthedatathatwaswrittentotheStringWriterandreturnsittotheclient.[Note: We’ll reimplement this web service with JSON in Section 28.11.3.]

28.11.2 Consuming the EquationGeneratorXMLWeb Service
The EquationGeneratorXMLClientapplication (Fig. 28.25) retrieves an XML-formatted Equationobject from the EquationGeneratorXMLweb service. The application then dis-plays the Equation’s left-hand side and waits for user to submit an answer.

1  // Fig. 28.25: EquationGeneratorXMLClientJFrame.java
2  // Math-tutoring program using REST and XML to generate equations. 3  package com.deitel.equationgeneratorxmlclient;
4
5  import javax.swing.JOptionPane;

Fig. 28.25 | Math-tutoringprogramusingRESTandXMLtogenerateequations.(Part1of4.)
28.11 EquationGenerator:ReturningUser-DefinedTypes   28-53


6  import javax.xml.bind.JAXB; // utility class for common JAXB operations 7
8  public class EquationGeneratorXMLClientJFrame extends javax.swing.JFrame 9  {
10	private String operation = "add"; // operation user is tested on 11	private int difficulty = 1; // 1, 2, or 3 digits in each number 12	private int answer; // correct answer to the question
13
14	// no-argument constructor
15	public EquationGeneratorXMLClientJFrame() 16	{
17	initComponents();
18	} // end no-argument constructor 19
20	// The initComponents method is autogenerated by NetBeans and is called 21	// from the constructor to initialize the GUI. This method is not shown 22	// here to save space. Open EquationGeneratorXMLClientJFrame.java in
23	// this example's folder to view the complete generated code. 24
143	// determine if the user answered correctly 144	private void checkAnswerJButtonActionPerformed( 145        java.awt.event.ActionEvent evt)
146	{
147	if ( answerJTextField.getText().equals( "" ) ) 148	{
149	JOptionPane.showMessageDialog(
150	this, "Please enter your answer." ); 151        } // end if
152
153	int userAnswer = Integer.parseInt( answerJTextField.getText() ); 154
155	if ( userAnswer == answer ) 156	{
157	equationJLabel.setText( "" ); // clear label
158	answerJTextField.setText( "" ); // clear text field 159	checkAnswerJButton.setEnabled( false );
160	JOptionPane.showMessageDialog( this, "Correct! Good Job!", 161              "Correct", JOptionPane.PLAIN_MESSAGE );
162	} // end if 163	else
164	{
165	JOptionPane.showMessageDialog( this, "Incorrect. Try again.", 166              "Incorrect", JOptionPane.PLAIN_MESSAGE );
167	} // end else
168	} // end method checkAnswerJButtonActionPerformed 169
170	// retrieve equation from web service and display left side to user 171	private void generateJButtonActionPerformed(
172	java.awt.event.ActionEvent evt) 173     {
174	try
175	{

Fig. 28.25 | Math-tutoringprogramusingRESTandXMLtogenerateequations.(Part2of4.)
28-54	Chapter28  WebServicesinJava


176	String url = String.format( "http://localhost:8080/" + 177              "EquationGeneratorXML/resources/equation/%s/%d", 178              operation, difficulty );
179
180	// convert XML back to an Equation object
181	Equation equation = JAXB.unmarshal( url, Equation.class ); 182
183	answer = equation.getResult();
184	equationJLabel.setText( equation.getLeftHandSide() + " =" ); 185	checkAnswerJButton.setEnabled( true );
186	} // end try
187	catch ( Exception exception ) 188	{
189	exception.printStackTrace(); 190        } // end catch
191	} // end method generateJButtonActionPerformed 192
193	// obtains the mathematical operation selected by the user 194	private void operationJComboBoxItemStateChanged(
195	java.awt.event.ItemEvent evt) 196     {
197	String item = ( String ) operationJComboBox.getSelectedItem(); 198
199	if ( item.equals( "Addition" ) )
200	operation = "add"; // user selected addition 201        else if ( item.equals( "Subtraction" ) )
202	operation = "subtract"; // user selected subtraction 203        else
204	operation = "multiply"; // user selected multiplication 205     } // end method operationJComboBoxItemStateChanged
206
207	// obtains the difficulty level selected by the user 208	private void levelJComboBoxItemStateChanged(
209	java.awt.event.ItemEvent evt) 210     {
211	// indices start at 0, so add 1 to get the difficulty level 212	difficulty = levelJComboBox.getSelectedIndex() + 1;
213	} // end method levelJComboBoxItemStateChanged 214
215	// main method begins execution
216	public static void main(String args[]) 217	{
218	java.awt.EventQueue.invokeLater( 219           new Runnable()
220	{
221	public void run() 222	{
223	new EquationGeneratorXMLClientJFrame().setVisible( true ); 224              } // end method run
225	} // end anonymous inner class
226	); // end call to java.awt.EventQueue.invokeLater 227     } // end main
228

Fig. 28.25 | Math-tutoringprogramusingRESTandXMLtogenerateequations.(Part3of4.)
28.11 EquationGenerator:ReturningUser-DefinedTypes   28-55


229     // Variables declaration - do not modify 230     private javax.swing.JLabel answerJLabel;
231	private javax.swing.JTextField answerJTextField; 232	private javax.swing.JButton checkAnswerJButton; 233	private javax.swing.JLabel equationJLabel;
234	private javax.swing.JButton generateJButton; 235	private javax.swing.JComboBox levelJComboBox; 236	private javax.swing.JLabel levelJLabel;
237	private javax.swing.JComboBox operationJComboBox; 238	private javax.swing.JLabel operationJLabel;
239	private javax.swing.JLabel questionJLabel; 240	// End of variables declaration
241 } // end class EquationGeneratorXMLClientJFrame

a)Generatingasimpleequation.	b)Sumbittingtheanswer.	c)Dialogindicatingcorrectanswer.










Fig. 28.25 | Math-tutoringprogramusingRESTandXMLtogenerateequations.(Part4of4.)

Thedefaultsettingforthedifficultylevelis1,buttheusercanchangethisbychoosing a level from the Choose level JComboBox. Changing the selected value invokes the level-JComboBoxItemStateChangedevent handler (lines 208–213), which sets the difficulty instance variable to the level selectedby the user. Although thedefault setting forthe ques-tion type is Addition, the user also can change this by choosing from the Choose operation JComboBox. This invokes the operationJComboBoxItemStateChangedevent handler in lines 194–205, which assigns to instance variable operationthe Stringcorresponding to the user’s selection.
The event handler for generateJButton (lines 171–191) constructs the URL to invoke the web service, then passes this URL to the unmarshalmethod, along with an instance ofClass<Equation>, so that JAXB can convert the XML intoanEquationobject (line 181). Once the XML has been converted back into an Equation, lines 183–184 retrieve the correct answer and display the left-hand side of the equation. The Check Answer button is then enabled (line 185), and the user must solve the problem and enter the answer.
When the user enters a value and clicks Check Answer, the checkAnswerJButtonAc-tionPerformedevent handler (lines 144–168) retrieves the user’s answer from the dialog box (line 153) and compares it to the correct answer that was stored earlier (line 155). If they match, lines 157–161 reset the GUI elements so the user can generate another equa-tion and tell the user that the answer was correct. If they do not match, a message box asking the user to try again is displayed (lines 165–166).
28-56	Chapter28  WebServicesinJava


28.11.3 Creating the EquationGeneratorJSONWeb Service
As you saw in Section 28.8, RESTful web services can return data formatted as JSON as well. Figure 28.26 is a reimplementation of the EquationGeneratorXMLservice that re-turns an Equationin JSON format.

1  // Fig. 28.26: EquationGeneratorJSONResource.java 2  // RESTful equation generator that returns JSON. 3  package com.deitel.equationgeneratorjson;
4
5  import com.google.gson.Gson; // converts POJO to JSON and back again 6  import java.util.Random;
7  import javax.ws.rs.GET; 8  import javax.ws.rs.Path;
9  import javax.ws.rs.PathParam; 10  import javax.ws.rs.Produces; 11
12  @Path( "equation" )
13  public class EquationGeneratorJSONResource 14  {
15	static Random randomObject = new Random(); // random number generator 16
17	// retrieve an equation formatted as JSON 18	@GET
19	@Path( "{operation}/{level}" ) 20	@Produces( "application/json" )
21	public String getJson( @PathParam( "operation" ) String operation, 22         @PathParam( "level" ) int level )
23	{
24	// compute minimum and maximum values for the numbers 25	int minimum = ( int ) Math.pow( 10, level - 1 );
26	int maximum = ( int ) Math.pow( 10, level ); 27
28	// create the numbers on the left-hand side of the equation
29	int first = randomObject.nextInt( maximum - minimum ) + minimum; 30	int second = randomObject.nextInt( maximum - minimum ) + minimum; 31
32	// create Equation object and return result
33	Equation equation = new Equation( first, second, operation );
34	return new Gson().toJson( equation ); // convert to JSON and return 35     } // end method getJson
36  } // end class EquationGeneratorJSONResource

Fig. 28.26 | RESTfulequationgeneratorthatreturnsJSON.

The logic implemented here is the same as the XML version except for the last line (line 34), which uses Gson to convert the Equationobject into JSON instead of using JAXB to convert it into XML. The @Producesannotation (line 20) has also changed to reflect the JSON data format.

28.11.4 Consuming the EquationGeneratorJSONWeb Service
The program in Fig. 28.27 consumes the EquationGeneratorJSONservice and performs the same function as EquationGeneratorXMLClient—the only difference is in how the
28.11 EquationGenerator:ReturningUser-DefinedTypes   28-57


Equationobject is retrieved from the web service. Lines 181–183 construct the URL that is used to invoke the EquationGeneratorJSONservice. As in the WelcomeRESTJSONClient example, we use the URLclass and an InputStreamReaderto invoke the web service and read the response (lines 186–187). The retrieved JSON is deserialized using Gson (line 191) and converted back into an Equationobject. As before, we use the getResultmeth-od (line 194) of the deserialized object to obtain the answer and the getLeftHandSide method (line 195) to display the left side of the equation.


1  // Fig. 28.27: EquationGeneratorJSONClientJFrame.java
2  // Math-tutoring program using REST and JSON to generate equations. 3  package com.deitel.equationgeneratorjsonclient;
4
5  import com.google.gson.Gson; // converts POJO to JSON and back again 6  import java.io.InputStreamReader;
7  import java.net.URL;
8  import javax.swing.JOptionPane; 9
10  public class EquationGeneratorJSONClientJFrame extends javax.swing.JFrame 11  {
12	private String operation = "add"; // operation user is tested on 13	private int difficulty = 1; // 1, 2, or 3 digits in each number 14	private int answer; // correct answer to the question
15
16	// no-argument constructor
17	public EquationGeneratorJSONClientJFrame() 18	{
19	initComponents();
20	} // end no-argument constructor 21
22	// The initComponents method is autogenerated by NetBeans and is called 23	// from the constructor to initialize the GUI. This method is not shown 24	// here to save space. Open EquationGeneratorJSONClientJFrame.java in 25	// this example's folder to view the complete generated code.
26
147	// determine if the user answered correctly 148	private void checkAnswerJButtonActionPerformed( 149        java.awt.event.ActionEvent evt)
150	{
151	if ( answerJTextField.getText().equals( "" ) ) 152	{
153	JOptionPane.showMessageDialog(
154	this, "Please enter your answer." ); 155        } // end if
156
157	int userAnswer = Integer.parseInt( answerJTextField.getText() ); 158
159	if ( userAnswer == answer ) 160	{
161	equationJLabel.setText( "" ); // clear label
162	answerJTextField.setText( "" ); // clear text field
163	checkAnswerJButton.setEnabled( false );

Fig. 28.27 | Math-tutoringprogramusingRESTandJSONtogenerateequations.(Part1of3.)
28-58	Chapter28  WebServicesinJava


164	JOptionPane.showMessageDialog( this, "Correct! Good Job!", 165              "Correct", JOptionPane.PLAIN_MESSAGE );
166	} // end if 167	else
168	{
169	JOptionPane.showMessageDialog( this, "Incorrect. Try again.", 170              "Incorrect", JOptionPane.PLAIN_MESSAGE );
171	} // end else
172	} // end method checkAnswerJButtonActionPerformed 173
174	// retrieve equation from web service and display left side to user 175	private void generateJButtonActionPerformed(
176	java.awt.event.ActionEvent evt) 177     {
178	try 179	{
180	// URL of the EquationGeneratorJSON service, with parameters 181	String url = String.format( "http://localhost:8080/" +
182	"EquationGeneratorJSON/resources/equation/%s/%d", 183	operation, difficulty );
184
185	// open URL and create a Reader to read the data 186	InputStreamReader reader =
187	new InputStreamReader( new URL( url ).openStream() ); 188
189	// convert the JSON back into an Equation object 190	Equation equation =
191	new Gson().fromJson( reader, Equation.class ); 192
193	// update the internal state and GUI to reflect the equation 194	answer = equation.getResult();
195	equationJLabel.setText( equation.getLeftHandSide() + " =" ); 196	checkAnswerJButton.setEnabled( true );
197	} // end try
198	catch ( Exception exception ) 199	{
200	exception.printStackTrace(); 201        } // end catch
202	} // end method generateJButtonActionPerformed 203
204	// obtains the mathematical operation selected by the user 205	private void operationJComboBoxItemStateChanged(
206	java.awt.event.ItemEvent evt) 207     {
208	String item = ( String ) operationJComboBox.getSelectedItem(); 209
210	if ( item.equals( "Addition" ) )
211	operation = "add"; // user selected addition 212        else if ( item.equals( "Subtraction" ) )
213	operation = "subtract"; // user selected subtraction 214        else
215	operation = "multiply"; // user selected multiplication
216	} // end method operationJComboBoxItemStateChanged

Fig. 28.27 | Math-tutoringprogramusingRESTandJSONtogenerateequations.(Part2of3.)
28.11 EquationGenerator:ReturningUser-DefinedTypes   28-59


217
218	// obtains the difficulty level selected by the user 219	private void levelJComboBoxItemStateChanged(
220	java.awt.event.ItemEvent evt) 221     {
222	// indices start at 0, so add 1 to get the difficulty level 223	difficulty = levelJComboBox.getSelectedIndex() + 1;
224	} // end method levelJComboBoxItemStateChanged 225
226	// main method begins execution
227	public static void main( String args[] ) 228	{
229	java.awt.EventQueue.invokeLater( 230           new Runnable()
231	{
232	public void run() 233	{
234	new EquationGeneratorJSONClientJFrame().setVisible( true ); 235              } // end method run
236	} // end anonymous inner class
237	); // end call to java.awt.EventQueue.invokeLater 238     } // end main
239
240     // Variables declaration - do not modify 241     private javax.swing.JLabel answerJLabel;
242	private javax.swing.JTextField answerJTextField; 243	private javax.swing.JButton checkAnswerJButton; 244	private javax.swing.JLabel equationJLabel;
245	private javax.swing.JButton generateJButton; 246	private javax.swing.JComboBox levelJComboBox; 247	private javax.swing.JLabel levelJLabel;
248	private javax.swing.JComboBox operationJComboBox; 249	private javax.swing.JLabel operationJLabel;
250	private javax.swing.JLabel questionJLabel; 251	// End of variables declaration
252 } // end class EquationGeneratorJSONClientJFrame

Fig. 28.27 | Math-tutoringprogramusingRESTandJSONtogenerateequations.(Part3of3.)




Summary
Section 28.1 Introduction
•  A web service (p. 28-2) is a software component stored on one computer that can be accessed by an application (or other software component) on another computer over a network.
•  Web services communicate using such technologies as XML, JSON and HTTP.
•  JAX-WS (p. 28-2) is based on the Simple Object Access Protocol (SOAP; p. 28-2)—an XML-based protocol that allows web services and clients to communicate.
•  JAX-RS (p. 28-2) uses Representational StateTransfer(REST; p. 28-2)—anetwork architecture that uses the web’s traditional request/response mechanisms such as GETand POSTrequests.
28-60	Chapter28  WebServicesinJava


•  Webservicesenablebusinessestoconducttransactionsviastandardized,widelyavailablewebser-vices rather than relying on proprietary applications.
•  Web services are platform and language independent, so companies can collaborate via web ser-vices without hardware, software and communications compatibility issues.
•  NetBeans is one of the many tools that enable you to publish and/or consume web services.

Section 28.2 Web Service Basics
•  The machine on which a web service resides is referred to as a web service host.
•  A client application that accesses the web service sends a method call over a network to the web service host, which processes the call and returns a response over the network to the application.
•  In Java, a web service is implemented as a class. The class that represents the web service resides on a server—it’s not part of the client application.
•  Makingawebserviceavailabletoreceiveclientrequestsisknownaspublishingawebservice(p. 28-4); using a web service from a client application is known as consuming a web service (p. 28-4).

Section 28.3 Simple Object Access Protocol (SOAP)
•  SOAP is a platform-independent protocol that uses XML to make remote procedure calls, typi-cally overHTTP.Eachrequestandresponseis packagedinaSOAPmessage(p. 28-4)—anXML message containing the information that a web service requires to process the message.
•  SOAP messages arewritten in XML so thatthey’re computerreadable, human readableand plat-form independent.
•  SOAP supports an extensive set of types—the primitive types, as well as DateTime, XmlNodeand others. SOAP can also transmit arrays of these types.
•  When a program invokes a method of a SOAP web service, the request and all relevant informa-tion are packaged in a SOAP message, enclosed in a SOAP envelope (p. 28-4) and sent to the server on which the web service resides.
•  When a web service receives a SOAP message, it parses the XML representing the message, then processes the message’s contents. The message specifies the method that the client wishes to ex-ecute and the arguments the client passed to that method.
•  After a web service parses a SOAP message, it calls the appropriate method with the specified ar-guments (if any) and sends the response back to the client in another SOAP message. The client parses the response to retrieve the method’s result.

Section 28.4 Representational State Transfer (REST)
•  RepresentationalStateTransfer(REST)referstoanarchitecturalstyleforimplementingwebser-vices. Such web services are often called RESTful web services (p. 28-4). Though REST itself is not a standard, RESTful web services are implemented using web standards.
•  Each operation in a RESTful web service is identified by a unique URL. •  REST can return data in many formats, including XML and JSON.
Section 28.5 JavaScript Object Notation (JSON)
•  JavaScript Object Notation (JSON; p. 28-5) is an alternative to XML for representing data.
•  JSON is a text-based data-interchange format used to represent objects in JavaScript as collec-tions of name/value pairs represented as Strings.
•  JSON is a simple format that makes objects easy to read, create and parse and allows programs to transmit data efficiently across the Internet, because it’s much less verbose than XML.
•  Each value in a JSON array can be a string, a number, a JSON object, true, falseor null.
Summary   28-61


Section 28.6.1 Creating a Web Application Project and Adding a Web Service Class in NetBeans
•  When you create a web service in NetBeans, you focus on the web service’s logic and let the IDE handle the web service’s infrastructure.
•  To create a web service in NetBeans, you first create a Web Application project (p. 28-5).

Section 28.6.2 Defining the WelcomeSOAPWeb Service in NetBeans
•  By default, each new web service class created with the JAX-WS APIs is a POJO (plain old Java object)—you do not need to extend a class or implement an interface to create a web service.
•  WhenyoudeployawebapplicationcontainingaJAX-WSwebservice,theservercreatestheserv-er-side artifacts that support the web service.
•  The@WebServiceannotation (p. 28-7)indicatesthataclassrepresents awebservice.Theoption-alnameattribute(p. 28-7)specifiestheserviceendpointinterface(SEI;p. 28-7)class’sname.The optional serviceNameattribute (p. 28-7) specifies the name of the class that the client uses to ob-tain an SEI object.
•  Methods that are tagged with the @WebMethodannotation (p. 28-7) can be called remotely.
•  The @WebMethodannotation’s optional operationNameattribute (p. 28-7) specifies the method name that is exposed to the web service’s clients.
•  Web method parameters are annotated with the @WebParamannotation (p. 28-8). The optional nameattribute (p. 28-8) indicates the parameter name that is exposed to the web service’s clients.

Section 28.6.3 Publishing the WelcomeSOAPWeb Service from NetBeans
•  NetBeans handles all the details of building and deploying a web service for you. This includes creating the framework required to support the web service.

Section 28.6.4 Testing the WelcomeSOAPWeb Service with GlassFish Application Server’s TesterWeb Page
•  GlassFish can dynamically create a web page for testing a web service’s methods from a web browser. To open the test page, expand the project’s Web Services node in the NetBeans Projects tab, then right click the web service class name and select Test Web Service.
•  Aclientcan accessa webserviceonly when theapplication serveris running.If NetBeans launch-es the application server for you, the server will shut down when you close NetBeans. To keep the application server up and running, you can launch it independently of NetBeans.

Section 28.6.5 Describing a Web Service with the Web Service Description Language (WSDL)
•  To consume a web service, a client must know where to find it and must be provided with the web service’s description.
•  JAX-WS uses the Web Service Description Language (WSDL; p. 28-11)—a standard XML vo-cabulary for describing web services in a platform-independent manner.
•  The server generates a web service’s WSDL dynamically for you, and client tools can parse the WSDL to help create the client-side proxy class that a client uses to access the web service.

Section 28.6.6 Creating a Client to Consume the WelcomeSOAPWeb Service
•  A web service reference (p. 28-12) defines the service endpoint interface class so that a client can access the service.
•  An application that consumes a SOAP-based web service invokes methods on a service endpoint interface (SEI) object that interact with the web service on the client’s behalf.
28-62	Chapter28  WebServicesinJava


•  The service endpoint interface object handles the details of passing method arguments to and re-ceiving return values from the web service. This communication can occur over a local network, over the Internet or even with a web service on the same computer.
•  NetBeans creates these service endpoint interface classes for you.
•  When you add the web service reference, the IDE creates and compiles the client-side artifacts— the framework of Java code that supports the client-side service endpoint interface class. The ser-vice endpoint interface class uses the rest of the artifacts to interact with the web service.
•  A web service reference is added by giving NetBeans the URL of the web service’s WSDL file.

Section 28.6.7 Consuming the WelcomeSOAPWeb Service
•  To consume a JAX-WS web service, you must obtain an SEI object. You then invoke the web service’s methods through the SEI object.

Section 28.7.1 Creating a REST-Based XML Web Service
•  The RESTful Web Services plug-in for NetBeans provides various templates for creating RESTful web services, including ones that can interact with databases on the client’s behalf.
•  The @Pathannotation (p. 28-18) on a JAX-RS web service class indicates the URI for accessing the web service. This is appended to the web application project’s URL to invoke the service. Methods of the class can also use the @Pathannotation.
•  Parts of the path specified in curly braces indicate parameters—they’re placeholders for argu-ments that are passed to the web service as part of the path. The base path for the service is the project’s resourcesdirectory.
•  Arguments in a URL can be used as arguments to a web service method. To do so, you bind the parameters specified in the @Pathspecification to parameters of a web service method with the @PathParam annotation (p. 28-19). When the request is received, the server passes the argu-ment(s) in the URL to the appropriate parameter(s) in the web service method.
•  The @GETannotation (p. 28-19) denotes that a method is accessed via an HTTP GETrequest. Similar annotations exist for HTTP PUT, POST, DELETEand HEADrequests.
•  The @Producesannotation (p. 28-19) denotes the content type returned to the client. It’s possible to have multiple methods with the same HTTP method and path but different @Producesannota-tions, and JAX-RS will call the method matching the content type requested by the client.
•  The @Consumesannotation (p. 28-19) restricts the content type that a web service accepts from a PUTrequest.
•  JAXB (Java Architecture for XML Binding; p. 28-19) is a set of classes for converting POJOs to and fromXML.ClassJAXB(packagejavax.xml.bind)containsstaticmethodsforcommonoperations.
•  Class JAXB’s staticmethod marshal(p. 28-19) converts a Java object to XML format.
•  GlassFish does not provide test pages for RESTful services, but NetBeans generates a test page that can be accessed by right clicking the project’s node in the Projects tab and selecting Test RESTful Web Services.
•  On the test page, select a method element in the left column. The right side of the page displays a form that allows you to choose the MIME type of the data and lets you enter the method’s ar-guments. Click the Test button to invoke the web service and display the returned data.
•  WADL (Web Application Description Language; p. 28-20) has similar design goals to WSDL, but describes RESTful services instead of SOAP services.

Section 28.7.2 Consuming a REST-Based XML Web Service
•  Clients of RESTful web services do not require web service references.
Summary   28-63


•  The JAXBclass has a staticunmarshalmethod that takes as arguments a file name or URL as a String, and a Class<T>object indicating the Java class to which the XML will be converted.

Section 28.8 Publishing and Consuming REST-Based JSON Web Services
•  JSON components—objects, arrays, strings, numbers—can be easily mapped to constructs in Java and other programming languages.
•  There are many open-source JSON libraries for Java and other languages. The Gson library from code.google.com/p/google-gson/provides a simple way to convert POJOs to and from JSON.

Section 28.8.1 Creating a REST-Based JSON Web Service
•  To add a JAR file as a library in NetBeans, right click your project’s Libraries folder, select Add JAR/Folder…, locate the JAR file and click Open.
•  For a web service method that returns JSON text, the argument to the @Producesattribute must be "application/json".
•  In JSON, all data must be encapsulated in a composite data type.
•  Create a Gsonobject (from package com.google.gson) and call its toJsonmethod to convert an object into its JSON Stringrepresentation.

Section 28.8.2 Consuming a REST-Based JSON Web Service
•  To read JSON data from a URL, create a URLobject and call its openStreammethod (p. 28-26). This invokes the web service and returns an InputStreamfrom which the client can read the re-sponse. Wrap the InputStreamin an InputStreamReaderso it can be passed as the first argument to the Gsonclass’s fromJsonmethod (p. 28-26).

Section 28.9 Session Tracking in a SOAP Web Service
•  It can be beneficial for a web service to maintain client state information, thus eliminating the need to pass client information between the client and the web service multiple times. Storing session information also enables a web service to distinguish between clients.

Section 28.9.1 Creating a BlackjackWeb Service
•  In JAX-WS 2.2, to enable session tracking in a web service, you simply precede your web service class with the @HttpSessionScopeannotation (p. 28-29) from package com.sun.xml.ws.devel-oper.servlet. To use this package you must add the JAX-WS 2.2 library to your project.
•  Once a web service is annotated with @HttpSessionScope, the server automatically maintains a separate instance of the class for each client session.

Section 28.9.2 Consuming the BlackjackWeb Service
•  In the JAX-WS framework, the client must indicate whether it wants to allow the web service to maintain session information. To do this, first cast the proxy object to interface type Binding-Provider. A BindingProviderenables the client to manipulate the request information that will be sent to the server. This information is stored in an object that implements interface Request-Context. The BindingProviderand RequestContextare part of the framework that is created by the IDE when you add a web service client to the application.
•  Next, invoke the BindingProvider’s getRequestContextmethod to obtain the RequestContext object.  Then  call  the  RequestContext’s  put method  to  set  the  property  BindingProvid-er.SESSION_MAINTAIN_PROPERTYto true, which enables session tracking from the client side so that the web service knows which client is invoking the service’s web methods.
28-64	Chapter28  WebServicesinJava


Section 28.11 Equation Generator: Returning User-Defined Types
•  It’s also possible to process instances of class types in a web service. These types can be passed to or returned from web service methods.
•  An instance variable can be serialized only if it’s publicor has both a get and a set method.
•  Properties that can be generated from the values of other properties should not be serialized to prevent redundancy.
•  JAX-RS automatically converts arguments from an @Pathannotation to the correct type, and it will return a “not found” error to the client if the argument cannot be converted from the String passed as part of the URL to the destination type. Supported types for conversion include integer types, floating-point types, booleanand the corresponding type-wrapper classes.

Self-Review Exercises
28.1	State whether each of the following is true or false. If false, explain why.
a)  All methods of a web service class can be invoked by clients of that web service.
b)  When consuming a web service in a client application created in NetBeans, you must create the proxy class that enables the client to communicate with the web service.
c)   A proxy class communicating with a web service normally uses SOAP to send and re-ceive messages.
d)  Session tracking is automatically enabled in a client of a web service. e)   Web methods cannot be declared static.
f)   A user-defined type used in a web service must define both get and set methods for any property that will be serialized.
g)  Operations in a REST web service are defined by their own unique URLs. h)  A SOAP-based web service can return data in JSON format.
28.2	Fill in the blanks for each of the following statements:
a)  A key difference between SOAP and REST is that SOAP messages have data wrapped in a(n)	.
b)  A web service in Java is a(n)	—it does not need to implement any interfaces or extend any classes.
c)   WebservicerequestsaretypicallytransportedovertheInternetviathe               protocol. d)  To set the exposed name of a web method, use the               element of the @WebMethod
annotation.
e)		transforms an object into a format that can be sent between a web service and a client.
f)   To return data in JSON format from a method of a REST-based web service, the @Pro-ducesannotation is set to	.
g)  To return data in XML format from a method of a REST-based web service, the @Pro-ducesannotation is set to	.

Answers to Self-Review Exercises
28.1	a) False. Only methods declared with the @WebMethodannotation can be invoked by a web service’s clients. b) False. The proxy class is created by NetBeans when you add a web service client to the application. c) True. d) False. In the JAX-WS framework, the client must indicate whether it wants to allow theweb service to maintain session information.First,you must castthe proxy object to interface type BindingProvider, then use the BindingProvider’s getRequestContextmethod to obtain the RequestContextobject. Finally, you must use the RequestContext’s putmethod to set the property BindingProvider.SESSION_MAINTAIN_PROPERTY to true. e) True. f) True. g) True. h) False. A SOAP web service implicitly returns data in XML format.
Exercises   28-65


28.2	a) SOAP  message  or  SOAP  envelope.  b) POJO  (plain  old  Java  object)  c) HTTP. d) operationName. e) serialization. f) "application/json". g) "application/xml".

Exercises
28.3	(Phone Book Web Service) Create a RESTful web service that stores phone book entries in the database PhoneBookDBand a web client application that consumes this service. The web service should output XML. Use the steps in Section 27.2.1 to create the PhoneBookdatabase and a data source name for accessing it. The database contains one table—PhoneBook—with three columns— LastName, FirstNameand PhoneNumber. The LastNameand FirstNamecolumns store up to 30 char-acters. The PhoneNumbercolumn supports phone numbers of the form (800)555-1212that contain 14 characters. Use the PhoneBookDB.sqlscript provided in the examples folder to create the Phone-Booktable.
Give the client user the capability to enter a new contact (web method addEntry) and to find contacts by last name (web method getEntries). Pass only Strings as arguments to the web ser-vice. The getEntriesweb method should return an array of Strings that contains the matching phone book entries. Each Stringin the array should consist of the last name, first name and phone number for one phone book entry. These values should be separated by commas.
The SELECTquery that will find a PhoneBookentry by last name should be:
SELECT LastName, FirstName, PhoneNumber
FROM PhoneBook
WHERE (LastName = LastName)
The INSERTstatement that inserts a new entry into the PhoneBookdatabase should be:
INSERT INTO PhoneBook (LastName, FirstName, PhoneNumber)
VALUES (LastName, FirstName, PhoneNumber)
28.4	(Phone Book Web Service Modification) Modify Exercise 28.3 so that it uses a class named PhoneBookEntryto represent a row in the database. The web service should return objects of type PhoneBookEntryin XML format for the getEntriesmethod, and the client application should use the JAXBmethod unmarshalto retrieve the PhoneBookEntryobjects.
28.5	(Phone-Book Web Service with JSON) Modify Exercise 28.4 so that the PhoneBookEntry class is passed to and from the web service as a JSON object. Use serialization to convert the JSON object into an object of type PhoneBookEntry.
28.6	(Blackjack Web Service Modification) Modify the Blackjack web service example in Section 28.9 to include class Card. Modify web method dealCardso that it returns an object of type Cardand modify web method getHandValueso that it receives an array of Cardobjects from the cli-ent. Also modify the client application to keep track of what cards have been dealt by using ArrayLists of Cardobjects. The proxy class created by NetBeans will treat a web method’s array parameter as a List, so you can pass these ArrayLists of Cardobjects directly to the getHandValue method. Your Cardclass should include set and get methods for the face and suit of the card.
28.7	(Project: Airline Reservation Web-Service Modification) Modify the airline reservation web service in Section 28.10 so that it contains two separate methods—one that allows users to view all available seats, and another that allows users to reserve a particular seat that is currently available. Use an object of type Ticketto pass information to and from the web service. The web service must be able to handle cases in which two users view available seats, one reserves a seat and the second user tries to reserve the same seat, not knowing that it’s now taken. The names of the methods that execute  should be reserveand getAllAvailableSeats.








This page intentionally left blank
NumberSystems	   E Objectives Inthisappendix,you’ll:
ÿ   Learnbasicnumbersystems conceptssuchasbase, positionalvalueandsymbol
value.
ÿ   Workwithnumbers representedinthebinary, octalandhexadecimal
numbersystems
ÿ   Abbreviatebinarynumbers asoctalnumbersor
hexadecimalnumbers.
ÿ   Convertoctalnumbersand hexadecimalnumbersto
binarynumbers.
ÿ   Convertbackandforth betweendecimalnumbers andtheirbinary,octaland
hexadecimalequivalents.
ÿ   Learnbinaryarithmeticand hownegativebinarynumbers arerepresentedusingtwo’s
complementnotation.
E-2	AppendixE NumberSystems



E.1  Introduction
E.2  AbbreviatingBinaryNumbersas OctalandHexadecimalNumbers
E.3  ConvertingOctalandHexadecimal NumberstoBinaryNumbers
E.4  ConvertingfromBinary,Octalor HexadecimaltoDecimal

E.5  ConvertingfromDecimaltoBinary, OctalorHexadecimal
E.6  NegativeBinaryNumbers:Two’s ComplementNotation


Summary | Self-Review Exercises | Answers to Self-Review Exercises | Exercises

E.1  Introduction
Inthisappendix,weintroducethekeynumbersystemsthatJavaScriptprogrammersuse,es-pecially when they are working on software projects that require close interaction with “ma-chine-level” hardware. Projects like this include operating systems, computer networking software, compilers, database systems and applications requiring high performance.
When we write an integer such as 227 or –63 in a JavaScript program, the number is assumed to be in the decimal (base 10) number system. The digits in the decimal number system are 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9. The lowest digit is 0 and the highest digit is 9— one less than the base of 10. Internally, computers use the binary (base 2) number system. The binary number system has only two digits, namely 0 and 1. Its lowest digit is 0 and its highest digit is 1—one less than the base of 2.
Aswewillsee,binarynumbers tendtobe muchlongerthan theirdecimal equivalents. Programmers who work in assembly languages that enable them to reach down to the “machine level” find it cumbersome to work with binary numbers. So two other number systems—the octal number system (base 8) and the hexadecimal number system (base 16)—are popular, primarily because they can easily be converted to and from binary (as we will see later) and represent these numbers in fewer digits.
In the octal number system, the digits range from 0 to 7. Because both the binary number system and the octal number system have fewer digits than the decimal number system, their digits are the same as the corresponding digits in decimal.
The hexadecimal number system poses a problem because it requires sixteen digits— a lowest digit of 0 and a highest digit with a value equivalent to decimal 15 (one less than thebaseof16).Byconvention,weusethelettersAthroughFtorepresentthehexadecimal digits corresponding to decimal values 10 through 15. Thus, in hexadecimal we can have numbers like 876 consisting solely of decimal-like digits, numbers like 8A55F consisting of digits and letters, and numbers like FFE consisting solely of letters. Occasionally, a hexadecimal number spells a common word such as FACE or FEED—this can appear strange to programmers accustomed to working with decimal numbers.
Each of these number systems uses positional notation—each position in which a digit is written has a different positional value. For example, in the decimal number 937 (the 9, the 3, and the 7 are referred to as symbol values), we say that the 7 is written in the ones position, the 3 is written in the tens position, and the 9 is written in the hundreds position. Notice that each of thesepositions is a power of the base(base 10), and that these powers begin at 0 and increase by 1 as we move left in the number. Figures E.1–E.3 com-pare the binary, octal, decimal and hexadecimal number systems.
E.1 Introduction   E-3



Binarydigit

0
1

Octaldigit

0 1 2 3 4 5 6
7

Decimaldigit

0 1 2 3 4 5 6 7 8
9

Hexadecimaldigit

0 1 2 3 4 5 6 7 8 9
A (decimal value of 10) B (decimal value of 11) C (decimal value of 12) D (decimal value of 13) E (decimal value of 14)
F (decimal value of 15)


Fig. E.1  | Digitsofthebinary,octal,decimalandhexadecimalnumbersystems.



Attribute	Binary	Octal

Base                       2             8 Lowest digit           0             0
Highest digit	1	7

Decimal

10 0
9

Hexadecimal

16 0
F


Fig. E.2  | Comparingthebinary,octal,decimalandhexadecimalnumbersystems.


Positionalvaluesinthedecimalnumbersystem


Decimal digit Position name Positional value
Positional value as a power of the base (10)


9	3	7 Hundreds	Tens	Ones 100	10	1
102	101	100


Fig. E.3  | Positionalvaluesinthedecimalnumbersystem.

For longer decimal numbers, the next positions to the left would be the thousands position (10 tothe 3rd power), theten-thousandsposition (10tothe4thpower), thehun-dred-thousands position (10 to the 5th power), the millions position (10 to the 6th power), the ten-millions position (10 to the 7th power) and so on.
E-4	AppendixE NumberSystems


In the binary number 101, we say that the rightmost 1 is written in the ones position, the 0 is written in the twos position and the leftmost 1 is written in the fours position. Notice that each of these positions is a power of the base (base 2), and that these powers begin at 0 and increase by 1 as we move left in the number (Fig. E.4).


Positionalvaluesinthebinarynumbersystem

Binary digit	1	0	1 Position name	Fours	Twos	Ones Positional value	4	2	1
Positional value as a	22	21	20 power of the base (2)

Fig. E.4  | Positionalvaluesinthebinarynumbersystem.

For longer binary numbers, the next positions to the left would be the eights position (2 to the 3rd power), the sixteens position (2 to the 4th power), the thirty-twos position (2 to the 5th power), the sixty-fours position (2 to the 6th power) and so on.
In the octal number 425, we say that the 5 is written in the ones position, the 2 is written in the eights position, and the 4 is written in the sixty-fours position. Notice that each of these positions is a power of the base (base 8), and that these powers begin at 0 and increase by 1 as we move left in the number (Fig. E.5).


Positionalvaluesintheoctalnumbersystem


Decimal digit Position name Positional value
Positional value as a power of the base (8)


4	2	5 Sixty-fours	Eights	Ones 64	8	1
82	81	80


Fig. E.5  | Positionalvaluesintheoctalnumbersystem.

For longer octal numbers, the next positions to the left would be the five-hundred-and-twelves position (8 to the 3rd power), the four-thousand-and-ninety-sixes position (8 to the 4th power), the thirty-two-thousand-seven-hundred-and-sixty eights position (8 to the 5th power) and so on.
In the hexadecimal number 3DA, we say that the A is written in the ones position, the D is written in the sixteens position and the 3 is written in the two-hundred-and-fifty-sixes position. Notice that each of these positions is a power of the base (base 16), and that these powers begin at 0 and increase by 1 as we move left in the number (Fig. E.6).
For longer hexadecimal numbers, the next positions to the left would be the four-thousand-and-ninety-sixes position (16 to the 3rd power), the sixty-five-thousand-five-hundred-and-thirty-sixes position (16 to the 4th power) and so on.
E.2 AbbreviatingBinaryNumbersasOctalandHexadecimalNumbers   E-5


Positionalvaluesinthehexadecimalnumbersystem


Decimal digit Position name

Positional value
Positional value as a power of the base (16)


3
Two-hundred-and-fifty-sixes
256
162


D	A Sixteens	Ones

16	1
161	160


Fig. E.6  | Positionalvaluesinthehexadecimalnumbersystem.

E.2  Abbreviating Binary Numbers as Octal and
Hexadecimal Numbers
The main use for octal and hexadecimal numbers in computing is for abbreviating lengthy binary representations. Figure E.7 highlights the fact that lengthy binary numbers can be expressed concisely in number systems with bases higher than two.



Decimal
number

0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16

Binary
representation

0
1
10
11
100
101
110
111
1000
1001
1010
1011
1100
1101
1110
1111
10000

Octal
representation

0
1
2
3
4
5
6
7
10
11
12
13
14
15
16
17
20

Hexadecimal
representation

0
1
2
3
4
5
6
7
8
9
A
B
C
D
E
F
10


Fig. E.7  | Decimal,binary,octalandhexadecimalequivalents.

Aparticularlyimportantrelationshipthatboththeoctalnumbersystemandthehexa-decimal number system have to the binary system is that the bases of octal and hexadec-
E-6	AppendixE NumberSystems


imal (8 and 16, respectively) are powers of the base of the binary number system (base 2). Consider the following 12-digit binary number and its octal and hexadecimal equivalents. See if you can determine how this relationship makes it convenient to abbreviate binary numbers in octal or hexadecimal. The answer follows the numbers.


Binary number 100011010001

Octal equivalent 4321

Hexadecimal equivalent 8D1

To see how the binary number converts easily to octal, simply break the 12-digit binary number into groups of three consecutive bits each (note that 8 = 23), and write those groups over the corresponding digits of the octal number as follows:

100	011	010	001 4	3	2	1
Notice that the octal digit you have written under each group of three bits corre-spondspreciselytotheoctalequivalentofthat3-digitbinarynumberasshowninFig. E.7. The same kind of relationship may be observed in converting numbers from binary
to hexadecimal. In particular, break the 12-digit binary number into groups of four con-secutive bits each (note that 16 = 24) and write those groups over the corresponding digits of the hexadecimal number as follows:

1000   1101   0001 8	D	1
Notice that the hexadecimal digit you wrote under each group of four bits corre-sponds precisely to the hexadecimal equivalent of that 4-digit binary number as shown in Fig. E.7.

E.3  Converting Octal and Hexadecimal Numbers to
Binary Numbers
In the previous section, we saw how to convert binary numbers to their octal and hexadec-imal equivalents by forming groups of binary digits and simply rewriting these groups as their equivalent octal digit values or hexadecimal digit values. This process may be used in reverse to produce the binary equivalent of a given octal or hexadecimal number.
For example, the octal number 653 is converted to binary simply by writing the 6 as its 3-digit binary equivalent 110, the 5 as its 3-digit binary equivalent 101 and the 3 as its 3-digit binary equivalent 011 to form the 9-digit binary number 110101011.
The hexadecimal number FAD5 is converted to binary simply by writing the F as its 4-digit binary equivalent 1111, the A as its 4-digit binary equivalent 1010, the D as its 4-digit binary equivalent 1101 and the 5 as its 4-digit binary equivalent 0101 to form the 16-digit 1111101011010101.

E.4  Converting from Binary, Octal or Hexadecimal to
Decimal
Because we are accustomed to working in decimal, it is often convenient to convert a bi-nary, octal or hexadecimal number to decimal to get a sense of what the number is “really” worth. Our diagrams in Section E.1 express the positional values in decimal. To convert a number to decimal from another base, multiply the decimal equivalent of each digit by
E.5 ConvertingfromDecimaltoBinary,OctalorHexadecimal   E-7


its positional value, and sum these products. For example, the binary number 110101 is converted to decimal 53 as shown in Fig. E.8.


Convertingabinarynumbertodecimal


Postional values: Symbol values:
Products:


32       16       8        4        2        1 1        1        0        1        0        1
1*32=3   1*16=1   0*8=0	1*4=4	0*2=0	1*1=1
2	6

Sum:	= 32 + 16 + 0 + 4 + 0s + 1 = 53

Fig. E.8  | Convertingabinarynumbertodecimal.

To convert octal 7614 to decimal 3980, we use the same technique, this time using appropriate octal positional values as shown in Fig. E.9.


Convertinganoctalnumbertodecimal


Positional values: Symbol values:
Products


512 7
7*512=3584


64            8             1 6             1             4
6*64=384	1*8=8	4*1=4

Sum:	= 3584 + 384 + 8 + 4 = 3980

Fig. E.9  | Convertinganoctalnumbertodecimal.

To convert hexadecimal AD3B to decimal 44347, we use the same technique, this time using appropriate hexadecimal positional values as shown in Fig. E.10.


Convertingahexadecimalnumbertodecimal


Positional values: Symbol values:
Products


4096 A
A*4096=409
60


256 D
D*256=3328


16            1 3             B
3*16=48	B*1=11

Sum:	= 40960 + 3328 + 48 + 11 = 44347 Fig. E.10 | Convertingahexadecimalnumbertodecimal.
E.5  Converting from Decimal to Binary, Octal or
Hexadecimal
The conversions of the previous section follow naturally from the positional notation con-ventions. Converting from decimal to binary, octal or hexadecimal also follows these con-ventions.
E-8	AppendixE NumberSystems


Suppose we wish to convert decimal 57 to binary. We begin by writing the positional valuesofthecolumnsrighttoleftuntilwereachacolumnwhosepositionalvalueisgreater than the decimal number. We do not need that column, so we discard it. Thus, we first write:

Positional values:  64	32	16	8	4	2	1 Then we discard the column with positional value 64 leaving:
Positional values:	32	16	8	4	2	1
Next we work from the leftmost column to the right. We divide 32 into 57 and observe that there is one 32 in 57 with a remainder of 25, so we write 1 in the 32 column. We divide 16 into 25 and observe that there is one 16 in 25 with a remainder of 9 and write 1 in the 16 column. We divide 8 into 9 and observe that there is one 8 in 9 with a remainder of 1. The next two columns each produce quotients of zero when their posi-tional values are divided into 1 so we write 0s in the 4 and 2 columns. Finally, 1 into 1 is 1 so we write 1 in the 1 column. This yields:

Positional values:    32     16     8      4      2      1 Symbol values:       1      1      1      0      0      1
and thus decimal 57 is equivalent to binary 111001.
To convert decimal 103 to octal, we begin by writing the positional values of the col-umns until we reach a column whose positional value is greater than the decimal number. We do not need that column, so we discard it. Thus, we first write:

Positional values:	512	64	8	1 Then we discard the column with positional value 512, yielding:
Positional values:	64	8	1
Next we work from the leftmost column to the right. We divide 64 into 103 and observe that there is one 64 in 103 with a remainderof 39, so we write 1 in the 64 column. We divide 8 into 39 and observe that there are four 8s in 39 with a remainder of 7 and write 4 in the 8 column. Finally, we divide 1 into 7 and observe that there are seven 1s in 7 with no remainder so we write 7 in the 1 column. This yields:

Positional values:   64     8      1 Symbol values:       1      4      7
and thus decimal 103 is equivalent to octal 147.
To convert decimal 375 to hexadecimal, we begin by writing the positional values of the columns until we reach a column whose positional value is greater than the decimal number. We do not need that column, so we discard it. Thus, we first write:

Positional values:   4096   256	16	1
Then we discard the column with positional value 4096, yielding: Positional values:	256	16	1
Next we work from the leftmost column to the right. We divide 256 into 375 and observe that there is one 256 in 375 with a remainder of 119, so we write 1 in the 256 column. We divide 16 into 119 and observe that there are seven 16s in 119 with a
E.6 NegativeBinaryNumbers:Two’sComplementNotation   E-9


remainder of 7 and write 7 in the 16 column. Finally, we divide 1 into 7 and observe that there are seven 1s in 7 with no remainder so we write 7 in the 1 column. This yields:

Positional values:   256    16     1 Symbol values:       1      7      7
and thus decimal 375 is equivalent to hexadecimal 177.

E.6  Negative Binary Numbers: Two’s Complement
Notation
The discussion in this appendix has been focussed on positive numbers. In this section, we explain how computers represent negative numbers using two’s complement notation. First we explain how the two’s complement of a binary number is formed, and then we show why it represents the negative value of the given binary number.
Consider a machine with 32-bit integers. Suppose

var value = 13;
The 32-bit representation of valueis

00000000 00000000 00000000 00001101
Toformthenegativeofvaluewefirst formitsone’s complementbyapplyingJavaScript’s bitwise complement operator (~):

onesComplementOfValue = ~value;
Internally, ~valueis now valuewith each of its bits reversed—ones become zeros and ze-ros become ones as follows:

value:
00000000 00000000 00000000 00001101
~value (i.e., value’s ones complement): 11111111 11111111 11111111 11110010
To form the two’s complement of valuewe simply add 1 to value’s one’s complement. Thus

Two’s complement of value:
11111111 11111111 11111111 11110011
Now if this is in fact equal to –13, we should be able to add it to binary 13 and obtain a result of 0. Let us try this:

00000000 00000000 00000000 00001101 +11111111 11111111 11111111 11110011 ------------------------------------00000000 00000000 00000000 00000000
The carry bit coming out of the leftmost column is ignored (because it is outside the range of our 32-bit integer), so we indeed get zero as a result. If we add the one’s complement of a number to the original number, the result would be all 1s. The key to getting a result of all zeros is that the twos complement is 1 more than the one’s complement. The addi-tionof1causeseachcolumntoaddto0withacarryof1.Thecarrykeepsmovingleftward until it is discarded from the leftmost bit, and hence the resulting number is all zeros.
E-10   AppendixE NumberSystems


Computers actually perform a subtraction such as

x = a - value;
by adding the two’s complement of valueto aas follows:

x = a + (~value + 1);
Suppose ais 27 and valueis 13 as before. If the two’s complement of valueis actually the negative of value, then adding the two’s complement of valueto ashould produce the result 14. Let us try this:


a(i.e., 27) +(~value + 1)


00000000 00000000 00000000 00011011 +11111111 11111111 11111111 11110011 ------------------------------------00000000 00000000 00000000 00001110

which is indeed equal to 14.


Summary

Section E.1 Introduction
•  When we write an integer such as 19 or 227 or –63 in a JavaScript program, the number is au-tomatically assumed to be in the decimal (base 10) number system. The digits in the decimal number system are 0, 1, 2, 3, 4, 5, 6, 7, 8, and 9. The lowest digit is 0 and the highest digit is 9—one less than the base of 10.
•  Internally, computers use the binary (base 2) number system. The binary number system has only two digits, namely 0 and 1. Its lowest digit is 0 and its highest digit is 1—one less than the base of 2.
•  The octal number system (base 8) and the hexadecimal number system (base 16) are popular pri-marily because they can easily be converted to and from binary and represent these numbers in fewer digits.
•  The digits of the octal number system range from 0 to 7.
•  Thehexadecimalnumbersystemposesaproblembecauseitrequiressixteendigits—alowestdig-it of 0 and a highest digit with a value equivalent to decimal 15 (one less than the base of 16). By convention, we use the letters A through F to represent the hexadecimal digits corresponding to decimal values 10 through 15.
•  Each number system uses positional notation—each position in which a digit is written has a dif-ferent positional value.

Section E.2 Abbreviating Binary Numbers as Octal and Hexadecimal Numbers
•  A particularly important relationship that both the octal number system and the hexadecimal number system have to the binary system is that the bases of octal and hexadecimal (8 and 16 respectively) are powers of the base of the binary number system (base 2).

Section E.3 Converting Octal and Hexadecimal Numbers to Binary Numbers
•  To convert an octal number to a binary number, simply replace each octal digit with its three-digit binary equivalent.
•  To convert a hexadecimal number to a binary number, simply replace each hexadecimal digit with its four-digit binary equivalent.
Self-ReviewExercises   E-11


Section E.4 Converting from Binary, Octal or Hexadecimal to Decimal
•  Because we are accustomed to working in decimal, it is convenient to convert a binary, octal or hexadecimal number to decimal to get a sense of the number’s “real” worth.
•  Toconverta numbertodecimal fromanotherbase,multiply thedecimalequivalent ofeachdigit by its positional value, and sum these products.

Section E.5 Converting from Decimal to Binary, Octal or Hexadecimal
•  To convert a number from decimal to another base, write out the base’s positional values up to the largest one that is not greater than the number. Then, starting with the leftmost position, write down how many times the positional value can fit into the number, then repeat the process with the remainder of the number in the next position to the right until you’re left with no remainder.

Section E.6 Negative Binary Numbers: Two’s Complement Notation •  Computers represent negative numbers using two’s complement notation.
•  To form the negative of a value in binary, first form its one’s complement by applying Java-Script’s bitwise complement operator (~). This reverses the bits of the value. To form the two’s complement of a value, simply add one to the value’s one’s complement.

Self-Review Exercises
E.1	The bases of the decimal, binary, octal, and hexadecimal number systems are	, ,	and	, respectively.
E.2	In general, the decimal, octal and hexadecimal representations of a given binary number contain (more/fewer) digits than the binary number contains.
E.3	(True/False) A popular reason for using the decimal number system is that it forms a con-venient notation for abbreviating binary numbers simply by substituting one decimal digit per group of four binary bits.
E.4	The(octal/hexadecimal/decimal)representationofalargebinaryvalueisthemostconcise (of the given alternatives).
E.5	(True/False) The highest digit in any base is one more than the base. E.6	(True/False) The lowest digit in any base is one less than the base.
E.7	The positional value of the rightmost digit of any number in either binary, octal, decimal or hexadecimal is always	.
E.8	The positional value of the digit to the left of the rightmost digit of any number in binary, octal, decimal or hexadecimal is always equal to	.
E.9	Fill in the missing values in this chart of positional values for the rightmost four positions in each of the indicated number systems:
decimal	1000	100	10	1 hexadecimal     ...	256     ...     ... binary              ...	...     ...     ...
octal	512	...	8	...
E.10	Convert binary 110101011000 to octal and to hexadecimal. E.11	Convert hexadecimal FACE to binary.
E.12	Convert octal 7316 to binary.
E.13	Convert hexadecimal 4FEC to octal. [Hint: First convert 4FEC to binary then convert that binary number to octal.]
E-12   AppendixE NumberSystems


E.14	Convert binary 1101110 to decimal. E.15	Convert octal 317 to decimal.
E.16	Convert hexadecimal EFD4 to decimal.
E.17	Convert decimal 177 to binary, to octal and to hexadecimal.
E.18	Show the binary representation of decimal 417. Then show the one’s complement of 417 and the two’s complement of 417.
E.19	What is the result when a number and its two’s complement are added to each other?

Answers to Self-Review Exercises E.1	10, 2, 8, 16.
E.2	Fewer. E.3	False.
E.4	Hexadecimal.
E.5	False. The highest digit in any base is one less than the base. E.6	False. The lowest digit in any base is zero.
E.7	1 (the base raised to the zero power). E.8	The base of the number system.
E.9	Fill in the missing values in this chart of positional values for the rightmost four positions in each of the indicated number systems:
decimal	1000	100	10	1 hexadecimal   4096	256	16	1 binary                  8      4      2	1
octal	512	64	8	1 E.10	Octal 6530; Hexadecimal D58.
E.11	Binary 1111 1010 1100 1110. E.12	Binary 111 011 001 110.
E.13	Binary 0 100 111 111 101 100; Octal 47754. E.14	Decimal 2+4+8+32+64=110.
E.15	Decimal 7+1*8+3*64=7+8+192=207.
E.16	Decimal 4+13*16+15*256+14*4096=61396.
E.17	Decimal 177 to binary:
256 128 64 32 16 8 4 2 1 128 64 32 16 8 4 2 1
(1*128)+(0*64)+(1*32)+(1*16)+(0*8)+(0*4)+(0*2)+(1*1) 10110001
to octal:
512 64 8 1 64 8 1
(2*64)+(6*8)+(1*1) 261
Exercises	E-13


to hexadecimal:
256 16 1 16 1
(11*16)+(1*1) (B*16)+(1*1) B1
E.18	Binary:
512 256 128 64 32 16 8 4 2 1 256 128 64 32 16 8 4 2 1
(1*256)+(1*128)+(0*64)+(1*32)+(0*16)+(0*8)+(0*4)+(0*2)+ (1*1)
110100001
One’s complement: 001011110 Two’s complement: 001011111
Check: Original binary number +its two’s complement
110100001 +001011111 ----------000000000
E.19	Zero.

Exercises
E.20	Some people argue that many of our calculations would be easier in the base 12 number system because 12 is divisible by so many more numbers than 10 (for base 10). What is the lowest digit in base 12? What might the highest symbol for the digit in base 12 be? What are the positional values of the rightmost four positions of any number in the base 12 number system?
E.21	How is the highest symbol value in the number systems we discussed related to the positional value of the first digit to the left of the rightmost digit of any number in these number systems?
E.22	Complete the following chart of positional values for the rightmost four positions in each of the indicated number systems:

decimal base 6 base 13
base 3


1000	100	10	1 ...	...      6      ... ...	169	...     ... 27	...	...     ...

E.23	Convert binary 100101111010 to octal and to hexadecimal. E.24	Convert hexadecimal 3A7D to binary.
E.25	Convert hexadecimal 765F to octal. [Hint: First convert 765F to binary, then convert that binary number to octal.]
E.26	Convert binary 1011110 to decimal. E.27	Convert octal 426 to decimal.
E.28	Convert hexadecimal FFFF to decimal.
E.29	Convert decimal 299 to binary, to octal, and to hexadecimal.
E.30	Show the binary representation of decimal 779. Then show the one’s complement of 779, and the two’s complement of 779.
E.31	What is the result when the two’s complement of a number is added to itself?
E.32	Show the two’s complement of integer value –1 on a machine with 32-bit integers.








This page intentionally left blank
Unicode®	   F Objectives Inthischapteryouwilllearn:
ÿ   Tobecomefamiliarwith
Unicode.
ÿ   ThemissionoftheUnicode
Consortium
ÿ   ThedesignbasisofUnicode.
ÿ   ThethreeUnicodeencoding forms:UTF-8,UTF-16and
UTF-32.
ÿ   Charactersandglyphs.
ÿ   Theadvantagesand disadvantagesofusing
Unicode.
ÿ   AbrieftouroftheUnicode
Consortium’swebsite.
F-2   AppendixF  Unicode®



F.1  Introduction
F.2  UnicodeTransformationFormats F.3  CharactersandGlyphs
F.4  Advantages/Disadvantagesof Unicode

F.5  UsingUnicode F.6  CharacterRanges



F.1 Introduction
The use of inconsistent character encodings (i.e., numeric values associated with charac-ters) when developing global software products causes serious problems because comput-ers process information using numbers. For instance, the character “a” is converted to a numeric value so that a computer can manipulate that piece of data. Many countries and corporations have developed their own encoding systems that are incompatible with the encoding systems of other countries and corporations. For example, the Microsoft Win-dows operating system assigns the value 0xC0 to the character “A with a grave accent” while the Apple Macintosh operating system assigns that same value to an upside-down question mark. This results in the misrepresentation and possible corruption of data be-cause data is not processed as intended.
In the absence of a widely implemented universal character encoding standard, global software developers had to localize their products extensively before distribution. Local-ization includes the language translation and cultural adaptation of content. The process of localization usually includes significant modifications to the source code (such as the conversion of numeric values and the underlying assumptions made by programmers), which results in increased costs and delays releasing the software. For example, some Eng-lish-speaking programmers might design global software products assuming that a single character can be represented by one byte. However, when those products are localized for Asian markets, the programmer’s assumptions arenolonger valid, thusthe majority, ifnot the entirety, of the code needs to be rewritten. Localization is necessary with each release of a version. By the time a software product is localized for a particular market, a newer version, which needs to be localized as well, may be ready for distribution. As a result, it is cumbersome and costly to produce and distribute global software products in a market where there is no universal character encoding standard.
In response to this situation, the Unicode Standard, an encoding standard that facil-itates the production and distribution of software, was created. The Unicode Standard outlines a specification to produce consistent encoding of the world’s characters and sym-bols. Software products which handle text encoded in the Unicode Standard need to be localized, but the localization process is simpler and more efficient because the numeric values need not be converted and the assumptions made by programmers about the char-acter encoding are universal. The Unicode Standard is maintained by a non-profit organi-zation called the Unicode Consortium, whose members include Apple, IBM, Microsoft, Oracle, Sun Microsystems, Sybase and many others.
When the Consortium envisioned and developed the Unicode Standard, they wanted an encoding system that was universal, efficient, uniform and unambiguous. A universal encoding system encompasses allcommonly used characters. An efficient encoding system allows text files to be parsed easily. A uniform encoding system assigns fixed values to all
F.2 UnicodeTransformationFormats   F-3


characters. An unambiguous encoding system represents a given character in a consistent manner. These four terms are referred to as the Unicode Standard design basis.


F.2 Unicode Transformation Formats
Although Unicode incorporates the limited ASCII character set (i.e., a collection of char-acters),itencompassesamorecomprehensivecharacterset.InASCIIeachcharacterisrep-resented by a byte containing 0s and 1s. One byte is capable of storing the binary numbers from 0 to 255. Each character is assigned a number between 0 and 255, thus ASCII-based systems can support only 256 characters, a tiny fraction of the world’s characters. Unicode extends the ASCII character set by encoding the vast majority of the world’s characters. The Unicode Standard encodes all of those characters in a uniform numerical space from 0to10FFFFhexadecimal.An implementationwillexpressthesenumbersin oneofseveral transformation formats, choosing the one that best fits the particular application at hand. Three such formats are in use, called UTF-8, UTF-16 and UTF-32, depending on
the size of the units—in bits—being used. UTF-8, a variable width encoding form, requires one to four bytes to express each Unicode character. UTF-8 data consists of 8-bit bytes (sequences of one, two, three or four bytes depending on the character being encoded) and is well suited for ASCII-based systems when there is a predominance of one-byte characters (ASCII represents characters as one-byte). Currently, UTF-8 is widely implemented in UNIX systems and in databases.
The variable width UTF-16 encoding form expresses Unicode characters in units of 16 bits (i.e., as two adjacent bytes, or a short integer in many machines). Most characters of Unicode are expressed in a single 16-bit unit. However, characters with values above FFFF hexadecimal are expressed with an ordered pair of 16-bit units called surrogates. Surrogates are 16-bit integers in the range D800 through DFFF, which are used solely for the purpose of “escaping” into higher numbered characters. Approximately one million characters can be expressed in this manner. Although a surrogate pair requires 32 bits to represent characters, it is space-efficient to use these 16-bit units. Surrogates are rare char-acters in current implementations. Many string-handling implementations are written in terms of UTF-16. [Note: Details and sample-code for UTF-16 handling are available on the Unicode Consortium website at www.unicode.org.]
Implementations that require significant use  of rare  characters or entire  scripts encoded above FFFF hexadecimal, should use UTF-32, a 32-bit, fixed-width encoding form that usually requires twice as much memory as UTF-16 encoded characters. The major advantage of the fixed-width UTF-32 encoding form is that it uniformly expresses all characters, so it is easy to handle in arrays.
There are few guidelines that state when to use a particular encoding form. The best encoding form to use depends on computer systems and business protocols, not on the data itself. Typically, the UTF-8 encoding form should be used where computer systems and business protocols require data to be handled in 8-bit units, particularly in legacy sys-tems being upgraded because it often simplifies changes to existing programs. For this reason, UTF-8 has become the encoding form of choice on the Internet. Likewise, UTF-16 is the encoding form of choice on Microsoft Windows applications. UTF-32 is likely to become more widely used in the future as more characters are encoded with values above FFFF hexadecimal. Also, UTF-32 requires less sophisticated handling than UTF-
F-4   AppendixF  Unicode®


16 in the presence of surrogate pairs. Figure F.1 shows the different ways in which the three encoding forms handle character encoding.



Character

LATIN CAPITAL LETTER A
GREEK CAPITAL LETTER ALPHA
CJK UNIFIED IDEO-GRAPH-4E95
OLD ITALIC LETTER A

UTF-8

0x41
0xCD 0x91

0xE4 0xBA 0x95

0xF0 0x80 0x83 0x80

UTF-16

0x0041 0x0391

0x4E95

0xDC00 0xDF00

UTF-32

0x00000041 0x00000391

0x00004E95

0x00010300


Fig. F.1 | Correlationbetweenthethreeencodingforms.

F.3 Characters and Glyphs
The Unicode Standard consists of characters, written components (i.e., alphabetic letters, numerals, punctuation marks, accent marks, etc.) that can be represented by numeric val-ues. Examples of characters include: U+0041 LATIN CAPITAL LETTER A. In the first character representation, U+yyyy is a code value, in which U+ refers to Unicode code val-ues, as opposed to other hexadecimal values. The yyyy represents a four-digit hexadecimal number of an encoded character. Code values are bit combinations that represent encoded characters. Characters are represented using glyphs, various shapes, fonts and sizes for dis-playingcharacters.TherearenocodevaluesforglyphsintheUnicodeStandard.Examples of glyphs are shown in Fig. F.2.
The Unicode Standard encompasses the alphabets, ideographs, syllabaries, punctua-tion marks, diacritics, mathematical operators, etc. that comprise the written languages and scripts of the world. A diacritic is a special mark added to a character to distinguish it from another letter or to indicate an accent (e.g., in Spanish, the tilde “~” above the char-acter “n”). Currently, Unicode provides code values for 94,140 character representations, with more than 880,000 code values reserved for future expansion.





Fig. F.2 | VariousglyphsofthecharacterA.

F.4 Advantages/Disadvantages of Unicode
The Unicode Standard has several significant advantages that promote its use. One is the impact it has on the performance of the international economy. Unicode standardizes the characters for the world’s writing systems to a uniform model that promotes transferring and sharing data. Programs developed using such a schema maintain their accuracy be-causeeachcharacterhasasingledefinition(i.e.,aisalwaysU+0061,%isalwaysU+0025). This enables corporations to manage the high demands of international markets by pro-
F.5 UsingUnicode	F-5


cessing different writing systems at the same time. Also, all characters can be managed in an identical manner, thus avoiding any confusion caused by different character code ar-chitectures. Moreover, managing data in a consistent manner eliminates data corruption, because data can be sorted, searched and manipulated using a consistent process.
Another advantage of the Unicode Standard is portability (i.e., the ability to execute software on disparate computers or with disparate operating systems). Most operating sys-tems, databases, programming languages and web browsers currently support, or are plan-ning to support, Unicode.
A disadvantage of the Unicode Standard is the amount of memory required by UTF-16 and UTF-32. ASCII character sets are 8 bits in length, so they require less storage than the default 16-bit Unicode character set. However, the double-byte character set (DBCS) and the multi-byte character set (MBCS) that encode Asian characters (ideographs) require two to four bytes, respectively. In such instances, the UTF-16 or the UTF-32 encoding forms may be used with little hindrance on memory and performance.
Another disadvantage of Unicode is that although it includes more characters than any other character set in common use, it does not yet encode all of the world’s written characters.OneadditionaldisadvantageoftheUnicodeStandardisthatUTF-8andUTF-16 are variable width encoding forms, so characters occupy different amounts of memory.

F.5 Using Unicode
The primary use of the Unicode Standard is the Internet—it has become the default en-codingsystemforXMLandanylanguagederivedfromXMLsuchasXHTML.Figure F.3 marks up (as XML) the text “Welcome to Unicode!” in ten different languages: English, French, German, Japanese, Kannada (India), Portuguese, Russian, Spanish, Telugu (In-dia) and Traditional Chinese. [Note: The Unicode Consortium’s website contains a link to code charts that lists the 16-bit Unicode code values.]

1  <?xml version = "1.0" encoding = "UTF-8"?> 2
3  <!-- Fig. F.3: Unicode.xml -->
4  <!-- Unicode encoding for ten different languages --> 5
6  <UnicodeEncodings> 7
8	<!-- English --> 9	<WelcomeNote>
10	&#x0057;&#x0065;&#x006C;&#x0063;&#x006F;&#x006D;&#x0065; 11	&#x0020;
12	&#x0074;&#x006F; 13	&#x0020;
14	Unicode&#x0021; 15     </WelcomeNote>
16
17	<!-- French --> 18	<WelcomeNote>
19	&#x0042;&#x0069;&#x0065;&#x006E;&#x0076;&#x0065;&#x006E;&#x0075;

Fig. F.3 | XMLdocumentusingUnicodeencoding.(Part1of3.)
F-6   AppendixF  Unicode®


20         &#x0065; 21         &#x0020;
22	&#x0061;&#x0075; 23	&#x0020;
24	Unicode&#x0021; 25     </WelcomeNote>
26
27	<!-- German --> 28	<WelcomeNote>
29	&#x0057;&#x0069;&#x006C;&#x006B;&#x006F;&#x006D;&#x006D;&#x0065; 30	&#x006E;
31	&#x0020;
32	&#x007A;&#x0075; 33	&#x0020;
34	Unicode&#x0021; 35     </WelcomeNote>
36
37	<!-- Japanese --> 38	<WelcomeNote>
39	Unicode
40	&#x3078;&#x3087;&#x3045;&#x3053;&#x305D;&#x0021; 41     </WelcomeNote>
42
43	<!-- Kannada --> 44	<WelcomeNote>
45	&#x0CB8;&#x0CC1;&#x0CB8;&#x0CCD;&#x0CB5;&#x0C97;&#x0CA4; 46	&#x0020;
47	Unicode&#x0021; 48     </WelcomeNote>
49
50	<!-- Portuguese --> 51	<WelcomeNote>
52	&#x0053;&#x00E9;&#x006A;&#x0061; 53	&#x0020;
54	&#x0042;&#x0065;&#x006D;&#x0076;&#x0069;&#x006E;&#x0064;&#x006F; 55	&#x0020;
56	Unicode&#x0021; 57     </WelcomeNote>
58
59	<!-- Russian --> 60	<WelcomeNote>
61	&#x0414;&#x043E;&#x0431;&#x0440;&#x043E; 62	&#x0020;
63	&#x043F;&#x043E;&#x0436;&#x0430;&#x043B;&#x043E;&#x0432;&#x0430; 64	&#x0442;&#x044A;
65	&#x0020; 66	&#x0432; 67	&#x0020;
68	Unicode&#x0021; 69     </WelcomeNote>
70

Fig. F.3 | XMLdocumentusingUnicodeencoding.(Part2of3.)
F.5 UsingUnicode	F-7


71	<!-- Spanish --> 72	<WelcomeNote>
73	&#x0042;&#x0069;&#x0065;&#x006E;&#x0076;&#x0065;&#x006E;&#x0069; 74	&#x0064;&#x0061;
75	&#x0020; 76	&#x0061; 77	&#x0020;
78	Unicode&#x0021; 79     </WelcomeNote>
80
81	<!-- Telugu --> 82	<WelcomeNote>
83	&#x0C38;&#x0C41;&#x0C38;&#x0C3E;&#x0C35;&#x0C17;&#x0C24;&#x0C02; 84	&#x0020;
85	Unicode&#x0021; 86     </WelcomeNote>
87
88	<!-- Traditional Chinese --> 89	<WelcomeNote>
90	&#x6B22;&#x8FCE; 91	&#x4F7F;&#x7528; 92	&#x0020;
93	Unicode&#x0021; 94     </WelcomeNote>
95  </UnicodeEncodings>
























Fig. F.3 | XMLdocumentusingUnicodeencoding.(Part3of3.)
F-8   AppendixF  Unicode®


Line 1 of the document specifies the XML declaration that contains the Unicode encodingused. A UTF-8 encodingindicates that the document conforms to the form of Unicode that uses sequences of one to four bytes. [Note: This document uses XML entity references to represent characters. Also, UTF-16 and UTF-32 have yet to be supported by InternetExplorer5.5andNetscapeCommunicator6.]Line6definestherootelement,Uni-codeEncodings, which contains all other elements (e.g., WelcomeNote) in the document. The first WelcomeNoteelement (lines 9–15) contains the entity references for the English text.TheCodeCharts pageontheUnicodeConsortiumwebsitecontainsthecodevaluesfor the Basic Latin block (or category), which includes the English alphabet. The entity refer-ence on line 10 equates to “Welcome” in basic text. When marking up Unicode characters in XML (or XHTML), the entity reference &#xyyyy;is used, where yyyy represents the hexa-decimal Unicode encoding. For example, the letter “W” (in “Welcome”) is denoted by &#x0057;. Lines 11 and 13 contain the entity reference for the space character. The entity reference for the word “to” is on line 12 and the word “Unicode” is on line 14. “Unicode” is not encoded because it is a registered trademark and has no equivalent translation in most languages. Line 14 also contains the &#x0021;notation for the exclamation mark (!).
The remaining WelcomeNoteelements (lines 18–94) contain the entity references for the other nine languages. The code values used for the French, German, Portuguese and Spanish text are located in the Basic Latin block, the code values used for the Traditional Chinese text are located in the CJK Unified Ideographs block, the code values used for the Russian text are located in the Cyrillic block, the code values used for the Japanese text are located in the Hiragana block, and the code values used for the Kannada and Telugu texts are located in their respective blocks.
To render Asian characters in a web browser, the proper language files must be installed.ForWindowsXPandVista,directionsforensuringthatyouhavetheproperlan-guage support can be obtained from the Microsoft website at www.microsoft.com. For additional assistance, visit www.unicode.org/help/display_problems.html.

F.6 Character Ranges
The Unicode Standard assigns code values, which range from 0000(Basic Latin) to E007F (Tags), to the written characters of the world. Currently, there are code values for 94,140 characters.Tosimplifythesearchforacharacteranditsassociatedcodevalue,theUnicode Standard generally groups code values by script and function (i.e., Latin characters are grouped in a block, mathematical operators are grouped in another block, etc.). As a rule, a script is a single writing system that is used for multiple languages (e.g., the Latin script is used for English, French, Spanish, etc.). The Code Charts page on the Unicode Consor-tium website lists all the defined blocks and their respective code values. Figure F.4 lists some blocks (scripts) from the website and their range of code values.



Script

Arabic
Basic Latin

RangeofCodeValues

U+0600–U+06FF
U+0000–U+007F


Fig. F.4 | Somecharacterranges.(Part1of2.)
F.6 CharacterRanges	F-9



Script

Bengali (India)
Cherokee (Native America)
CJK Unified Ideographs (East Asia) Cyrillic (Russia and Eastern Europe) Ethiopic
Greek
Hangul Jamo (Korea) Hebrew
Hiragana (Japan) Khmer (Cambodia) Lao (Laos) Mongolian Myanmar
Ogham (Ireland)
Runic (Germany and Scandinavia) Sinhala (Sri Lanka)
Telugu (India)
Thai

RangeofCodeValues

U+0980–U+09FF U+13A0–U+13FF U+4E00–U+9FBF U+0400–U+04FF U+1200–U+137F U+0370–U+03FF U+1100–U+11FF U+0590–U+05FF U+3040–U+309F U+1780–U+17FF U+0E80–U+0EFF U+1800–U+18AF U+1000–U+109F U+1680–U+169F U+16A0–U+16FF U+0D80–U+0DFF U+0C00–U+0C7F
U+0E00–U+0E7F


Fig. F.4 | Somecharacterranges.(Part2of2.)








This page intentionally left blank

Continued from Back Cover

`Excellent book, both for individuals new to the web and for those seeking to move to HTML5 and CSS3. Provides an excellent start on HTML coding for my students and the update to HTML5 is very important. Provides good coverage of the new HTML5 input types and page structure elements. The new features of CSS3 are particularly exciting. Extensive exercises are helpful to instructors when the book is used as a text.a —Roy B. Levow, Florida Atlantic University


`The [JavaScript Control Statements] concepts are well written and logically organized. The examples will keep student interest. The breadth and depth are outstanding. The exercises are perfect for the material. A great chapter for introducing and creating [JavaScript] functions. The [JavaScript Arrays] chapter is short and packed with tons of information. The examples are well formulated and the exercises are a good fit for the material. Students love these types of examples!a

—C. Christopher Horton, PhD, University of Alabama, Tuscaloosa

`Exceptionally clear Ajax tutorial—best I’ve reviewed! Great solutions for the very cool type-ahead and edit-in-place Ajax features. ‘Libraries to Help Eliminate Cross-Browser Compatibility Issues’ is fantastic. This book and your websites will be often-visited resources (if not best practices in themselves).a

—John Peterson, Insync and V.I.O.

`The most comprehensive resource of its kind I’ve seen.a—Jesse James Garrett, Adaptive Path


`Easy to follow JSF development.a—John Peterson, Insync and V.I.O. Inc.


`Excellent coverage of the most important features and techniques of developing ASP.NET applications, with plenty of sample code.a

—Peter Bromberg, VOIP, Inc.

`A good introduction to the DOM; doesn’t trip over cross-browser incompatibilities.a —Eric Lawrence, Microsoft


`Describes the key concepts of relational database systems, and never loses itself in theoretical reflection. Gets the novice started, including essential SQL constructs.a

—Roland Bouman, MySQL AB

`I wish I had had this when I was learning to program.a—Joe Kromer, New Perspective

`A comprehensive education on Web 2.0.a—George Semeczko, Independent Consultant

`A good start for beginners interested in Cascading Style Sheets and an incentive to start getting involved in web development.a
—Ignacio Ricci, ignacioricci.com

`Covers a lot of the features of HTML5 a developer needs to build websites. It’s easy-to-follow and makes it fun. A great overview of the fun new features in CSS3.a
—Jennifer Kyrnin, Web Design Guide at About.com

`A great introduction to algorithms and problem solving in code. I like the way arithmetic concepts and their JavaScript counterparts are explained. Represents a starting point for students to learn the ropes and get excited about what is out there to find and use in future projects.a
—Christian Heilmann, Mozilla
